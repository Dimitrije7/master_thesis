
stm32f753zi_nucleo_ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017048  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000381c  080172e8  080172e8  000272e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801ab04  0801ab04  0002ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801ab08  0801ab08  0002ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  24000000  0801ab0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000076c4  24000090  0801ab9c  00030090  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24007754  0801ab9c  00037754  2**0
                  ALLOC
  8 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030e0b  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007a01  00000000  00000000  00060f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002328  00000000  00000000  00068910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bb3  00000000  00000000  0006ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048de2  00000000  00000000  0006c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003990b  00000000  00000000  000b55cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182a62  00000000  00000000  000eeed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009a1c  00000000  00000000  0027193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0027b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080172d0 	.word	0x080172d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080172d0 	.word	0x080172d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <vApplicationGetIdleTaskMemory+0x30>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	240000ac 	.word	0x240000ac
 80003c0:	24000100 	.word	0x24000100

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ca:	f000 fa0d 	bl	80007e8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <main+0x104>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11b      	bne.n	8000412 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <main+0x104>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fa:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <main+0x104>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <main+0x104>)
 8000400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000404:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000406:	f3bf 8f4f 	dsb	sy
}
 800040a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800040c:	f3bf 8f6f 	isb	sy
}
 8000410:	e000      	b.n	8000414 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <main+0x104>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d138      	bne.n	8000492 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000420:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <main+0x104>)
 8000422:	2200      	movs	r2, #0
 8000424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000428:	f3bf 8f4f 	dsb	sy
}
 800042c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <main+0x104>)
 8000430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000434:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	0b5b      	lsrs	r3, r3, #13
 800043a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800043e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000448:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	015a      	lsls	r2, r3, #5
 800044e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000452:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000454:	69fa      	ldr	r2, [r7, #28]
 8000456:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000458:	491b      	ldr	r1, [pc, #108]	; (80004c8 <main+0x104>)
 800045a:	4313      	orrs	r3, r2
 800045c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	61fa      	str	r2, [r7, #28]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1ef      	bne.n	800044a <main+0x86>
    } while(sets-- != 0U);
 800046a:	6a3b      	ldr	r3, [r7, #32]
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	623a      	str	r2, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1e5      	bne.n	8000440 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000474:	f3bf 8f4f 	dsb	sy
}
 8000478:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <main+0x104>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <main+0x104>)
 8000480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000484:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	e000      	b.n	8000494 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000492:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fec2 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f81c 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 f898 	bl	80005d0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <main+0x108>)
 80004a2:	463c      	mov	r4, r7
 80004a4:	461d      	mov	r5, r3
 80004a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f005 f980 	bl	80057bc <osThreadCreate>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <main+0x10c>)
 80004c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004c2:	f005 f964 	bl	800578e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x102>
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	080172f4 	.word	0x080172f4
 80004d0:	24000300 	.word	0x24000300

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	224c      	movs	r2, #76	; 0x4c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f015 fea7 	bl	8016236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f015 fea1 	bl	8016236 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f002 ff95 	bl	8003424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <SystemClock_Config+0xf4>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	4a31      	ldr	r2, [pc, #196]	; (80005c8 <SystemClock_Config+0xf4>)
 8000504:	f023 0301 	bic.w	r3, r3, #1
 8000508:	62d3      	str	r3, [r2, #44]	; 0x2c
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <SystemClock_Config+0xf4>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <SystemClock_Config+0xf8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <SystemClock_Config+0xf8>)
 800051e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xf8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000530:	bf00      	nop
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xf8>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053e:	d1f8      	bne.n	8000532 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000544:	2301      	movs	r3, #1
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000558:	2319      	movs	r3, #25
 800055a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000564:	2302      	movs	r3, #2
 8000566:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000568:	230c      	movs	r3, #12
 800056a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056c:	2300      	movs	r3, #0
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	f002 ff8d 	bl	8003498 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000584:	f000 f994 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	; 0x3f
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059c:	2340      	movs	r3, #64	; 0x40
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2103      	movs	r1, #3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fbcc 	bl	8003d4c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005ba:	f000 f979 	bl	80008b0 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3770      	adds	r7, #112	; 0x70
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	58000400 	.word	0x58000400
 80005cc:	58024800 	.word	0x58024800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ec:	4a71      	ldr	r2, [pc, #452]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f6:	4b6f      	ldr	r3, [pc, #444]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000604:	4b6b      	ldr	r3, [pc, #428]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060a:	4a6a      	ldr	r2, [pc, #424]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000614:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	4a62      	ldr	r2, [pc, #392]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000632:	4b60      	ldr	r3, [pc, #384]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b5c      	ldr	r3, [pc, #368]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	4a5b      	ldr	r2, [pc, #364]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000650:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	4a53      	ldr	r2, [pc, #332]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066e:	4b51      	ldr	r3, [pc, #324]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	483e      	ldr	r0, [pc, #248]	; (80007b8 <MX_GPIO_Init+0x1e8>)
 80006c0:	f002 fe96 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	483c      	ldr	r0, [pc, #240]	; (80007bc <MX_GPIO_Init+0x1ec>)
 80006cc:	f002 fe90 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	483a      	ldr	r0, [pc, #232]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80006d6:	f002 fe8b 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4835      	ldr	r0, [pc, #212]	; (80007c4 <MX_GPIO_Init+0x1f4>)
 80006f0:	f002 fcce 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <MX_GPIO_Init+0x1e8>)
 800070e:	f002 fcbf 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000724:	2307      	movs	r3, #7
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_GPIO_Init+0x1ec>)
 8000730:	f002 fcae 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481b      	ldr	r0, [pc, #108]	; (80007bc <MX_GPIO_Init+0x1ec>)
 800074e:	f002 fc9f 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 8000768:	f002 fc92 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800076c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800077e:	230a      	movs	r3, #10
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_GPIO_Init+0x1fc>)
 800078a:	f002 fc81 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80007a6:	f002 fc73 	bl	8003090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	; 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58020400 	.word	0x58020400
 80007bc:	58020c00 	.word	0x58020c00
 80007c0:	58021000 	.word	0x58021000
 80007c4:	58020800 	.word	0x58020800
 80007c8:	58021800 	.word	0x58021800
 80007cc:	58020000 	.word	0x58020000

080007d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007d8:	f004 f94a 	bl	8004a70 <MX_LWIP_Init>
#if TCP_SERVER_EXAMPLE == 1 && TCP_CLIENT_EXAMPLE != 1 && UDP_EXAMPLE !=1
  tcpserver_init();
#endif

#if TCP_SERVER_EXAMPLE != 1 && TCP_CLIENT_EXAMPLE == 1 && UDP_EXAMPLE !=1
  tcpclient_init();
 80007dc:	f000 fa8e 	bl	8000cfc <tcpclient_init>
#endif

#if (TCP_SERVER_EXAMPLE == 1 || TCP_CLIENT_EXAMPLE == 1) && UDP_EXAMPLE !=1
  for(;;)
  {
	  osDelay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f005 f837 	bl	8005854 <osDelay>
 80007e6:	e7fb      	b.n	80007e0 <StartDefaultTask+0x10>

080007e8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007fa:	f000 fe6b 	bl	80014d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fe:	2301      	movs	r3, #1
 8000800:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000802:	2300      	movs	r3, #0
 8000804:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800080a:	231f      	movs	r3, #31
 800080c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800080e:	2387      	movs	r3, #135	; 0x87
 8000810:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000812:	2300      	movs	r3, #0
 8000814:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000816:	2300      	movs	r3, #0
 8000818:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800081a:	2301      	movs	r3, #1
 800081c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800081e:	2301      	movs	r3, #1
 8000820:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082a:	463b      	mov	r3, r7
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fe89 	bl	8001544 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000832:	2301      	movs	r3, #1
 8000834:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MPU_Config+0x9c>)
 8000838:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800083a:	2310      	movs	r3, #16
 800083c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800083e:	2300      	movs	r3, #0
 8000840:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000842:	2301      	movs	r3, #1
 8000844:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000846:	2303      	movs	r3, #3
 8000848:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800084e:	463b      	mov	r3, r7
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fe77 	bl	8001544 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000856:	2302      	movs	r3, #2
 8000858:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MPU_Config+0xa0>)
 800085c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800085e:	2308      	movs	r3, #8
 8000860:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000862:	2300      	movs	r3, #0
 8000864:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fe67 	bl	8001544 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000876:	2004      	movs	r0, #4
 8000878:	f000 fe44 	bl	8001504 <HAL_MPU_Enable>

}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	30020000 	.word	0x30020000
 8000888:	30040000 	.word	0x30040000

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 fcf9 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40001000 	.word	0x40001000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x38>)
 80008c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_MspInit+0x38>)
 80008ca:	f043 0302 	orr.w	r3, r3, #2
 80008ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x38>)
 80008d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210f      	movs	r1, #15
 80008e4:	f06f 0001 	mvn.w	r0, #1
 80008e8:	f000 fdcc 	bl	8001484 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58024400 	.word	0x58024400

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	; 0x40
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d827      	bhi.n	8000956 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000906:	2200      	movs	r2, #0
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	2036      	movs	r0, #54	; 0x36
 800090c:	f000 fdba 	bl	8001484 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000910:	2036      	movs	r0, #54	; 0x36
 8000912:	f000 fdd1 	bl	80014b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <HAL_InitTick+0xc4>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <HAL_InitTick+0xc8>)
 800091e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000922:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <HAL_InitTick+0xc8>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_InitTick+0xc8>)
 800092e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093a:	f107 0210 	add.w	r2, r7, #16
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fd77 	bl	8004438 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000950:	2b00      	cmp	r3, #0
 8000952:	d106      	bne.n	8000962 <HAL_InitTick+0x6a>
 8000954:	e001      	b.n	800095a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e02b      	b.n	80009b2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800095a:	f003 fd57 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 800095e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000960:	e004      	b.n	800096c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000962:	f003 fd53 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8000966:	4603      	mov	r3, r0
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <HAL_InitTick+0xcc>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	0c9b      	lsrs	r3, r3, #18
 8000976:	3b01      	subs	r3, #1
 8000978:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_InitTick+0xd0>)
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_InitTick+0xd4>)
 800097e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_InitTick+0xd0>)
 8000982:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000986:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000988:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_InitTick+0xd0>)
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_InitTick+0xd0>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_InitTick+0xd0>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_InitTick+0xd0>)
 800099c:	f003 fd8e 	bl	80044bc <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009a6:	4808      	ldr	r0, [pc, #32]	; (80009c8 <HAL_InitTick+0xd0>)
 80009a8:	f003 fdea 	bl	8004580 <HAL_TIM_Base_Start_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	e000      	b.n	80009b2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3740      	adds	r7, #64	; 0x40
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	24000008 	.word	0x24000008
 80009c0:	58024400 	.word	0x58024400
 80009c4:	431bde83 	.word	0x431bde83
 80009c8:	24000304 	.word	0x24000304
 80009cc:	40001000 	.word	0x40001000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM6_DAC_IRQHandler+0x10>)
 8000a02:	f003 fe35 	bl	8004670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000304 	.word	0x24000304

08000a10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <ETH_IRQHandler+0x10>)
 8000a16:	f001 f99d 	bl	8001d54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	240004fc 	.word	0x240004fc

08000a24 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <ETH_WKUP_IRQHandler+0x10>)
 8000a2a:	f001 f993 	bl	8001d54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	240004fc 	.word	0x240004fc

08000a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_kill>:

int _kill(int pid, int sig)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <_kill+0x20>)
 8000a54:	2216      	movs	r2, #22
 8000a56:	601a      	str	r2, [r3, #0]
  return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	24007744 	.word	0x24007744

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffe5 	bl	8000a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a7e:	e7fe      	b.n	8000a7e <_exit+0x12>

08000a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
  }

  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
  }
  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d205      	bcs.n	8000b98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <_sbrk+0x6c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	24080000 	.word	0x24080000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	24000350 	.word	0x24000350
 8000bc4:	24007758 	.word	0x24007758
 8000bc8:	24007744 	.word	0x24007744

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <SystemInit+0x104>)
 8000bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd8:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <SystemInit+0x104>)
 8000bda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <SystemInit+0x108>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d807      	bhi.n	8000bfe <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <SystemInit+0x108>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f023 030f 	bic.w	r3, r3, #15
 8000bf6:	4a37      	ldr	r2, [pc, #220]	; (8000cd4 <SystemInit+0x108>)
 8000bf8:	f043 0307 	orr.w	r3, r3, #7
 8000bfc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <SystemInit+0x10c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a35      	ldr	r2, [pc, #212]	; (8000cd8 <SystemInit+0x10c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SystemInit+0x10c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c10:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <SystemInit+0x10c>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4930      	ldr	r1, [pc, #192]	; (8000cd8 <SystemInit+0x10c>)
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <SystemInit+0x110>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <SystemInit+0x108>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <SystemInit+0x108>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f023 030f 	bic.w	r3, r3, #15
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <SystemInit+0x108>)
 8000c32:	f043 0307 	orr.w	r3, r3, #7
 8000c36:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <SystemInit+0x10c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <SystemInit+0x10c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <SystemInit+0x10c>)
 8000c4c:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <SystemInit+0x114>)
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <SystemInit+0x10c>)
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <SystemInit+0x118>)
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <SystemInit+0x10c>)
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <SystemInit+0x11c>)
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <SystemInit+0x10c>)
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <SystemInit+0x11c>)
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SystemInit+0x10c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <SystemInit+0x10c>)
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <SystemInit+0x11c>)
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <SystemInit+0x10c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SystemInit+0x10c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <SystemInit+0x10c>)
 8000c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <SystemInit+0x10c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <SystemInit+0x120>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <SystemInit+0x124>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c98:	d202      	bcs.n	8000ca0 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <SystemInit+0x128>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SystemInit+0x10c>)
 8000ca2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <SystemInit+0x10c>)
 8000ca8:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000cac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <SystemInit+0x10c>)
 8000cb2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000cb6:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000cb8:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <SystemInit+0x12c>)
 8000cbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	5c001000 	.word	0x5c001000
 8000cf0:	ffff0000 	.word	0xffff0000
 8000cf4:	51008108 	.word	0x51008108
 8000cf8:	52004000 	.word	0x52004000

08000cfc <tcpclient_init>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

void tcpclient_init (void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af02      	add	r7, sp, #8
	sys_sem_new(&tcpsem, 1);  // the semaphore would prevent simultaneous access to tcpsend
 8000d02:	2101      	movs	r1, #1
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <tcpclient_init+0x38>)
 8000d06:	f014 ffdc 	bl	8015cc2 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	2200      	movs	r2, #0
 8000d14:	4908      	ldr	r1, [pc, #32]	; (8000d38 <tcpclient_init+0x3c>)
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <tcpclient_init+0x40>)
 8000d18:	f015 f8aa 	bl	8015e70 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	2200      	movs	r2, #0
 8000d26:	4906      	ldr	r1, [pc, #24]	; (8000d40 <tcpclient_init+0x44>)
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <tcpclient_init+0x48>)
 8000d2a:	f015 f8a1 	bl	8015e70 <sys_thread_new>
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	24000498 	.word	0x24000498
 8000d38:	08000dc9 	.word	0x08000dc9
 8000d3c:	08017310 	.word	0x08017310
 8000d40:	08000d81 	.word	0x08000d81
 8000d44:	08017320 	.word	0x08017320

08000d48 <tcpsend>:

void tcpsend (char *data)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <tcpsend+0x30>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fac3 	bl	80002e0 <strlen>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4620      	mov	r0, r4
 8000d66:	f007 fff7 	bl	8008d58 <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <tcpsend+0x34>)
 8000d6c:	f015 f802 	bl	8015d74 <sys_sem_signal>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	24000354 	.word	0x24000354
 8000d7c:	24000498 	.word	0x24000498

08000d80 <tcpsend_thread>:

void tcpsend_thread (void *arg)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx++);
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <tcpsend_thread+0x38>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	490a      	ldr	r1, [pc, #40]	; (8000db8 <tcpsend_thread+0x38>)
 8000d90:	600a      	str	r2, [r1, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4909      	ldr	r1, [pc, #36]	; (8000dbc <tcpsend_thread+0x3c>)
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <tcpsend_thread+0x40>)
 8000d98:	f015 f9c0 	bl	801611c <siprintf>
		// semaphore must be taken before accessing the tcpsend function
		sys_arch_sem_wait(&tcpsem, 500);
 8000d9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <tcpsend_thread+0x44>)
 8000da2:	f014 ffb6 	bl	8015d12 <sys_arch_sem_wait>
		// send the data to the server
		tcpsend(smsgc);
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <tcpsend_thread+0x40>)
 8000da8:	f7ff ffce 	bl	8000d48 <tcpsend>
		osDelay(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f004 fd50 	bl	8005854 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx++);
 8000db4:	e7e8      	b.n	8000d88 <tcpsend_thread+0x8>
 8000db6:	bf00      	nop
 8000db8:	24000494 	.word	0x24000494
 8000dbc:	08017330 	.word	0x08017330
 8000dc0:	240003cc 	.word	0x240003cc
 8000dc4:	24000498 	.word	0x24000498

08000dc8 <tcpinit_thread>:
	}
}

void tcpinit_thread(void *arg)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f007 fc9f 	bl	8008718 <netconn_new_with_proto_and_callback>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <tcpinit_thread+0x110>)
 8000dde:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <tcpinit_thread+0x110>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d072      	beq.n	8000ece <tcpinit_thread+0x106>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <tcpinit_thread+0x110>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2207      	movs	r2, #7
 8000dee:	493b      	ldr	r1, [pc, #236]	; (8000edc <tcpinit_thread+0x114>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f007 fd4b 	bl	800888c <netconn_bind>
 8000df6:	4603      	mov	r3, r0
 8000df8:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d160      	bne.n	8000ec4 <tcpinit_thread+0xfc>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 0, 1);
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <tcpinit_thread+0x118>)
 8000e04:	4a37      	ldr	r2, [pc, #220]	; (8000ee4 <tcpinit_thread+0x11c>)
 8000e06:	601a      	str	r2, [r3, #0]
			dest_port = 10;  // server port
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <tcpinit_thread+0x120>)
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <tcpinit_thread+0x110>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a35      	ldr	r2, [pc, #212]	; (8000ee8 <tcpinit_thread+0x120>)
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	4932      	ldr	r1, [pc, #200]	; (8000ee0 <tcpinit_thread+0x118>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 fd6f 	bl	80088fc <netconn_connect>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8000e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d141      	bne.n	8000eae <tcpinit_thread+0xe6>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8000e2a:	4830      	ldr	r0, [pc, #192]	; (8000eec <tcpinit_thread+0x124>)
 8000e2c:	f014 ffa2 	bl	8015d74 <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <tcpinit_thread+0x110>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	492e      	ldr	r1, [pc, #184]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 ff14 	bl	8008c64 <netconn_recv>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f6      	bne.n	8000e30 <tcpinit_thread+0x68>
					{
						/* Extract the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3308      	adds	r3, #8
 8000e48:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <tcpinit_thread+0x12c>)
 8000e4a:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	899a      	ldrh	r2, [r3, #12]
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <tcpinit_thread+0x130>)
 8000e54:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6859      	ldr	r1, [r3, #4]
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	895b      	ldrh	r3, [r3, #10]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4824      	ldr	r0, [pc, #144]	; (8000efc <tcpinit_thread+0x134>)
 8000e6a:	f015 f9ec 	bl	8016246 <strncpy>

							// Or modify the message received, so that we can send it back to the server
							sprintf (smsgc, "\"%s\" was sent by the Server\n", msgc);
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <tcpinit_thread+0x134>)
 8000e70:	4923      	ldr	r1, [pc, #140]	; (8000f00 <tcpinit_thread+0x138>)
 8000e72:	4824      	ldr	r0, [pc, #144]	; (8000f04 <tcpinit_thread+0x13c>)
 8000e74:	f015 f952 	bl	801611c <siprintf>

							// semaphore must be taken before accessing the tcpsend function
							sys_arch_sem_wait(&tcpsem, 500);
 8000e78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <tcpinit_thread+0x124>)
 8000e7e:	f014 ff48 	bl	8015d12 <sys_arch_sem_wait>

							// send the data to the TCP Server
							tcpsend (smsgc);
 8000e82:	4820      	ldr	r0, [pc, #128]	; (8000f04 <tcpinit_thread+0x13c>)
 8000e84:	f7ff ff60 	bl	8000d48 <tcpsend>

							memset (msgc, '\0', 100);  // clear the buffer
 8000e88:	2264      	movs	r2, #100	; 0x64
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <tcpinit_thread+0x134>)
 8000e8e:	f015 f9d2 	bl	8016236 <memset>
						}
						while (netbuf_next(buf) >0);
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <tcpinit_thread+0x128>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 fc78 	bl	800a78c <netbuf_next>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dcd9      	bgt.n	8000e56 <tcpinit_thread+0x8e>

						netbuf_delete(buf);
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <tcpinit_thread+0x128>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f009 fc50 	bl	800a74c <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8000eac:	e7c0      	b.n	8000e30 <tcpinit_thread+0x68>
				}
			}
			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <tcpinit_thread+0x110>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 f852 	bl	8008f5c <netconn_close>
				netconn_delete(conn);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <tcpinit_thread+0x110>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f007 fcc9 	bl	8008854 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8000ec2:	e004      	b.n	8000ece <tcpinit_thread+0x106>
			netconn_delete(conn);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <tcpinit_thread+0x110>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f007 fcc3 	bl	8008854 <netconn_delete>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	24000354 	.word	0x24000354
 8000edc:	0801aa08 	.word	0x0801aa08
 8000ee0:	24000360 	.word	0x24000360
 8000ee4:	0100a8c0 	.word	0x0100a8c0
 8000ee8:	24000366 	.word	0x24000366
 8000eec:	24000498 	.word	0x24000498
 8000ef0:	24000358 	.word	0x24000358
 8000ef4:	2400035c 	.word	0x2400035c
 8000ef8:	24000364 	.word	0x24000364
 8000efc:	24000368 	.word	0x24000368
 8000f00:	08017344 	.word	0x08017344
 8000f04:	240003cc 	.word	0x240003cc

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f0c:	f7ff fe5e 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f36:	f015 f9df 	bl	80162f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fa43 	bl	80003c4 <main>
  bx  lr
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f48:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000f4c:	0801ab0c 	.word	0x0801ab0c
  ldr r2, =_sbss
 8000f50:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000f54:	24007754 	.word	0x24007754

08000f58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC3_IRQHandler>

08000f5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <LAN8742_RegisterBusIO+0x28>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <LAN8742_RegisterBusIO+0x28>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <LAN8742_RegisterBusIO+0x28>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e014      	b.n	8000fb2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d17c      	bne.n	80010d8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2220      	movs	r2, #32
 8000ff0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e01c      	b.n	8001032 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f107 0208 	add.w	r2, r7, #8
 8001000:	2112      	movs	r1, #18
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	4798      	blx	r3
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	da03      	bge.n	8001014 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800100c:	f06f 0304 	mvn.w	r3, #4
 8001010:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001012:	e00b      	b.n	800102c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	d105      	bne.n	800102c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
         break;
 800102a:	e005      	b.n	8001038 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b1f      	cmp	r3, #31
 8001036:	d9df      	bls.n	8000ff8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	d902      	bls.n	8001046 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001040:	f06f 0302 	mvn.w	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d145      	bne.n	80010d8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6810      	ldr	r0, [r2, #0]
 8001054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001058:	2100      	movs	r1, #0
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	db37      	blt.n	80010d2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6810      	ldr	r0, [r2, #0]
 800106a:	f107 0208 	add.w	r2, r7, #8
 800106e:	2100      	movs	r1, #0
 8001070:	4798      	blx	r3
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	db28      	blt.n	80010ca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4798      	blx	r3
 800107e:	4603      	mov	r3, r0
 8001080:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001082:	e01c      	b.n	80010be <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4798      	blx	r3
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001096:	d80e      	bhi.n	80010b6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	2100      	movs	r1, #0
 80010a6:	4798      	blx	r3
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da07      	bge.n	80010be <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80010ae:	f06f 0304 	mvn.w	r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
                 break;
 80010b4:	e010      	b.n	80010d8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80010b6:	f06f 0301 	mvn.w	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
               break;
 80010bc:	e00c      	b.n	80010d8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1dd      	bne.n	8001084 <LAN8742_Init+0xc6>
 80010c8:	e006      	b.n	80010d8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80010ca:	f06f 0304 	mvn.w	r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	e002      	b.n	80010d8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80010d2:	f06f 0303 	mvn.w	r3, #3
 80010d6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d112      	bne.n	8001104 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4798      	blx	r3
 80010e4:	4603      	mov	r3, r0
 80010e6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80010e8:	bf00      	nop
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4798      	blx	r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010fc:	d9f5      	bls.n	80010ea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001104:	693b      	ldr	r3, [r7, #16]
 }
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6810      	ldr	r0, [r2, #0]
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	2101      	movs	r1, #1
 8001128:	4798      	blx	r3
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	da02      	bge.n	8001136 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001130:	f06f 0304 	mvn.w	r3, #4
 8001134:	e06e      	b.n	8001214 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6810      	ldr	r0, [r2, #0]
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	2101      	movs	r1, #1
 8001144:	4798      	blx	r3
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	da02      	bge.n	8001152 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800114c:	f06f 0304 	mvn.w	r3, #4
 8001150:	e060      	b.n	8001214 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800115c:	2301      	movs	r3, #1
 800115e:	e059      	b.n	8001214 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6810      	ldr	r0, [r2, #0]
 8001168:	f107 020c 	add.w	r2, r7, #12
 800116c:	2100      	movs	r1, #0
 800116e:	4798      	blx	r3
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	da02      	bge.n	800117c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001176:	f06f 0304 	mvn.w	r3, #4
 800117a:	e04b      	b.n	8001214 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11b      	bne.n	80011be <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <LAN8742_GetLinkState+0x90>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800119a:	2302      	movs	r3, #2
 800119c:	e03a      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e033      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011b6:	2304      	movs	r3, #4
 80011b8:	e02c      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011ba:	2305      	movs	r3, #5
 80011bc:	e02a      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6810      	ldr	r0, [r2, #0]
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	211f      	movs	r1, #31
 80011cc:	4798      	blx	r3
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da02      	bge.n	80011da <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80011d4:	f06f 0304 	mvn.w	r3, #4
 80011d8:	e01c      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011e4:	2306      	movs	r3, #6
 80011e6:	e015      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 031c 	and.w	r3, r3, #28
 80011ee:	2b18      	cmp	r3, #24
 80011f0:	d101      	bne.n	80011f6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011f2:	2302      	movs	r3, #2
 80011f4:	e00e      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 031c 	and.w	r3, r3, #28
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d101      	bne.n	8001204 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001200:	2303      	movs	r3, #3
 8001202:	e007      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 031c 	and.w	r3, r3, #28
 800120a:	2b14      	cmp	r3, #20
 800120c:	d101      	bne.n	8001212 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800120e:	2304      	movs	r3, #4
 8001210:	e000      	b.n	8001214 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001212:	2305      	movs	r3, #5
    }				
  }
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001222:	2003      	movs	r0, #3
 8001224:	f000 f923 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001228:	f002 ff46 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800122c:	4602      	mov	r2, r0
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_Init+0x68>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	4913      	ldr	r1, [pc, #76]	; (8001288 <HAL_Init+0x6c>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_Init+0x68>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_Init+0x6c>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x70>)
 800125e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_Init+0x74>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	200f      	movs	r0, #15
 8001268:	f7ff fb46 	bl	80008f8 <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e002      	b.n	800127c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001276:	f7ff fb21 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400
 8001288:	0801a8d8 	.word	0x0801a8d8
 800128c:	24000004 	.word	0x24000004
 8001290:	24000000 	.word	0x24000000

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2400000c 	.word	0x2400000c
 80012b8:	2400049c 	.word	0x2400049c

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2400049c 	.word	0x2400049c

080012d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetREVID+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0c1b      	lsrs	r3, r3, #16
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	5c001000 	.word	0x5c001000

080012ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012fc:	4904      	ldr	r1, [pc, #16]	; (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58000400 	.word	0x58000400

08001314 <__NVIC_SetPriorityGrouping>:
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff4c 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff63 	bl	800135c <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb3 	bl	8001408 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff82 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff56 	bl	8001378 <__NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014d8:	f3bf 8f5f 	dmb	sy
}
 80014dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_MPU_Disable+0x28>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_MPU_Disable+0x28>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_MPU_Disable+0x2c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	e000ed90 	.word	0xe000ed90

08001504 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_MPU_Enable+0x38>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_MPU_Enable+0x3c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_MPU_Enable+0x3c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001522:	f3bf 8f4f 	dsb	sy
}
 8001526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001528:	f3bf 8f6f 	isb	sy
}
 800152c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed90 	.word	0xe000ed90
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_MPU_ConfigRegion+0x84>)
 8001552:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d029      	beq.n	80015b0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_MPU_ConfigRegion+0x84>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7adb      	ldrb	r3, [r3, #11]
 800156e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001570:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7a9b      	ldrb	r3, [r3, #10]
 8001576:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001578:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7b5b      	ldrb	r3, [r3, #13]
 800157e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001580:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7b9b      	ldrb	r3, [r3, #14]
 8001586:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001588:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7bdb      	ldrb	r3, [r3, #15]
 800158e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001590:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7a5b      	ldrb	r3, [r3, #9]
 8001596:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001598:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7a1b      	ldrb	r3, [r3, #8]
 800159e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015a0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015aa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80015ae:	e005      	b.n	80015bc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_MPU_ConfigRegion+0x84>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_MPU_ConfigRegion+0x84>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed90 	.word	0xe000ed90

080015cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0cf      	b.n	800177e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d106      	bne.n	80015f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2223      	movs	r2, #35	; 0x23
 80015ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f003 fe35 	bl	8005260 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_ETH_Init+0x1bc>)
 80015f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015fc:	4a62      	ldr	r2, [pc, #392]	; (8001788 <HAL_ETH_Init+0x1bc>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001606:	4b60      	ldr	r3, [pc, #384]	; (8001788 <HAL_ETH_Init+0x1bc>)
 8001608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7a1b      	ldrb	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fe65 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
 8001622:	e003      	b.n	800162c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001624:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001628:	f7ff fe60 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_ETH_Init+0x1c0>)
 800162e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001646:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001648:	f7ff fe38 	bl	80012bc <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800164e:	e011      	b.n	8001674 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001650:	f7ff fe34 	bl	80012bc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800165e:	d909      	bls.n	8001674 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2204      	movs	r2, #4
 8001664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	22e0      	movs	r2, #224	; 0xe0
 800166c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e084      	b.n	800177e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e4      	bne.n	8001650 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 ff28 	bl	80024dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800168c:	f002 fe8e 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 8001690:	4603      	mov	r3, r0
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_ETH_Init+0x1c4>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3a01      	subs	r2, #1
 80016a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 f921 	bl	80028ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016b6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	22e0      	movs	r2, #224	; 0xe0
 80016e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e049      	b.n	800177e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_ETH_Init+0x1c8>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6952      	ldr	r2, [r2, #20]
 80016fe:	0051      	lsls	r1, r2, #1
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	430b      	orrs	r3, r1
 8001706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f001 f989 	bl	8002a26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 f9cf 	bl	8002ab8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	3305      	adds	r3, #5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021a      	lsls	r2, r3, #8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	3303      	adds	r3, #3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	061a      	lsls	r2, r3, #24
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	3302      	adds	r3, #2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	041b      	lsls	r3, r3, #16
 800174c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	3301      	adds	r3, #1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001758:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001766:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2210      	movs	r2, #16
 8001778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	58024400 	.word	0x58024400
 800178c:	58000400 	.word	0x58000400
 8001790:	431bde83 	.word	0x431bde83
 8001794:	ffff8001 	.word	0xffff8001

08001798 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d179      	bne.n	800189e <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2223      	movs	r2, #35	; 0x23
 80017ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_ETH_Start_IT+0x110>)
 80017c6:	430b      	orrs	r3, r1
 80017c8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_ETH_Start_IT+0x114>)
 80017da:	430b      	orrs	r3, r1
 80017dc:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f9eb 	bl	8001bc2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0202 	orr.w	r2, r2, #2
 80017fa:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001838:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001844:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001854:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800186c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001870:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001888:	430b      	orrs	r3, r1
 800188a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2223      	movs	r2, #35	; 0x23
 8001896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0c020060 	.word	0x0c020060
 80018ac:	0c20c000 	.word	0x0c20c000

080018b0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018be:	2b23      	cmp	r3, #35	; 0x23
 80018c0:	d165      	bne.n	800198e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2223      	movs	r2, #35	; 0x23
 80018c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d2:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_ETH_Stop_IT+0xec>)
 80018dc:	400b      	ands	r3, r1
 80018de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0202 	bic.w	r2, r2, #2
 8001950:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e00e      	b.n	8001976 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	3212      	adds	r2, #18
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d9ed      	bls.n	8001958 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2210      	movs	r2, #16
 8001986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	ffff2f3e 	.word	0xffff2f3e

080019a0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e03a      	b.n	8001a3a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ca:	2b23      	cmp	r3, #35	; 0x23
 80019cc:	d134      	bne.n	8001a38 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019d6:	2201      	movs	r2, #1
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f001 f8ca 	bl	8002b74 <ETH_Prepare_Tx_Descriptors>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ec:	f043 0202 	orr.w	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e01f      	b.n	8001a3a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80019fa:	f3bf 8f4f 	dsb	sy
}
 80019fe:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d904      	bls.n	8001a1c <HAL_ETH_Transmit_IT+0x7c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	1f1a      	subs	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3106      	adds	r1, #6
 8001a28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a30:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e000      	b.n	8001a3a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b088      	sub	sp, #32
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0a5      	b.n	8001bba <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a74:	2b23      	cmp	r3, #35	; 0x23
 8001a76:	d001      	beq.n	8001a7c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e09e      	b.n	8001bba <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	3212      	adds	r2, #18
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a92:	f1c3 0304 	rsb	r3, r3, #4
 8001a96:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a98:	e067      	b.n	8001b6a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_ETH_ReadData+0x88>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d03d      	beq.n	8001b46 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b20:	461a      	mov	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f003 fd95 	bl	8005654 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d902      	bls.n	8001b58 <HAL_ETH_ReadData+0x116>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b04      	subs	r3, #4
 8001b56:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	3212      	adds	r2, #18
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db06      	blt.n	8001b80 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d202      	bcs.n	8001b80 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d08c      	beq.n	8001a9a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f814 	bl	8001bc2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b088      	sub	sp, #32
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bd6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	3212      	adds	r2, #18
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bea:	e03b      	b.n	8001c64 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d112      	bne.n	8001c1a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fcfb 	bl	80055f4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	74fb      	strb	r3, [r7, #19]
 8001c08:	e007      	b.n	8001c1a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	461a      	mov	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d021      	beq.n	8001c64 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001c20:	f3bf 8f5f 	dmb	sy
}
 8001c24:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	e003      	b.n	8001c40 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d902      	bls.n	8001c52 <ETH_UpdateDescriptor+0x90>
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	3212      	adds	r2, #18
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <ETH_UpdateDescriptor+0xae>
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1bd      	bne.n	8001bec <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d00d      	beq.n	8001c96 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	461a      	mov	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3318      	adds	r3, #24
 8001caa:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cbc:	e03f      	b.n	8001d3e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ce6:	7bbb      	ldrb	r3, [r7, #14]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d028      	beq.n	8001d3e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db1b      	blt.n	8001d3a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	3304      	adds	r3, #4
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fd08 	bl	8005724 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d38:	e001      	b.n	8001d3e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_ETH_ReleaseTxPacket+0xac>
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1b9      	bne.n	8001cbe <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d64:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d115      	bne.n	8001d9c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d80:	2b40      	cmp	r3, #64	; 0x40
 8001d82:	d10b      	bne.n	8001d9c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001d92:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f002 ffac 	bl	8004cf4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d115      	bne.n	8001ddc <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10b      	bne.n	8001ddc <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f248 0301 	movw	r3, #32769	; 0x8001
 8001dd2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f002 ff9c 	bl	8004d14 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df0:	d153      	bne.n	8001e9a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e06:	d148      	bne.n	8001e9a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	f043 0208 	orr.w	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2c:	d11e      	bne.n	8001e6c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e36:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001e3a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	22e0      	movs	r2, #224	; 0xe0
 8001e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e6a:	e013      	b.n	8001e94 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e78:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001e90:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f002 ff4d 	bl	8004d34 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ea2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d104      	bne.n	8001eb8 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d019      	beq.n	8001eec <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	22e0      	movs	r2, #224	; 0xe0
 8001eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f002 ff28 	bl	8004d34 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d10f      	bne.n	8001f1c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f04:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f830 	bl	8001f74 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d10f      	bne.n	8001f4c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f822 	bl	8001f88 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_ETH_IRQHandler+0x21c>)
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_ETH_IRQHandler+0x21c>)
 8001f5a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f81b 	bl	8001f9c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58000080 	.word	0x58000080

08001f74 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e03e      	b.n	8002050 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fda:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	055b      	lsls	r3, r3, #21
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f043 030c 	orr.w	r3, r3, #12
 8001ffe:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002012:	f7ff f953 	bl	80012bc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002018:	e009      	b.n	800202e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800201a:	f7ff f94f 	bl	80012bc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002028:	d901      	bls.n	800202e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e010      	b.n	8002050 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ed      	bne.n	800201a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e03c      	b.n	80020f4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002082:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f023 030c 	bic.w	r3, r3, #12
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_ETH_WritePHYRegister+0xa4>)
 80020ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_ETH_WritePHYRegister+0xa4>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80020c6:	f7ff f8f9 	bl	80012bc <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020cc:	e009      	b.n	80020e2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80020ce:	f7ff f8f5 	bl	80012bc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020dc:	d901      	bls.n	80020e2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e008      	b.n	80020f4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ed      	bne.n	80020ce <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40028000 	.word	0x40028000

08002100 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e1c3      	b.n	800249c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800228e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0e5b      	lsrs	r3, r3, #25
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b29a      	uxth	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002428:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002438:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e00b      	b.n	80024d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d105      	bne.n	80024d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f86d 	bl	80025a8 <ETH_SetMACConfig>

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024f6:	f001 ff59 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80024fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d908      	bls.n	8002516 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d804      	bhi.n	8002516 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e027      	b.n	8002566 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d908      	bls.n	8002530 <HAL_ETH_SetMDIOClockRange+0x54>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d204      	bcs.n	8002530 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e01a      	b.n	8002566 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d303      	bcc.n	8002540 <HAL_ETH_SetMDIOClockRange+0x64>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d911      	bls.n	8002564 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d908      	bls.n	800255a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_ETH_SetMDIOClockRange+0xac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d804      	bhi.n	800255a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e005      	b.n	8002566 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e000      	b.n	8002566 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002564:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	01312cff 	.word	0x01312cff
 800257c:	02160ebf 	.word	0x02160ebf
 8002580:	03938700 	.word	0x03938700
 8002584:	05f5e0ff 	.word	0x05f5e0ff
 8002588:	08f0d17f 	.word	0x08f0d17f

0800258c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	791b      	ldrb	r3, [r3, #4]
 80025c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80025c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7b1b      	ldrb	r3, [r3, #12]
 80025c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7b5b      	ldrb	r3, [r3, #13]
 80025d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7b9b      	ldrb	r3, [r3, #14]
 80025d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	7bdb      	ldrb	r3, [r3, #15]
 80025e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	7c12      	ldrb	r2, [r2, #16]
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d102      	bne.n	80025f2 <ETH_SetMACConfig+0x4a>
 80025ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025f0:	e000      	b.n	80025f4 <ETH_SetMACConfig+0x4c>
 80025f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	7c52      	ldrb	r2, [r2, #17]
 80025fa:	2a00      	cmp	r2, #0
 80025fc:	d102      	bne.n	8002604 <ETH_SetMACConfig+0x5c>
 80025fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002602:	e000      	b.n	8002606 <ETH_SetMACConfig+0x5e>
 8002604:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7c9b      	ldrb	r3, [r3, #18]
 800260c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800260e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002614:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800261a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	7f5b      	ldrb	r3, [r3, #29]
 8002628:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800262a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	7f92      	ldrb	r2, [r2, #30]
 8002630:	2a00      	cmp	r2, #0
 8002632:	d102      	bne.n	800263a <ETH_SetMACConfig+0x92>
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	e000      	b.n	800263c <ETH_SetMACConfig+0x94>
 800263a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800263c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	7fdb      	ldrb	r3, [r3, #31]
 8002642:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002644:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	f892 2020 	ldrb.w	r2, [r2, #32]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d102      	bne.n	8002656 <ETH_SetMACConfig+0xae>
 8002650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002654:	e000      	b.n	8002658 <ETH_SetMACConfig+0xb0>
 8002656:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002658:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800265e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002666:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002668:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <ETH_SetMACConfig+0x22c>)
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	430b      	orrs	r3, r1
 8002684:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002692:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002694:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800269e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d102      	bne.n	80026ba <ETH_SetMACConfig+0x112>
 80026b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0x114>
 80026ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <ETH_SetMACConfig+0x230>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <ETH_SetMACConfig+0x234>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002704:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800270a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002712:	2a00      	cmp	r2, #0
 8002714:	d101      	bne.n	800271a <ETH_SetMACConfig+0x172>
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	e000      	b.n	800271c <ETH_SetMACConfig+0x174>
 800271a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800271c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800272e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002744:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800274c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f023 0103 	bic.w	r1, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	430a      	orrs	r2, r1
 8002766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002772:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800278e:	2a00      	cmp	r2, #0
 8002790:	d101      	bne.n	8002796 <ETH_SetMACConfig+0x1ee>
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	e000      	b.n	8002798 <ETH_SetMACConfig+0x1f0>
 8002796:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002798:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80027aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	00048083 	.word	0x00048083
 80027d8:	c0f88000 	.word	0xc0f88000
 80027dc:	fffffef0 	.word	0xfffffef0

080027e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <ETH_SetDMAConfig+0xf8>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	6811      	ldr	r1, [r2, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002806:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002812:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	7b1b      	ldrb	r3, [r3, #12]
 8002818:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <ETH_SetDMAConfig+0xfc>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	430b      	orrs	r3, r1
 8002834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002838:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7b5b      	ldrb	r3, [r3, #13]
 800283e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002850:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <ETH_SetDMAConfig+0x100>)
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	430b      	orrs	r3, r1
 8002860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002864:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7d1b      	ldrb	r3, [r3, #20]
 8002870:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002872:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7f5b      	ldrb	r3, [r3, #29]
 8002878:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <ETH_SetDMAConfig+0x104>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	430b      	orrs	r3, r1
 8002896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800289a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
 80028a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <ETH_SetDMAConfig+0x108>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	ffff87fd 	.word	0xffff87fd
 80028dc:	ffff2ffe 	.word	0xffff2ffe
 80028e0:	fffec000 	.word	0xfffec000
 80028e4:	ffc0efef 	.word	0xffc0efef
 80028e8:	7fc0ffff 	.word	0x7fc0ffff

080028ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0a4      	sub	sp, #144	; 0x90
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028fa:	2300      	movs	r3, #0
 80028fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002934:	2300      	movs	r3, #0
 8002936:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002944:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002950:	2300      	movs	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002966:	2300      	movs	r3, #0
 8002968:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800296a:	2300      	movs	r3, #0
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800296e:	2300      	movs	r3, #0
 8002970:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002984:	2320      	movs	r3, #32
 8002986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002996:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800299c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80029c6:	2300      	movs	r3, #0
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fde6 	bl	80025a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029dc:	2301      	movs	r3, #1
 80029de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a0c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fee1 	bl	80027e0 <ETH_SetDMAConfig>
}
 8002a1e:	bf00      	nop
 8002a20:	3790      	adds	r7, #144	; 0x90
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e01d      	b.n	8002a70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68d9      	ldr	r1, [r3, #12]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	3206      	adds	r2, #6
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d9de      	bls.n	8002a34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a84:	461a      	mov	r2, r3
 8002a86:	2303      	movs	r3, #3
 8002a88:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e023      	b.n	8002b0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	3212      	adds	r2, #18
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d9d8      	bls.n	8002ac6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b08d      	sub	sp, #52	; 0x34
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3318      	adds	r3, #24
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb6:	d007      	beq.n	8002bc8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e259      	b.n	8003080 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d044      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c04:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d027      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c50:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	6992      	ldr	r2, [r2, #24]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d036      	beq.n	8002d12 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb0:	f3bf 8f5f 	dmb	sy
}
 8002cb4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d902      	bls.n	8002cd4 <ETH_Prepare_Tx_Descriptors+0x160>
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf0:	d10f      	bne.n	8002d12 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cfc:	f3bf 8f5f 	dmb	sy
}
 8002d00:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e1b6      	b.n	8003080 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	0412      	lsls	r2, r2, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e008      	b.n	8002d74 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d021      	beq.n	8002dc4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	04db      	lsls	r3, r3, #19
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	69d2      	ldr	r2, [r2, #28]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e02e      	b.n	8002e12 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002db4:	ffff0000 	.word	0xffff0000
 8002db8:	ffffc000 	.word	0xffffc000
 8002dbc:	c000ffff 	.word	0xc000ffff
 8002dc0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	6852      	ldr	r2, [r2, #4]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e48:	f3bf 8f5f 	dmb	sy
}
 8002e4c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80da 	beq.w	800301c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e7a:	e0cf      	b.n	800301c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d902      	bls.n	8002e9a <ETH_Prepare_Tx_Descriptors+0x326>
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	3b04      	subs	r3, #4
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ebc:	d007      	beq.n	8002ece <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d029      	beq.n	8002f22 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eda:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	e019      	b.n	8002f16 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ee2:	f3bf 8f5f 	dmb	sy
}
 8002ee6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d902      	bls.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x392>
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	3b04      	subs	r3, #4
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	3301      	adds	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3e1      	bcc.n	8002ee2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0ae      	b.n	8003080 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3301      	adds	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <ETH_Prepare_Tx_Descriptors+0x448>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	6852      	ldr	r2, [r2, #4]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	0412      	lsls	r2, r2, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	e008      	b.n	8002f8a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	6a3a      	ldr	r2, [r7, #32]
 8002f88:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	69d2      	ldr	r2, [r2, #28]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e020      	b.n	8002ff8 <ETH_Prepare_Tx_Descriptors+0x484>
 8002fb6:	bf00      	nop
 8002fb8:	ffff8000 	.word	0xffff8000
 8002fbc:	ffffc000 	.word	0xffffc000
 8002fc0:	c000ffff 	.word	0xc000ffff
 8002fc4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <ETH_Prepare_Tx_Descriptors+0x518>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	6852      	ldr	r2, [r2, #4]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ffe:	f3bf 8f5f 	dmb	sy
}
 8003002:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f af2b 	bne.w	8002e7c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e005      	b.n	8003046 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003056:	6979      	ldr	r1, [r7, #20]
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	3304      	adds	r3, #4
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800307a:	b662      	cpsie	i
}
 800307c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3734      	adds	r7, #52	; 0x34
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	ffff8000 	.word	0xffff8000

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_GPIO_Init+0x234>)
 80030a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030a2:	e194      	b.n	80033ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8186 	beq.w	80033c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d005      	beq.n	80030d4 <HAL_GPIO_Init+0x44>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d130      	bne.n	8003136 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310a:	2201      	movs	r2, #1
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0201 	and.w	r2, r3, #1
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b03      	cmp	r3, #3
 8003140:	d017      	beq.n	8003172 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d123      	bne.n	80031c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	08da      	lsrs	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3208      	adds	r2, #8
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0203 	and.w	r2, r3, #3
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80e0 	beq.w	80033c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003208:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_GPIO_Init+0x238>)
 800320a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800320e:	4a2e      	ldr	r2, [pc, #184]	; (80032c8 <HAL_GPIO_Init+0x238>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_GPIO_Init+0x238>)
 800321a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_GPIO_Init+0x23c>)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <HAL_GPIO_Init+0x240>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d052      	beq.n	80032f8 <HAL_GPIO_Init+0x268>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_GPIO_Init+0x244>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d031      	beq.n	80032be <HAL_GPIO_Init+0x22e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <HAL_GPIO_Init+0x248>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02b      	beq.n	80032ba <HAL_GPIO_Init+0x22a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_GPIO_Init+0x24c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d025      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <HAL_GPIO_Init+0x250>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01f      	beq.n	80032b2 <HAL_GPIO_Init+0x222>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_GPIO_Init+0x254>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_Init+0x21e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_GPIO_Init+0x258>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x21a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <HAL_GPIO_Init+0x25c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_Init+0x216>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_GPIO_Init+0x260>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x212>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_GPIO_Init+0x264>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_Init+0x20e>
 800329a:	2309      	movs	r3, #9
 800329c:	e02d      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 800329e:	230a      	movs	r3, #10
 80032a0:	e02b      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032a2:	2308      	movs	r3, #8
 80032a4:	e029      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e027      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032aa:	2306      	movs	r3, #6
 80032ac:	e025      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032ae:	2305      	movs	r3, #5
 80032b0:	e023      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032b2:	2304      	movs	r3, #4
 80032b4:	e021      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032b6:	2303      	movs	r3, #3
 80032b8:	e01f      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e01d      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e01b      	b.n	80032fa <HAL_GPIO_Init+0x26a>
 80032c2:	bf00      	nop
 80032c4:	58000080 	.word	0x58000080
 80032c8:	58024400 	.word	0x58024400
 80032cc:	58000400 	.word	0x58000400
 80032d0:	58020000 	.word	0x58020000
 80032d4:	58020400 	.word	0x58020400
 80032d8:	58020800 	.word	0x58020800
 80032dc:	58020c00 	.word	0x58020c00
 80032e0:	58021000 	.word	0x58021000
 80032e4:	58021400 	.word	0x58021400
 80032e8:	58021800 	.word	0x58021800
 80032ec:	58021c00 	.word	0x58021c00
 80032f0:	58022000 	.word	0x58022000
 80032f4:	58022400 	.word	0x58022400
 80032f8:	2300      	movs	r3, #0
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	f002 0203 	and.w	r2, r2, #3
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	4093      	lsls	r3, r2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330a:	4938      	ldr	r1, [pc, #224]	; (80033ec <HAL_GPIO_Init+0x35c>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800333e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800336c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f ae63 	bne.w	80030a4 <HAL_GPIO_Init+0x14>
  }
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	3724      	adds	r7, #36	; 0x24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	58000400 	.word	0x58000400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_PWREx_ConfigSupply+0x70>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d00a      	beq.n	800344e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_PWREx_ConfigSupply+0x70>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e01f      	b.n	800348a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e01d      	b.n	800348a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_PWREx_ConfigSupply+0x70>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	490f      	ldr	r1, [pc, #60]	; (8003494 <HAL_PWREx_ConfigSupply+0x70>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800345e:	f7fd ff2d 	bl	80012bc <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003464:	e009      	b.n	800347a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003466:	f7fd ff29 	bl	80012bc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003474:	d901      	bls.n	800347a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_PWREx_ConfigSupply+0x70>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	d1ee      	bne.n	8003466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	58024800 	.word	0x58024800

08003498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	; 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f000 bc48 	b.w	8003d3c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8088 	beq.w	80035ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4b99      	ldr	r3, [pc, #612]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c4:	4b96      	ldr	r3, [pc, #600]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d007      	beq.n	80034e0 <HAL_RCC_OscConfig+0x48>
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b18      	cmp	r3, #24
 80034d4:	d111      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d06d      	beq.n	80035c8 <HAL_RCC_OscConfig+0x130>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d169      	bne.n	80035c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f000 bc21 	b.w	8003d3c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x7a>
 8003504:	4b86      	ldr	r3, [pc, #536]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a85      	ldr	r2, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e02e      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x9c>
 800351a:	4b81      	ldr	r3, [pc, #516]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a80      	ldr	r2, [pc, #512]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b7e      	ldr	r3, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7d      	ldr	r2, [pc, #500]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800352c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0xc0>
 800353e:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b75      	ldr	r3, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a74      	ldr	r2, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003558:	4b71      	ldr	r3, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a70      	ldr	r2, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b6e      	ldr	r3, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6d      	ldr	r2, [pc, #436]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fea0 	bl	80012bc <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fe9c 	bl	80012bc <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e3d4      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003592:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fe8c 	bl	80012bc <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fe88 	bl	80012bc <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e3c0      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x110>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80ca 	beq.w	800376c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d8:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035e2:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_RCC_OscConfig+0x166>
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2b18      	cmp	r3, #24
 80035f2:	d156      	bne.n	80036a2 <HAL_RCC_OscConfig+0x20a>
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d151      	bne.n	80036a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e392      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003616:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0219 	bic.w	r2, r3, #25
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	493f      	ldr	r1, [pc, #252]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fe48 	bl	80012bc <HAL_GetTick>
 800362c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003630:	f7fd fe44 	bl	80012bc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e37c      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	f7fd fe41 	bl	80012d4 <HAL_GetREVID>
 8003652:	4603      	mov	r3, r0
 8003654:	f241 0203 	movw	r2, #4099	; 0x1003
 8003658:	4293      	cmp	r3, r2
 800365a:	d817      	bhi.n	800368c <HAL_RCC_OscConfig+0x1f4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d108      	bne.n	8003676 <HAL_RCC_OscConfig+0x1de>
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800366c:	4a2c      	ldr	r2, [pc, #176]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003672:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003674:	e07a      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	031b      	lsls	r3, r3, #12
 8003684:	4926      	ldr	r1, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368a:	e06f      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	4921      	ldr	r1, [pc, #132]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a0:	e064      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d047      	beq.n	800373a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0219 	bic.w	r2, r3, #25
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	491a      	ldr	r1, [pc, #104]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fdfe 	bl	80012bc <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fdfa 	bl	80012bc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e332      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	f7fd fdf7 	bl	80012d4 <HAL_GetREVID>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d819      	bhi.n	8003724 <HAL_RCC_OscConfig+0x28c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d108      	bne.n	800370a <HAL_RCC_OscConfig+0x272>
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003700:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003706:	6053      	str	r3, [r2, #4]
 8003708:	e030      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4901      	ldr	r1, [pc, #4]	; (8003720 <HAL_RCC_OscConfig+0x288>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	e025      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
 8003720:	58024400 	.word	0x58024400
 8003724:	4b9a      	ldr	r3, [pc, #616]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	4997      	ldr	r1, [pc, #604]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
 8003738:	e018      	b.n	800376c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b95      	ldr	r3, [pc, #596]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a94      	ldr	r2, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fdb9 	bl	80012bc <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374e:	f7fd fdb5 	bl	80012bc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e2ed      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003760:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a9 	beq.w	80038cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b85      	ldr	r3, [pc, #532]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003782:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003784:	4b82      	ldr	r3, [pc, #520]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d007      	beq.n	80037a0 <HAL_RCC_OscConfig+0x308>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b18      	cmp	r3, #24
 8003794:	d13a      	bne.n	800380c <HAL_RCC_OscConfig+0x374>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d135      	bne.n	800380c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037a0:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x320>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e2c1      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037b8:	f7fd fd8c 	bl	80012d4 <HAL_GetREVID>
 80037bc:	4603      	mov	r3, r0
 80037be:	f241 0203 	movw	r2, #4099	; 0x1003
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d817      	bhi.n	80037f6 <HAL_RCC_OscConfig+0x35e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d108      	bne.n	80037e0 <HAL_RCC_OscConfig+0x348>
 80037ce:	4b70      	ldr	r3, [pc, #448]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037d6:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037de:	e075      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e0:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	069b      	lsls	r3, r3, #26
 80037ee:	4968      	ldr	r1, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037f4:	e06a      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037f6:	4b66      	ldr	r3, [pc, #408]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	061b      	lsls	r3, r3, #24
 8003804:	4962      	ldr	r1, [pc, #392]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800380a:	e05f      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d042      	beq.n	800389a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003814:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5d      	ldr	r2, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fd fd4c 	bl	80012bc <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003828:	f7fd fd48 	bl	80012bc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e280      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800383a:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003846:	f7fd fd45 	bl	80012d4 <HAL_GetREVID>
 800384a:	4603      	mov	r3, r0
 800384c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003850:	4293      	cmp	r3, r2
 8003852:	d817      	bhi.n	8003884 <HAL_RCC_OscConfig+0x3ec>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	2b20      	cmp	r3, #32
 800385a:	d108      	bne.n	800386e <HAL_RCC_OscConfig+0x3d6>
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	e02e      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
 800386e:	4b48      	ldr	r3, [pc, #288]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	069b      	lsls	r3, r3, #26
 800387c:	4944      	ldr	r1, [pc, #272]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
 8003882:	e023      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
 8003884:	4b42      	ldr	r3, [pc, #264]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	493f      	ldr	r1, [pc, #252]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	60cb      	str	r3, [r1, #12]
 8003898:	e018      	b.n	80038cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80038a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fd fd09 	bl	80012bc <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038ae:	f7fd fd05 	bl	80012bc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e23d      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d036      	beq.n	8003946 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d019      	beq.n	8003914 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fce6 	bl	80012bc <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fd fce2 	bl	80012bc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e21a      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x45c>
 8003912:	e018      	b.n	8003946 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd fccc 	bl	80012bc <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd fcc8 	bl	80012bc <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e200      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d039      	beq.n	80039c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01c      	beq.n	8003994 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003966:	f7fd fca9 	bl	80012bc <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800396e:	f7fd fca5 	bl	80012bc <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1dd      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_OscConfig+0x4f8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x4d6>
 800398c:	e01b      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
 800398e:	bf00      	nop
 8003990:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003994:	4b9b      	ldr	r3, [pc, #620]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a9a      	ldr	r2, [pc, #616]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 800399a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800399e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039a0:	f7fd fc8c 	bl	80012bc <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a8:	f7fd fc88 	bl	80012bc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1c0      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039ba:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8081 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <HAL_RCC_OscConfig+0x770>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a8b      	ldr	r2, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x770>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e0:	f7fd fc6c 	bl	80012bc <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fd fc68 	bl	80012bc <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1a0      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fa:	4b83      	ldr	r3, [pc, #524]	; (8003c08 <HAL_RCC_OscConfig+0x770>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x584>
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e02d      	b.n	8003a78 <HAL_RCC_OscConfig+0x5e0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x5a6>
 8003a24:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a76      	ldr	r2, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b74      	ldr	r3, [pc, #464]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a73      	ldr	r2, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a36:	f023 0304 	bic.w	r3, r3, #4
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e01c      	b.n	8003a78 <HAL_RCC_OscConfig+0x5e0>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5c8>
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a6b      	ldr	r2, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0x5e0>
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a67      	ldr	r2, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a64      	ldr	r2, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	f023 0304 	bic.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fc1c 	bl	80012bc <HAL_GetTick>
 8003a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fd fc18 	bl	80012bc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e14e      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ee      	beq.n	8003a88 <HAL_RCC_OscConfig+0x5f0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fc06 	bl	80012bc <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fc02 	bl	80012bc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e138      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aca:	4b4e      	ldr	r3, [pc, #312]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ee      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 812d 	beq.w	8003d3a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ae0:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae8:	2b18      	cmp	r3, #24
 8003aea:	f000 80bd 	beq.w	8003c68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	f040 809e 	bne.w	8003c34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fbda 	bl	80012bc <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd fbd6 	bl	80012bc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e10e      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x774>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	4931      	ldr	r1, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	628b      	str	r3, [r1, #40]	; 0x28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	3b01      	subs	r3, #1
 8003b54:	025b      	lsls	r3, r3, #9
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b74:	4923      	ldr	r1, [pc, #140]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCC_OscConfig+0x778>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b92:	00d2      	lsls	r2, r2, #3
 8003b94:	491b      	ldr	r1, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f023 020c 	bic.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4917      	ldr	r1, [pc, #92]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f023 0202 	bic.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	4912      	ldr	r1, [pc, #72]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fb5f 	bl	80012bc <HAL_GetTick>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c00:	e011      	b.n	8003c26 <HAL_RCC_OscConfig+0x78e>
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
 8003c08:	58024800 	.word	0x58024800
 8003c0c:	fffffc0c 	.word	0xfffffc0c
 8003c10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd fb52 	bl	80012bc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e08a      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x77c>
 8003c32:	e082      	b.n	8003d3a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fb3c 	bl	80012bc <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fb38 	bl	80012bc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e070      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x7b0>
 8003c66:	e068      	b.n	8003d3a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c68:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d031      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d12a      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d122      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d11a      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e02b      	b.n	8003d3c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d01f      	beq.n	8003d3a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d06:	f7fd fad9 	bl	80012bc <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d0c:	bf00      	nop
 8003d0e:	f7fd fad5 	bl	80012bc <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d0f9      	beq.n	8003d0e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_RCC_OscConfig+0x8b0>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d26:	00d2      	lsls	r2, r2, #3
 8003d28:	4906      	ldr	r1, [pc, #24]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_OscConfig+0x8ac>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58024400 	.word	0x58024400
 8003d48:	ffff0007 	.word	0xffff0007

08003d4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e19c      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b8a      	ldr	r3, [pc, #552]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b87      	ldr	r3, [pc, #540]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 020f 	bic.w	r2, r3, #15
 8003d76:	4985      	ldr	r1, [pc, #532]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b83      	ldr	r3, [pc, #524]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e184      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	4b7b      	ldr	r3, [pc, #492]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d908      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dac:	4b78      	ldr	r3, [pc, #480]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	4975      	ldr	r1, [pc, #468]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d908      	bls.n	8003dec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	496a      	ldr	r1, [pc, #424]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d010      	beq.n	8003e1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d908      	bls.n	8003e1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	495e      	ldr	r1, [pc, #376]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d908      	bls.n	8003e48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4953      	ldr	r1, [pc, #332]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d908      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f023 020f 	bic.w	r2, r3, #15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4947      	ldr	r1, [pc, #284]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d055      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4940      	ldr	r1, [pc, #256]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e9c:	4b3c      	ldr	r3, [pc, #240]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0f6      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d115      	bne.n	8003eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0ea      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0de      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0d6      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f023 0207 	bic.w	r2, r3, #7
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4925      	ldr	r1, [pc, #148]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fd f9dd 	bl	80012bc <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f06:	f7fd f9d9 	bl	80012bc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0be      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d1eb      	bne.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d208      	bcs.n	8003f5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f023 020f 	bic.w	r2, r3, #15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d214      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	4906      	ldr	r1, [pc, #24]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_ClockConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e086      	b.n	800409a <HAL_RCC_ClockConfig+0x34e>
 8003f8c:	52002000 	.word	0x52002000
 8003f90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d208      	bcs.n	8003fc2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4939      	ldr	r1, [pc, #228]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d208      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	492e      	ldr	r1, [pc, #184]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004008:	429a      	cmp	r2, r3
 800400a:	d208      	bcs.n	800401e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4922      	ldr	r1, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 800401a:	4313      	orrs	r3, r2
 800401c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004036:	429a      	cmp	r2, r3
 8004038:	d208      	bcs.n	800404c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4917      	ldr	r1, [pc, #92]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8004048:	4313      	orrs	r3, r2
 800404a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800404c:	f000 f834 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	4912      	ldr	r1, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x35c>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCC_ClockConfig+0x358>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_RCC_ClockConfig+0x35c>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <HAL_RCC_ClockConfig+0x360>)
 8004082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004084:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_RCC_ClockConfig+0x364>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x368>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fc32 	bl	80008f8 <HAL_InitTick>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	0801a8d8 	.word	0x0801a8d8
 80040ac:	24000004 	.word	0x24000004
 80040b0:	24000000 	.word	0x24000000
 80040b4:	24000008 	.word	0x24000008

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040be:	4bb3      	ldr	r3, [pc, #716]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c6:	2b18      	cmp	r3, #24
 80040c8:	f200 8155 	bhi.w	8004376 <HAL_RCC_GetSysClockFreq+0x2be>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004139 	.word	0x08004139
 80040d8:	08004377 	.word	0x08004377
 80040dc:	08004377 	.word	0x08004377
 80040e0:	08004377 	.word	0x08004377
 80040e4:	08004377 	.word	0x08004377
 80040e8:	08004377 	.word	0x08004377
 80040ec:	08004377 	.word	0x08004377
 80040f0:	08004377 	.word	0x08004377
 80040f4:	0800415f 	.word	0x0800415f
 80040f8:	08004377 	.word	0x08004377
 80040fc:	08004377 	.word	0x08004377
 8004100:	08004377 	.word	0x08004377
 8004104:	08004377 	.word	0x08004377
 8004108:	08004377 	.word	0x08004377
 800410c:	08004377 	.word	0x08004377
 8004110:	08004377 	.word	0x08004377
 8004114:	08004165 	.word	0x08004165
 8004118:	08004377 	.word	0x08004377
 800411c:	08004377 	.word	0x08004377
 8004120:	08004377 	.word	0x08004377
 8004124:	08004377 	.word	0x08004377
 8004128:	08004377 	.word	0x08004377
 800412c:	08004377 	.word	0x08004377
 8004130:	08004377 	.word	0x08004377
 8004134:	0800416b 	.word	0x0800416b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004138:	4b94      	ldr	r3, [pc, #592]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004144:	4b91      	ldr	r3, [pc, #580]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	4a90      	ldr	r2, [pc, #576]	; (8004390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004156:	e111      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004158:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800415a:	61bb      	str	r3, [r7, #24]
      break;
 800415c:	e10e      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800415e:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004160:	61bb      	str	r3, [r7, #24]
      break;
 8004162:	e10b      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004164:	4b8c      	ldr	r3, [pc, #560]	; (8004398 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004166:	61bb      	str	r3, [r7, #24]
      break;
 8004168:	e108      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004174:	4b85      	ldr	r3, [pc, #532]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004180:	4b82      	ldr	r3, [pc, #520]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800418a:	4b80      	ldr	r3, [pc, #512]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80e1 	beq.w	8004370 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f000 8083 	beq.w	80042bc <HAL_RCC_GetSysClockFreq+0x204>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	f200 80a1 	bhi.w	8004300 <HAL_RCC_GetSysClockFreq+0x248>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x114>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d056      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041ca:	e099      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041cc:	4b6f      	ldr	r3, [pc, #444]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02d      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041d8:	4b6c      	ldr	r3, [pc, #432]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	4a6b      	ldr	r2, [pc, #428]	; (8004390 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	4b62      	ldr	r3, [pc, #392]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004212:	ed97 6a02 	vldr	s12, [r7, #8]
 8004216:	eddf 5a61 	vldr	s11, [pc, #388]	; 800439c <HAL_RCC_GetSysClockFreq+0x2e4>
 800421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004232:	e087      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	4b51      	ldr	r3, [pc, #324]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004256:	ed97 6a02 	vldr	s12, [r7, #8]
 800425a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800439c <HAL_RCC_GetSysClockFreq+0x2e4>
 800425e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004276:	e065      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428a:	4b40      	ldr	r3, [pc, #256]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429a:	ed97 6a02 	vldr	s12, [r7, #8]
 800429e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800439c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042ba:	e043      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800439c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042fe:	e021      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800430e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004322:	ed97 6a02 	vldr	s12, [r7, #8]
 8004326:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800439c <HAL_RCC_GetSysClockFreq+0x2e4>
 800432a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004342:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	0a5b      	lsrs	r3, r3, #9
 800434a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434e:	3301      	adds	r3, #1
 8004350:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800435c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004368:	ee17 3a90 	vmov	r3, s15
 800436c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800436e:	e005      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004378:	61bb      	str	r3, [r7, #24]
      break;
 800437a:	bf00      	nop
  }

  return sysclockfreq;
 800437c:	69bb      	ldr	r3, [r7, #24]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	03d09000 	.word	0x03d09000
 8004394:	003d0900 	.word	0x003d0900
 8004398:	007a1200 	.word	0x007a1200
 800439c:	46000000 	.word	0x46000000
 80043a0:	4c742400 	.word	0x4c742400
 80043a4:	4a742400 	.word	0x4a742400
 80043a8:	4af42400 	.word	0x4af42400

080043ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043b2:	f7ff fe81 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_GetHCLKFreq+0x50>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	490f      	ldr	r1, [pc, #60]	; (8004400 <HAL_RCC_GetHCLKFreq+0x54>)
 80043c4:	5ccb      	ldrb	r3, [r1, r3]
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_GetHCLKFreq+0x50>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <HAL_RCC_GetHCLKFreq+0x54>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	fa22 f303 	lsr.w	r3, r2, r3
 80043e6:	4a07      	ldr	r2, [pc, #28]	; (8004404 <HAL_RCC_GetHCLKFreq+0x58>)
 80043e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RCC_GetHCLKFreq+0x58>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	58024400 	.word	0x58024400
 8004400:	0801a8d8 	.word	0x0801a8d8
 8004404:	24000004 	.word	0x24000004
 8004408:	24000000 	.word	0x24000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004410:	f7ff ffcc 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4904      	ldr	r1, [pc, #16]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	58024400 	.word	0x58024400
 8004434:	0801a8d8 	.word	0x0801a8d8

08004438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223f      	movs	r2, #63	; 0x3f
 8004446:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0207 	and.w	r2, r3, #7
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004490:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_GetClockConfig+0x80>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	58024400 	.word	0x58024400
 80044b8:	52002000 	.word	0x52002000

080044bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e049      	b.n	8004562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f841 	bl	800456a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 fa00 	bl	8004900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e054      	b.n	8004642 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <HAL_TIM_Base_Start_IT+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d022      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d01d      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d018      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a21      	ldr	r2, [pc, #132]	; (8004658 <HAL_TIM_Base_Start_IT+0xd8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_TIM_Base_Start_IT+0xdc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_TIM_Base_Start_IT+0xe0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <HAL_TIM_Base_Start_IT+0xe4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x80>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_TIM_Base_Start_IT+0xe8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d115      	bne.n	800462c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_TIM_Base_Start_IT+0xec>)
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b06      	cmp	r3, #6
 8004610:	d015      	beq.n	800463e <HAL_TIM_Base_Start_IT+0xbe>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d011      	beq.n	800463e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	e008      	b.n	800463e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e000      	b.n	8004640 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40001800 	.word	0x40001800
 8004668:	40014000 	.word	0x40014000
 800466c:	00010007 	.word	0x00010007

08004670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b02      	cmp	r3, #2
 8004684:	d122      	bne.n	80046cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d11b      	bne.n	80046cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0202 	mvn.w	r2, #2
 800469c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f905 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8f7 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f908 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d122      	bne.n	8004720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d11b      	bne.n	8004720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0204 	mvn.w	r2, #4
 80046f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8db 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8cd 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8de 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0208 	mvn.w	r2, #8
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8b1 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8a3 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8b4 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b10      	cmp	r3, #16
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b10      	cmp	r3, #16
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0210 	mvn.w	r2, #16
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2208      	movs	r2, #8
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f887 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f879 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f88a 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f84c 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b80      	cmp	r3, #128	; 0x80
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f914 	bl	8004a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482e:	d10e      	bne.n	800484e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d107      	bne.n	800484e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f907 	bl	8004a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f838 	bl	80048ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b20      	cmp	r3, #32
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0220 	mvn.w	r2, #32
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8c7 	bl	8004a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <TIM_Base_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d00f      	beq.n	8004940 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3d      	ldr	r2, [pc, #244]	; (8004a18 <TIM_Base_SetConfig+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <TIM_Base_SetConfig+0x11c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3b      	ldr	r2, [pc, #236]	; (8004a20 <TIM_Base_SetConfig+0x120>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3a      	ldr	r2, [pc, #232]	; (8004a24 <TIM_Base_SetConfig+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <TIM_Base_SetConfig+0x114>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01f      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <TIM_Base_SetConfig+0x118>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <TIM_Base_SetConfig+0x11c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <TIM_Base_SetConfig+0x120>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a29      	ldr	r2, [pc, #164]	; (8004a24 <TIM_Base_SetConfig+0x124>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a28      	ldr	r2, [pc, #160]	; (8004a28 <TIM_Base_SetConfig+0x128>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a27      	ldr	r2, [pc, #156]	; (8004a2c <TIM_Base_SetConfig+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0x9a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <TIM_Base_SetConfig+0x130>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <TIM_Base_SetConfig+0x114>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00f      	beq.n	80049f8 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <TIM_Base_SetConfig+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <TIM_Base_SetConfig+0x128>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <TIM_Base_SetConfig+0x12c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0xf8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <TIM_Base_SetConfig+0x130>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	615a      	str	r2, [r3, #20]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800

08004a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004a76:	4b8f      	ldr	r3, [pc, #572]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004a78:	22c0      	movs	r2, #192	; 0xc0
 8004a7a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004a7c:	4b8d      	ldr	r3, [pc, #564]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004a7e:	22a8      	movs	r2, #168	; 0xa8
 8004a80:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004a82:	4b8c      	ldr	r3, [pc, #560]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004a88:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004a8a:	220a      	movs	r2, #10
 8004a8c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004a90:	22ff      	movs	r2, #255	; 0xff
 8004a92:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a94:	4b88      	ldr	r3, [pc, #544]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004aa0:	4b85      	ldr	r3, [pc, #532]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004aa6:	4b85      	ldr	r3, [pc, #532]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004aac:	4b83      	ldr	r3, [pc, #524]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004ab2:	4b82      	ldr	r3, [pc, #520]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004ab8:	4b80      	ldr	r3, [pc, #512]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004abe:	2100      	movs	r1, #0
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f006 f801 	bl	800aac8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	061a      	lsls	r2, r3, #24
 8004acc:	4b79      	ldr	r3, [pc, #484]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	4b77      	ldr	r3, [pc, #476]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004ad6:	789b      	ldrb	r3, [r3, #2]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	4313      	orrs	r3, r2
 8004adc:	4a75      	ldr	r2, [pc, #468]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004ade:	78d2      	ldrb	r2, [r2, #3]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	061a      	lsls	r2, r3, #24
 8004ae4:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	0619      	lsls	r1, r3, #24
 8004aea:	4b72      	ldr	r3, [pc, #456]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	4319      	orrs	r1, r3
 8004af2:	4b70      	ldr	r3, [pc, #448]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004af4:	789b      	ldrb	r3, [r3, #2]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	430b      	orrs	r3, r1
 8004afa:	496e      	ldr	r1, [pc, #440]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004afc:	78c9      	ldrb	r1, [r1, #3]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b06:	431a      	orrs	r2, r3
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	0619      	lsls	r1, r3, #24
 8004b0e:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	4319      	orrs	r1, r3
 8004b16:	4b67      	ldr	r3, [pc, #412]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b18:	789b      	ldrb	r3, [r3, #2]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	4965      	ldr	r1, [pc, #404]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b20:	78c9      	ldrb	r1, [r1, #3]
 8004b22:	430b      	orrs	r3, r1
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	4b61      	ldr	r3, [pc, #388]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	0619      	lsls	r1, r3, #24
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	4319      	orrs	r1, r3
 8004b3a:	4b5e      	ldr	r3, [pc, #376]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b3c:	789b      	ldrb	r3, [r3, #2]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	430b      	orrs	r3, r1
 8004b42:	495c      	ldr	r1, [pc, #368]	; (8004cb4 <MX_LWIP_Init+0x244>)
 8004b44:	78c9      	ldrb	r1, [r1, #3]
 8004b46:	430b      	orrs	r3, r1
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	4a5c      	ldr	r2, [pc, #368]	; (8004cc0 <MX_LWIP_Init+0x250>)
 8004b4e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	061a      	lsls	r2, r3, #24
 8004b56:	4b58      	ldr	r3, [pc, #352]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	4b56      	ldr	r3, [pc, #344]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b60:	789b      	ldrb	r3, [r3, #2]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4313      	orrs	r3, r2
 8004b66:	4a54      	ldr	r2, [pc, #336]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b68:	78d2      	ldrb	r2, [r2, #3]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	061a      	lsls	r2, r3, #24
 8004b6e:	4b52      	ldr	r3, [pc, #328]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	0619      	lsls	r1, r3, #24
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	4319      	orrs	r1, r3
 8004b7c:	4b4e      	ldr	r3, [pc, #312]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b7e:	789b      	ldrb	r3, [r3, #2]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	430b      	orrs	r3, r1
 8004b84:	494c      	ldr	r1, [pc, #304]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b86:	78c9      	ldrb	r1, [r1, #3]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b90:	431a      	orrs	r2, r3
 8004b92:	4b49      	ldr	r3, [pc, #292]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	0619      	lsls	r1, r3, #24
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	4319      	orrs	r1, r3
 8004ba0:	4b45      	ldr	r3, [pc, #276]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	4943      	ldr	r1, [pc, #268]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004baa:	78c9      	ldrb	r1, [r1, #3]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	4b40      	ldr	r3, [pc, #256]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	0619      	lsls	r1, r3, #24
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	4319      	orrs	r1, r3
 8004bc4:	4b3c      	ldr	r3, [pc, #240]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004bc6:	789b      	ldrb	r3, [r3, #2]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	493a      	ldr	r1, [pc, #232]	; (8004cb8 <MX_LWIP_Init+0x248>)
 8004bce:	78c9      	ldrb	r1, [r1, #3]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	0e1b      	lsrs	r3, r3, #24
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <MX_LWIP_Init+0x254>)
 8004bd8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004bda:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	061a      	lsls	r2, r3, #24
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004bea:	789b      	ldrb	r3, [r3, #2]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004bf2:	78d2      	ldrb	r2, [r2, #3]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	061a      	lsls	r2, r3, #24
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	0619      	lsls	r1, r3, #24
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	4319      	orrs	r1, r3
 8004c06:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c08:	789b      	ldrb	r3, [r3, #2]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	492b      	ldr	r1, [pc, #172]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c10:	78c9      	ldrb	r1, [r1, #3]
 8004c12:	430b      	orrs	r3, r1
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	0619      	lsls	r1, r3, #24
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	4319      	orrs	r1, r3
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c2c:	789b      	ldrb	r3, [r3, #2]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	430b      	orrs	r3, r1
 8004c32:	4922      	ldr	r1, [pc, #136]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c34:	78c9      	ldrb	r1, [r1, #3]
 8004c36:	430b      	orrs	r3, r1
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	0619      	lsls	r1, r3, #24
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	4319      	orrs	r1, r3
 8004c4e:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c50:	789b      	ldrb	r3, [r3, #2]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	430b      	orrs	r3, r1
 8004c56:	4919      	ldr	r1, [pc, #100]	; (8004cbc <MX_LWIP_Init+0x24c>)
 8004c58:	78c9      	ldrb	r1, [r1, #3]
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	0e1b      	lsrs	r3, r3, #24
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <MX_LWIP_Init+0x258>)
 8004c62:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <MX_LWIP_Init+0x25c>)
 8004c66:	9302      	str	r3, [sp, #8]
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <MX_LWIP_Init+0x260>)
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <MX_LWIP_Init+0x258>)
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <MX_LWIP_Init+0x254>)
 8004c74:	4912      	ldr	r1, [pc, #72]	; (8004cc0 <MX_LWIP_Init+0x250>)
 8004c76:	4817      	ldr	r0, [pc, #92]	; (8004cd4 <MX_LWIP_Init+0x264>)
 8004c78:	f006 fda8 	bl	800b7cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c7c:	4815      	ldr	r0, [pc, #84]	; (8004cd4 <MX_LWIP_Init+0x264>)
 8004c7e:	f006 ff57 	bl	800bb30 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004c82:	4814      	ldr	r0, [pc, #80]	; (8004cd4 <MX_LWIP_Init+0x264>)
 8004c84:	f006 ff64 	bl	800bb50 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c88:	4913      	ldr	r1, [pc, #76]	; (8004cd8 <MX_LWIP_Init+0x268>)
 8004c8a:	4812      	ldr	r0, [pc, #72]	; (8004cd4 <MX_LWIP_Init+0x264>)
 8004c8c:	f007 f862 	bl	800bd54 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <MX_LWIP_Init+0x26c>)
 8004c92:	1d3c      	adds	r4, r7, #4
 8004c94:	461d      	mov	r5, r3
 8004c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	490b      	ldr	r1, [pc, #44]	; (8004cd4 <MX_LWIP_Init+0x264>)
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd88 	bl	80057bc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb4:	240004e0 	.word	0x240004e0
 8004cb8:	240004e4 	.word	0x240004e4
 8004cbc:	240004e8 	.word	0x240004e8
 8004cc0:	240004d4 	.word	0x240004d4
 8004cc4:	240004d8 	.word	0x240004d8
 8004cc8:	240004dc 	.word	0x240004dc
 8004ccc:	0800a9d9 	.word	0x0800a9d9
 8004cd0:	080051b5 	.word	0x080051b5
 8004cd4:	240004a0 	.word	0x240004a0
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	0801736c 	.word	0x0801736c

08004ce0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <HAL_ETH_RxCpltCallback+0x1c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fed7 	bl	8005ab4 <osSemaphoreRelease>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	240004f4 	.word	0x240004f4

08004d14 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_ETH_TxCpltCallback+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fec7 	bl	8005ab4 <osSemaphoreRelease>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	240004f8 	.word	0x240004f8

08004d34 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fd fc25 	bl	800258c <HAL_ETH_GetDMAError>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d104      	bne.n	8004d56 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_ETH_ErrorCallback+0x2c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 feaf 	bl	8005ab4 <osSemaphoreRelease>
  }
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	240004f4 	.word	0x240004f4

08004d64 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b0ac      	sub	sp, #176	; 0xb0
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8004d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d82:	2264      	movs	r2, #100	; 0x64
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f011 fa55 	bl	8016236 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d8c:	4b8f      	ldr	r3, [pc, #572]	; (8004fcc <low_level_init+0x268>)
 8004d8e:	4a90      	ldr	r2, [pc, #576]	; (8004fd0 <low_level_init+0x26c>)
 8004d90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x80;
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0xE1;
 8004d9e:	23e1      	movs	r3, #225	; 0xe1
 8004da0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x00;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0x00;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0x00;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8004db6:	4a85      	ldr	r2, [pc, #532]	; (8004fcc <low_level_init+0x268>)
 8004db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004dbe:	4b83      	ldr	r3, [pc, #524]	; (8004fcc <low_level_init+0x268>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <low_level_init+0x268>)
 8004dc6:	4a83      	ldr	r2, [pc, #524]	; (8004fd4 <low_level_init+0x270>)
 8004dc8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004dca:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <low_level_init+0x268>)
 8004dcc:	4a82      	ldr	r2, [pc, #520]	; (8004fd8 <low_level_init+0x274>)
 8004dce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004dd0:	4b7e      	ldr	r3, [pc, #504]	; (8004fcc <low_level_init+0x268>)
 8004dd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004dd6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004dd8:	487c      	ldr	r0, [pc, #496]	; (8004fcc <low_level_init+0x268>)
 8004dda:	f7fc fbf7 	bl	80015cc <HAL_ETH_Init>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004de4:	2238      	movs	r2, #56	; 0x38
 8004de6:	2100      	movs	r1, #0
 8004de8:	487c      	ldr	r0, [pc, #496]	; (8004fdc <low_level_init+0x278>)
 8004dea:	f011 fa24 	bl	8016236 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004dee:	4b7b      	ldr	r3, [pc, #492]	; (8004fdc <low_level_init+0x278>)
 8004df0:	2221      	movs	r2, #33	; 0x21
 8004df2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004df4:	4b79      	ldr	r3, [pc, #484]	; (8004fdc <low_level_init+0x278>)
 8004df6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004dfa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004dfc:	4b77      	ldr	r3, [pc, #476]	; (8004fdc <low_level_init+0x278>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004e02:	4877      	ldr	r0, [pc, #476]	; (8004fe0 <low_level_init+0x27c>)
 8004e04:	f006 fb9c 	bl	800b540 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e10:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <low_level_init+0x268>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e1c:	4b6b      	ldr	r3, [pc, #428]	; (8004fcc <low_level_init+0x268>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	785a      	ldrb	r2, [r3, #1]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e28:	4b68      	ldr	r3, [pc, #416]	; (8004fcc <low_level_init+0x268>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	789a      	ldrb	r2, [r3, #2]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e34:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <low_level_init+0x268>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	78da      	ldrb	r2, [r3, #3]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e40:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <low_level_init+0x268>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	791a      	ldrb	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e4c:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <low_level_init+0x268>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	795a      	ldrb	r2, [r3, #5]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e5e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e66:	f043 030a 	orr.w	r3, r3, #10
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e76:	2300      	movs	r3, #0
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8004e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd97 	bl	80059b4 <osSemaphoreCreate>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4a56      	ldr	r2, [pc, #344]	; (8004fe4 <low_level_init+0x280>)
 8004e8a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	2300      	movs	r3, #0
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8004e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd8a 	bl	80059b4 <osSemaphoreCreate>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4a51      	ldr	r2, [pc, #324]	; (8004fe8 <low_level_init+0x284>)
 8004ea4:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8004ea6:	4b4f      	ldr	r3, [pc, #316]	; (8004fe4 <low_level_init+0x280>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fdb3 	bl	8005a18 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <low_level_init+0x284>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fdad 	bl	8005a18 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004ebe:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <low_level_init+0x288>)
 8004ec0:	f107 0408 	add.w	r4, r7, #8
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fc6f 	bl	80057bc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ede:	4944      	ldr	r1, [pc, #272]	; (8004ff0 <low_level_init+0x28c>)
 8004ee0:	4844      	ldr	r0, [pc, #272]	; (8004ff4 <low_level_init+0x290>)
 8004ee2:	f7fc f83a 	bl	8000f5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004ee6:	4843      	ldr	r0, [pc, #268]	; (8004ff4 <low_level_init+0x290>)
 8004ee8:	f7fc f869 	bl	8000fbe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004eec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d164      	bne.n	8004fbe <low_level_init+0x25a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004ef4:	483f      	ldr	r0, [pc, #252]	; (8004ff4 <low_level_init+0x290>)
 8004ef6:	f7fc f90a 	bl	800110e <LAN8742_GetLinkState>
 8004efa:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	dc06      	bgt.n	8004f14 <low_level_init+0x1b0>
    {
      netif_set_link_down(netif);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f006 fef4 	bl	800bcf4 <netif_set_link_down>
      netif_set_down(netif);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f006 fe8b 	bl	800bc28 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f12:	e056      	b.n	8004fc2 <low_level_init+0x25e>
      switch (PHYLinkState)
 8004f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f18:	3b02      	subs	r3, #2
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d82a      	bhi.n	8004f74 <low_level_init+0x210>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <low_level_init+0x1c0>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f67 	.word	0x08004f67
        duplex = ETH_FULLDUPLEX_MODE;
 8004f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004f44:	e01f      	b.n	8004f86 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004f54:	e017      	b.n	8004f86 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 8004f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004f64:	e00f      	b.n	8004f86 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004f72:	e008      	b.n	8004f86 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 8004f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004f84:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	480f      	ldr	r0, [pc, #60]	; (8004fcc <low_level_init+0x268>)
 8004f8e:	f7fd f8b7 	bl	8002100 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8004f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f9c:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4809      	ldr	r0, [pc, #36]	; (8004fcc <low_level_init+0x268>)
 8004fa6:	f7fd fa7f 	bl	80024a8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004faa:	4808      	ldr	r0, [pc, #32]	; (8004fcc <low_level_init+0x268>)
 8004fac:	f7fc fbf4 	bl	8001798 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f006 fdcd 	bl	800bb50 <netif_set_up>
    netif_set_link_up(netif);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f006 fe68 	bl	800bc8c <netif_set_link_up>
}
 8004fbc:	e001      	b.n	8004fc2 <low_level_init+0x25e>
    Error_Handler();
 8004fbe:	f7fb fc77 	bl	80008b0 <Error_Handler>
}
 8004fc2:	bf00      	nop
 8004fc4:	37b0      	adds	r7, #176	; 0xb0
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	240004fc 	.word	0x240004fc
 8004fd0:	40028000 	.word	0x40028000
 8004fd4:	30040060 	.word	0x30040060
 8004fd8:	30040000 	.word	0x30040000
 8004fdc:	240005ac 	.word	0x240005ac
 8004fe0:	0801a8e8 	.word	0x0801a8e8
 8004fe4:	240004f4 	.word	0x240004f4
 8004fe8:	240004f8 	.word	0x240004f8
 8004fec:	08017390 	.word	0x08017390
 8004ff0:	24000010 	.word	0x24000010
 8004ff4:	240005e4 	.word	0x240005e4

08004ff8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b092      	sub	sp, #72	; 0x48
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	2230      	movs	r2, #48	; 0x30
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f011 f90c 	bl	8016236 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800501e:	f107 030c 	add.w	r3, r7, #12
 8005022:	2230      	movs	r2, #48	; 0x30
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f011 f905 	bl	8016236 <memset>

  for(q = p; q != NULL; q = q->next)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	643b      	str	r3, [r7, #64]	; 0x40
 8005030:	e045      	b.n	80050be <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005034:	2b03      	cmp	r3, #3
 8005036:	d902      	bls.n	800503e <low_level_output+0x46>
      return ERR_IF;
 8005038:	f06f 030b 	mvn.w	r3, #11
 800503c:	e06c      	b.n	8005118 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	6859      	ldr	r1, [r3, #4]
 8005042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3348      	adds	r3, #72	; 0x48
 800504e:	443b      	add	r3, r7
 8005050:	3b3c      	subs	r3, #60	; 0x3c
 8005052:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	895b      	ldrh	r3, [r3, #10]
 8005058:	4619      	mov	r1, r3
 800505a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	3348      	adds	r3, #72	; 0x48
 8005066:	443b      	add	r3, r7
 8005068:	3b38      	subs	r3, #56	; 0x38
 800506a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800506c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	f107 000c 	add.w	r0, r7, #12
 800507a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800507c:	460b      	mov	r3, r1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	440b      	add	r3, r1
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	18c1      	adds	r1, r0, r3
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	3348      	adds	r3, #72	; 0x48
 8005090:	443b      	add	r3, r7
 8005092:	3b34      	subs	r3, #52	; 0x34
 8005094:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800509e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a0:	4613      	mov	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	3348      	adds	r3, #72	; 0x48
 80050aa:	443b      	add	r3, r7
 80050ac:	3b34      	subs	r3, #52	; 0x34
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	3301      	adds	r3, #1
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80050b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
 80050be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1b6      	bne.n	8005032 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	891b      	ldrh	r3, [r3, #8]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <low_level_output+0x128>)
 80050cc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80050ce:	4a14      	ldr	r2, [pc, #80]	; (8005120 <low_level_output+0x128>)
 80050d0:	f107 030c 	add.w	r3, r7, #12
 80050d4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <low_level_output+0x128>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f007 fa8d 	bl	800c5fc <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80050e2:	490f      	ldr	r1, [pc, #60]	; (8005120 <low_level_output+0x128>)
 80050e4:	480f      	ldr	r0, [pc, #60]	; (8005124 <low_level_output+0x12c>)
 80050e6:	f7fc fc5b 	bl	80019a0 <HAL_ETH_Transmit_IT>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80050f0:	bf00      	nop
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <low_level_output+0x130>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f04f 31ff 	mov.w	r1, #4294967295
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fc8c 	bl	8005a18 <osSemaphoreWait>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f5      	bne.n	80050f2 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005106:	4807      	ldr	r0, [pc, #28]	; (8005124 <low_level_output+0x12c>)
 8005108:	f7fc fdc9 	bl	8001c9e <HAL_ETH_ReleaseTxPacket>
 800510c:	e002      	b.n	8005114 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f007 f9ce 	bl	800c4b0 <pbuf_free>
  }

  return errval;
 8005114:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005118:	4618      	mov	r0, r3
 800511a:	3748      	adds	r7, #72	; 0x48
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	240005ac 	.word	0x240005ac
 8005124:	240004fc 	.word	0x240004fc
 8005128:	240004f8 	.word	0x240004f8

0800512c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <low_level_input+0x2c>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4619      	mov	r1, r3
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <low_level_input+0x30>)
 8005148:	f7fc fc7b 	bl	8001a42 <HAL_ETH_ReadData>
  }

  return p;
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	240004f0 	.word	0x240004f0
 800515c:	240004fc 	.word	0x240004fc

08005160 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <ethernetif_input+0x50>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f04f 31ff 	mov.w	r1, #4294967295
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fc4d 	bl	8005a18 <osSemaphoreWait>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f5      	bne.n	8005170 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005184:	68b8      	ldr	r0, [r7, #8]
 8005186:	f7ff ffd1 	bl	800512c <low_level_input>
 800518a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	4798      	blx	r3
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f007 f984 	bl	800c4b0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ea      	bne.n	8005184 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80051ae:	e7df      	b.n	8005170 <ethernetif_input+0x10>
 80051b0:	240004f4 	.word	0x240004f4

080051b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <ethernetif_init+0x1c>
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <ethernetif_init+0x48>)
 80051c4:	f240 2203 	movw	r2, #515	; 0x203
 80051c8:	490d      	ldr	r1, [pc, #52]	; (8005200 <ethernetif_init+0x4c>)
 80051ca:	480e      	ldr	r0, [pc, #56]	; (8005204 <ethernetif_init+0x50>)
 80051cc:	f010 ff94 	bl	80160f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2273      	movs	r2, #115	; 0x73
 80051d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2274      	movs	r2, #116	; 0x74
 80051dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <ethernetif_init+0x54>)
 80051e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <ethernetif_init+0x58>)
 80051ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fdb9 	bl	8004d64 <low_level_init>

  return ERR_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	080173ac 	.word	0x080173ac
 8005200:	080173c8 	.word	0x080173c8
 8005204:	080173d8 	.word	0x080173d8
 8005208:	08013df5 	.word	0x08013df5
 800520c:	08004ff9 	.word	0x08004ff9

08005210 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	4809      	ldr	r0, [pc, #36]	; (8005244 <pbuf_free_custom+0x34>)
 8005220:	f006 fa7e 	bl	800b720 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <pbuf_free_custom+0x38>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d107      	bne.n	800523c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <pbuf_free_custom+0x38>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <pbuf_free_custom+0x3c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fc3c 	bl	8005ab4 <osSemaphoreRelease>
  }
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	0801a8e8 	.word	0x0801a8e8
 8005248:	240004f0 	.word	0x240004f0
 800524c:	240004f4 	.word	0x240004f4

08005250 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005254:	f7fc f832 	bl	80012bc <HAL_GetTick>
 8005258:	4603      	mov	r3, r0
}
 800525a:	4618      	mov	r0, r3
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	; 0x38
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a69      	ldr	r2, [pc, #420]	; (8005424 <HAL_ETH_MspInit+0x1c4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	f040 80cb 	bne.w	800541a <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005284:	4b68      	ldr	r3, [pc, #416]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 8005286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800528a:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005294:	4b64      	ldr	r3, [pc, #400]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 8005296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800529a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80052a2:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052a8:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052b2:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80052c0:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052c6:	4a58      	ldr	r2, [pc, #352]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052d0:	4b55      	ldr	r3, [pc, #340]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052de:	4b52      	ldr	r3, [pc, #328]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e4:	4a50      	ldr	r2, [pc, #320]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fc:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 80052fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005302:	4a49      	ldr	r2, [pc, #292]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800530c:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800530e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	4b43      	ldr	r3, [pc, #268]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800531c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005320:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 8005322:	f043 0302 	orr.w	r3, r3, #2
 8005326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800532a:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800532c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800533a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533e:	4a3a      	ldr	r2, [pc, #232]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005348:	4b37      	ldr	r3, [pc, #220]	; (8005428 <HAL_ETH_MspInit+0x1c8>)
 800534a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005356:	2332      	movs	r3, #50	; 0x32
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2300      	movs	r3, #0
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005362:	2303      	movs	r3, #3
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005366:	230b      	movs	r3, #11
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800536a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536e:	4619      	mov	r1, r3
 8005370:	482e      	ldr	r0, [pc, #184]	; (800542c <HAL_ETH_MspInit+0x1cc>)
 8005372:	f7fd fe8d 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005376:	2386      	movs	r3, #134	; 0x86
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537a:	2302      	movs	r3, #2
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537e:	2300      	movs	r3, #0
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005382:	2303      	movs	r3, #3
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005386:	230b      	movs	r3, #11
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800538e:	4619      	mov	r1, r3
 8005390:	4827      	ldr	r0, [pc, #156]	; (8005430 <HAL_ETH_MspInit+0x1d0>)
 8005392:	f7fd fe7d 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005396:	2301      	movs	r3, #1
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a2:	2300      	movs	r3, #0
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053a6:	230b      	movs	r3, #11
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ae:	4619      	mov	r1, r3
 80053b0:	4820      	ldr	r0, [pc, #128]	; (8005434 <HAL_ETH_MspInit+0x1d4>)
 80053b2:	f7fd fe6d 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053bc:	2302      	movs	r3, #2
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c4:	2303      	movs	r3, #3
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053c8:	230b      	movs	r3, #11
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d0:	4619      	mov	r1, r3
 80053d2:	4818      	ldr	r0, [pc, #96]	; (8005434 <HAL_ETH_MspInit+0x1d4>)
 80053d4:	f7fd fe5c 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80053d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053de:	2302      	movs	r3, #2
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e6:	2303      	movs	r3, #3
 80053e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ea:	230b      	movs	r3, #11
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053f2:	4619      	mov	r1, r3
 80053f4:	4810      	ldr	r0, [pc, #64]	; (8005438 <HAL_ETH_MspInit+0x1d8>)
 80053f6:	f7fd fe4b 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2105      	movs	r1, #5
 80053fe:	203d      	movs	r0, #61	; 0x3d
 8005400:	f7fc f840 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005404:	203d      	movs	r0, #61	; 0x3d
 8005406:	f7fc f857 	bl	80014b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800540a:	2200      	movs	r2, #0
 800540c:	2105      	movs	r1, #5
 800540e:	203e      	movs	r0, #62	; 0x3e
 8005410:	f7fc f838 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005414:	203e      	movs	r0, #62	; 0x3e
 8005416:	f7fc f84f 	bl	80014b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800541a:	bf00      	nop
 800541c:	3738      	adds	r7, #56	; 0x38
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40028000 	.word	0x40028000
 8005428:	58024400 	.word	0x58024400
 800542c:	58020800 	.word	0x58020800
 8005430:	58020000 	.word	0x58020000
 8005434:	58020400 	.word	0x58020400
 8005438:	58021800 	.word	0x58021800

0800543c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <ETH_PHY_IO_Init+0x10>)
 8005442:	f7fd f84b 	bl	80024dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	240004fc 	.word	0x240004fc

08005450 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return 0;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	4807      	ldr	r0, [pc, #28]	; (8005490 <ETH_PHY_IO_ReadReg+0x30>)
 8005474:	f7fc fd9c 	bl	8001fb0 <HAL_ETH_ReadPHYRegister>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	e000      	b.n	8005486 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	240004fc 	.word	0x240004fc

08005494 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	4807      	ldr	r0, [pc, #28]	; (80054c4 <ETH_PHY_IO_WriteReg+0x30>)
 80054a8:	f7fc fdd6 	bl	8002058 <HAL_ETH_WritePHYRegister>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	e000      	b.n	80054ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	240004fc 	.word	0x240004fc

080054c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054cc:	f7fb fef6 	bl	80012bc <HAL_GetTick>
 80054d0:	4603      	mov	r3, r0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b0a0      	sub	sp, #128	; 0x80
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	2264      	movs	r2, #100	; 0x64
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f010 fea4 	bl	8016236 <memset>
  int32_t PHYLinkState = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054f6:	2300      	movs	r3, #0
 80054f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80054fa:	2300      	movs	r3, #0
 80054fc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005502:	483a      	ldr	r0, [pc, #232]	; (80055ec <ethernet_link_thread+0x114>)
 8005504:	f7fb fe03 	bl	800110e <LAN8742_GetLinkState>
 8005508:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <ethernet_link_thread+0x5e>
 800551c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551e:	2b01      	cmp	r3, #1
 8005520:	dc09      	bgt.n	8005536 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005522:	4833      	ldr	r0, [pc, #204]	; (80055f0 <ethernet_link_thread+0x118>)
 8005524:	f7fc f9c4 	bl	80018b0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005528:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800552a:	f006 fb7d 	bl	800bc28 <netif_set_down>
    netif_set_link_down(netif);
 800552e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005530:	f006 fbe0 	bl	800bcf4 <netif_set_link_down>
 8005534:	e055      	b.n	80055e2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d14e      	bne.n	80055e2 <ethernet_link_thread+0x10a>
 8005544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005546:	2b01      	cmp	r3, #1
 8005548:	dd4b      	ble.n	80055e2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800554a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554c:	3b02      	subs	r3, #2
 800554e:	2b03      	cmp	r3, #3
 8005550:	d82a      	bhi.n	80055a8 <ethernet_link_thread+0xd0>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <ethernet_link_thread+0x80>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	0800558b 	.word	0x0800558b
 8005564:	0800559b 	.word	0x0800559b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800556c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800556e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005572:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005574:	2301      	movs	r3, #1
 8005576:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005578:	e017      	b.n	80055aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800557a:	2300      	movs	r3, #0
 800557c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800557e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005582:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005584:	2301      	movs	r3, #1
 8005586:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005588:	e00f      	b.n	80055aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800558a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800558e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005590:	2300      	movs	r3, #0
 8005592:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005594:	2301      	movs	r3, #1
 8005596:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005598:	e007      	b.n	80055aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800559a:	2300      	movs	r3, #0
 800559c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800559e:	2300      	movs	r3, #0
 80055a0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055a6:	e000      	b.n	80055aa <ethernet_link_thread+0xd2>
    default:
      break;
 80055a8:	bf00      	nop
    }

    if(linkchanged)
 80055aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d018      	beq.n	80055e2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	4619      	mov	r1, r3
 80055b6:	480e      	ldr	r0, [pc, #56]	; (80055f0 <ethernet_link_thread+0x118>)
 80055b8:	f7fc fda2 	bl	8002100 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055be:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80055c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80055c4:	f107 0308 	add.w	r3, r7, #8
 80055c8:	4619      	mov	r1, r3
 80055ca:	4809      	ldr	r0, [pc, #36]	; (80055f0 <ethernet_link_thread+0x118>)
 80055cc:	f7fc ff6c 	bl	80024a8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80055d0:	4807      	ldr	r0, [pc, #28]	; (80055f0 <ethernet_link_thread+0x118>)
 80055d2:	f7fc f8e1 	bl	8001798 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80055d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055d8:	f006 faba 	bl	800bb50 <netif_set_up>
      netif_set_link_up(netif);
 80055dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055de:	f006 fb55 	bl	800bc8c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80055e2:	2064      	movs	r0, #100	; 0x64
 80055e4:	f000 f936 	bl	8005854 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80055e8:	e78b      	b.n	8005502 <ethernet_link_thread+0x2a>
 80055ea:	bf00      	nop
 80055ec:	240005e4 	.word	0x240005e4
 80055f0:	240004fc 	.word	0x240004fc

080055f4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80055fc:	4812      	ldr	r0, [pc, #72]	; (8005648 <HAL_ETH_RxAllocateCallback+0x54>)
 80055fe:	f006 f81b 	bl	800b638 <memp_malloc_pool>
 8005602:	60f8      	str	r0, [r7, #12]
  if (p)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f103 0220 	add.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a0d      	ldr	r2, [pc, #52]	; (800564c <HAL_ETH_RxAllocateCallback+0x58>)
 8005618:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005622:	9201      	str	r2, [sp, #4]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2241      	movs	r2, #65	; 0x41
 800562a:	2100      	movs	r1, #0
 800562c:	2000      	movs	r0, #0
 800562e:	f006 fd85 	bl	800c13c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005632:	e005      	b.n	8005640 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	0801a8e8 	.word	0x0801a8e8
 800564c:	08005211 	.word	0x08005211
 8005650:	240004f0 	.word	0x240004f0

08005654 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005654:	b480      	push	{r7}
 8005656:	b08d      	sub	sp, #52	; 0x34
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3b20      	subs	r3, #32
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2200      	movs	r2, #0
 800567e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e003      	b.n	800569e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056aa:	e009      	b.n	80056c0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	891a      	ldrh	r2, [r3, #8]
 80056b0:	887b      	ldrh	r3, [r7, #2]
 80056b2:	4413      	add	r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f2      	bne.n	80056ac <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	623a      	str	r2, [r7, #32]
 80056cc:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dd1d      	ble.n	8005710 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f003 021f 	and.w	r2, r3, #31
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80056e4:	f3bf 8f4f 	dsb	sy
}
 80056e8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <HAL_ETH_RxLinkCallback+0xcc>)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	3320      	adds	r3, #32
 80056f6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3b20      	subs	r3, #32
 80056fc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	dcf2      	bgt.n	80056ea <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005704:	f3bf 8f4f 	dsb	sy
}
 8005708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800570a:	f3bf 8f6f 	isb	sy
}
 800570e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005710:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005712:	bf00      	nop
 8005714:	3734      	adds	r7, #52	; 0x34
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f006 febf 	bl	800c4b0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	4603      	mov	r3, r0
 8005742:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574c:	2b84      	cmp	r3, #132	; 0x84
 800574e:	d005      	beq.n	800575c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005750:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	3303      	adds	r3, #3
 800575a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800575c:	68fb      	ldr	r3, [r7, #12]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005770:	f3ef 8305 	mrs	r3, IPSR
 8005774:	607b      	str	r3, [r7, #4]
  return(result);
 8005776:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005792:	f001 fd25 	bl	80071e0 <vTaskStartScheduler>
  
  return osOK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}

0800579c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80057a0:	f7ff ffe3 	bl	800576a <inHandlerMode>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80057aa:	f001 fe33 	bl	8007414 <xTaskGetTickCountFromISR>
 80057ae:	4603      	mov	r3, r0
 80057b0:	e002      	b.n	80057b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80057b2:	f001 fe1f 	bl	80073f4 <xTaskGetTickCount>
 80057b6:	4603      	mov	r3, r0
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}

080057bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <osThreadCreate+0x54>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685c      	ldr	r4, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691e      	ldr	r6, [r3, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ffa6 	bl	800573a <makeFreeRtosPriority>
 80057ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f8:	9202      	str	r2, [sp, #8]
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	9100      	str	r1, [sp, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4632      	mov	r2, r6
 8005802:	4629      	mov	r1, r5
 8005804:	4620      	mov	r0, r4
 8005806:	f001 fb23 	bl	8006e50 <xTaskCreateStatic>
 800580a:	4603      	mov	r3, r0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e01c      	b.n	800584a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685c      	ldr	r4, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff88 	bl	800573a <makeFreeRtosPriority>
 800582a:	4602      	mov	r2, r0
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f001 fb65 	bl	8006f0a <xTaskCreate>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d001      	beq.n	800584a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005854 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <osDelay+0x16>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	e000      	b.n	800586c <osDelay+0x18>
 800586a:	2301      	movs	r3, #1
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fc83 	bl	8007178 <vTaskDelay>
  
  return osOK;
 8005872:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4619      	mov	r1, r3
 8005892:	2001      	movs	r0, #1
 8005894:	f000 fc7d 	bl	8006192 <xQueueCreateMutexStatic>
 8005898:	4603      	mov	r3, r0
 800589a:	e003      	b.n	80058a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800589c:	2001      	movs	r0, #1
 800589e:	f000 fc60 	bl	8006162 <xQueueCreateMutex>
 80058a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <osMutexWait+0x18>
    return osErrorParameter;
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	e03a      	b.n	800593a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d103      	bne.n	80058d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e009      	b.n	80058ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <osMutexWait+0x40>
      ticks = 1;
 80058e8:	2301      	movs	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80058ec:	f7ff ff3d 	bl	800576a <inHandlerMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d017      	beq.n	8005926 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	461a      	mov	r2, r3
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 f874 	bl	80069ec <xQueueReceiveFromISR>
 8005904:	4603      	mov	r3, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <osMutexWait+0x62>
      return osErrorOS;
 800590a:	23ff      	movs	r3, #255	; 0xff
 800590c:	e015      	b.n	800593a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d011      	beq.n	8005938 <osMutexWait+0x8c>
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <osMutexWait+0x98>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	e008      	b.n	8005938 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 ff53 	bl	80067d4 <xQueueSemaphoreTake>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <osMutexWait+0x8c>
    return osErrorOS;
 8005934:	23ff      	movs	r3, #255	; 0xff
 8005936:	e000      	b.n	800593a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005958:	f7ff ff07 	bl	800576a <inHandlerMode>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fdc6 	bl	80064fa <xQueueGiveFromISR>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <osMutexRelease+0x30>
      return osErrorOS;
 8005974:	23ff      	movs	r3, #255	; 0xff
 8005976:	e017      	b.n	80059a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d013      	beq.n	80059a6 <osMutexRelease+0x5e>
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <osMutexRelease+0x68>)
 8005980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	e00a      	b.n	80059a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005990:	2300      	movs	r3, #0
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fc16 	bl	80061c8 <xQueueGenericSend>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d001      	beq.n	80059a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80059a2:	23ff      	movs	r3, #255	; 0xff
 80059a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00f      	beq.n	80059e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10a      	bne.n	80059e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2203      	movs	r2, #3
 80059d2:	9200      	str	r2, [sp, #0]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2100      	movs	r1, #0
 80059d8:	2001      	movs	r0, #1
 80059da:	f000 fad7 	bl	8005f8c <xQueueGenericCreateStatic>
 80059de:	4603      	mov	r3, r0
 80059e0:	e016      	b.n	8005a10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e014      	b.n	8005a10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d110      	bne.n	8005a0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80059ec:	2203      	movs	r2, #3
 80059ee:	2100      	movs	r1, #0
 80059f0:	2001      	movs	r0, #1
 80059f2:	f000 fb43 	bl	800607c <xQueueGenericCreate>
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <osSemaphoreCreate+0x56>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fbdf 	bl	80061c8 <xQueueGenericSend>
      return sema;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e000      	b.n	8005a10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005a0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	e03a      	b.n	8005aa6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d103      	bne.n	8005a44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e009      	b.n	8005a58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <osSemaphoreWait+0x40>
      ticks = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a58:	f7ff fe87 	bl	800576a <inHandlerMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	461a      	mov	r2, r3
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 ffbe 	bl	80069ec <xQueueReceiveFromISR>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005a76:	23ff      	movs	r3, #255	; 0xff
 8005a78:	e015      	b.n	8005aa6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <osSemaphoreWait+0x8c>
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <osSemaphoreWait+0x98>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	e008      	b.n	8005aa4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fe9d 	bl	80067d4 <xQueueSemaphoreTake>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005aa0:	23ff      	movs	r3, #255	; 0xff
 8005aa2:	e000      	b.n	8005aa6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005ac4:	f7ff fe51 	bl	800576a <inHandlerMode>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fd10 	bl	80064fa <xQueueGiveFromISR>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d001      	beq.n	8005ae4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005ae0:	23ff      	movs	r3, #255	; 0xff
 8005ae2:	e017      	b.n	8005b14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <osSemaphoreRelease+0x5e>
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <osSemaphoreRelease+0x68>)
 8005aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	e00a      	b.n	8005b12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005afc:	2300      	movs	r3, #0
 8005afe:	2200      	movs	r2, #0
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb60 	bl	80061c8 <xQueueGenericSend>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005b0e:	23ff      	movs	r3, #255	; 0xff
 8005b10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005b28:	f7ff fe1f 	bl	800576a <inHandlerMode>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005b32:	2382      	movs	r3, #130	; 0x82
 8005b34:	e003      	b.n	8005b3e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 f814 	bl	8006b64 <vQueueDelete>

  return osOK; 
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005b46:	b590      	push	{r4, r7, lr}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d011      	beq.n	8005b7c <osMessageCreate+0x36>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2400      	movs	r4, #0
 8005b72:	9400      	str	r4, [sp, #0]
 8005b74:	f000 fa0a 	bl	8005f8c <xQueueGenericCreateStatic>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e008      	b.n	8005b8e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	4619      	mov	r1, r3
 8005b88:	f000 fa78 	bl	800607c <xQueueGenericCreate>
 8005b8c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd90      	pop	{r4, r7, pc}
	...

08005b98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <osMessagePut+0x1e>
    ticks = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005bb6:	f7ff fdd8 	bl	800576a <inHandlerMode>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d018      	beq.n	8005bf2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005bc0:	f107 0210 	add.w	r2, r7, #16
 8005bc4:	f107 0108 	add.w	r1, r7, #8
 8005bc8:	2300      	movs	r3, #0
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fbfa 	bl	80063c4 <xQueueGenericSendFromISR>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d001      	beq.n	8005bda <osMessagePut+0x42>
      return osErrorOS;
 8005bd6:	23ff      	movs	r3, #255	; 0xff
 8005bd8:	e018      	b.n	8005c0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d014      	beq.n	8005c0a <osMessagePut+0x72>
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <osMessagePut+0x7c>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	e00b      	b.n	8005c0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005bf2:	f107 0108 	add.w	r1, r7, #8
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fae4 	bl	80061c8 <xQueueGenericSend>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d001      	beq.n	8005c0a <osMessagePut+0x72>
      return osErrorOS;
 8005c06:	23ff      	movs	r3, #255	; 0xff
 8005c08:	e000      	b.n	8005c0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b08b      	sub	sp, #44	; 0x2c
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	617b      	str	r3, [r7, #20]
    return event;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	461c      	mov	r4, r3
 8005c3a:	f107 0314 	add.w	r3, r7, #20
 8005c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c46:	e054      	b.n	8005cf2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d103      	bne.n	8005c60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	e009      	b.n	8005c74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <osMessageGet+0x5c>
      ticks = 1;
 8005c70:	2301      	movs	r3, #1
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005c74:	f7ff fd79 	bl	800576a <inHandlerMode>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005c7e:	f107 0220 	add.w	r2, r7, #32
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	f000 feae 	bl	80069ec <xQueueReceiveFromISR>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d102      	bne.n	8005c9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005c96:	2310      	movs	r3, #16
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e001      	b.n	8005ca0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01d      	beq.n	8005ce2 <osMessageGet+0xca>
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <osMessageGet+0xe4>)
 8005ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	e014      	b.n	8005ce2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	68b8      	ldr	r0, [r7, #8]
 8005cc4:	f000 fca6 	bl	8006614 <xQueueReceive>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005cce:	2310      	movs	r3, #16
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e006      	b.n	8005ce2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <osMessageGet+0xc6>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <osMessageGet+0xc8>
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	372c      	adds	r7, #44	; 0x2c
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005d08:	f7ff fd2f 	bl	800576a <inHandlerMode>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 ff08 	bl	8006b28 <uxQueueMessagesWaitingFromISR>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	e003      	b.n	8005d24 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fee5 	bl	8006aec <uxQueueMessagesWaiting>
 8005d22:	4603      	mov	r3, r0
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005d34:	f7ff fd19 	bl	800576a <inHandlerMode>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <osMessageDelete+0x16>
    return osErrorISR;
 8005d3e:	2382      	movs	r3, #130	; 0x82
 8005d40:	e003      	b.n	8005d4a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 ff0e 	bl	8006b64 <vQueueDelete>

  return osOK; 
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f103 0208 	add.w	r2, r3, #8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 0208 	add.w	r2, r3, #8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f103 0208 	add.w	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d103      	bne.n	8005e14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	e00c      	b.n	8005e2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3308      	adds	r3, #8
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e002      	b.n	8005e22 <vListInsert+0x2e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d2f6      	bcs.n	8005e1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d103      	bne.n	8005e9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ee6:	f002 f8ed 	bl	80080c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	441a      	add	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	3b01      	subs	r3, #1
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	22ff      	movs	r2, #255	; 0xff
 8005f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d114      	bne.n	8005f66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01a      	beq.n	8005f7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3310      	adds	r3, #16
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fbad 	bl	80076a8 <xTaskRemoveFromEventList>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <xQueueGenericReset+0xcc>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	e009      	b.n	8005f7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3310      	adds	r3, #16
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fef1 	bl	8005d52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff feec 	bl	8005d52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f7a:	f002 f8d3 	bl	8008124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <xQueueGenericCreateStatic+0x52>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <xQueueGenericCreateStatic+0x56>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericCreateStatic+0x58>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <xQueueGenericCreateStatic+0x7e>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xQueueGenericCreateStatic+0x82>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericCreateStatic+0x84>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	61fb      	str	r3, [r7, #28]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800602a:	2348      	movs	r3, #72	; 0x48
 800602c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b48      	cmp	r3, #72	; 0x48
 8006032:	d00a      	beq.n	800604a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61bb      	str	r3, [r7, #24]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800604a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800605e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f83f 	bl	80060f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006074:	4618      	mov	r0, r3
 8006076:	3730      	adds	r7, #48	; 0x30
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3348      	adds	r3, #72	; 0x48
 80060b4:	4618      	mov	r0, r3
 80060b6:	f002 f927 	bl	8008308 <pvPortMalloc>
 80060ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3348      	adds	r3, #72	; 0x48
 80060ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060d4:	79fa      	ldrb	r2, [r7, #7]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f805 	bl	80060f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060e6:	69bb      	ldr	r3, [r7, #24]
	}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e002      	b.n	8006112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800611e:	2101      	movs	r1, #1
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fecb 	bl	8005ebc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800614e:	2300      	movs	r3, #0
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f837 	bl	80061c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af00      	add	r7, sp, #0
 8006168:	4603      	mov	r3, r0
 800616a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	461a      	mov	r2, r3
 8006178:	6939      	ldr	r1, [r7, #16]
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f7ff ff7e 	bl	800607c <xQueueGenericCreate>
 8006180:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ffd3 	bl	800612e <prvInitialiseMutex>

		return xNewQueue;
 8006188:	68fb      	ldr	r3, [r7, #12]
	}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006192:	b580      	push	{r7, lr}
 8006194:	b088      	sub	sp, #32
 8006196:	af02      	add	r7, sp, #8
 8006198:	4603      	mov	r3, r0
 800619a:	6039      	str	r1, [r7, #0]
 800619c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	2300      	movs	r3, #0
 80061a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2200      	movs	r2, #0
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f7ff feeb 	bl	8005f8c <xQueueGenericCreateStatic>
 80061b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ffb8 	bl	800612e <prvInitialiseMutex>

		return xNewQueue;
 80061be:	68fb      	ldr	r3, [r7, #12]
	}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061d6:	2300      	movs	r3, #0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <xQueueGenericSend+0x32>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <xQueueGenericSend+0x40>
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <xQueueGenericSend+0x44>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <xQueueGenericSend+0x46>
 800620c:	2300      	movs	r3, #0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <xQueueGenericSend+0x60>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d103      	bne.n	8006236 <xQueueGenericSend+0x6e>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <xQueueGenericSend+0x72>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericSend+0x74>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericSend+0x8e>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	623b      	str	r3, [r7, #32]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006256:	f001 fbe3 	bl	8007a20 <xTaskGetSchedulerState>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <xQueueGenericSend+0x9e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <xQueueGenericSend+0xa2>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <xQueueGenericSend+0xa4>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericSend+0xbe>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	61fb      	str	r3, [r7, #28]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006286:	f001 ff1d 	bl	80080c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <xQueueGenericSend+0xd4>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d129      	bne.n	80062f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a2:	f000 fc9a 	bl	8006bda <prvCopyDataToQueue>
 80062a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d010      	beq.n	80062d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f9f7 	bl	80076a8 <xTaskRemoveFromEventList>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062c0:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <xQueueGenericSend+0x1f8>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	e00a      	b.n	80062e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062d8:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <xQueueGenericSend+0x1f8>)
 80062da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062e8:	f001 ff1c 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e063      	b.n	80063b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f6:	f001 ff15 	bl	8008124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e05c      	b.n	80063b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fa2f 	bl	800776c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630e:	2301      	movs	r3, #1
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006312:	f001 ff07 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006316:	f000 ffc3 	bl	80072a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800631a:	f001 fed3 	bl	80080c4 <vPortEnterCritical>
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006324:	b25b      	sxtb	r3, r3
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d103      	bne.n	8006334 <xQueueGenericSend+0x16c>
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633a:	b25b      	sxtb	r3, r3
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d103      	bne.n	800634a <xQueueGenericSend+0x182>
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800634a:	f001 feeb 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634e:	1d3a      	adds	r2, r7, #4
 8006350:	f107 0314 	add.w	r3, r7, #20
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fa1e 	bl	8007798 <xTaskCheckForTimeOut>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d124      	bne.n	80063ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006364:	f000 fd31 	bl	8006dca <prvIsQueueFull>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	3310      	adds	r3, #16
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f972 	bl	8007660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800637c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800637e:	f000 fcbc 	bl	8006cfa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006382:	f000 ff9b 	bl	80072bc <xTaskResumeAll>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f af7c 	bne.w	8006286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <xQueueGenericSend+0x1f8>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	e772      	b.n	8006286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a2:	f000 fcaa 	bl	8006cfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a6:	f000 ff89 	bl	80072bc <xTaskResumeAll>
 80063aa:	e76c      	b.n	8006286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ae:	f000 fca4 	bl	8006cfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063b2:	f000 ff83 	bl	80072bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3738      	adds	r7, #56	; 0x38
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b090      	sub	sp, #64	; 0x40
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <xQueueGenericSendFromISR+0x3c>
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <xQueueGenericSendFromISR+0x40>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <xQueueGenericSendFromISR+0x42>
 8006404:	2300      	movs	r3, #0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d103      	bne.n	800642e <xQueueGenericSendFromISR+0x6a>
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <xQueueGenericSendFromISR+0x6e>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <xQueueGenericSendFromISR+0x70>
 8006432:	2300      	movs	r3, #0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	623b      	str	r3, [r7, #32]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800644e:	f001 ff1b 	bl	8008288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006452:	f3ef 8211 	mrs	r2, BASEPRI
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	61fa      	str	r2, [r7, #28]
 8006468:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800646a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <xQueueGenericSendFromISR+0xbc>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d12f      	bne.n	80064e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006496:	f000 fba0 	bl	8006bda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800649a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d112      	bne.n	80064ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d016      	beq.n	80064da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f8f9 	bl	80076a8 <xTaskRemoveFromEventList>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00e      	beq.n	80064da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e007      	b.n	80064da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064ce:	3301      	adds	r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	b25a      	sxtb	r2, r3
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064de:	e001      	b.n	80064e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3740      	adds	r7, #64	; 0x40
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08e      	sub	sp, #56	; 0x38
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	623b      	str	r3, [r7, #32]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <xQueueGiveFromISR+0x48>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	61fb      	str	r3, [r7, #28]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <xQueueGiveFromISR+0x58>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <xQueueGiveFromISR+0x5c>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGiveFromISR+0x5e>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xQueueGiveFromISR+0x78>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	61bb      	str	r3, [r7, #24]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006572:	f001 fe89 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 8006576:	f3ef 8211 	mrs	r2, BASEPRI
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	617a      	str	r2, [r7, #20]
 800658c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800658e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659e:	429a      	cmp	r2, r3
 80065a0:	d22b      	bcs.n	80065fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d112      	bne.n	80065e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f86c 	bl	80076a8 <xTaskRemoveFromEventList>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00e      	beq.n	80065f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e007      	b.n	80065f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e8:	3301      	adds	r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80065f4:	2301      	movs	r3, #1
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
 80065f8:	e001      	b.n	80065fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f383 8811 	msr	BASEPRI, r3
}
 8006608:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800660c:	4618      	mov	r0, r3
 800660e:	3738      	adds	r7, #56	; 0x38
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08c      	sub	sp, #48	; 0x30
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <xQueueReceive+0x30>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	623b      	str	r3, [r7, #32]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <xQueueReceive+0x3e>
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <xQueueReceive+0x42>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <xQueueReceive+0x44>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xQueueReceive+0x5e>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	61fb      	str	r3, [r7, #28]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006672:	f001 f9d5 	bl	8007a20 <xTaskGetSchedulerState>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <xQueueReceive+0x6e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <xQueueReceive+0x72>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <xQueueReceive+0x74>
 8006686:	2300      	movs	r3, #0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xQueueReceive+0x8e>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	61bb      	str	r3, [r7, #24]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066a2:	f001 fd0f 	bl	80080c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01f      	beq.n	80066f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b6:	f000 fafa 	bl	8006cae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1e5a      	subs	r2, r3, #1
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00f      	beq.n	80066ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	3310      	adds	r3, #16
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ffea 	bl	80076a8 <xTaskRemoveFromEventList>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066da:	4b3d      	ldr	r3, [pc, #244]	; (80067d0 <xQueueReceive+0x1bc>)
 80066dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066ea:	f001 fd1b 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e069      	b.n	80067c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066f8:	f001 fd14 	bl	8008124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e062      	b.n	80067c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006706:	f107 0310 	add.w	r3, r7, #16
 800670a:	4618      	mov	r0, r3
 800670c:	f001 f82e 	bl	800776c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006710:	2301      	movs	r3, #1
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006714:	f001 fd06 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006718:	f000 fdc2 	bl	80072a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800671c:	f001 fcd2 	bl	80080c4 <vPortEnterCritical>
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006726:	b25b      	sxtb	r3, r3
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d103      	bne.n	8006736 <xQueueReceive+0x122>
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800673c:	b25b      	sxtb	r3, r3
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d103      	bne.n	800674c <xQueueReceive+0x138>
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800674c:	f001 fcea 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006750:	1d3a      	adds	r2, r7, #4
 8006752:	f107 0310 	add.w	r3, r7, #16
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f81d 	bl	8007798 <xTaskCheckForTimeOut>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d123      	bne.n	80067ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006766:	f000 fb1a 	bl	8006d9e <prvIsQueueEmpty>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4611      	mov	r1, r2
 8006778:	4618      	mov	r0, r3
 800677a:	f000 ff71 	bl	8007660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800677e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006780:	f000 fabb 	bl	8006cfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006784:	f000 fd9a 	bl	80072bc <xTaskResumeAll>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d189      	bne.n	80066a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <xQueueReceive+0x1bc>)
 8006790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	e780      	b.n	80066a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a2:	f000 faaa 	bl	8006cfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a6:	f000 fd89 	bl	80072bc <xTaskResumeAll>
 80067aa:	e77a      	b.n	80066a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ae:	f000 faa4 	bl	8006cfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067b2:	f000 fd83 	bl	80072bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b8:	f000 faf1 	bl	8006d9e <prvIsQueueEmpty>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f43f af6f 	beq.w	80066a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3730      	adds	r7, #48	; 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08e      	sub	sp, #56	; 0x38
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067de:	2300      	movs	r3, #0
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	623b      	str	r3, [r7, #32]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61fb      	str	r3, [r7, #28]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006824:	f001 f8fc 	bl	8007a20 <xTaskGetSchedulerState>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <xQueueSemaphoreTake+0x60>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <xQueueSemaphoreTake+0x64>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <xQueueSemaphoreTake+0x66>
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	61bb      	str	r3, [r7, #24]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006854:	f001 fc36 	bl	80080c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d024      	beq.n	80068ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006874:	f001 fa7c 	bl	8007d70 <pvTaskIncrementMutexHeldCount>
 8006878:	4602      	mov	r2, r0
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f000 ff0c 	bl	80076a8 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006896:	4b54      	ldr	r3, [pc, #336]	; (80069e8 <xQueueSemaphoreTake+0x214>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068a6:	f001 fc3d 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e097      	b.n	80069de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d111      	bne.n	80068d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	617b      	str	r3, [r7, #20]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068d0:	f001 fc28 	bl	8008124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e082      	b.n	80069de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068de:	f107 030c 	add.w	r3, r7, #12
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 ff42 	bl	800776c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068ec:	f001 fc1a 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068f0:	f000 fcd6 	bl	80072a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068f4:	f001 fbe6 	bl	80080c4 <vPortEnterCritical>
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d103      	bne.n	800690e <xQueueSemaphoreTake+0x13a>
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006914:	b25b      	sxtb	r3, r3
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d103      	bne.n	8006924 <xQueueSemaphoreTake+0x150>
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006924:	f001 fbfe 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006928:	463a      	mov	r2, r7
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f000 ff31 	bl	8007798 <xTaskCheckForTimeOut>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d132      	bne.n	80069a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800693c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800693e:	f000 fa2e 	bl	8006d9e <prvIsQueueEmpty>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d026      	beq.n	8006996 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006950:	f001 fbb8 	bl	80080c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f001 f87f 	bl	8007a5c <xTaskPriorityInherit>
 800695e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006960:	f001 fbe0 	bl	8008124 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fe77 	bl	8007660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006974:	f000 f9c1 	bl	8006cfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006978:	f000 fca0 	bl	80072bc <xTaskResumeAll>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	f47f af68 	bne.w	8006854 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006984:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <xQueueSemaphoreTake+0x214>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	e75e      	b.n	8006854 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006998:	f000 f9af 	bl	8006cfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800699c:	f000 fc8e 	bl	80072bc <xTaskResumeAll>
 80069a0:	e758      	b.n	8006854 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a4:	f000 f9a9 	bl	8006cfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069a8:	f000 fc88 	bl	80072bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ae:	f000 f9f6 	bl	8006d9e <prvIsQueueEmpty>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f43f af4d 	beq.w	8006854 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80069c0:	f001 fb80 	bl	80080c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c6:	f000 f8f0 	bl	8006baa <prvGetDisinheritPriorityAfterTimeout>
 80069ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f93e 	bl	8007c54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069d8:	f001 fba4 	bl	8008124 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3738      	adds	r7, #56	; 0x38
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08e      	sub	sp, #56	; 0x38
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	623b      	str	r3, [r7, #32]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <xQueueReceiveFromISR+0x3a>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <xQueueReceiveFromISR+0x3e>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueReceiveFromISR+0x40>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61fb      	str	r3, [r7, #28]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a46:	f001 fc1f 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 8006a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	61ba      	str	r2, [r7, #24]
 8006a60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d02f      	beq.n	8006ad2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a80:	f000 f915 	bl	8006cae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d112      	bne.n	8006abc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fe00 	bl	80076a8 <xTaskRemoveFromEventList>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e007      	b.n	8006acc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	b25a      	sxtb	r2, r3
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad0:	e001      	b.n	8006ad6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f383 8811 	msr	BASEPRI, r3
}
 8006ae0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3738      	adds	r7, #56	; 0x38
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60bb      	str	r3, [r7, #8]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006b10:	f001 fad8 	bl	80080c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006b1a:	f001 fb03 	bl	8008124 <vPortExitCritical>

	return uxReturn;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006b56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <vQueueDelete+0x28>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f935 	bl	8006dfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f001 fc7f 	bl	80084a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1c3 0307 	rsb	r3, r3, #7
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e001      	b.n	8006bcc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d14d      	bne.n	8006c9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 ff9f 	bl	8007b48 <xTaskPriorityDisinherit>
 8006c0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	609a      	str	r2, [r3, #8]
 8006c12:	e043      	b.n	8006c9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d119      	bne.n	8006c4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6858      	ldr	r0, [r3, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	461a      	mov	r2, r3
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	f00f fb8e 	bl	8016346 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	441a      	add	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d32b      	bcc.n	8006c9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e026      	b.n	8006c9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68d8      	ldr	r0, [r3, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	461a      	mov	r2, r3
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	f00f fb74 	bl	8016346 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	425b      	negs	r3, r3
 8006c68:	441a      	add	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d207      	bcs.n	8006c8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	425b      	negs	r3, r3
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d105      	bne.n	8006c9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ca4:	697b      	ldr	r3, [r7, #20]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d018      	beq.n	8006cf2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d303      	bcc.n	8006ce2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	461a      	mov	r2, r3
 8006cec:	6838      	ldr	r0, [r7, #0]
 8006cee:	f00f fb2a 	bl	8016346 <memcpy>
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d02:	f001 f9df 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d0e:	e011      	b.n	8006d34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d012      	beq.n	8006d3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3324      	adds	r3, #36	; 0x24
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fcc3 	bl	80076a8 <xTaskRemoveFromEventList>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d28:	f000 fd98 	bl	800785c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dce9      	bgt.n	8006d10 <prvUnlockQueue+0x16>
 8006d3c:	e000      	b.n	8006d40 <prvUnlockQueue+0x46>
					break;
 8006d3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d48:	f001 f9ec 	bl	8008124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d4c:	f001 f9ba 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d58:	e011      	b.n	8006d7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3310      	adds	r3, #16
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fc9e 	bl	80076a8 <xTaskRemoveFromEventList>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d72:	f000 fd73 	bl	800785c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dce9      	bgt.n	8006d5a <prvUnlockQueue+0x60>
 8006d86:	e000      	b.n	8006d8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	22ff      	movs	r2, #255	; 0xff
 8006d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d92:	f001 f9c7 	bl	8008124 <vPortExitCritical>
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da6:	f001 f98d 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e001      	b.n	8006dbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dbc:	f001 f9b2 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dd2:	f001 f977 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d102      	bne.n	8006de8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e001      	b.n	8006dec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dec:	f001 f99a 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8006df0:	68fb      	ldr	r3, [r7, #12]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e016      	b.n	8006e38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <vQueueUnregisterQueue+0x50>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d10b      	bne.n	8006e32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e1a:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <vQueueUnregisterQueue+0x50>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e24:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <vQueueUnregisterQueue+0x50>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	605a      	str	r2, [r3, #4]
				break;
 8006e30:	e006      	b.n	8006e40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b07      	cmp	r3, #7
 8006e3c:	d9e5      	bls.n	8006e0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	24000604 	.word	0x24000604

08006e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08e      	sub	sp, #56	; 0x38
 8006e54:	af04      	add	r7, sp, #16
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	623b      	str	r3, [r7, #32]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	61fb      	str	r3, [r7, #28]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e96:	2354      	movs	r3, #84	; 0x54
 8006e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b54      	cmp	r3, #84	; 0x54
 8006e9e:	d00a      	beq.n	8006eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	61bb      	str	r3, [r7, #24]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01e      	beq.n	8006efc <xTaskCreateStatic+0xac>
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9303      	str	r3, [sp, #12]
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	9302      	str	r3, [sp, #8]
 8006ede:	f107 0314 	add.w	r3, r7, #20
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f850 	bl	8006f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ef6:	f000 f8d5 	bl	80070a4 <prvAddNewTaskToReadyList>
 8006efa:	e001      	b.n	8006f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f00:	697b      	ldr	r3, [r7, #20]
	}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08c      	sub	sp, #48	; 0x30
 8006f0e:	af04      	add	r7, sp, #16
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 f9f2 	bl	8008308 <pvPortMalloc>
 8006f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00e      	beq.n	8006f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f2c:	2054      	movs	r0, #84	; 0x54
 8006f2e:	f001 f9eb 	bl	8008308 <pvPortMalloc>
 8006f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f40:	e005      	b.n	8006f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f42:	6978      	ldr	r0, [r7, #20]
 8006f44:	f001 faac 	bl	80084a0 <vPortFree>
 8006f48:	e001      	b.n	8006f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d017      	beq.n	8006f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f5c:	88fa      	ldrh	r2, [r7, #6]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	9302      	str	r3, [sp, #8]
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f80e 	bl	8006f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f78:	69f8      	ldr	r0, [r7, #28]
 8006f7a:	f000 f893 	bl	80070a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e002      	b.n	8006f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f84:	f04f 33ff 	mov.w	r3, #4294967295
 8006f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006fac:	440b      	add	r3, r1
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <prvInitialiseNewTask+0x48>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	617b      	str	r3, [r7, #20]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01f      	beq.n	8007022 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	e012      	b.n	800700e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	7819      	ldrb	r1, [r3, #0]
 8006ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	3334      	adds	r3, #52	; 0x34
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3301      	adds	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2b0f      	cmp	r3, #15
 8007012:	d9e9      	bls.n	8006fe8 <prvInitialiseNewTask+0x54>
 8007014:	e000      	b.n	8007018 <prvInitialiseNewTask+0x84>
			{
				break;
 8007016:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007020:	e003      	b.n	800702a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	2b06      	cmp	r3, #6
 800702e:	d901      	bls.n	8007034 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007030:	2306      	movs	r3, #6
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	2200      	movs	r2, #0
 8007044:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	3304      	adds	r3, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fea1 	bl	8005d92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	3318      	adds	r3, #24
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fe9c 	bl	8005d92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	f1c3 0207 	rsb	r2, r3, #7
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	2200      	movs	r2, #0
 8007074:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	69b8      	ldr	r0, [r7, #24]
 8007084:	f000 feee 	bl	8007e64 <pxPortInitialiseStack>
 8007088:	4602      	mov	r2, r0
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800709a:	bf00      	nop
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070ac:	f001 f80a 	bl	80080c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070b0:	4b2a      	ldr	r3, [pc, #168]	; (800715c <prvAddNewTaskToReadyList+0xb8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	4a29      	ldr	r2, [pc, #164]	; (800715c <prvAddNewTaskToReadyList+0xb8>)
 80070b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070ba:	4b29      	ldr	r3, [pc, #164]	; (8007160 <prvAddNewTaskToReadyList+0xbc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070c2:	4a27      	ldr	r2, [pc, #156]	; (8007160 <prvAddNewTaskToReadyList+0xbc>)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070c8:	4b24      	ldr	r3, [pc, #144]	; (800715c <prvAddNewTaskToReadyList+0xb8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d110      	bne.n	80070f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070d0:	f000 fbe8 	bl	80078a4 <prvInitialiseTaskLists>
 80070d4:	e00d      	b.n	80070f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070d6:	4b23      	ldr	r3, [pc, #140]	; (8007164 <prvAddNewTaskToReadyList+0xc0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070de:	4b20      	ldr	r3, [pc, #128]	; (8007160 <prvAddNewTaskToReadyList+0xbc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d802      	bhi.n	80070f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <prvAddNewTaskToReadyList+0xbc>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <prvAddNewTaskToReadyList+0xc4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <prvAddNewTaskToReadyList+0xc4>)
 80070fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	2201      	movs	r2, #1
 8007102:	409a      	lsls	r2, r3
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <prvAddNewTaskToReadyList+0xc8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4313      	orrs	r3, r2
 800710a:	4a18      	ldr	r2, [pc, #96]	; (800716c <prvAddNewTaskToReadyList+0xc8>)
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4a15      	ldr	r2, [pc, #84]	; (8007170 <prvAddNewTaskToReadyList+0xcc>)
 800711c:	441a      	add	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f7fe fe41 	bl	8005dac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800712a:	f000 fffb 	bl	8008124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800712e:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <prvAddNewTaskToReadyList+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00e      	beq.n	8007154 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <prvAddNewTaskToReadyList+0xbc>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	429a      	cmp	r2, r3
 8007142:	d207      	bcs.n	8007154 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <prvAddNewTaskToReadyList+0xd0>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	24000744 	.word	0x24000744
 8007160:	24000644 	.word	0x24000644
 8007164:	24000750 	.word	0x24000750
 8007168:	24000760 	.word	0x24000760
 800716c:	2400074c 	.word	0x2400074c
 8007170:	24000648 	.word	0x24000648
 8007174:	e000ed04 	.word	0xe000ed04

08007178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800718a:	4b13      	ldr	r3, [pc, #76]	; (80071d8 <vTaskDelay+0x60>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <vTaskDelay+0x30>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071a8:	f000 f87a 	bl	80072a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071ac:	2100      	movs	r1, #0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fdf2 	bl	8007d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071b4:	f000 f882 	bl	80072bc <xTaskResumeAll>
 80071b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d107      	bne.n	80071d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80071c0:	4b06      	ldr	r3, [pc, #24]	; (80071dc <vTaskDelay+0x64>)
 80071c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	2400076c 	.word	0x2400076c
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071ee:	463a      	mov	r2, r7
 80071f0:	1d39      	adds	r1, r7, #4
 80071f2:	f107 0308 	add.w	r3, r7, #8
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7f9 f8ca 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	2300      	movs	r3, #0
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	2300      	movs	r3, #0
 800720c:	460a      	mov	r2, r1
 800720e:	491e      	ldr	r1, [pc, #120]	; (8007288 <vTaskStartScheduler+0xa8>)
 8007210:	481e      	ldr	r0, [pc, #120]	; (800728c <vTaskStartScheduler+0xac>)
 8007212:	f7ff fe1d 	bl	8006e50 <xTaskCreateStatic>
 8007216:	4603      	mov	r3, r0
 8007218:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <vTaskStartScheduler+0xb0>)
 800721a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <vTaskStartScheduler+0xb0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007224:	2301      	movs	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e001      	b.n	800722e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d116      	bne.n	8007262 <vTaskStartScheduler+0x82>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	613b      	str	r3, [r7, #16]
}
 8007246:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <vTaskStartScheduler+0xb4>)
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007250:	4b11      	ldr	r3, [pc, #68]	; (8007298 <vTaskStartScheduler+0xb8>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007256:	4b11      	ldr	r3, [pc, #68]	; (800729c <vTaskStartScheduler+0xbc>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800725c:	f000 fe90 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007260:	e00e      	b.n	8007280 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d10a      	bne.n	8007280 <vTaskStartScheduler+0xa0>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	60fb      	str	r3, [r7, #12]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vTaskStartScheduler+0x9e>
}
 8007280:	bf00      	nop
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	08017400 	.word	0x08017400
 800728c:	08007875 	.word	0x08007875
 8007290:	24000768 	.word	0x24000768
 8007294:	24000764 	.word	0x24000764
 8007298:	24000750 	.word	0x24000750
 800729c:	24000748 	.word	0x24000748

080072a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <vTaskSuspendAll+0x18>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	4a03      	ldr	r2, [pc, #12]	; (80072b8 <vTaskSuspendAll+0x18>)
 80072ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	2400076c 	.word	0x2400076c

080072bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072ca:	4b41      	ldr	r3, [pc, #260]	; (80073d0 <xTaskResumeAll+0x114>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	603b      	str	r3, [r7, #0]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072e8:	f000 feec 	bl	80080c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072ec:	4b38      	ldr	r3, [pc, #224]	; (80073d0 <xTaskResumeAll+0x114>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4a37      	ldr	r2, [pc, #220]	; (80073d0 <xTaskResumeAll+0x114>)
 80072f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <xTaskResumeAll+0x114>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d161      	bne.n	80073c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072fe:	4b35      	ldr	r3, [pc, #212]	; (80073d4 <xTaskResumeAll+0x118>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d05d      	beq.n	80073c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007306:	e02e      	b.n	8007366 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <xTaskResumeAll+0x11c>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3318      	adds	r3, #24
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fda6 	bl	8005e66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3304      	adds	r3, #4
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fda1 	bl	8005e66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	4b2b      	ldr	r3, [pc, #172]	; (80073dc <xTaskResumeAll+0x120>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	4a2a      	ldr	r2, [pc, #168]	; (80073dc <xTaskResumeAll+0x120>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a27      	ldr	r2, [pc, #156]	; (80073e0 <xTaskResumeAll+0x124>)
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7fe fd2d 	bl	8005dac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <xTaskResumeAll+0x128>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	429a      	cmp	r2, r3
 800735e:	d302      	bcc.n	8007366 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007360:	4b21      	ldr	r3, [pc, #132]	; (80073e8 <xTaskResumeAll+0x12c>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007366:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <xTaskResumeAll+0x11c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1cc      	bne.n	8007308 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007374:	f000 fb34 	bl	80079e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <xTaskResumeAll+0x130>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007384:	f000 f858 	bl	8007438 <xTaskIncrementTick>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800738e:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <xTaskResumeAll+0x12c>)
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3b01      	subs	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f1      	bne.n	8007384 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <xTaskResumeAll+0x130>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <xTaskResumeAll+0x12c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <xTaskResumeAll+0x134>)
 80073b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c2:	f000 feaf 	bl	8008124 <vPortExitCritical>

	return xAlreadyYielded;
 80073c6:	68bb      	ldr	r3, [r7, #8]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	2400076c 	.word	0x2400076c
 80073d4:	24000744 	.word	0x24000744
 80073d8:	24000704 	.word	0x24000704
 80073dc:	2400074c 	.word	0x2400074c
 80073e0:	24000648 	.word	0x24000648
 80073e4:	24000644 	.word	0x24000644
 80073e8:	24000758 	.word	0x24000758
 80073ec:	24000754 	.word	0x24000754
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <xTaskGetTickCount+0x1c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007400:	687b      	ldr	r3, [r7, #4]
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	24000748 	.word	0x24000748

08007414 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800741a:	f000 ff35 	bl	8008288 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007422:	4b04      	ldr	r3, [pc, #16]	; (8007434 <xTaskGetTickCountFromISR+0x20>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007428:	683b      	ldr	r3, [r7, #0]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	24000748 	.word	0x24000748

08007438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007442:	4b4e      	ldr	r3, [pc, #312]	; (800757c <xTaskIncrementTick+0x144>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 808e 	bne.w	8007568 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800744c:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <xTaskIncrementTick+0x148>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007454:	4a4a      	ldr	r2, [pc, #296]	; (8007580 <xTaskIncrementTick+0x148>)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d120      	bne.n	80074a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007460:	4b48      	ldr	r3, [pc, #288]	; (8007584 <xTaskIncrementTick+0x14c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <xTaskIncrementTick+0x48>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	603b      	str	r3, [r7, #0]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <xTaskIncrementTick+0x46>
 8007480:	4b40      	ldr	r3, [pc, #256]	; (8007584 <xTaskIncrementTick+0x14c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	4b40      	ldr	r3, [pc, #256]	; (8007588 <xTaskIncrementTick+0x150>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a3e      	ldr	r2, [pc, #248]	; (8007584 <xTaskIncrementTick+0x14c>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	4a3e      	ldr	r2, [pc, #248]	; (8007588 <xTaskIncrementTick+0x150>)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4b3d      	ldr	r3, [pc, #244]	; (800758c <xTaskIncrementTick+0x154>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	4a3c      	ldr	r2, [pc, #240]	; (800758c <xTaskIncrementTick+0x154>)
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	f000 fa9f 	bl	80079e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074a2:	4b3b      	ldr	r3, [pc, #236]	; (8007590 <xTaskIncrementTick+0x158>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d348      	bcc.n	800753e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <xTaskIncrementTick+0x14c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b6:	4b36      	ldr	r3, [pc, #216]	; (8007590 <xTaskIncrementTick+0x158>)
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	601a      	str	r2, [r3, #0]
					break;
 80074be:	e03e      	b.n	800753e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c0:	4b30      	ldr	r3, [pc, #192]	; (8007584 <xTaskIncrementTick+0x14c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d203      	bcs.n	80074e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074d8:	4a2d      	ldr	r2, [pc, #180]	; (8007590 <xTaskIncrementTick+0x158>)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074de:	e02e      	b.n	800753e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fcbe 	bl	8005e66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3318      	adds	r3, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fcb5 	bl	8005e66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	4b23      	ldr	r3, [pc, #140]	; (8007594 <xTaskIncrementTick+0x15c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	4a22      	ldr	r2, [pc, #136]	; (8007594 <xTaskIncrementTick+0x15c>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <xTaskIncrementTick+0x160>)
 800751c:	441a      	add	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7fe fc41 	bl	8005dac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	4b1b      	ldr	r3, [pc, #108]	; (800759c <xTaskIncrementTick+0x164>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	429a      	cmp	r2, r3
 8007536:	d3b9      	bcc.n	80074ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753c:	e7b6      	b.n	80074ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800753e:	4b17      	ldr	r3, [pc, #92]	; (800759c <xTaskIncrementTick+0x164>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	4914      	ldr	r1, [pc, #80]	; (8007598 <xTaskIncrementTick+0x160>)
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d901      	bls.n	800755a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800755a:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <xTaskIncrementTick+0x168>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007562:	2301      	movs	r3, #1
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e004      	b.n	8007572 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <xTaskIncrementTick+0x16c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <xTaskIncrementTick+0x16c>)
 8007570:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007572:	697b      	ldr	r3, [r7, #20]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	2400076c 	.word	0x2400076c
 8007580:	24000748 	.word	0x24000748
 8007584:	240006fc 	.word	0x240006fc
 8007588:	24000700 	.word	0x24000700
 800758c:	2400075c 	.word	0x2400075c
 8007590:	24000764 	.word	0x24000764
 8007594:	2400074c 	.word	0x2400074c
 8007598:	24000648 	.word	0x24000648
 800759c:	24000644 	.word	0x24000644
 80075a0:	24000758 	.word	0x24000758
 80075a4:	24000754 	.word	0x24000754

080075a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075ae:	4b27      	ldr	r3, [pc, #156]	; (800764c <vTaskSwitchContext+0xa4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075b6:	4b26      	ldr	r3, [pc, #152]	; (8007650 <vTaskSwitchContext+0xa8>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075bc:	e03f      	b.n	800763e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80075be:	4b24      	ldr	r3, [pc, #144]	; (8007650 <vTaskSwitchContext+0xa8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c4:	4b23      	ldr	r3, [pc, #140]	; (8007654 <vTaskSwitchContext+0xac>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	fab3 f383 	clz	r3, r3
 80075d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	f1c3 031f 	rsb	r3, r3, #31
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	491f      	ldr	r1, [pc, #124]	; (8007658 <vTaskSwitchContext+0xb0>)
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <vTaskSwitchContext+0x5c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <vTaskSwitchContext+0x5a>
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <vTaskSwitchContext+0xb0>)
 8007610:	4413      	add	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3308      	adds	r3, #8
 8007626:	429a      	cmp	r2, r3
 8007628:	d104      	bne.n	8007634 <vTaskSwitchContext+0x8c>
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4a08      	ldr	r2, [pc, #32]	; (800765c <vTaskSwitchContext+0xb4>)
 800763c:	6013      	str	r3, [r2, #0]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	2400076c 	.word	0x2400076c
 8007650:	24000758 	.word	0x24000758
 8007654:	2400074c 	.word	0x2400074c
 8007658:	24000648 	.word	0x24000648
 800765c:	24000644 	.word	0x24000644

08007660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007686:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <vTaskPlaceOnEventList+0x44>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3318      	adds	r3, #24
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fe fbb0 	bl	8005df4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007694:	2101      	movs	r1, #1
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	f000 fb7e 	bl	8007d98 <prvAddCurrentTaskToDelayedList>
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	24000644 	.word	0x24000644

080076a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	60fb      	str	r3, [r7, #12]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3318      	adds	r3, #24
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe fbc4 	bl	8005e66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076de:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <xTaskRemoveFromEventList+0xac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d11c      	bne.n	8007720 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbbb 	bl	8005e66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	4b17      	ldr	r3, [pc, #92]	; (8007758 <xTaskRemoveFromEventList+0xb0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	4a16      	ldr	r2, [pc, #88]	; (8007758 <xTaskRemoveFromEventList+0xb0>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a13      	ldr	r2, [pc, #76]	; (800775c <xTaskRemoveFromEventList+0xb4>)
 8007710:	441a      	add	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f7fe fb47 	bl	8005dac <vListInsertEnd>
 800771e:	e005      	b.n	800772c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	3318      	adds	r3, #24
 8007724:	4619      	mov	r1, r3
 8007726:	480e      	ldr	r0, [pc, #56]	; (8007760 <xTaskRemoveFromEventList+0xb8>)
 8007728:	f7fe fb40 	bl	8005dac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <xTaskRemoveFromEventList+0xbc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	429a      	cmp	r2, r3
 8007738:	d905      	bls.n	8007746 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800773e:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <xTaskRemoveFromEventList+0xc0>)
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e001      	b.n	800774a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800774a:	697b      	ldr	r3, [r7, #20]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	2400076c 	.word	0x2400076c
 8007758:	2400074c 	.word	0x2400074c
 800775c:	24000648 	.word	0x24000648
 8007760:	24000704 	.word	0x24000704
 8007764:	24000644 	.word	0x24000644
 8007768:	24000758 	.word	0x24000758

0800776c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <vTaskInternalSetTimeOutState+0x24>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <vTaskInternalSetTimeOutState+0x28>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	605a      	str	r2, [r3, #4]
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	2400075c 	.word	0x2400075c
 8007794:	24000748 	.word	0x24000748

08007798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	613b      	str	r3, [r7, #16]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077da:	f000 fc73 	bl	80080c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077de:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <xTaskCheckForTimeOut+0xbc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d102      	bne.n	80077fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e023      	b.n	8007846 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <xTaskCheckForTimeOut+0xc0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d007      	beq.n	800781a <xTaskCheckForTimeOut+0x82>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e015      	b.n	8007846 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	429a      	cmp	r2, r3
 8007822:	d20b      	bcs.n	800783c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff9b 	bl	800776c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	e004      	b.n	8007846 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007842:	2301      	movs	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007846:	f000 fc6d 	bl	8008124 <vPortExitCritical>

	return xReturn;
 800784a:	69fb      	ldr	r3, [r7, #28]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	24000748 	.word	0x24000748
 8007858:	2400075c 	.word	0x2400075c

0800785c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007860:	4b03      	ldr	r3, [pc, #12]	; (8007870 <vTaskMissedYield+0x14>)
 8007862:	2201      	movs	r2, #1
 8007864:	601a      	str	r2, [r3, #0]
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	24000758 	.word	0x24000758

08007874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800787c:	f000 f852 	bl	8007924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <prvIdleTask+0x28>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d9f9      	bls.n	800787c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <prvIdleTask+0x2c>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007898:	e7f0      	b.n	800787c <prvIdleTask+0x8>
 800789a:	bf00      	nop
 800789c:	24000648 	.word	0x24000648
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e00c      	b.n	80078ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <prvInitialiseTaskLists+0x60>)
 80078bc:	4413      	add	r3, r2
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fa47 	bl	8005d52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	d9ef      	bls.n	80078b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078d0:	480d      	ldr	r0, [pc, #52]	; (8007908 <prvInitialiseTaskLists+0x64>)
 80078d2:	f7fe fa3e 	bl	8005d52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078d6:	480d      	ldr	r0, [pc, #52]	; (800790c <prvInitialiseTaskLists+0x68>)
 80078d8:	f7fe fa3b 	bl	8005d52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078dc:	480c      	ldr	r0, [pc, #48]	; (8007910 <prvInitialiseTaskLists+0x6c>)
 80078de:	f7fe fa38 	bl	8005d52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078e2:	480c      	ldr	r0, [pc, #48]	; (8007914 <prvInitialiseTaskLists+0x70>)
 80078e4:	f7fe fa35 	bl	8005d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078e8:	480b      	ldr	r0, [pc, #44]	; (8007918 <prvInitialiseTaskLists+0x74>)
 80078ea:	f7fe fa32 	bl	8005d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <prvInitialiseTaskLists+0x78>)
 80078f0:	4a05      	ldr	r2, [pc, #20]	; (8007908 <prvInitialiseTaskLists+0x64>)
 80078f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <prvInitialiseTaskLists+0x7c>)
 80078f6:	4a05      	ldr	r2, [pc, #20]	; (800790c <prvInitialiseTaskLists+0x68>)
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	24000648 	.word	0x24000648
 8007908:	240006d4 	.word	0x240006d4
 800790c:	240006e8 	.word	0x240006e8
 8007910:	24000704 	.word	0x24000704
 8007914:	24000718 	.word	0x24000718
 8007918:	24000730 	.word	0x24000730
 800791c:	240006fc 	.word	0x240006fc
 8007920:	24000700 	.word	0x24000700

08007924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800792a:	e019      	b.n	8007960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800792c:	f000 fbca 	bl	80080c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007930:	4b10      	ldr	r3, [pc, #64]	; (8007974 <prvCheckTasksWaitingTermination+0x50>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fa92 	bl	8005e66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007942:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <prvCheckTasksWaitingTermination+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	4a0b      	ldr	r2, [pc, #44]	; (8007978 <prvCheckTasksWaitingTermination+0x54>)
 800794a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3b01      	subs	r3, #1
 8007952:	4a0a      	ldr	r2, [pc, #40]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 8007954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007956:	f000 fbe5 	bl	8008124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f810 	bl	8007980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e1      	bne.n	800792c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	24000718 	.word	0x24000718
 8007978:	24000744 	.word	0x24000744
 800797c:	2400072c 	.word	0x2400072c

08007980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fd82 	bl	80084a0 <vPortFree>
				vPortFree( pxTCB );
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fd7f 	bl	80084a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079a2:	e018      	b.n	80079d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d103      	bne.n	80079b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fd76 	bl	80084a0 <vPortFree>
	}
 80079b4:	e00f      	b.n	80079d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d00a      	beq.n	80079d6 <prvDeleteTCB+0x56>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	60fb      	str	r3, [r7, #12]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <prvDeleteTCB+0x54>
	}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <prvResetNextTaskUnblockTime+0x38>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <prvResetNextTaskUnblockTime+0x3c>)
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079f8:	e008      	b.n	8007a0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fa:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <prvResetNextTaskUnblockTime+0x38>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <prvResetNextTaskUnblockTime+0x3c>)
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	240006fc 	.word	0x240006fc
 8007a1c:	24000764 	.word	0x24000764

08007a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <xTaskGetSchedulerState+0x34>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	e008      	b.n	8007a46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a34:	4b08      	ldr	r3, [pc, #32]	; (8007a58 <xTaskGetSchedulerState+0x38>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	607b      	str	r3, [r7, #4]
 8007a40:	e001      	b.n	8007a46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a42:	2300      	movs	r3, #0
 8007a44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a46:	687b      	ldr	r3, [r7, #4]
	}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	24000750 	.word	0x24000750
 8007a58:	2400076c 	.word	0x2400076c

08007a5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d05e      	beq.n	8007b30 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a76:	4b31      	ldr	r3, [pc, #196]	; (8007b3c <xTaskPriorityInherit+0xe0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d24e      	bcs.n	8007b1e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	db06      	blt.n	8007a96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a88:	4b2c      	ldr	r3, [pc, #176]	; (8007b3c <xTaskPriorityInherit+0xe0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f1c3 0207 	rsb	r2, r3, #7
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6959      	ldr	r1, [r3, #20]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <xTaskPriorityInherit+0xe4>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d12f      	bne.n	8007b0e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe f9d7 	bl	8005e66 <uxListRemove>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	43da      	mvns	r2, r3
 8007aca:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <xTaskPriorityInherit+0xe8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <xTaskPriorityInherit+0xe8>)
 8007ad2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ad4:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <xTaskPriorityInherit+0xe0>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	4b17      	ldr	r3, [pc, #92]	; (8007b44 <xTaskPriorityInherit+0xe8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <xTaskPriorityInherit+0xe8>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <xTaskPriorityInherit+0xe4>)
 8007afe:	441a      	add	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe f950 	bl	8005dac <vListInsertEnd>
 8007b0c:	e004      	b.n	8007b18 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <xTaskPriorityInherit+0xe0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e008      	b.n	8007b30 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <xTaskPriorityInherit+0xe0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d201      	bcs.n	8007b30 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b30:	68fb      	ldr	r3, [r7, #12]
	}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	24000644 	.word	0x24000644
 8007b40:	24000648 	.word	0x24000648
 8007b44:	2400074c 	.word	0x2400074c

08007b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d06e      	beq.n	8007c3c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b5e:	4b3a      	ldr	r3, [pc, #232]	; (8007c48 <xTaskPriorityDisinherit+0x100>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d00a      	beq.n	8007b7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	60fb      	str	r3, [r7, #12]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	1e5a      	subs	r2, r3, #1
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d044      	beq.n	8007c3c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d140      	bne.n	8007c3c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe f951 	bl	8005e66 <uxListRemove>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d115      	bne.n	8007bf6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bce:	491f      	ldr	r1, [pc, #124]	; (8007c4c <xTaskPriorityDisinherit+0x104>)
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <xTaskPriorityDisinherit+0xae>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	2201      	movs	r2, #1
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	43da      	mvns	r2, r3
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <xTaskPriorityDisinherit+0x108>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <xTaskPriorityDisinherit+0x108>)
 8007bf4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	f1c3 0207 	rsb	r2, r3, #7
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	2201      	movs	r2, #1
 8007c10:	409a      	lsls	r2, r3
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <xTaskPriorityDisinherit+0x108>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <xTaskPriorityDisinherit+0x108>)
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <xTaskPriorityDisinherit+0x104>)
 8007c2a:	441a      	add	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fe f8ba 	bl	8005dac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c3c:	697b      	ldr	r3, [r7, #20]
	}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	24000644 	.word	0x24000644
 8007c4c:	24000648 	.word	0x24000648
 8007c50:	2400074c 	.word	0x2400074c

08007c54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c62:	2301      	movs	r3, #1
 8007c64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d077      	beq.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60fb      	str	r3, [r7, #12]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d902      	bls.n	8007c9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e002      	b.n	8007ca0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d058      	beq.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d153      	bne.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d10a      	bne.n	8007cd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60bb      	str	r3, [r7, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db04      	blt.n	8007cf2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f1c3 0207 	rsb	r2, r3, #7
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	6959      	ldr	r1, [r3, #20]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a19      	ldr	r2, [pc, #100]	; (8007d68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d02:	4413      	add	r3, r2
 8007d04:	4299      	cmp	r1, r3
 8007d06:	d129      	bne.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe f8aa 	bl	8005e66 <uxListRemove>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43da      	mvns	r2, r3
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	2201      	movs	r2, #1
 8007d34:	409a      	lsls	r2, r3
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4a06      	ldr	r2, [pc, #24]	; (8007d68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d4e:	441a      	add	r2, r3
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe f828 	bl	8005dac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d5c:	bf00      	nop
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	24000644 	.word	0x24000644
 8007d68:	24000648 	.word	0x24000648
 8007d6c:	2400074c 	.word	0x2400074c

08007d70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d82:	3201      	adds	r2, #1
 8007d84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d88:	681b      	ldr	r3, [r3, #0]
	}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	24000644 	.word	0x24000644

08007d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007da2:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007da8:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe f859 	bl	8005e66 <uxListRemove>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43da      	mvns	r2, r3
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d10a      	bne.n	8007df0 <prvAddCurrentTaskToDelayedList+0x58>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d007      	beq.n	8007df0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	481a      	ldr	r0, [pc, #104]	; (8007e54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dea:	f7fd ffdf 	bl	8005dac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dee:	e026      	b.n	8007e3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007df8:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d209      	bcs.n	8007e1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e08:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4619      	mov	r1, r3
 8007e14:	4610      	mov	r0, r2
 8007e16:	f7fd ffed 	bl	8005df4 <vListInsert>
}
 8007e1a:	e010      	b.n	8007e3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f7fd ffe3 	bl	8005df4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d202      	bcs.n	8007e3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6013      	str	r3, [r2, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	24000748 	.word	0x24000748
 8007e4c:	24000644 	.word	0x24000644
 8007e50:	2400074c 	.word	0x2400074c
 8007e54:	24000730 	.word	0x24000730
 8007e58:	24000700 	.word	0x24000700
 8007e5c:	240006fc 	.word	0x240006fc
 8007e60:	24000764 	.word	0x24000764

08007e64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e94:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <pxPortInitialiseStack+0x64>)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b14      	subs	r3, #20
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f06f 0202 	mvn.w	r2, #2
 8007eb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3b20      	subs	r3, #32
 8007eb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eba:	68fb      	ldr	r3, [r7, #12]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	08007ecd 	.word	0x08007ecd

08007ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ed6:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <prvTaskExitError+0x54>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d00a      	beq.n	8007ef6 <prvTaskExitError+0x2a>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <prvTaskExitError+0x28>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60bb      	str	r3, [r7, #8]
}
 8007f08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f0a:	bf00      	nop
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0fc      	beq.n	8007f0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	24000024 	.word	0x24000024
	...

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	24000644 	.word	0x24000644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	; (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f86:	4b46      	ldr	r3, [pc, #280]	; (80080a0 <xPortStartScheduler+0x120>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <xPortStartScheduler+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10a      	bne.n	8007fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fa6:	4b3e      	ldr	r3, [pc, #248]	; (80080a0 <xPortStartScheduler+0x120>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a3f      	ldr	r2, [pc, #252]	; (80080a8 <xPortStartScheduler+0x128>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10a      	bne.n	8007fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fc6:	4b39      	ldr	r3, [pc, #228]	; (80080ac <xPortStartScheduler+0x12c>)
 8007fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	4b31      	ldr	r3, [pc, #196]	; (80080b0 <xPortStartScheduler+0x130>)
 8007fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff4:	e009      	b.n	800800a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ff6:	4b2f      	ldr	r3, [pc, #188]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d0ef      	beq.n	8007ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008016:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <xPortStartScheduler+0x134>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1c3 0307 	rsb	r3, r3, #7
 800801e:	2b04      	cmp	r3, #4
 8008020:	d00a      	beq.n	8008038 <xPortStartScheduler+0xb8>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60bb      	str	r3, [r7, #8]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008038:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <xPortStartScheduler+0x134>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <xPortStartScheduler+0x134>)
 8008040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <xPortStartScheduler+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800804a:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <xPortStartScheduler+0x134>)
 800804c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008056:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <xPortStartScheduler+0x138>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <xPortStartScheduler+0x138>)
 800805c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <xPortStartScheduler+0x138>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <xPortStartScheduler+0x138>)
 8008068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800806e:	f000 f8dd 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <xPortStartScheduler+0x13c>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008078:	f000 f8fc 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <xPortStartScheduler+0x140>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <xPortStartScheduler+0x140>)
 8008082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008088:	f7ff ff66 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800808c:	f7ff fa8c 	bl	80075a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008090:	f7ff ff1c 	bl	8007ecc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	e000ed00 	.word	0xe000ed00
 80080a4:	410fc271 	.word	0x410fc271
 80080a8:	410fc270 	.word	0x410fc270
 80080ac:	e000e400 	.word	0xe000e400
 80080b0:	24000770 	.word	0x24000770
 80080b4:	24000774 	.word	0x24000774
 80080b8:	e000ed20 	.word	0xe000ed20
 80080bc:	24000024 	.word	0x24000024
 80080c0:	e000ef34 	.word	0xe000ef34

080080c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	607b      	str	r3, [r7, #4]
}
 80080dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <vPortEnterCritical+0x58>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a0d      	ldr	r2, [pc, #52]	; (800811c <vPortEnterCritical+0x58>)
 80080e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <vPortEnterCritical+0x58>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10f      	bne.n	8008110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <vPortEnterCritical+0x5c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <vPortEnterCritical+0x4c>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vPortEnterCritical+0x4a>
	}
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	24000024 	.word	0x24000024
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <vPortExitCritical+0x50>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vPortExitCritical+0x24>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	607b      	str	r3, [r7, #4]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <vPortExitCritical+0x50>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	4a09      	ldr	r2, [pc, #36]	; (8008174 <vPortExitCritical+0x50>)
 8008150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <vPortExitCritical+0x42>
 800815a:	2300      	movs	r3, #0
 800815c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	f383 8811 	msr	BASEPRI, r3
}
 8008164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	24000024 	.word	0x24000024
	...

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f7ff f9fa 	bl	80075a8 <vTaskSwitchContext>
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f380 8811 	msr	BASEPRI, r0
 80081bc:	bc09      	pop	{r0, r3}
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	f01e 0f10 	tst.w	lr, #16
 80081ca:	bf08      	it	eq
 80081cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d0:	f380 8809 	msr	PSP, r0
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst>:
 80081e0:	24000644 	.word	0x24000644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008202:	f7ff f919 	bl	8007438 <xTaskIncrementTick>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <SysTick_Handler+0x40>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	; (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	24000000 	.word	0x24000000
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d914      	bls.n	80082c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <vPortValidateInterruptPriority+0x70>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <vPortValidateInterruptPriority+0x74>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20a      	bcs.n	80082c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <vPortValidateInterruptPriority+0x78>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <vPortValidateInterruptPriority+0x7c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d90a      	bls.n	80082ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	603b      	str	r3, [r7, #0]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <vPortValidateInterruptPriority+0x60>
	}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e3f0 	.word	0xe000e3f0
 80082fc:	24000770 	.word	0x24000770
 8008300:	e000ed0c 	.word	0xe000ed0c
 8008304:	24000774 	.word	0x24000774

08008308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008314:	f7fe ffc4 	bl	80072a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008318:	4b5b      	ldr	r3, [pc, #364]	; (8008488 <pvPortMalloc+0x180>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008320:	f000 f920 	bl	8008564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008324:	4b59      	ldr	r3, [pc, #356]	; (800848c <pvPortMalloc+0x184>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8093 	bne.w	8008458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01d      	beq.n	8008374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008338:	2208      	movs	r2, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d014      	beq.n	8008374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f023 0307 	bic.w	r3, r3, #7
 8008350:	3308      	adds	r3, #8
 8008352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <pvPortMalloc+0x6c>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	617b      	str	r3, [r7, #20]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d06e      	beq.n	8008458 <pvPortMalloc+0x150>
 800837a:	4b45      	ldr	r3, [pc, #276]	; (8008490 <pvPortMalloc+0x188>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d869      	bhi.n	8008458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008384:	4b43      	ldr	r3, [pc, #268]	; (8008494 <pvPortMalloc+0x18c>)
 8008386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008388:	4b42      	ldr	r3, [pc, #264]	; (8008494 <pvPortMalloc+0x18c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800838e:	e004      	b.n	800839a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <pvPortMalloc+0xa4>
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f1      	bne.n	8008390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083ac:	4b36      	ldr	r3, [pc, #216]	; (8008488 <pvPortMalloc+0x180>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d050      	beq.n	8008458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2208      	movs	r2, #8
 80083bc:	4413      	add	r3, r2
 80083be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	2308      	movs	r3, #8
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d91f      	bls.n	8008418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <pvPortMalloc+0xf8>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	613b      	str	r3, [r7, #16]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008412:	69b8      	ldr	r0, [r7, #24]
 8008414:	f000 f908 	bl	8008628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <pvPortMalloc+0x188>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <pvPortMalloc+0x188>)
 8008424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008426:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <pvPortMalloc+0x188>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <pvPortMalloc+0x190>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d203      	bcs.n	800843a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008432:	4b17      	ldr	r3, [pc, #92]	; (8008490 <pvPortMalloc+0x188>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <pvPortMalloc+0x190>)
 8008438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <pvPortMalloc+0x184>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	431a      	orrs	r2, r3
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <pvPortMalloc+0x194>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a11      	ldr	r2, [pc, #68]	; (800849c <pvPortMalloc+0x194>)
 8008456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008458:	f7fe ff30 	bl	80072bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <pvPortMalloc+0x174>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <pvPortMalloc+0x172>
	return pvReturn;
 800847c:	69fb      	ldr	r3, [r7, #28]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	24004380 	.word	0x24004380
 800848c:	24004394 	.word	0x24004394
 8008490:	24004384 	.word	0x24004384
 8008494:	24004378 	.word	0x24004378
 8008498:	24004388 	.word	0x24004388
 800849c:	2400438c 	.word	0x2400438c

080084a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04d      	beq.n	800854e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084b2:	2308      	movs	r3, #8
 80084b4:	425b      	negs	r3, r3
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4413      	add	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	4b24      	ldr	r3, [pc, #144]	; (8008558 <vPortFree+0xb8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <vPortFree+0x44>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60fb      	str	r3, [r7, #12]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <vPortFree+0x62>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60bb      	str	r3, [r7, #8]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <vPortFree+0xb8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01e      	beq.n	800854e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11a      	bne.n	800854e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0e      	ldr	r3, [pc, #56]	; (8008558 <vPortFree+0xb8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008528:	f7fe feba 	bl	80072a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <vPortFree+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4413      	add	r3, r2
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <vPortFree+0xbc>)
 8008538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f000 f874 	bl	8008628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <vPortFree+0xc0>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	4a06      	ldr	r2, [pc, #24]	; (8008560 <vPortFree+0xc0>)
 8008548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800854a:	f7fe feb7 	bl	80072bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	24004394 	.word	0x24004394
 800855c:	24004384 	.word	0x24004384
 8008560:	24004390 	.word	0x24004390

08008564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800856a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800856e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008570:	4b27      	ldr	r3, [pc, #156]	; (8008610 <prvHeapInit+0xac>)
 8008572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3307      	adds	r3, #7
 8008582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <prvHeapInit+0xac>)
 8008594:	4413      	add	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <prvHeapInit+0xb0>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <prvHeapInit+0xb0>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085b0:	2208      	movs	r2, #8
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4a15      	ldr	r2, [pc, #84]	; (8008618 <prvHeapInit+0xb4>)
 80085c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <prvHeapInit+0xb4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ce:	4b12      	ldr	r3, [pc, #72]	; (8008618 <prvHeapInit+0xb4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085e4:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <prvHeapInit+0xb4>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <prvHeapInit+0xb8>)
 80085f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4a09      	ldr	r2, [pc, #36]	; (8008620 <prvHeapInit+0xbc>)
 80085fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085fc:	4b09      	ldr	r3, [pc, #36]	; (8008624 <prvHeapInit+0xc0>)
 80085fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	24000778 	.word	0x24000778
 8008614:	24004378 	.word	0x24004378
 8008618:	24004380 	.word	0x24004380
 800861c:	24004388 	.word	0x24004388
 8008620:	24004384 	.word	0x24004384
 8008624:	24004394 	.word	0x24004394

08008628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <prvInsertBlockIntoFreeList+0xac>)
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e002      	b.n	800863c <prvInsertBlockIntoFreeList+0x14>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d8f7      	bhi.n	8008636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	4413      	add	r3, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d108      	bne.n	800866a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d118      	bne.n	80086b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d00d      	beq.n	80086a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	441a      	add	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e008      	b.n	80086b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086a6:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <prvInsertBlockIntoFreeList+0xb0>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e003      	b.n	80086b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d002      	beq.n	80086c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	24004378 	.word	0x24004378
 80086d8:	24004380 	.word	0x24004380

080086dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	330c      	adds	r3, #12
 80086ec:	461a      	mov	r2, r3
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f002 f9d3 	bl	800aa9c <tcpip_send_msg_wait_sem>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80086fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008708:	e001      	b.n	800870e <netconn_apimsg+0x32>
  }
  return err;
 800870a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	; 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	603a      	str	r2, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
 8008724:	460b      	mov	r3, r1
 8008726:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 ffe7 	bl	8009700 <netconn_alloc>
 8008732:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	d054      	beq.n	80087e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	4619      	mov	r1, r3
 8008748:	4829      	ldr	r0, [pc, #164]	; (80087f0 <netconn_new_with_proto_and_callback+0xd8>)
 800874a:	f7ff ffc7 	bl	80086dc <netconn_apimsg>
 800874e:	4603      	mov	r3, r0
 8008750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008754:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008758:	2b00      	cmp	r3, #0
 800875a:	d043      	beq.n	80087e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <netconn_new_with_proto_and_callback+0x58>
 8008764:	4b23      	ldr	r3, [pc, #140]	; (80087f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008766:	22a3      	movs	r2, #163	; 0xa3
 8008768:	4923      	ldr	r1, [pc, #140]	; (80087f8 <netconn_new_with_proto_and_callback+0xe0>)
 800876a:	4824      	ldr	r0, [pc, #144]	; (80087fc <netconn_new_with_proto_and_callback+0xe4>)
 800876c:	f00d fcc4 	bl	80160f8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	3310      	adds	r3, #16
 8008774:	4618      	mov	r0, r3
 8008776:	f00d fa86 	bl	8015c86 <sys_mbox_valid>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d105      	bne.n	800878c <netconn_new_with_proto_and_callback+0x74>
 8008780:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008782:	22a4      	movs	r2, #164	; 0xa4
 8008784:	491e      	ldr	r1, [pc, #120]	; (8008800 <netconn_new_with_proto_and_callback+0xe8>)
 8008786:	481d      	ldr	r0, [pc, #116]	; (80087fc <netconn_new_with_proto_and_callback+0xe4>)
 8008788:	f00d fcb6 	bl	80160f8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	3314      	adds	r3, #20
 8008790:	4618      	mov	r0, r3
 8008792:	f00d fa78 	bl	8015c86 <sys_mbox_valid>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <netconn_new_with_proto_and_callback+0x90>
 800879c:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <netconn_new_with_proto_and_callback+0xdc>)
 800879e:	22a6      	movs	r2, #166	; 0xa6
 80087a0:	4918      	ldr	r1, [pc, #96]	; (8008804 <netconn_new_with_proto_and_callback+0xec>)
 80087a2:	4816      	ldr	r0, [pc, #88]	; (80087fc <netconn_new_with_proto_and_callback+0xe4>)
 80087a4:	f00d fca8 	bl	80160f8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	330c      	adds	r3, #12
 80087ac:	4618      	mov	r0, r3
 80087ae:	f00d fafb 	bl	8015da8 <sys_sem_valid>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <netconn_new_with_proto_and_callback+0xac>
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <netconn_new_with_proto_and_callback+0xdc>)
 80087ba:	22a9      	movs	r2, #169	; 0xa9
 80087bc:	4912      	ldr	r1, [pc, #72]	; (8008808 <netconn_new_with_proto_and_callback+0xf0>)
 80087be:	480f      	ldr	r0, [pc, #60]	; (80087fc <netconn_new_with_proto_and_callback+0xe4>)
 80087c0:	f00d fc9a 	bl	80160f8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	330c      	adds	r3, #12
 80087c8:	4618      	mov	r0, r3
 80087ca:	f00d fae0 	bl	8015d8e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	3310      	adds	r3, #16
 80087d2:	4618      	mov	r0, r3
 80087d4:	f00d f9d0 	bl	8015b78 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80087d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087da:	2007      	movs	r0, #7
 80087dc:	f002 ffc4 	bl	800b768 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	e000      	b.n	80087e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3730      	adds	r7, #48	; 0x30
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	080096d5 	.word	0x080096d5
 80087f4:	08017408 	.word	0x08017408
 80087f8:	0801743c 	.word	0x0801743c
 80087fc:	08017460 	.word	0x08017460
 8008800:	08017488 	.word	0x08017488
 8008804:	080174a0 	.word	0x080174a0
 8008808:	080174c4 	.word	0x080174c4

0800880c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	; 0x30
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e014      	b.n	8008848 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008822:	2329      	movs	r3, #41	; 0x29
 8008824:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4619      	mov	r1, r3
 800882c:	4808      	ldr	r0, [pc, #32]	; (8008850 <netconn_prepare_delete+0x44>)
 800882e:	f7ff ff55 	bl	80086dc <netconn_apimsg>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008838:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <netconn_prepare_delete+0x3a>
    return err;
 8008840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008844:	e000      	b.n	8008848 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3730      	adds	r7, #48	; 0x30
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	08009c41 	.word	0x08009c41

08008854 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <netconn_delete+0x12>
    return ERR_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e00d      	b.n	8008882 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ffd0 	bl	800880c <netconn_prepare_delete>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <netconn_delete+0x2a>
    netconn_free(conn);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 ffaf 	bl	80097dc <netconn_free>
  }
  return err;
 800887e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08e      	sub	sp, #56	; 0x38
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <netconn_bind+0x28>
 80088a0:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <netconn_bind+0x5c>)
 80088a2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80088a6:	4911      	ldr	r1, [pc, #68]	; (80088ec <netconn_bind+0x60>)
 80088a8:	4811      	ldr	r0, [pc, #68]	; (80088f0 <netconn_bind+0x64>)
 80088aa:	f00d fc25 	bl	80160f8 <iprintf>
 80088ae:	f06f 030f 	mvn.w	r3, #15
 80088b2:	e015      	b.n	80088e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <netconn_bind+0x68>)
 80088bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	4619      	mov	r1, r3
 80088d0:	4809      	ldr	r0, [pc, #36]	; (80088f8 <netconn_bind+0x6c>)
 80088d2:	f7ff ff03 	bl	80086dc <netconn_apimsg>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80088dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3738      	adds	r7, #56	; 0x38
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	08017408 	.word	0x08017408
 80088ec:	08017540 	.word	0x08017540
 80088f0:	08017460 	.word	0x08017460
 80088f4:	0801aa08 	.word	0x0801aa08
 80088f8:	08009e09 	.word	0x08009e09

080088fc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08e      	sub	sp, #56	; 0x38
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <netconn_connect+0x28>
 8008910:	4b11      	ldr	r3, [pc, #68]	; (8008958 <netconn_connect+0x5c>)
 8008912:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008916:	4911      	ldr	r1, [pc, #68]	; (800895c <netconn_connect+0x60>)
 8008918:	4811      	ldr	r0, [pc, #68]	; (8008960 <netconn_connect+0x64>)
 800891a:	f00d fbed 	bl	80160f8 <iprintf>
 800891e:	f06f 030f 	mvn.w	r3, #15
 8008922:	e015      	b.n	8008950 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800892a:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <netconn_connect+0x68>)
 800892c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800893a:	f107 0314 	add.w	r3, r7, #20
 800893e:	4619      	mov	r1, r3
 8008940:	4809      	ldr	r0, [pc, #36]	; (8008968 <netconn_connect+0x6c>)
 8008942:	f7ff fecb 	bl	80086dc <netconn_apimsg>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800894c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008950:	4618      	mov	r0, r3
 8008952:	3738      	adds	r7, #56	; 0x38
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	08017408 	.word	0x08017408
 800895c:	0801757c 	.word	0x0801757c
 8008960:	08017460 	.word	0x08017460
 8008964:	0801aa08 	.word	0x0801aa08
 8008968:	08009f9d 	.word	0x08009f9d

0800896c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d109      	bne.n	8008998 <netconn_recv_data+0x2c>
 8008984:	4b58      	ldr	r3, [pc, #352]	; (8008ae8 <netconn_recv_data+0x17c>)
 8008986:	f44f 7212 	mov.w	r2, #584	; 0x248
 800898a:	4958      	ldr	r1, [pc, #352]	; (8008aec <netconn_recv_data+0x180>)
 800898c:	4858      	ldr	r0, [pc, #352]	; (8008af0 <netconn_recv_data+0x184>)
 800898e:	f00d fbb3 	bl	80160f8 <iprintf>
 8008992:	f06f 030f 	mvn.w	r3, #15
 8008996:	e0a2      	b.n	8008ade <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <netconn_recv_data+0x4c>
 80089a4:	4b50      	ldr	r3, [pc, #320]	; (8008ae8 <netconn_recv_data+0x17c>)
 80089a6:	f240 224a 	movw	r2, #586	; 0x24a
 80089aa:	4952      	ldr	r1, [pc, #328]	; (8008af4 <netconn_recv_data+0x188>)
 80089ac:	4850      	ldr	r0, [pc, #320]	; (8008af0 <netconn_recv_data+0x184>)
 80089ae:	f00d fba3 	bl	80160f8 <iprintf>
 80089b2:	f06f 030f 	mvn.w	r3, #15
 80089b6:	e092      	b.n	8008ade <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3310      	adds	r3, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	f00d f962 	bl	8015c86 <sys_mbox_valid>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10e      	bne.n	80089e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fad4 	bl	8008f76 <netconn_err>
 80089ce:	4603      	mov	r3, r0
 80089d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80089d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80089da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80089de:	e07e      	b.n	8008ade <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80089e0:	f06f 030a 	mvn.w	r3, #10
 80089e4:	e07b      	b.n	8008ade <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	7f1b      	ldrb	r3, [r3, #28]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10f      	bne.n	8008a12 <netconn_recv_data+0xa6>
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7f1b      	ldrb	r3, [r3, #28]
 8008a00:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d023      	beq.n	8008a5a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3310      	adds	r3, #16
 8008a16:	f107 0218 	add.w	r2, r7, #24
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f00d f916 	bl	8015c4e <sys_arch_mbox_tryfetch>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d11f      	bne.n	8008a6a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 faa3 	bl	8008f76 <netconn_err>
 8008a30:	4603      	mov	r3, r0
 8008a32:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008a34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008a3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008a40:	e04d      	b.n	8008ade <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	7f1b      	ldrb	r3, [r3, #28]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008a4e:	f06f 030a 	mvn.w	r3, #10
 8008a52:	e044      	b.n	8008ade <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008a54:	f06f 0306 	mvn.w	r3, #6
 8008a58:	e041      	b.n	8008ade <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	f107 0118 	add.w	r1, r7, #24
 8008a62:	2200      	movs	r2, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f00d f8b3 	bl	8015bd0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d117      	bne.n	8008aa6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f107 0217 	add.w	r2, r7, #23
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 faca 	bl	8009018 <lwip_netconn_is_err_msg>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a8e:	f113 0f0f 	cmn.w	r3, #15
 8008a92:	d101      	bne.n	8008a98 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e022      	b.n	8008ade <netconn_recv_data+0x172>
      }
      return err;
 8008a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a9c:	e01f      	b.n	8008ade <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	891b      	ldrh	r3, [r3, #8]
 8008aa2:	83fb      	strh	r3, [r7, #30]
 8008aa4:	e00d      	b.n	8008ac2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <netconn_recv_data+0x14e>
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <netconn_recv_data+0x17c>)
 8008aae:	f240 2291 	movw	r2, #657	; 0x291
 8008ab2:	4911      	ldr	r1, [pc, #68]	; (8008af8 <netconn_recv_data+0x18c>)
 8008ab4:	480e      	ldr	r0, [pc, #56]	; (8008af0 <netconn_recv_data+0x184>)
 8008ab6:	f00d fb1f 	bl	80160f8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <netconn_recv_data+0x16a>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	8bfa      	ldrh	r2, [r7, #30]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08017408 	.word	0x08017408
 8008aec:	08017620 	.word	0x08017620
 8008af0:	08017460 	.word	0x08017460
 8008af4:	08017640 	.word	0x08017640
 8008af8:	0801765c 	.word	0x0801765c

08008afc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <netconn_tcp_recvd_msg+0x1e>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d009      	beq.n	8008b2e <netconn_tcp_recvd_msg+0x32>
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <netconn_tcp_recvd_msg+0x50>)
 8008b1c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008b20:	490b      	ldr	r1, [pc, #44]	; (8008b50 <netconn_tcp_recvd_msg+0x54>)
 8008b22:	480c      	ldr	r0, [pc, #48]	; (8008b54 <netconn_tcp_recvd_msg+0x58>)
 8008b24:	f00d fae8 	bl	80160f8 <iprintf>
 8008b28:	f06f 030f 	mvn.w	r3, #15
 8008b2c:	e00a      	b.n	8008b44 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4806      	ldr	r0, [pc, #24]	; (8008b58 <netconn_tcp_recvd_msg+0x5c>)
 8008b3e:	f7ff fdcd 	bl	80086dc <netconn_apimsg>
 8008b42:	4603      	mov	r3, r0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	08017408 	.word	0x08017408
 8008b50:	08017668 	.word	0x08017668
 8008b54:	08017460 	.word	0x08017460
 8008b58:	0800a119 	.word	0x0800a119

08008b5c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b090      	sub	sp, #64	; 0x40
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f00d f889 	bl	8015c86 <sys_mbox_valid>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008b7a:	f06f 030a 	mvn.w	r3, #10
 8008b7e:	e06d      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7f1b      	ldrb	r3, [r3, #28]
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da07      	bge.n	8008b9a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	7f1b      	ldrb	r3, [r3, #28]
 8008b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008b98:	e039      	b.n	8008c0e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff fee3 	bl	800896c <netconn_recv_data>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008bac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008bb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bb8:	e050      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10e      	bne.n	8008be8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <netconn_recv_data_tcp+0x7a>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	891b      	ldrh	r3, [r3, #8]
 8008bd4:	e000      	b.n	8008bd8 <netconn_recv_data_tcp+0x7c>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008bda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bdc:	f107 0214 	add.w	r2, r7, #20
 8008be0:	4619      	mov	r1, r3
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff ff8a 	bl	8008afc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d134      	bne.n	8008c58 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	7f1b      	ldrb	r3, [r3, #28]
 8008bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008c06:	f06f 0306 	mvn.w	r3, #6
 8008c0a:	e027      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008c0c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <netconn_recv_data_tcp+0xc6>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10f      	bne.n	8008c4a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f9a3 	bl	8008f76 <netconn_err>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008c36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <netconn_recv_data_tcp+0xe8>
          return err;
 8008c3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c42:	e00b      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008c44:	f06f 030d 	mvn.w	r3, #13
 8008c48:	e008      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f955 	bl	8008efc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008c52:	f06f 030e 	mvn.w	r3, #14
 8008c56:	e001      	b.n	8008c5c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008c58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3740      	adds	r7, #64	; 0x40
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <netconn_recv+0x28>
 8008c78:	4b32      	ldr	r3, [pc, #200]	; (8008d44 <netconn_recv+0xe0>)
 8008c7a:	f240 3263 	movw	r2, #867	; 0x363
 8008c7e:	4932      	ldr	r1, [pc, #200]	; (8008d48 <netconn_recv+0xe4>)
 8008c80:	4832      	ldr	r0, [pc, #200]	; (8008d4c <netconn_recv+0xe8>)
 8008c82:	f00d fa39 	bl	80160f8 <iprintf>
 8008c86:	f06f 030f 	mvn.w	r3, #15
 8008c8a:	e056      	b.n	8008d3a <netconn_recv+0xd6>
  *new_buf = NULL;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <netconn_recv+0x48>
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <netconn_recv+0xe0>)
 8008c9a:	f240 3265 	movw	r2, #869	; 0x365
 8008c9e:	492c      	ldr	r1, [pc, #176]	; (8008d50 <netconn_recv+0xec>)
 8008ca0:	482a      	ldr	r0, [pc, #168]	; (8008d4c <netconn_recv+0xe8>)
 8008ca2:	f00d fa29 	bl	80160f8 <iprintf>
 8008ca6:	f06f 030f 	mvn.w	r3, #15
 8008caa:	e046      	b.n	8008d3a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cb4:	2b10      	cmp	r3, #16
 8008cb6:	d13a      	bne.n	8008d2e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008cbc:	2006      	movs	r0, #6
 8008cbe:	f002 fcdd 	bl	800b67c <memp_malloc>
 8008cc2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <netconn_recv+0x6c>
      return ERR_MEM;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
 8008cce:	e034      	b.n	8008d3a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ff3f 	bl	8008b5c <netconn_recv_data_tcp>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d006      	beq.n	8008cf8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008cea:	6979      	ldr	r1, [r7, #20]
 8008cec:	2006      	movs	r0, #6
 8008cee:	f002 fd3b 	bl	800b768 <memp_free>
      return err;
 8008cf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cf6:	e020      	b.n	8008d3a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <netconn_recv+0xa8>
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <netconn_recv+0xe0>)
 8008d00:	f240 3279 	movw	r2, #889	; 0x379
 8008d04:	4913      	ldr	r1, [pc, #76]	; (8008d54 <netconn_recv+0xf0>)
 8008d06:	4811      	ldr	r0, [pc, #68]	; (8008d4c <netconn_recv+0xe8>)
 8008d08:	f00d f9f6 	bl	80160f8 <iprintf>

    buf->p = p;
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2200      	movs	r2, #0
 8008d22:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e005      	b.n	8008d3a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fe1a 	bl	800896c <netconn_recv_data>
 8008d38:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	08017408 	.word	0x08017408
 8008d48:	08017620 	.word	0x08017620
 8008d4c:	08017460 	.word	0x08017460
 8008d50:	08017640 	.word	0x08017640
 8008d54:	080176b8 	.word	0x080176b8

08008d58 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	f107 0110 	add.w	r1, r7, #16
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f805 	bl	8008d8c <netconn_write_vectors_partly>
 8008d82:	4603      	mov	r3, r0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b092      	sub	sp, #72	; 0x48
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4611      	mov	r1, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	80fb      	strh	r3, [r7, #6]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <netconn_write_vectors_partly+0x30>
 8008da8:	4b4e      	ldr	r3, [pc, #312]	; (8008ee4 <netconn_write_vectors_partly+0x158>)
 8008daa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008dae:	494e      	ldr	r1, [pc, #312]	; (8008ee8 <netconn_write_vectors_partly+0x15c>)
 8008db0:	484e      	ldr	r0, [pc, #312]	; (8008eec <netconn_write_vectors_partly+0x160>)
 8008db2:	f00d f9a1 	bl	80160f8 <iprintf>
 8008db6:	f06f 030f 	mvn.w	r3, #15
 8008dba:	e08e      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc4:	2b10      	cmp	r3, #16
 8008dc6:	d009      	beq.n	8008ddc <netconn_write_vectors_partly+0x50>
 8008dc8:	4b46      	ldr	r3, [pc, #280]	; (8008ee4 <netconn_write_vectors_partly+0x158>)
 8008dca:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008dce:	4948      	ldr	r1, [pc, #288]	; (8008ef0 <netconn_write_vectors_partly+0x164>)
 8008dd0:	4846      	ldr	r0, [pc, #280]	; (8008eec <netconn_write_vectors_partly+0x160>)
 8008dd2:	f00d f991 	bl	80160f8 <iprintf>
 8008dd6:	f06f 0305 	mvn.w	r3, #5
 8008dda:	e07e      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	7f1b      	ldrb	r3, [r3, #28]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <netconn_write_vectors_partly+0x66>
 8008de8:	797b      	ldrb	r3, [r7, #5]
 8008dea:	f003 0304 	and.w	r3, r3, #4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <netconn_write_vectors_partly+0x6a>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <netconn_write_vectors_partly+0x6c>
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <netconn_write_vectors_partly+0x84>
 8008e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008e0a:	f06f 0305 	mvn.w	r3, #5
 8008e0e:	e064      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008e14:	2300      	movs	r3, #0
 8008e16:	643b      	str	r3, [r7, #64]	; 0x40
 8008e18:	e015      	b.n	8008e46 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e26:	4413      	add	r3, r2
 8008e28:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4413      	add	r3, r2
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d202      	bcs.n	8008e40 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008e3a:	f06f 0305 	mvn.w	r3, #5
 8008e3e:	e04c      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e42:	3301      	adds	r3, #1
 8008e44:	643b      	str	r3, [r7, #64]	; 0x40
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	dbe5      	blt.n	8008e1a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e040      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da0a      	bge.n	8008e74 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008e64:	f06f 0305 	mvn.w	r3, #5
 8008e68:	e037      	b.n	8008eda <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008e6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008e84:	797b      	ldrb	r3, [r7, #5]
 8008e86:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008e92:	f107 0314 	add.w	r3, r7, #20
 8008e96:	4619      	mov	r1, r3
 8008e98:	4816      	ldr	r0, [pc, #88]	; (8008ef4 <netconn_write_vectors_partly+0x168>)
 8008e9a:	f7ff fc1f 	bl	80086dc <netconn_apimsg>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008ea4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d114      	bne.n	8008ed6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d006      	beq.n	8008ed6 <netconn_write_vectors_partly+0x14a>
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <netconn_write_vectors_partly+0x158>)
 8008eca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008ece:	490a      	ldr	r1, [pc, #40]	; (8008ef8 <netconn_write_vectors_partly+0x16c>)
 8008ed0:	4806      	ldr	r0, [pc, #24]	; (8008eec <netconn_write_vectors_partly+0x160>)
 8008ed2:	f00d f911 	bl	80160f8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008ed6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3748      	adds	r7, #72	; 0x48
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	08017408 	.word	0x08017408
 8008ee8:	080176e0 	.word	0x080176e0
 8008eec:	08017460 	.word	0x08017460
 8008ef0:	080176fc 	.word	0x080176fc
 8008ef4:	0800a51d 	.word	0x0800a51d
 8008ef8:	08017720 	.word	0x08017720

08008efc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	; 0x30
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <netconn_close_shutdown+0x26>
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <netconn_close_shutdown+0x50>)
 8008f10:	f240 4247 	movw	r2, #1095	; 0x447
 8008f14:	490e      	ldr	r1, [pc, #56]	; (8008f50 <netconn_close_shutdown+0x54>)
 8008f16:	480f      	ldr	r0, [pc, #60]	; (8008f54 <netconn_close_shutdown+0x58>)
 8008f18:	f00d f8ee 	bl	80160f8 <iprintf>
 8008f1c:	f06f 030f 	mvn.w	r3, #15
 8008f20:	e010      	b.n	8008f44 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008f2a:	2329      	movs	r3, #41	; 0x29
 8008f2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	4619      	mov	r1, r3
 8008f34:	4808      	ldr	r0, [pc, #32]	; (8008f58 <netconn_close_shutdown+0x5c>)
 8008f36:	f7ff fbd1 	bl	80086dc <netconn_apimsg>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008f40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3730      	adds	r7, #48	; 0x30
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08017408 	.word	0x08017408
 8008f50:	08017744 	.word	0x08017744
 8008f54:	08017460 	.word	0x08017460
 8008f58:	0800a635 	.word	0x0800a635

08008f5c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008f64:	2103      	movs	r1, #3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff ffc8 	bl	8008efc <netconn_close_shutdown>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <netconn_err+0x12>
    return ERR_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e00d      	b.n	8008fa4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008f88:	f00c ff98 	bl	8015ebc <sys_arch_protect>
 8008f8c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7a1b      	ldrb	r3, [r3, #8]
 8008f92:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f00c ff9c 	bl	8015ed8 <sys_arch_unprotect>
  return err;
 8008fa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fba:	f113 0f0d 	cmn.w	r3, #13
 8008fbe:	d009      	beq.n	8008fd4 <lwip_netconn_err_to_msg+0x28>
 8008fc0:	f113 0f0d 	cmn.w	r3, #13
 8008fc4:	dc0c      	bgt.n	8008fe0 <lwip_netconn_err_to_msg+0x34>
 8008fc6:	f113 0f0f 	cmn.w	r3, #15
 8008fca:	d007      	beq.n	8008fdc <lwip_netconn_err_to_msg+0x30>
 8008fcc:	f113 0f0e 	cmn.w	r3, #14
 8008fd0:	d002      	beq.n	8008fd8 <lwip_netconn_err_to_msg+0x2c>
 8008fd2:	e005      	b.n	8008fe0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008fd4:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <lwip_netconn_err_to_msg+0x54>)
 8008fd6:	e00e      	b.n	8008ff6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <lwip_netconn_err_to_msg+0x58>)
 8008fda:	e00c      	b.n	8008ff6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <lwip_netconn_err_to_msg+0x5c>)
 8008fde:	e00a      	b.n	8008ff6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <lwip_netconn_err_to_msg+0x48>
 8008fe8:	4b08      	ldr	r3, [pc, #32]	; (800900c <lwip_netconn_err_to_msg+0x60>)
 8008fea:	227d      	movs	r2, #125	; 0x7d
 8008fec:	4908      	ldr	r1, [pc, #32]	; (8009010 <lwip_netconn_err_to_msg+0x64>)
 8008fee:	4809      	ldr	r0, [pc, #36]	; (8009014 <lwip_netconn_err_to_msg+0x68>)
 8008ff0:	f00d f882 	bl	80160f8 <iprintf>
      return NULL;
 8008ff4:	2300      	movs	r3, #0
  }
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	0801a8f4 	.word	0x0801a8f4
 8009004:	0801a8f5 	.word	0x0801a8f5
 8009008:	0801a8f6 	.word	0x0801a8f6
 800900c:	08017760 	.word	0x08017760
 8009010:	08017794 	.word	0x08017794
 8009014:	080177a4 	.word	0x080177a4

08009018 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <lwip_netconn_is_err_msg+0x1c>
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <lwip_netconn_is_err_msg+0x5c>)
 800902a:	2285      	movs	r2, #133	; 0x85
 800902c:	4912      	ldr	r1, [pc, #72]	; (8009078 <lwip_netconn_is_err_msg+0x60>)
 800902e:	4813      	ldr	r0, [pc, #76]	; (800907c <lwip_netconn_is_err_msg+0x64>)
 8009030:	f00d f862 	bl	80160f8 <iprintf>

  if (msg == &netconn_aborted) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <lwip_netconn_is_err_msg+0x68>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d104      	bne.n	8009046 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	22f3      	movs	r2, #243	; 0xf3
 8009040:	701a      	strb	r2, [r3, #0]
    return 1;
 8009042:	2301      	movs	r3, #1
 8009044:	e012      	b.n	800906c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a0e      	ldr	r2, [pc, #56]	; (8009084 <lwip_netconn_is_err_msg+0x6c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d104      	bne.n	8009058 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	22f2      	movs	r2, #242	; 0xf2
 8009052:	701a      	strb	r2, [r3, #0]
    return 1;
 8009054:	2301      	movs	r3, #1
 8009056:	e009      	b.n	800906c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a0b      	ldr	r2, [pc, #44]	; (8009088 <lwip_netconn_is_err_msg+0x70>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d104      	bne.n	800906a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	22f1      	movs	r2, #241	; 0xf1
 8009064:	701a      	strb	r2, [r3, #0]
    return 1;
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	08017760 	.word	0x08017760
 8009078:	080177cc 	.word	0x080177cc
 800907c:	080177a4 	.word	0x080177a4
 8009080:	0801a8f4 	.word	0x0801a8f4
 8009084:	0801a8f5 	.word	0x0801a8f5
 8009088:	0801a8f6 	.word	0x0801a8f6

0800908c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <recv_udp+0x20>
 80090a0:	4b34      	ldr	r3, [pc, #208]	; (8009174 <recv_udp+0xe8>)
 80090a2:	22e5      	movs	r2, #229	; 0xe5
 80090a4:	4934      	ldr	r1, [pc, #208]	; (8009178 <recv_udp+0xec>)
 80090a6:	4835      	ldr	r0, [pc, #212]	; (800917c <recv_udp+0xf0>)
 80090a8:	f00d f826 	bl	80160f8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <recv_udp+0x32>
 80090b2:	4b30      	ldr	r3, [pc, #192]	; (8009174 <recv_udp+0xe8>)
 80090b4:	22e6      	movs	r2, #230	; 0xe6
 80090b6:	4932      	ldr	r1, [pc, #200]	; (8009180 <recv_udp+0xf4>)
 80090b8:	4830      	ldr	r0, [pc, #192]	; (800917c <recv_udp+0xf0>)
 80090ba:	f00d f81d 	bl	80160f8 <iprintf>
  conn = (struct netconn *)arg;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <recv_udp+0x44>
    pbuf_free(p);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f003 f9f1 	bl	800c4b0 <pbuf_free>
    return;
 80090ce:	e04d      	b.n	800916c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d005      	beq.n	80090e6 <recv_udp+0x5a>
 80090da:	4b26      	ldr	r3, [pc, #152]	; (8009174 <recv_udp+0xe8>)
 80090dc:	22ee      	movs	r2, #238	; 0xee
 80090de:	4929      	ldr	r1, [pc, #164]	; (8009184 <recv_udp+0xf8>)
 80090e0:	4826      	ldr	r0, [pc, #152]	; (800917c <recv_udp+0xf0>)
 80090e2:	f00d f809 	bl	80160f8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	3310      	adds	r3, #16
 80090ea:	4618      	mov	r0, r3
 80090ec:	f00c fdcb 	bl	8015c86 <sys_mbox_valid>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f003 f9da 	bl	800c4b0 <pbuf_free>
    return;
 80090fc:	e036      	b.n	800916c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80090fe:	2006      	movs	r0, #6
 8009100:	f002 fabc 	bl	800b67c <memp_malloc>
 8009104:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <recv_udp+0x88>
    pbuf_free(p);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f003 f9cf 	bl	800c4b0 <pbuf_free>
    return;
 8009112:	e02b      	b.n	800916c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <recv_udp+0xa0>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	e000      	b.n	800912e <recv_udp+0xa2>
 800912c:	2300      	movs	r3, #0
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009136:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	891b      	ldrh	r3, [r3, #8]
 800913c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	3310      	adds	r3, #16
 8009142:	69b9      	ldr	r1, [r7, #24]
 8009144:	4618      	mov	r0, r3
 8009146:	f00c fd29 	bl	8015b9c <sys_mbox_trypost>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009150:	69b8      	ldr	r0, [r7, #24]
 8009152:	f001 fafb 	bl	800a74c <netbuf_delete>
    return;
 8009156:	e009      	b.n	800916c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <recv_udp+0xe0>
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	8afa      	ldrh	r2, [r7, #22]
 8009166:	2100      	movs	r1, #0
 8009168:	69f8      	ldr	r0, [r7, #28]
 800916a:	4798      	blx	r3
  }
}
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	08017760 	.word	0x08017760
 8009178:	080177d8 	.word	0x080177d8
 800917c:	080177a4 	.word	0x080177a4
 8009180:	080177fc 	.word	0x080177fc
 8009184:	0801781c 	.word	0x0801781c

08009188 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d106      	bne.n	80091aa <recv_tcp+0x22>
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <recv_tcp+0xf0>)
 800919e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091a2:	4936      	ldr	r1, [pc, #216]	; (800927c <recv_tcp+0xf4>)
 80091a4:	4836      	ldr	r0, [pc, #216]	; (8009280 <recv_tcp+0xf8>)
 80091a6:	f00c ffa7 	bl	80160f8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d106      	bne.n	80091be <recv_tcp+0x36>
 80091b0:	4b31      	ldr	r3, [pc, #196]	; (8009278 <recv_tcp+0xf0>)
 80091b2:	f240 122d 	movw	r2, #301	; 0x12d
 80091b6:	4933      	ldr	r1, [pc, #204]	; (8009284 <recv_tcp+0xfc>)
 80091b8:	4831      	ldr	r0, [pc, #196]	; (8009280 <recv_tcp+0xf8>)
 80091ba:	f00c ff9d 	bl	80160f8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80091be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d006      	beq.n	80091d4 <recv_tcp+0x4c>
 80091c6:	4b2c      	ldr	r3, [pc, #176]	; (8009278 <recv_tcp+0xf0>)
 80091c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80091cc:	492e      	ldr	r1, [pc, #184]	; (8009288 <recv_tcp+0x100>)
 80091ce:	482c      	ldr	r0, [pc, #176]	; (8009280 <recv_tcp+0xf8>)
 80091d0:	f00c ff92 	bl	80160f8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <recv_tcp+0x5c>
    return ERR_VAL;
 80091de:	f06f 0305 	mvn.w	r3, #5
 80091e2:	e045      	b.n	8009270 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d006      	beq.n	80091fc <recv_tcp+0x74>
 80091ee:	4b22      	ldr	r3, [pc, #136]	; (8009278 <recv_tcp+0xf0>)
 80091f0:	f240 1235 	movw	r2, #309	; 0x135
 80091f4:	4925      	ldr	r1, [pc, #148]	; (800928c <recv_tcp+0x104>)
 80091f6:	4822      	ldr	r0, [pc, #136]	; (8009280 <recv_tcp+0xf8>)
 80091f8:	f00c ff7e 	bl	80160f8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	3310      	adds	r3, #16
 8009200:	4618      	mov	r0, r3
 8009202:	f00c fd40 	bl	8015c86 <sys_mbox_valid>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10d      	bne.n	8009228 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d008      	beq.n	8009224 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	891b      	ldrh	r3, [r3, #8]
 8009216:	4619      	mov	r1, r3
 8009218:	68b8      	ldr	r0, [r7, #8]
 800921a:	f004 f837 	bl	800d28c <tcp_recved>
      pbuf_free(p);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f003 f946 	bl	800c4b0 <pbuf_free>
    }
    return ERR_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	e023      	b.n	8009270 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <recv_tcp+0xb2>
    msg = p;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	891b      	ldrh	r3, [r3, #8]
 8009236:	83fb      	strh	r3, [r7, #30]
 8009238:	e003      	b.n	8009242 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800923a:	4b15      	ldr	r3, [pc, #84]	; (8009290 <recv_tcp+0x108>)
 800923c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	3310      	adds	r3, #16
 8009246:	69b9      	ldr	r1, [r7, #24]
 8009248:	4618      	mov	r0, r3
 800924a:	f00c fca7 	bl	8015b9c <sys_mbox_trypost>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295
 8009258:	e00a      	b.n	8009270 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <recv_tcp+0xe6>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	8bfa      	ldrh	r2, [r7, #30]
 8009268:	2100      	movs	r1, #0
 800926a:	6978      	ldr	r0, [r7, #20]
 800926c:	4798      	blx	r3
  }

  return ERR_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	08017760 	.word	0x08017760
 800927c:	0801783c 	.word	0x0801783c
 8009280:	080177a4 	.word	0x080177a4
 8009284:	08017860 	.word	0x08017860
 8009288:	08017880 	.word	0x08017880
 800928c:	08017898 	.word	0x08017898
 8009290:	0801a8f6 	.word	0x0801a8f6

08009294 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <poll_tcp+0x22>
 80092a8:	4b29      	ldr	r3, [pc, #164]	; (8009350 <poll_tcp+0xbc>)
 80092aa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80092ae:	4929      	ldr	r1, [pc, #164]	; (8009354 <poll_tcp+0xc0>)
 80092b0:	4829      	ldr	r0, [pc, #164]	; (8009358 <poll_tcp+0xc4>)
 80092b2:	f00c ff21 	bl	80160f8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d104      	bne.n	80092c8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80092be:	2101      	movs	r1, #1
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 ff5f 	bl	800a184 <lwip_netconn_do_writemore>
 80092c6:	e016      	b.n	80092f6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	785b      	ldrb	r3, [r3, #1]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d112      	bne.n	80092f6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <poll_tcp+0x5a>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	7a5b      	ldrb	r3, [r3, #9]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	7a5a      	ldrb	r2, [r3, #9]
 80092e8:	3a01      	subs	r2, #1
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80092ee:	2101      	movs	r1, #1
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fb3b 	bl	800996c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7f1b      	ldrb	r3, [r3, #28]
 80092fa:	f003 0310 	and.w	r3, r3, #16
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d021      	beq.n	8009346 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d01d      	beq.n	8009346 <poll_tcp+0xb2>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009312:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009316:	d316      	bcc.n	8009346 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009320:	2b04      	cmp	r3, #4
 8009322:	d810      	bhi.n	8009346 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	7f1b      	ldrb	r3, [r3, #28]
 8009328:	f023 0310 	bic.w	r3, r3, #16
 800932c:	b2da      	uxtb	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <poll_tcp+0xb2>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2200      	movs	r2, #0
 8009340:	2102      	movs	r1, #2
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	08017760 	.word	0x08017760
 8009354:	080178b8 	.word	0x080178b8
 8009358:	080177a4 	.word	0x080177a4

0800935c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <sent_tcp+0x26>
 8009374:	4b20      	ldr	r3, [pc, #128]	; (80093f8 <sent_tcp+0x9c>)
 8009376:	f240 1293 	movw	r2, #403	; 0x193
 800937a:	4920      	ldr	r1, [pc, #128]	; (80093fc <sent_tcp+0xa0>)
 800937c:	4820      	ldr	r0, [pc, #128]	; (8009400 <sent_tcp+0xa4>)
 800937e:	f00c febb 	bl	80160f8 <iprintf>

  if (conn) {
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d032      	beq.n	80093ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d104      	bne.n	800939a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009390:	2101      	movs	r1, #1
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f000 fef6 	bl	800a184 <lwip_netconn_do_writemore>
 8009398:	e007      	b.n	80093aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d103      	bne.n	80093aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80093a2:	2101      	movs	r1, #1
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f000 fae1 	bl	800996c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01d      	beq.n	80093ee <sent_tcp+0x92>
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80093be:	d316      	bcc.n	80093ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d810      	bhi.n	80093ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	7f1b      	ldrb	r3, [r3, #28]
 80093d0:	f023 0310 	bic.w	r3, r3, #16
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <sent_tcp+0x92>
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	88fa      	ldrh	r2, [r7, #6]
 80093e8:	2102      	movs	r1, #2
 80093ea:	6978      	ldr	r0, [r7, #20]
 80093ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	08017760 	.word	0x08017760
 80093fc:	080178b8 	.word	0x080178b8
 8009400:	080177a4 	.word	0x080177a4

08009404 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <err_tcp+0x24>
 800941a:	4b5f      	ldr	r3, [pc, #380]	; (8009598 <err_tcp+0x194>)
 800941c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009420:	495e      	ldr	r1, [pc, #376]	; (800959c <err_tcp+0x198>)
 8009422:	485f      	ldr	r0, [pc, #380]	; (80095a0 <err_tcp+0x19c>)
 8009424:	f00c fe68 	bl	80160f8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009428:	f00c fd48 	bl	8015ebc <sys_arch_protect>
 800942c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	2200      	movs	r2, #0
 8009432:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	7f1b      	ldrb	r3, [r3, #28]
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	b2da      	uxtb	r2, r3
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	2200      	movs	r2, #0
 8009452:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009454:	69b8      	ldr	r0, [r7, #24]
 8009456:	f00c fd3f 	bl	8015ed8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <err_tcp+0x6a>
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2200      	movs	r2, #0
 8009468:	2104      	movs	r1, #4
 800946a:	69f8      	ldr	r0, [r7, #28]
 800946c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <err_tcp+0x7e>
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	69f8      	ldr	r0, [r7, #28]
 8009480:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <err_tcp+0x92>
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2200      	movs	r2, #0
 8009490:	2102      	movs	r1, #2
 8009492:	69f8      	ldr	r0, [r7, #28]
 8009494:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fd86 	bl	8008fac <lwip_netconn_err_to_msg>
 80094a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	3310      	adds	r3, #16
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00c fbed 	bl	8015c86 <sys_mbox_valid>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	3310      	adds	r3, #16
 80094b6:	6939      	ldr	r1, [r7, #16]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f00c fb6f 	bl	8015b9c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	3314      	adds	r3, #20
 80094c2:	4618      	mov	r0, r3
 80094c4:	f00c fbdf 	bl	8015c86 <sys_mbox_valid>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3314      	adds	r3, #20
 80094d2:	6939      	ldr	r1, [r7, #16]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f00c fb61 	bl	8015b9c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d005      	beq.n	80094ec <err_tcp+0xe8>
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d002      	beq.n	80094ec <err_tcp+0xe8>
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d143      	bne.n	8009574 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	7f1b      	ldrb	r3, [r3, #28]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf14      	ite	ne
 80094f8:	2301      	movne	r3, #1
 80094fa:	2300      	moveq	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	7f1b      	ldrb	r3, [r3, #28]
 8009504:	f023 0304 	bic.w	r3, r3, #4
 8009508:	b2da      	uxtb	r2, r3
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d13b      	bne.n	800958c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <err_tcp+0x126>
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <err_tcp+0x194>)
 800951e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009522:	4920      	ldr	r1, [pc, #128]	; (80095a4 <err_tcp+0x1a0>)
 8009524:	481e      	ldr	r0, [pc, #120]	; (80095a0 <err_tcp+0x19c>)
 8009526:	f00c fde7 	bl	80160f8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b04      	cmp	r3, #4
 800952e:	d104      	bne.n	800953a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	2200      	movs	r2, #0
 8009536:	711a      	strb	r2, [r3, #4]
 8009538:	e003      	b.n	8009542 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800954c:	68b8      	ldr	r0, [r7, #8]
 800954e:	f00c fc2b 	bl	8015da8 <sys_sem_valid>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <err_tcp+0x162>
 8009558:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <err_tcp+0x194>)
 800955a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800955e:	4912      	ldr	r1, [pc, #72]	; (80095a8 <err_tcp+0x1a4>)
 8009560:	480f      	ldr	r0, [pc, #60]	; (80095a0 <err_tcp+0x19c>)
 8009562:	f00c fdc9 	bl	80160f8 <iprintf>
      conn->current_msg = NULL;
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	2200      	movs	r2, #0
 800956a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f00c fc01 	bl	8015d74 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009572:	e00b      	b.n	800958c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <err_tcp+0x18a>
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <err_tcp+0x194>)
 800957e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009582:	490a      	ldr	r1, [pc, #40]	; (80095ac <err_tcp+0x1a8>)
 8009584:	4806      	ldr	r0, [pc, #24]	; (80095a0 <err_tcp+0x19c>)
 8009586:	f00c fdb7 	bl	80160f8 <iprintf>
  }
}
 800958a:	e000      	b.n	800958e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800958c:	bf00      	nop
}
 800958e:	bf00      	nop
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	08017760 	.word	0x08017760
 800959c:	080178b8 	.word	0x080178b8
 80095a0:	080177a4 	.word	0x080177a4
 80095a4:	080178c8 	.word	0x080178c8
 80095a8:	080178e4 	.word	0x080178e4
 80095ac:	08017900 	.word	0x08017900

080095b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f004 fe41 	bl	800e248 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80095c6:	490a      	ldr	r1, [pc, #40]	; (80095f0 <setup_tcp+0x40>)
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f004 fe4f 	bl	800e26c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80095ce:	4909      	ldr	r1, [pc, #36]	; (80095f4 <setup_tcp+0x44>)
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f004 fe6d 	bl	800e2b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80095d6:	2202      	movs	r2, #2
 80095d8:	4907      	ldr	r1, [pc, #28]	; (80095f8 <setup_tcp+0x48>)
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f004 fec4 	bl	800e368 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80095e0:	4906      	ldr	r1, [pc, #24]	; (80095fc <setup_tcp+0x4c>)
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f004 fe86 	bl	800e2f4 <tcp_err>
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	08009189 	.word	0x08009189
 80095f4:	0800935d 	.word	0x0800935d
 80095f8:	08009295 	.word	0x08009295
 80095fc:	08009405 	.word	0x08009405

08009600 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009600:	b590      	push	{r4, r7, lr}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d006      	beq.n	8009624 <pcb_new+0x24>
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <pcb_new+0xc4>)
 8009618:	f240 2265 	movw	r2, #613	; 0x265
 800961c:	492a      	ldr	r1, [pc, #168]	; (80096c8 <pcb_new+0xc8>)
 800961e:	482b      	ldr	r0, [pc, #172]	; (80096cc <pcb_new+0xcc>)
 8009620:	f00c fd6a 	bl	80160f8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800962e:	2b10      	cmp	r3, #16
 8009630:	d022      	beq.n	8009678 <pcb_new+0x78>
 8009632:	2b20      	cmp	r3, #32
 8009634:	d133      	bne.n	800969e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681c      	ldr	r4, [r3, #0]
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4618      	mov	r0, r3
 800963e:	f009 ff50 	bl	80134e2 <udp_new_ip_type>
 8009642:	4603      	mov	r3, r0
 8009644:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d02a      	beq.n	80096a6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b22      	cmp	r3, #34	; 0x22
 8009658:	d104      	bne.n	8009664 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6858      	ldr	r0, [r3, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	4917      	ldr	r1, [pc, #92]	; (80096d0 <pcb_new+0xd0>)
 8009672:	f009 febd 	bl	80133f0 <udp_recv>
      }
      break;
 8009676:	e016      	b.n	80096a6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681c      	ldr	r4, [r3, #0]
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f004 fdd4 	bl	800e22c <tcp_new_ip_type>
 8009684:	4603      	mov	r3, r0
 8009686:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff ff8a 	bl	80095b0 <setup_tcp>
      }
      break;
 800969c:	e005      	b.n	80096aa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	22fa      	movs	r2, #250	; 0xfa
 80096a2:	711a      	strb	r2, [r3, #4]
      return;
 80096a4:	e00a      	b.n	80096bc <pcb_new+0xbc>
      break;
 80096a6:	bf00      	nop
 80096a8:	e000      	b.n	80096ac <pcb_new+0xac>
      break;
 80096aa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	22ff      	movs	r2, #255	; 0xff
 80096ba:	711a      	strb	r2, [r3, #4]
  }
}
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd90      	pop	{r4, r7, pc}
 80096c2:	bf00      	nop
 80096c4:	08017760 	.word	0x08017760
 80096c8:	08017944 	.word	0x08017944
 80096cc:	080177a4 	.word	0x080177a4
 80096d0:	0800908d 	.word	0x0800908d

080096d4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff ff85 	bl	8009600 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009710:	2007      	movs	r0, #7
 8009712:	f001 ffb3 	bl	800b67c <memp_malloc>
 8009716:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <netconn_alloc+0x22>
    return NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	e052      	b.n	80097c8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	79fa      	ldrb	r2, [r7, #7]
 800972c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800973a:	2b10      	cmp	r3, #16
 800973c:	d004      	beq.n	8009748 <netconn_alloc+0x48>
 800973e:	2b20      	cmp	r3, #32
 8009740:	d105      	bne.n	800974e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009742:	2306      	movs	r3, #6
 8009744:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009746:	e00a      	b.n	800975e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009748:	2306      	movs	r3, #6
 800974a:	617b      	str	r3, [r7, #20]
      break;
 800974c:	e007      	b.n	800975e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800974e:	4b20      	ldr	r3, [pc, #128]	; (80097d0 <netconn_alloc+0xd0>)
 8009750:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009754:	491f      	ldr	r1, [pc, #124]	; (80097d4 <netconn_alloc+0xd4>)
 8009756:	4820      	ldr	r0, [pc, #128]	; (80097d8 <netconn_alloc+0xd8>)
 8009758:	f00c fcce 	bl	80160f8 <iprintf>
      goto free_and_return;
 800975c:	e02f      	b.n	80097be <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3310      	adds	r3, #16
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	4618      	mov	r0, r3
 8009766:	f00c f9e5 	bl	8015b34 <sys_mbox_new>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d125      	bne.n	80097bc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	330c      	adds	r3, #12
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f00c faa3 	bl	8015cc2 <sys_sem_new>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3310      	adds	r3, #16
 8009786:	4618      	mov	r0, r3
 8009788:	f00c f9f6 	bl	8015b78 <sys_mbox_free>
    goto free_and_return;
 800978c:	e017      	b.n	80097be <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3314      	adds	r3, #20
 8009792:	4618      	mov	r0, r3
 8009794:	f00c fa88 	bl	8015ca8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295
 80097a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	7cfa      	ldrb	r2, [r7, #19]
 80097b6:	771a      	strb	r2, [r3, #28]
  return conn;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	e005      	b.n	80097c8 <netconn_alloc+0xc8>
    goto free_and_return;
 80097bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	2007      	movs	r0, #7
 80097c2:	f001 ffd1 	bl	800b768 <memp_free>
  return NULL;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	08017760 	.word	0x08017760
 80097d4:	08017964 	.word	0x08017964
 80097d8:	080177a4 	.word	0x080177a4

080097dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <netconn_free+0x1e>
 80097ec:	4b1b      	ldr	r3, [pc, #108]	; (800985c <netconn_free+0x80>)
 80097ee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80097f2:	491b      	ldr	r1, [pc, #108]	; (8009860 <netconn_free+0x84>)
 80097f4:	481b      	ldr	r0, [pc, #108]	; (8009864 <netconn_free+0x88>)
 80097f6:	f00c fc7f 	bl	80160f8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3310      	adds	r3, #16
 80097fe:	4618      	mov	r0, r3
 8009800:	f00c fa41 	bl	8015c86 <sys_mbox_valid>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d006      	beq.n	8009818 <netconn_free+0x3c>
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <netconn_free+0x80>)
 800980c:	f240 3223 	movw	r2, #803	; 0x323
 8009810:	4915      	ldr	r1, [pc, #84]	; (8009868 <netconn_free+0x8c>)
 8009812:	4814      	ldr	r0, [pc, #80]	; (8009864 <netconn_free+0x88>)
 8009814:	f00c fc70 	bl	80160f8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3314      	adds	r3, #20
 800981c:	4618      	mov	r0, r3
 800981e:	f00c fa32 	bl	8015c86 <sys_mbox_valid>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <netconn_free+0x5a>
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <netconn_free+0x80>)
 800982a:	f240 3226 	movw	r2, #806	; 0x326
 800982e:	490f      	ldr	r1, [pc, #60]	; (800986c <netconn_free+0x90>)
 8009830:	480c      	ldr	r0, [pc, #48]	; (8009864 <netconn_free+0x88>)
 8009832:	f00c fc61 	bl	80160f8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	330c      	adds	r3, #12
 800983a:	4618      	mov	r0, r3
 800983c:	f00c faa7 	bl	8015d8e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	330c      	adds	r3, #12
 8009844:	4618      	mov	r0, r3
 8009846:	f00c fac0 	bl	8015dca <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	2007      	movs	r0, #7
 800984e:	f001 ff8b 	bl	800b768 <memp_free>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	08017760 	.word	0x08017760
 8009860:	0801798c 	.word	0x0801798c
 8009864:	080177a4 	.word	0x080177a4
 8009868:	080179bc 	.word	0x080179bc
 800986c:	080179f8 	.word	0x080179f8

08009870 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3310      	adds	r3, #16
 800987c:	4618      	mov	r0, r3
 800987e:	f00c fa02 	bl	8015c86 <sys_mbox_valid>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02f      	beq.n	80098e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009888:	e018      	b.n	80098bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009892:	2b10      	cmp	r3, #16
 8009894:	d10e      	bne.n	80098b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f107 020f 	add.w	r2, r7, #15
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fbba 	bl	8009018 <lwip_netconn_is_err_msg>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 fdff 	bl	800c4b0 <pbuf_free>
 80098b2:	e003      	b.n	80098bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 ff48 	bl	800a74c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3310      	adds	r3, #16
 80098c0:	f107 0210 	add.w	r2, r7, #16
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f00c f9c1 	bl	8015c4e <sys_arch_mbox_tryfetch>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d2:	d1da      	bne.n	800988a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3310      	adds	r3, #16
 80098d8:	4618      	mov	r0, r3
 80098da:	f00c f94d 	bl	8015b78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3310      	adds	r3, #16
 80098e2:	4618      	mov	r0, r3
 80098e4:	f00c f9e0 	bl	8015ca8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3314      	adds	r3, #20
 80098ec:	4618      	mov	r0, r3
 80098ee:	f00c f9ca 	bl	8015c86 <sys_mbox_valid>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d034      	beq.n	8009962 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80098f8:	e01d      	b.n	8009936 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f107 020e 	add.w	r2, r7, #14
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fb88 	bl	8009018 <lwip_netconn_is_err_msg>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d113      	bne.n	8009936 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009912:	6978      	ldr	r0, [r7, #20]
 8009914:	f7ff ffac 	bl	8009870 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	f003 fbb3 	bl	800d090 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2200      	movs	r2, #0
 800992e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009930:	6978      	ldr	r0, [r7, #20]
 8009932:	f7ff ff53 	bl	80097dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3314      	adds	r3, #20
 800993a:	f107 0210 	add.w	r2, r7, #16
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f00c f984 	bl	8015c4e <sys_arch_mbox_tryfetch>
 8009946:	4603      	mov	r3, r0
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d1d5      	bne.n	80098fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3314      	adds	r3, #20
 8009952:	4618      	mov	r0, r3
 8009954:	f00c f910 	bl	8015b78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3314      	adds	r3, #20
 800995c:	4618      	mov	r0, r3
 800995e:	f00c f9a3 	bl	8015ca8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009962:	bf00      	nop
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <lwip_netconn_do_close_internal+0x24>
 8009982:	4b87      	ldr	r3, [pc, #540]	; (8009ba0 <lwip_netconn_do_close_internal+0x234>)
 8009984:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009988:	4986      	ldr	r1, [pc, #536]	; (8009ba4 <lwip_netconn_do_close_internal+0x238>)
 800998a:	4887      	ldr	r0, [pc, #540]	; (8009ba8 <lwip_netconn_do_close_internal+0x23c>)
 800998c:	f00c fbb4 	bl	80160f8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009998:	2b10      	cmp	r3, #16
 800999a:	d006      	beq.n	80099aa <lwip_netconn_do_close_internal+0x3e>
 800999c:	4b80      	ldr	r3, [pc, #512]	; (8009ba0 <lwip_netconn_do_close_internal+0x234>)
 800999e:	f240 32a3 	movw	r2, #931	; 0x3a3
 80099a2:	4982      	ldr	r1, [pc, #520]	; (8009bac <lwip_netconn_do_close_internal+0x240>)
 80099a4:	4880      	ldr	r0, [pc, #512]	; (8009ba8 <lwip_netconn_do_close_internal+0x23c>)
 80099a6:	f00c fba7 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d006      	beq.n	80099c0 <lwip_netconn_do_close_internal+0x54>
 80099b2:	4b7b      	ldr	r3, [pc, #492]	; (8009ba0 <lwip_netconn_do_close_internal+0x234>)
 80099b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80099b8:	497d      	ldr	r1, [pc, #500]	; (8009bb0 <lwip_netconn_do_close_internal+0x244>)
 80099ba:	487b      	ldr	r0, [pc, #492]	; (8009ba8 <lwip_netconn_do_close_internal+0x23c>)
 80099bc:	f00c fb9c 	bl	80160f8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <lwip_netconn_do_close_internal+0x6a>
 80099c8:	4b75      	ldr	r3, [pc, #468]	; (8009ba0 <lwip_netconn_do_close_internal+0x234>)
 80099ca:	f240 32a5 	movw	r2, #933	; 0x3a5
 80099ce:	4979      	ldr	r1, [pc, #484]	; (8009bb4 <lwip_netconn_do_close_internal+0x248>)
 80099d0:	4875      	ldr	r0, [pc, #468]	; (8009ba8 <lwip_netconn_do_close_internal+0x23c>)
 80099d2:	f00c fb91 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <lwip_netconn_do_close_internal+0x80>
 80099de:	4b70      	ldr	r3, [pc, #448]	; (8009ba0 <lwip_netconn_do_close_internal+0x234>)
 80099e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80099e4:	4974      	ldr	r1, [pc, #464]	; (8009bb8 <lwip_netconn_do_close_internal+0x24c>)
 80099e6:	4870      	ldr	r0, [pc, #448]	; (8009ba8 <lwip_netconn_do_close_internal+0x23c>)
 80099e8:	f00c fb86 	bl	80160f8 <iprintf>

  tpcb = conn->pcb.tcp;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	7a1b      	ldrb	r3, [r3, #8]
 80099f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d102      	bne.n	8009a16 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009a10:	2301      	movs	r3, #1
 8009a12:	75bb      	strb	r3, [r7, #22]
 8009a14:	e01f      	b.n	8009a56 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00e      	beq.n	8009a3a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009a20:	2b05      	cmp	r3, #5
 8009a22:	d007      	beq.n	8009a34 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009a28:	2b06      	cmp	r3, #6
 8009a2a:	d003      	beq.n	8009a34 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d102      	bne.n	8009a3a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009a34:	2301      	movs	r3, #1
 8009a36:	75bb      	strb	r3, [r7, #22]
 8009a38:	e00d      	b.n	8009a56 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009a3a:	7b7b      	ldrb	r3, [r7, #13]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d008      	beq.n	8009a52 <lwip_netconn_do_close_internal+0xe6>
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	8b5b      	ldrh	r3, [r3, #26]
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75bb      	strb	r3, [r7, #22]
 8009a50:	e001      	b.n	8009a56 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009a56:	7dbb      	ldrb	r3, [r7, #22]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6938      	ldr	r0, [r7, #16]
 8009a60:	f004 fbf2 	bl	800e248 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	7d1b      	ldrb	r3, [r3, #20]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d104      	bne.n	8009a76 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f004 fc62 	bl	800e338 <tcp_accept>
 8009a74:	e01d      	b.n	8009ab2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6938      	ldr	r0, [r7, #16]
 8009a80:	f004 fbf4 	bl	800e26c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009a84:	2100      	movs	r1, #0
 8009a86:	6938      	ldr	r0, [r7, #16]
 8009a88:	f004 fc56 	bl	800e338 <tcp_accept>
    }
    if (shut_tx) {
 8009a8c:	7b7b      	ldrb	r3, [r7, #13]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009a92:	2100      	movs	r1, #0
 8009a94:	6938      	ldr	r0, [r7, #16]
 8009a96:	f004 fc0b 	bl	800e2b0 <tcp_sent>
    }
    if (shut_close) {
 8009a9a:	7dbb      	ldrb	r3, [r7, #22]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d008      	beq.n	8009ab2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6938      	ldr	r0, [r7, #16]
 8009aa6:	f004 fc5f 	bl	800e368 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6938      	ldr	r0, [r7, #16]
 8009aae:	f004 fc21 	bl	800e2f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009ab2:	7dbb      	ldrb	r3, [r7, #22]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009ab8:	6938      	ldr	r0, [r7, #16]
 8009aba:	f003 f9a3 	bl	800ce04 <tcp_close>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
 8009ac2:	e007      	b.n	8009ad4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	7b7a      	ldrb	r2, [r7, #13]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6938      	ldr	r0, [r7, #16]
 8009acc:	f003 f9c6 	bl	800ce5c <tcp_shutdown>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009adc:	2301      	movs	r3, #1
 8009ade:	757b      	strb	r3, [r7, #21]
 8009ae0:	e016      	b.n	8009b10 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aea:	d10f      	bne.n	8009b0c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	7a5b      	ldrb	r3, [r3, #9]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10c      	bne.n	8009b10 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009afa:	7dbb      	ldrb	r3, [r7, #22]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009b00:	6938      	ldr	r0, [r7, #16]
 8009b02:	f003 fac5 	bl	800d090 <tcp_abort>
          err = ERR_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]
 8009b0a:	e001      	b.n	8009b10 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009b10:	7d7b      	ldrb	r3, [r7, #21]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d052      	beq.n	8009bbc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	330c      	adds	r3, #12
 8009b1e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	7dfa      	ldrb	r2, [r7, #23]
 8009b26:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d129      	bne.n	8009b90 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009b3c:	7dbb      	ldrb	r3, [r7, #22]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00c      	beq.n	8009b5c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <lwip_netconn_do_close_internal+0x1f0>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2200      	movs	r2, #0
 8009b56:	2104      	movs	r1, #4
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	4798      	blx	r3
      }
      if (shut_rx) {
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <lwip_netconn_do_close_internal+0x20a>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
      if (shut_tx) {
 8009b76:	7b7b      	ldrb	r3, [r7, #13]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d009      	beq.n	8009b90 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <lwip_netconn_do_close_internal+0x224>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009b96:	68b8      	ldr	r0, [r7, #8]
 8009b98:	f00c f8ec 	bl	8015d74 <sys_sem_signal>
    }
    return ERR_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e03c      	b.n	8009c1a <lwip_netconn_do_close_internal+0x2ae>
 8009ba0:	08017760 	.word	0x08017760
 8009ba4:	08017a34 	.word	0x08017a34
 8009ba8:	080177a4 	.word	0x080177a4
 8009bac:	08017a44 	.word	0x08017a44
 8009bb0:	08017a64 	.word	0x08017a64
 8009bb4:	08017a88 	.word	0x08017a88
 8009bb8:	080178c8 	.word	0x080178c8
  }
  if (!close_finished) {
 8009bbc:	7d7b      	ldrb	r3, [r7, #21]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d11e      	bne.n	8009c00 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	7d1b      	ldrb	r3, [r3, #20]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d106      	bne.n	8009bd8 <lwip_netconn_do_close_internal+0x26c>
 8009bca:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <lwip_netconn_do_close_internal+0x2b8>)
 8009bcc:	f240 4241 	movw	r2, #1089	; 0x441
 8009bd0:	4915      	ldr	r1, [pc, #84]	; (8009c28 <lwip_netconn_do_close_internal+0x2bc>)
 8009bd2:	4816      	ldr	r0, [pc, #88]	; (8009c2c <lwip_netconn_do_close_internal+0x2c0>)
 8009bd4:	f00c fa90 	bl	80160f8 <iprintf>
    if (shut_tx) {
 8009bd8:	7b7b      	ldrb	r3, [r7, #13]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009bde:	4914      	ldr	r1, [pc, #80]	; (8009c30 <lwip_netconn_do_close_internal+0x2c4>)
 8009be0:	6938      	ldr	r0, [r7, #16]
 8009be2:	f004 fb65 	bl	800e2b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009be6:	2201      	movs	r2, #1
 8009be8:	4912      	ldr	r1, [pc, #72]	; (8009c34 <lwip_netconn_do_close_internal+0x2c8>)
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f004 fbbc 	bl	800e368 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009bf0:	4911      	ldr	r1, [pc, #68]	; (8009c38 <lwip_netconn_do_close_internal+0x2cc>)
 8009bf2:	6938      	ldr	r0, [r7, #16]
 8009bf4:	f004 fb7e 	bl	800e2f4 <tcp_err>
    tcp_arg(tpcb, conn);
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	6938      	ldr	r0, [r7, #16]
 8009bfc:	f004 fb24 	bl	800e248 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <lwip_netconn_do_close_internal+0x2aa>
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <lwip_netconn_do_close_internal+0x2b8>)
 8009c0a:	f240 424d 	movw	r2, #1101	; 0x44d
 8009c0e:	490b      	ldr	r1, [pc, #44]	; (8009c3c <lwip_netconn_do_close_internal+0x2d0>)
 8009c10:	4806      	ldr	r0, [pc, #24]	; (8009c2c <lwip_netconn_do_close_internal+0x2c0>)
 8009c12:	f00c fa71 	bl	80160f8 <iprintf>
  return err;
 8009c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	08017760 	.word	0x08017760
 8009c28:	08017a9c 	.word	0x08017a9c
 8009c2c:	080177a4 	.word	0x080177a4
 8009c30:	0800935d 	.word	0x0800935d
 8009c34:	08009295 	.word	0x08009295
 8009c38:	08009405 	.word	0x08009405
 8009c3c:	08017ac0 	.word	0x08017ac0

08009c40 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	785b      	ldrb	r3, [r3, #1]
 8009c52:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <lwip_netconn_do_delconn+0x36>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c64:	2b10      	cmp	r3, #16
 8009c66:	d006      	beq.n	8009c76 <lwip_netconn_do_delconn+0x36>
 8009c68:	4b60      	ldr	r3, [pc, #384]	; (8009dec <lwip_netconn_do_delconn+0x1ac>)
 8009c6a:	f240 425e 	movw	r2, #1118	; 0x45e
 8009c6e:	4960      	ldr	r1, [pc, #384]	; (8009df0 <lwip_netconn_do_delconn+0x1b0>)
 8009c70:	4860      	ldr	r0, [pc, #384]	; (8009df4 <lwip_netconn_do_delconn+0x1b4>)
 8009c72:	f00c fa41 	bl	80160f8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <lwip_netconn_do_delconn+0x48>
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d002      	beq.n	8009c88 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009c82:	7afb      	ldrb	r3, [r7, #11]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d109      	bne.n	8009c9c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d10a      	bne.n	8009ca4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	7f1b      	ldrb	r3, [r3, #28]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d103      	bne.n	8009ca4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22fb      	movs	r2, #251	; 0xfb
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	e097      	b.n	8009dd4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d10d      	bne.n	8009cc6 <lwip_netconn_do_delconn+0x86>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	7f1b      	ldrb	r3, [r3, #28]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <lwip_netconn_do_delconn+0x86>
 8009cb8:	4b4c      	ldr	r3, [pc, #304]	; (8009dec <lwip_netconn_do_delconn+0x1ac>)
 8009cba:	f240 427a 	movw	r2, #1146	; 0x47a
 8009cbe:	494e      	ldr	r1, [pc, #312]	; (8009df8 <lwip_netconn_do_delconn+0x1b8>)
 8009cc0:	484c      	ldr	r0, [pc, #304]	; (8009df4 <lwip_netconn_do_delconn+0x1b4>)
 8009cc2:	f00c fa19 	bl	80160f8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fdcd 	bl	8009870 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d05f      	beq.n	8009da0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cea:	2b10      	cmp	r3, #16
 8009cec:	d00d      	beq.n	8009d0a <lwip_netconn_do_delconn+0xca>
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d151      	bne.n	8009d96 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f009 fb94 	bl	8013430 <udp_remove>
          break;
 8009d08:	e046      	b.n	8009d98 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <lwip_netconn_do_delconn+0xe2>
 8009d14:	4b35      	ldr	r3, [pc, #212]	; (8009dec <lwip_netconn_do_delconn+0x1ac>)
 8009d16:	f240 4294 	movw	r2, #1172	; 0x494
 8009d1a:	4938      	ldr	r1, [pc, #224]	; (8009dfc <lwip_netconn_do_delconn+0x1bc>)
 8009d1c:	4835      	ldr	r0, [pc, #212]	; (8009df4 <lwip_netconn_do_delconn+0x1b4>)
 8009d1e:	f00c f9eb 	bl	80160f8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2204      	movs	r2, #4
 8009d28:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2203      	movs	r2, #3
 8009d2e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fe14 	bl	800996c <lwip_netconn_do_close_internal>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d04b      	beq.n	8009de2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d006      	beq.n	8009d62 <lwip_netconn_do_delconn+0x122>
 8009d54:	4b25      	ldr	r3, [pc, #148]	; (8009dec <lwip_netconn_do_delconn+0x1ac>)
 8009d56:	f240 429a 	movw	r2, #1178	; 0x49a
 8009d5a:	4929      	ldr	r1, [pc, #164]	; (8009e00 <lwip_netconn_do_delconn+0x1c0>)
 8009d5c:	4825      	ldr	r0, [pc, #148]	; (8009df4 <lwip_netconn_do_delconn+0x1b4>)
 8009d5e:	f00c f9cb 	bl	80160f8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009d62:	4828      	ldr	r0, [pc, #160]	; (8009e04 <lwip_netconn_do_delconn+0x1c4>)
 8009d64:	f00c f877 	bl	8015e56 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	330c      	adds	r3, #12
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f00b ffce 	bl	8015d12 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009d76:	4823      	ldr	r0, [pc, #140]	; (8009e04 <lwip_netconn_do_delconn+0x1c4>)
 8009d78:	f00c f85e 	bl	8015e38 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d02d      	beq.n	8009de2 <lwip_netconn_do_delconn+0x1a2>
 8009d86:	4b19      	ldr	r3, [pc, #100]	; (8009dec <lwip_netconn_do_delconn+0x1ac>)
 8009d88:	f240 429e 	movw	r2, #1182	; 0x49e
 8009d8c:	491c      	ldr	r1, [pc, #112]	; (8009e00 <lwip_netconn_do_delconn+0x1c0>)
 8009d8e:	4819      	ldr	r0, [pc, #100]	; (8009df4 <lwip_netconn_do_delconn+0x1b4>)
 8009d90:	f00c f9b2 	bl	80160f8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009d94:	e025      	b.n	8009de2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009d96:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <lwip_netconn_do_delconn+0x17a>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	6810      	ldr	r0, [r2, #0]
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <lwip_netconn_do_delconn+0x194>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	6810      	ldr	r0, [r2, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	330c      	adds	r3, #12
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f00b ffe4 	bl	8015da8 <sys_sem_valid>
 8009de0:	e000      	b.n	8009de4 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009de2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	08017760 	.word	0x08017760
 8009df0:	08017ad0 	.word	0x08017ad0
 8009df4:	080177a4 	.word	0x080177a4
 8009df8:	08017ae4 	.word	0x08017ae4
 8009dfc:	08017b04 	.word	0x08017b04
 8009e00:	08017b20 	.word	0x08017b20
 8009e04:	240043a4 	.word	0x240043a4

08009e08 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d025      	beq.n	8009e6a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d00e      	beq.n	8009e4a <lwip_netconn_do_bind+0x42>
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	d119      	bne.n	8009e64 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6858      	ldr	r0, [r3, #4]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6899      	ldr	r1, [r3, #8]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f009 f9e0 	bl	8013204 <udp_bind>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
        break;
 8009e48:	e011      	b.n	8009e6e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6858      	ldr	r0, [r3, #4]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6899      	ldr	r1, [r3, #8]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	899b      	ldrh	r3, [r3, #12]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f003 f925 	bl	800d0a8 <tcp_bind>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73fb      	strb	r3, [r7, #15]
        break;
 8009e62:	e004      	b.n	8009e6e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009e64:	23fa      	movs	r3, #250	; 0xfa
 8009e66:	73fb      	strb	r3, [r7, #15]
        break;
 8009e68:	e001      	b.n	8009e6e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009e6a:	23fa      	movs	r3, #250	; 0xfa
 8009e6c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	7bfa      	ldrb	r2, [r7, #15]
 8009e72:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009e74:	bf00      	nop
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	4613      	mov	r3, r2
 8009e88:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009e98:	f06f 0305 	mvn.w	r3, #5
 8009e9c:	e070      	b.n	8009f80 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d006      	beq.n	8009eb4 <lwip_netconn_do_connected+0x38>
 8009ea6:	4b38      	ldr	r3, [pc, #224]	; (8009f88 <lwip_netconn_do_connected+0x10c>)
 8009ea8:	f240 5223 	movw	r2, #1315	; 0x523
 8009eac:	4937      	ldr	r1, [pc, #220]	; (8009f8c <lwip_netconn_do_connected+0x110>)
 8009eae:	4838      	ldr	r0, [pc, #224]	; (8009f90 <lwip_netconn_do_connected+0x114>)
 8009eb0:	f00c f922 	bl	80160f8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10c      	bne.n	8009ed6 <lwip_netconn_do_connected+0x5a>
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	7f1b      	ldrb	r3, [r3, #28]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <lwip_netconn_do_connected+0x5a>
 8009ec8:	4b2f      	ldr	r3, [pc, #188]	; (8009f88 <lwip_netconn_do_connected+0x10c>)
 8009eca:	f240 5224 	movw	r2, #1316	; 0x524
 8009ece:	4931      	ldr	r1, [pc, #196]	; (8009f94 <lwip_netconn_do_connected+0x118>)
 8009ed0:	482f      	ldr	r0, [pc, #188]	; (8009f90 <lwip_netconn_do_connected+0x114>)
 8009ed2:	f00c f911 	bl	80160f8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	79fa      	ldrb	r2, [r7, #7]
 8009ee4:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ef8:	2b10      	cmp	r3, #16
 8009efa:	d106      	bne.n	8009f0a <lwip_netconn_do_connected+0x8e>
 8009efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009f04:	69b8      	ldr	r0, [r7, #24]
 8009f06:	f7ff fb53 	bl	80095b0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	7f1b      	ldrb	r3, [r3, #28]
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bf0c      	ite	eq
 8009f16:	2301      	moveq	r3, #1
 8009f18:	2300      	movne	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	7f1b      	ldrb	r3, [r3, #28]
 8009f22:	f023 0304 	bic.w	r3, r3, #4
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <lwip_netconn_do_connected+0xbc>
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10c      	bne.n	8009f52 <lwip_netconn_do_connected+0xd6>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <lwip_netconn_do_connected+0xc8>
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <lwip_netconn_do_connected+0xd6>
 8009f44:	4b10      	ldr	r3, [pc, #64]	; (8009f88 <lwip_netconn_do_connected+0x10c>)
 8009f46:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009f4a:	4913      	ldr	r1, [pc, #76]	; (8009f98 <lwip_netconn_do_connected+0x11c>)
 8009f4c:	4810      	ldr	r0, [pc, #64]	; (8009f90 <lwip_netconn_do_connected+0x114>)
 8009f4e:	f00c f8d3 	bl	80160f8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2200      	movs	r2, #0
 8009f56:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <lwip_netconn_do_connected+0xf6>
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	69b8      	ldr	r0, [r7, #24]
 8009f70:	4798      	blx	r3

  if (was_blocking) {
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009f78:	69f8      	ldr	r0, [r7, #28]
 8009f7a:	f00b fefb 	bl	8015d74 <sys_sem_signal>
  }
  return ERR_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3720      	adds	r7, #32
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	08017760 	.word	0x08017760
 8009f8c:	08017b28 	.word	0x08017b28
 8009f90:	080177a4 	.word	0x080177a4
 8009f94:	08017b48 	.word	0x08017b48
 8009f98:	08017b88 	.word	0x08017b88

08009f9c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009fb2:	23f1      	movs	r3, #241	; 0xf1
 8009fb4:	75fb      	strb	r3, [r7, #23]
 8009fb6:	e09b      	b.n	800a0f0 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d00f      	beq.n	8009fe6 <lwip_netconn_do_connect+0x4a>
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	f040 8087 	bne.w	800a0da <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6858      	ldr	r0, [r3, #4]
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6899      	ldr	r1, [r3, #8]
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	899b      	ldrh	r3, [r3, #12]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f009 f99a 	bl	8013314 <udp_connect>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]
        break;
 8009fe4:	e084      	b.n	800a0f0 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d102      	bne.n	8009ff6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009ff0:	23f7      	movs	r3, #247	; 0xf7
 8009ff2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009ff4:	e07b      	b.n	800a0ee <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a000:	23f6      	movs	r3, #246	; 0xf6
 800a002:	75fb      	strb	r3, [r7, #23]
        break;
 800a004:	e073      	b.n	800a0ee <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fad0 	bl	80095b0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6858      	ldr	r0, [r3, #4]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6899      	ldr	r1, [r3, #8]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	899a      	ldrh	r2, [r3, #12]
 800a01e:	4b38      	ldr	r3, [pc, #224]	; (800a100 <lwip_netconn_do_connect+0x164>)
 800a020:	f003 f9ca 	bl	800d3b8 <tcp_connect>
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d15e      	bne.n	800a0ee <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	7f1b      	ldrb	r3, [r3, #28]
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bf14      	ite	ne
 800a03e:	2301      	movne	r3, #1
 800a040:	2300      	moveq	r3, #0
 800a042:	b2db      	uxtb	r3, r3
 800a044:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2203      	movs	r2, #3
 800a04c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <lwip_netconn_do_connect+0xcc>
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	7f1a      	ldrb	r2, [r3, #28]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0204 	orr.w	r2, r2, #4
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	771a      	strb	r2, [r3, #28]
 800a066:	e008      	b.n	800a07a <lwip_netconn_do_connect+0xde>
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	7f1a      	ldrb	r2, [r3, #28]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0204 	bic.w	r2, r2, #4
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800a080:	23fb      	movs	r3, #251	; 0xfb
 800a082:	75fb      	strb	r3, [r7, #23]
        break;
 800a084:	e033      	b.n	800a0ee <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	785b      	ldrb	r3, [r3, #1]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d006      	beq.n	800a0a6 <lwip_netconn_do_connect+0x10a>
 800a098:	4b1a      	ldr	r3, [pc, #104]	; (800a104 <lwip_netconn_do_connect+0x168>)
 800a09a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a09e:	491a      	ldr	r1, [pc, #104]	; (800a108 <lwip_netconn_do_connect+0x16c>)
 800a0a0:	481a      	ldr	r0, [pc, #104]	; (800a10c <lwip_netconn_do_connect+0x170>)
 800a0a2:	f00c f829 	bl	80160f8 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a0a6:	481a      	ldr	r0, [pc, #104]	; (800a110 <lwip_netconn_do_connect+0x174>)
 800a0a8:	f00b fed5 	bl	8015e56 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	330c      	adds	r3, #12
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f00b fe2c 	bl	8015d12 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a0ba:	4815      	ldr	r0, [pc, #84]	; (800a110 <lwip_netconn_do_connect+0x174>)
 800a0bc:	f00b febc 	bl	8015e38 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	785b      	ldrb	r3, [r3, #1]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d116      	bne.n	800a0f8 <lwip_netconn_do_connect+0x15c>
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <lwip_netconn_do_connect+0x168>)
 800a0cc:	f240 5274 	movw	r2, #1396	; 0x574
 800a0d0:	490d      	ldr	r1, [pc, #52]	; (800a108 <lwip_netconn_do_connect+0x16c>)
 800a0d2:	480e      	ldr	r0, [pc, #56]	; (800a10c <lwip_netconn_do_connect+0x170>)
 800a0d4:	f00c f810 	bl	80160f8 <iprintf>
              return;
 800a0d8:	e00e      	b.n	800a0f8 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a0da:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <lwip_netconn_do_connect+0x168>)
 800a0dc:	f240 527d 	movw	r2, #1405	; 0x57d
 800a0e0:	490c      	ldr	r1, [pc, #48]	; (800a114 <lwip_netconn_do_connect+0x178>)
 800a0e2:	480a      	ldr	r0, [pc, #40]	; (800a10c <lwip_netconn_do_connect+0x170>)
 800a0e4:	f00c f808 	bl	80160f8 <iprintf>
 800a0e8:	23fa      	movs	r3, #250	; 0xfa
 800a0ea:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a0ec:	e000      	b.n	800a0f0 <lwip_netconn_do_connect+0x154>
        break;
 800a0ee:	bf00      	nop
    }
  }
  msg->err = err;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	7dfa      	ldrb	r2, [r7, #23]
 800a0f4:	711a      	strb	r2, [r3, #4]
 800a0f6:	e000      	b.n	800a0fa <lwip_netconn_do_connect+0x15e>
              return;
 800a0f8:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08009e7d 	.word	0x08009e7d
 800a104:	08017760 	.word	0x08017760
 800a108:	08017b20 	.word	0x08017b20
 800a10c:	080177a4 	.word	0x080177a4
 800a110:	240043a4 	.word	0x240043a4
 800a114:	08017ba8 	.word	0x08017ba8

0800a118 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2200      	movs	r2, #0
 800a128:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d022      	beq.n	800a17a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a13e:	2b10      	cmp	r3, #16
 800a140:	d11b      	bne.n	800a17a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14e:	d202      	bcs.n	800a156 <lwip_netconn_do_recv+0x3e>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	b29b      	uxth	r3, r3
 800a154:	e001      	b.n	800a15a <lwip_netconn_do_recv+0x42>
 800a156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a15a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	89fa      	ldrh	r2, [r7, #14]
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f003 f890 	bl	800d28c <tcp_recved>
        remaining -= recved;
 800a16c:	89fb      	ldrh	r3, [r7, #14]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e6      	bne.n	800a148 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <lwip_netconn_do_writemore+0x24>
 800a19a:	4b96      	ldr	r3, [pc, #600]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a19c:	f240 6273 	movw	r2, #1651	; 0x673
 800a1a0:	4995      	ldr	r1, [pc, #596]	; (800a3f8 <lwip_netconn_do_writemore+0x274>)
 800a1a2:	4896      	ldr	r0, [pc, #600]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a1a4:	f00b ffa8 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d006      	beq.n	800a1be <lwip_netconn_do_writemore+0x3a>
 800a1b0:	4b90      	ldr	r3, [pc, #576]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a1b2:	f240 6274 	movw	r2, #1652	; 0x674
 800a1b6:	4992      	ldr	r1, [pc, #584]	; (800a400 <lwip_netconn_do_writemore+0x27c>)
 800a1b8:	4890      	ldr	r0, [pc, #576]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a1ba:	f00b ff9d 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <lwip_netconn_do_writemore+0x50>
 800a1c6:	4b8b      	ldr	r3, [pc, #556]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a1c8:	f240 6275 	movw	r2, #1653	; 0x675
 800a1cc:	498d      	ldr	r1, [pc, #564]	; (800a404 <lwip_netconn_do_writemore+0x280>)
 800a1ce:	488b      	ldr	r0, [pc, #556]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a1d0:	f00b ff92 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d106      	bne.n	800a1ea <lwip_netconn_do_writemore+0x66>
 800a1dc:	4b85      	ldr	r3, [pc, #532]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a1de:	f240 6276 	movw	r2, #1654	; 0x676
 800a1e2:	4989      	ldr	r1, [pc, #548]	; (800a408 <lwip_netconn_do_writemore+0x284>)
 800a1e4:	4885      	ldr	r0, [pc, #532]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a1e6:	f00b ff87 	bl	80160f8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d306      	bcc.n	800a208 <lwip_netconn_do_writemore+0x84>
 800a1fa:	4b7e      	ldr	r3, [pc, #504]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a1fc:	f240 6277 	movw	r2, #1655	; 0x677
 800a200:	4982      	ldr	r1, [pc, #520]	; (800a40c <lwip_netconn_do_writemore+0x288>)
 800a202:	487e      	ldr	r0, [pc, #504]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a204:	f00b ff78 	bl	80160f8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	899b      	ldrh	r3, [r3, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <lwip_netconn_do_writemore+0x9c>
 800a212:	4b78      	ldr	r3, [pc, #480]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a214:	f240 6279 	movw	r2, #1657	; 0x679
 800a218:	497d      	ldr	r1, [pc, #500]	; (800a410 <lwip_netconn_do_writemore+0x28c>)
 800a21a:	4878      	ldr	r0, [pc, #480]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a21c:	f00b ff6c 	bl	80160f8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	7f1b      	ldrb	r3, [r3, #28]
 800a226:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7f1b      	ldrb	r3, [r3, #28]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <lwip_netconn_do_writemore+0xba>
 800a234:	7ebb      	ldrb	r3, [r7, #26]
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <lwip_netconn_do_writemore+0xbe>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <lwip_netconn_do_writemore+0xc0>
 800a242:	2300      	movs	r3, #0
 800a244:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	4413      	add	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a270:	d307      	bcc.n	800a282 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a276:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a278:	7ebb      	ldrb	r3, [r7, #26]
 800a27a:	f043 0302 	orr.w	r3, r3, #2
 800a27e:	76bb      	strb	r3, [r7, #26]
 800a280:	e001      	b.n	800a286 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a28e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a290:	89fa      	ldrh	r2, [r7, #14]
 800a292:	8bbb      	ldrh	r3, [r7, #28]
 800a294:	429a      	cmp	r2, r3
 800a296:	d216      	bcs.n	800a2c6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a298:	89fb      	ldrh	r3, [r7, #14]
 800a29a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a29c:	7e3b      	ldrb	r3, [r7, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00d      	beq.n	800a2be <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a2a2:	8bbb      	ldrh	r3, [r7, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10e      	bne.n	800a2c6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <lwip_netconn_do_writemore+0x134>
 800a2b2:	f06f 0306 	mvn.w	r3, #6
 800a2b6:	e000      	b.n	800a2ba <lwip_netconn_do_writemore+0x136>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a2bc:	e07d      	b.n	800a3ba <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a2be:	7ebb      	ldrb	r3, [r7, #26]
 800a2c0:	f043 0302 	orr.w	r3, r3, #2
 800a2c4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	8bbb      	ldrh	r3, [r7, #28]
 800a2ce:	441a      	add	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d906      	bls.n	800a2ea <lwip_netconn_do_writemore+0x166>
 800a2dc:	4b45      	ldr	r3, [pc, #276]	; (800a3f4 <lwip_netconn_do_writemore+0x270>)
 800a2de:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a2e2:	494c      	ldr	r1, [pc, #304]	; (800a414 <lwip_netconn_do_writemore+0x290>)
 800a2e4:	4845      	ldr	r0, [pc, #276]	; (800a3fc <lwip_netconn_do_writemore+0x278>)
 800a2e6:	f00b ff07 	bl	80160f8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a2ea:	8bbb      	ldrh	r3, [r7, #28]
 800a2ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d103      	bne.n	800a2fc <lwip_netconn_do_writemore+0x178>
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2fa:	d209      	bcs.n	800a310 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a300:	8bba      	ldrh	r2, [r7, #28]
 800a302:	429a      	cmp	r2, r3
 800a304:	d10b      	bne.n	800a31e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	899b      	ldrh	r3, [r3, #12]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d906      	bls.n	800a31e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a310:	2301      	movs	r3, #1
 800a312:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a314:	7ebb      	ldrb	r3, [r7, #26]
 800a316:	f043 0302 	orr.w	r3, r3, #2
 800a31a:	76bb      	strb	r3, [r7, #26]
 800a31c:	e001      	b.n	800a322 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6858      	ldr	r0, [r3, #4]
 800a326:	7ebb      	ldrb	r3, [r7, #26]
 800a328:	8bba      	ldrh	r2, [r7, #28]
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	f006 fece 	bl	80110cc <tcp_write>
 800a330:	4603      	mov	r3, r0
 800a332:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a334:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d12c      	bne.n	800a396 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	6999      	ldr	r1, [r3, #24]
 800a342:	8bba      	ldrh	r2, [r7, #28]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	440a      	add	r2, r1
 800a34a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	6919      	ldr	r1, [r3, #16]
 800a352:	8bba      	ldrh	r2, [r7, #28]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	440a      	add	r2, r1
 800a35a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d113      	bne.n	800a396 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	899a      	ldrh	r2, [r3, #12]
 800a374:	3a01      	subs	r2, #1
 800a376:	b292      	uxth	r2, r2
 800a378:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	899b      	ldrh	r3, [r3, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d008      	beq.n	800a396 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	3208      	adds	r2, #8
 800a38c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	2200      	movs	r2, #0
 800a394:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a396:	7e7b      	ldrb	r3, [r7, #25]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d004      	beq.n	800a3a6 <lwip_netconn_do_writemore+0x222>
 800a39c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f43f af50 	beq.w	800a246 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a3a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <lwip_netconn_do_writemore+0x234>
 800a3ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d146      	bne.n	800a446 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a3b8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a3ba:	7e3b      	ldrb	r3, [r7, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d02b      	beq.n	800a418 <lwip_netconn_do_writemore+0x294>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d223      	bcs.n	800a418 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <lwip_netconn_do_writemore+0x260>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2103      	movs	r1, #3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7f1b      	ldrb	r3, [r3, #28]
 800a3e8:	f043 0310 	orr.w	r3, r3, #16
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	771a      	strb	r2, [r3, #28]
 800a3f2:	e028      	b.n	800a446 <lwip_netconn_do_writemore+0x2c2>
 800a3f4:	08017760 	.word	0x08017760
 800a3f8:	080178b8 	.word	0x080178b8
 800a3fc:	080177a4 	.word	0x080177a4
 800a400:	08017bc0 	.word	0x08017bc0
 800a404:	080178c8 	.word	0x080178c8
 800a408:	08017be0 	.word	0x08017be0
 800a40c:	08017bf8 	.word	0x08017bf8
 800a410:	08017c38 	.word	0x08017c38
 800a414:	08017c60 	.word	0x08017c60
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a420:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a424:	d305      	bcc.n	800a432 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d909      	bls.n	800a446 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <lwip_netconn_do_writemore+0x2c2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	2200      	movs	r2, #0
 800a440:	2103      	movs	r1, #3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a446:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d11d      	bne.n	800a48a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	699a      	ldr	r2, [r3, #24]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d002      	beq.n	800a464 <lwip_netconn_do_writemore+0x2e0>
 800a45e:	7e3b      	ldrb	r3, [r7, #24]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a464:	2301      	movs	r3, #1
 800a466:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f007 fc17 	bl	8011ca0 <tcp_output>
 800a472:	4603      	mov	r3, r0
 800a474:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a476:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a47a:	f113 0f04 	cmn.w	r3, #4
 800a47e:	d12c      	bne.n	800a4da <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a480:	7b3b      	ldrb	r3, [r7, #12]
 800a482:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a484:	2301      	movs	r3, #1
 800a486:	76fb      	strb	r3, [r7, #27]
 800a488:	e027      	b.n	800a4da <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a48a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a492:	d120      	bne.n	800a4d6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4618      	mov	r0, r3
 800a49a:	f007 fc01 	bl	8011ca0 <tcp_output>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a4a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a4a6:	f113 0f04 	cmn.w	r3, #4
 800a4aa:	d104      	bne.n	800a4b6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a4ac:	7b7b      	ldrb	r3, [r7, #13]
 800a4ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	76fb      	strb	r3, [r7, #27]
 800a4b4:	e011      	b.n	800a4da <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a4b6:	7e3b      	ldrb	r3, [r7, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00e      	beq.n	800a4da <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <lwip_netconn_do_writemore+0x348>
 800a4c6:	f06f 0306 	mvn.w	r3, #6
 800a4ca:	e000      	b.n	800a4ce <lwip_netconn_do_writemore+0x34a>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	76fb      	strb	r3, [r7, #27]
 800a4d4:	e001      	b.n	800a4da <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a4da:	7efb      	ldrb	r3, [r7, #27]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d015      	beq.n	800a50c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	7ffa      	ldrb	r2, [r7, #31]
 800a4f0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d006      	beq.n	800a512 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a504:	68b8      	ldr	r0, [r7, #8]
 800a506:	f00b fc35 	bl	8015d74 <sys_sem_signal>
 800a50a:	e002      	b.n	800a512 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a50c:	f04f 33ff 	mov.w	r3, #4294967295
 800a510:	e000      	b.n	800a514 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fd22 	bl	8008f76 <netconn_err>
 800a532:	4603      	mov	r3, r0
 800a534:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d166      	bne.n	800a60c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d15d      	bne.n	800a608 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	785b      	ldrb	r3, [r3, #1]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d002      	beq.n	800a55c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a556:	23fb      	movs	r3, #251	; 0xfb
 800a558:	73fb      	strb	r3, [r7, #15]
 800a55a:	e057      	b.n	800a60c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d04d      	beq.n	800a602 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2201      	movs	r2, #1
 800a56c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d006      	beq.n	800a586 <lwip_netconn_do_write+0x6a>
 800a578:	4b28      	ldr	r3, [pc, #160]	; (800a61c <lwip_netconn_do_write+0x100>)
 800a57a:	f240 7223 	movw	r2, #1827	; 0x723
 800a57e:	4928      	ldr	r1, [pc, #160]	; (800a620 <lwip_netconn_do_write+0x104>)
 800a580:	4828      	ldr	r0, [pc, #160]	; (800a624 <lwip_netconn_do_write+0x108>)
 800a582:	f00b fdb9 	bl	80160f8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d106      	bne.n	800a59c <lwip_netconn_do_write+0x80>
 800a58e:	4b23      	ldr	r3, [pc, #140]	; (800a61c <lwip_netconn_do_write+0x100>)
 800a590:	f240 7224 	movw	r2, #1828	; 0x724
 800a594:	4924      	ldr	r1, [pc, #144]	; (800a628 <lwip_netconn_do_write+0x10c>)
 800a596:	4823      	ldr	r0, [pc, #140]	; (800a624 <lwip_netconn_do_write+0x108>)
 800a598:	f00b fdae 	bl	80160f8 <iprintf>
        msg->conn->current_msg = msg;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff fdea 	bl	800a184 <lwip_netconn_do_writemore>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d02e      	beq.n	800a614 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d006      	beq.n	800a5ce <lwip_netconn_do_write+0xb2>
 800a5c0:	4b16      	ldr	r3, [pc, #88]	; (800a61c <lwip_netconn_do_write+0x100>)
 800a5c2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a5c6:	4919      	ldr	r1, [pc, #100]	; (800a62c <lwip_netconn_do_write+0x110>)
 800a5c8:	4816      	ldr	r0, [pc, #88]	; (800a624 <lwip_netconn_do_write+0x108>)
 800a5ca:	f00b fd95 	bl	80160f8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a5ce:	4818      	ldr	r0, [pc, #96]	; (800a630 <lwip_netconn_do_write+0x114>)
 800a5d0:	f00b fc41 	bl	8015e56 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f00b fb98 	bl	8015d12 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a5e2:	4813      	ldr	r0, [pc, #76]	; (800a630 <lwip_netconn_do_write+0x114>)
 800a5e4:	f00b fc28 	bl	8015e38 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d110      	bne.n	800a614 <lwip_netconn_do_write+0xf8>
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <lwip_netconn_do_write+0x100>)
 800a5f4:	f240 722c 	movw	r2, #1836	; 0x72c
 800a5f8:	490c      	ldr	r1, [pc, #48]	; (800a62c <lwip_netconn_do_write+0x110>)
 800a5fa:	480a      	ldr	r0, [pc, #40]	; (800a624 <lwip_netconn_do_write+0x108>)
 800a5fc:	f00b fd7c 	bl	80160f8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a600:	e008      	b.n	800a614 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a602:	23f5      	movs	r3, #245	; 0xf5
 800a604:	73fb      	strb	r3, [r7, #15]
 800a606:	e001      	b.n	800a60c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a608:	23fa      	movs	r3, #250	; 0xfa
 800a60a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	7bfa      	ldrb	r2, [r7, #15]
 800a610:	711a      	strb	r2, [r3, #4]
 800a612:	e000      	b.n	800a616 <lwip_netconn_do_write+0xfa>
        return;
 800a614:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	08017760 	.word	0x08017760
 800a620:	08017b04 	.word	0x08017b04
 800a624:	080177a4 	.word	0x080177a4
 800a628:	08017c8c 	.word	0x08017c8c
 800a62c:	08017b20 	.word	0x08017b20
 800a630:	240043a4 	.word	0x240043a4

0800a634 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d069      	beq.n	800a726 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a65c:	2b10      	cmp	r3, #16
 800a65e:	d162      	bne.n	800a726 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a664:	2b03      	cmp	r3, #3
 800a666:	d002      	beq.n	800a66e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d05b      	beq.n	800a726 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	2b03      	cmp	r3, #3
 800a672:	d103      	bne.n	800a67c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	22f5      	movs	r2, #245	; 0xf5
 800a678:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a67a:	e059      	b.n	800a730 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a67c:	7afb      	ldrb	r3, [r7, #11]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d103      	bne.n	800a68a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	22fb      	movs	r2, #251	; 0xfb
 800a686:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a688:	e052      	b.n	800a730 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	7a1b      	ldrb	r3, [r3, #8]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff f8e8 	bl	8009870 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <lwip_netconn_do_close+0x84>
 800a6aa:	4b23      	ldr	r3, [pc, #140]	; (800a738 <lwip_netconn_do_close+0x104>)
 800a6ac:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a6b0:	4922      	ldr	r1, [pc, #136]	; (800a73c <lwip_netconn_do_close+0x108>)
 800a6b2:	4823      	ldr	r0, [pc, #140]	; (800a740 <lwip_netconn_do_close+0x10c>)
 800a6b4:	f00b fd20 	bl	80160f8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2204      	movs	r2, #4
 800a6be:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7ff f94c 	bl	800996c <lwip_netconn_do_close_internal>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d029      	beq.n	800a72e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d006      	beq.n	800a6f2 <lwip_netconn_do_close+0xbe>
 800a6e4:	4b14      	ldr	r3, [pc, #80]	; (800a738 <lwip_netconn_do_close+0x104>)
 800a6e6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a6ea:	4916      	ldr	r1, [pc, #88]	; (800a744 <lwip_netconn_do_close+0x110>)
 800a6ec:	4814      	ldr	r0, [pc, #80]	; (800a740 <lwip_netconn_do_close+0x10c>)
 800a6ee:	f00b fd03 	bl	80160f8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a6f2:	4815      	ldr	r0, [pc, #84]	; (800a748 <lwip_netconn_do_close+0x114>)
 800a6f4:	f00b fbaf 	bl	8015e56 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f00b fb06 	bl	8015d12 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a706:	4810      	ldr	r0, [pc, #64]	; (800a748 <lwip_netconn_do_close+0x114>)
 800a708:	f00b fb96 	bl	8015e38 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <lwip_netconn_do_close+0xfa>
 800a716:	4b08      	ldr	r3, [pc, #32]	; (800a738 <lwip_netconn_do_close+0x104>)
 800a718:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a71c:	4909      	ldr	r1, [pc, #36]	; (800a744 <lwip_netconn_do_close+0x110>)
 800a71e:	4808      	ldr	r0, [pc, #32]	; (800a740 <lwip_netconn_do_close+0x10c>)
 800a720:	f00b fcea 	bl	80160f8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a724:	e003      	b.n	800a72e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	22f5      	movs	r2, #245	; 0xf5
 800a72a:	711a      	strb	r2, [r3, #4]
 800a72c:	e000      	b.n	800a730 <lwip_netconn_do_close+0xfc>
      return;
 800a72e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	08017760 	.word	0x08017760
 800a73c:	08017b04 	.word	0x08017b04
 800a740:	080177a4 	.word	0x080177a4
 800a744:	08017b20 	.word	0x08017b20
 800a748:	240043a4 	.word	0x240043a4

0800a74c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d013      	beq.n	800a782 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4618      	mov	r0, r3
 800a768:	f001 fea2 	bl	800c4b0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	2006      	movs	r0, #6
 800a77e:	f000 fff3 	bl	800b768 <memp_free>
  }
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d108      	bne.n	800a7ac <netbuf_next+0x20>
 800a79a:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <netbuf_next+0x54>)
 800a79c:	22e0      	movs	r2, #224	; 0xe0
 800a79e:	4911      	ldr	r1, [pc, #68]	; (800a7e4 <netbuf_next+0x58>)
 800a7a0:	4811      	ldr	r0, [pc, #68]	; (800a7e8 <netbuf_next+0x5c>)
 800a7a2:	f00b fca9 	bl	80160f8 <iprintf>
 800a7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7aa:	e014      	b.n	800a7d6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <netbuf_next+0x30>
    return -1;
 800a7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ba:	e00c      	b.n	800a7d6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <netbuf_next+0x48>
    return 1;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <netbuf_next+0x4a>
  }
  return 0;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	08017cb8 	.word	0x08017cb8
 800a7e4:	08017e18 	.word	0x08017e18
 800a7e8:	08017d08 	.word	0x08017d08

0800a7ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a7f6:	f008 fb0b 	bl	8012e10 <sys_timeouts_sleeptime>
 800a7fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d10b      	bne.n	800a81c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a804:	4813      	ldr	r0, [pc, #76]	; (800a854 <tcpip_timeouts_mbox_fetch+0x68>)
 800a806:	f00b fb26 	bl	8015e56 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a80a:	2200      	movs	r2, #0
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f00b f9de 	bl	8015bd0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a814:	480f      	ldr	r0, [pc, #60]	; (800a854 <tcpip_timeouts_mbox_fetch+0x68>)
 800a816:	f00b fb0f 	bl	8015e38 <sys_mutex_lock>
    return;
 800a81a:	e018      	b.n	800a84e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d102      	bne.n	800a828 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a822:	f008 fabb 	bl	8012d9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a826:	e7e6      	b.n	800a7f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a828:	480a      	ldr	r0, [pc, #40]	; (800a854 <tcpip_timeouts_mbox_fetch+0x68>)
 800a82a:	f00b fb14 	bl	8015e56 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f00b f9cc 	bl	8015bd0 <sys_arch_mbox_fetch>
 800a838:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a83a:	4806      	ldr	r0, [pc, #24]	; (800a854 <tcpip_timeouts_mbox_fetch+0x68>)
 800a83c:	f00b fafc 	bl	8015e38 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d102      	bne.n	800a84e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a848:	f008 faa8 	bl	8012d9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a84c:	e7d3      	b.n	800a7f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	240043a4 	.word	0x240043a4

0800a858 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a860:	4810      	ldr	r0, [pc, #64]	; (800a8a4 <tcpip_thread+0x4c>)
 800a862:	f00b fae9 	bl	8015e38 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a866:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <tcpip_thread+0x50>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a86e:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <tcpip_thread+0x50>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a0e      	ldr	r2, [pc, #56]	; (800a8ac <tcpip_thread+0x54>)
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	4610      	mov	r0, r2
 800a878:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a87a:	f107 030c 	add.w	r3, r7, #12
 800a87e:	4619      	mov	r1, r3
 800a880:	480b      	ldr	r0, [pc, #44]	; (800a8b0 <tcpip_thread+0x58>)
 800a882:	f7ff ffb3 	bl	800a7ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d106      	bne.n	800a89a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a88c:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <tcpip_thread+0x5c>)
 800a88e:	2291      	movs	r2, #145	; 0x91
 800a890:	4909      	ldr	r1, [pc, #36]	; (800a8b8 <tcpip_thread+0x60>)
 800a892:	480a      	ldr	r0, [pc, #40]	; (800a8bc <tcpip_thread+0x64>)
 800a894:	f00b fc30 	bl	80160f8 <iprintf>
      continue;
 800a898:	e003      	b.n	800a8a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 f80f 	bl	800a8c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a8a2:	e7ea      	b.n	800a87a <tcpip_thread+0x22>
 800a8a4:	240043a4 	.word	0x240043a4
 800a8a8:	24004398 	.word	0x24004398
 800a8ac:	2400439c 	.word	0x2400439c
 800a8b0:	240043a0 	.word	0x240043a0
 800a8b4:	08017e50 	.word	0x08017e50
 800a8b8:	08017e80 	.word	0x08017e80
 800a8bc:	08017ea0 	.word	0x08017ea0

0800a8c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d026      	beq.n	800a91e <tcpip_thread_handle_msg+0x5e>
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	dc2b      	bgt.n	800a92c <tcpip_thread_handle_msg+0x6c>
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <tcpip_thread_handle_msg+0x1e>
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d015      	beq.n	800a908 <tcpip_thread_handle_msg+0x48>
 800a8dc:	e026      	b.n	800a92c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6850      	ldr	r0, [r2, #4]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	6892      	ldr	r2, [r2, #8]
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4798      	blx	r3
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d004      	beq.n	800a8fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 fdd9 	bl	800c4b0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	2009      	movs	r0, #9
 800a902:	f000 ff31 	bl	800b768 <memp_free>
      break;
 800a906:	e018      	b.n	800a93a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6892      	ldr	r2, [r2, #8]
 800a910:	4610      	mov	r0, r2
 800a912:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	2008      	movs	r0, #8
 800a918:	f000 ff26 	bl	800b768 <memp_free>
      break;
 800a91c:	e00d      	b.n	800a93a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6892      	ldr	r2, [r2, #8]
 800a926:	4610      	mov	r0, r2
 800a928:	4798      	blx	r3
      break;
 800a92a:	e006      	b.n	800a93a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <tcpip_thread_handle_msg+0x84>)
 800a92e:	22cf      	movs	r2, #207	; 0xcf
 800a930:	4905      	ldr	r1, [pc, #20]	; (800a948 <tcpip_thread_handle_msg+0x88>)
 800a932:	4806      	ldr	r0, [pc, #24]	; (800a94c <tcpip_thread_handle_msg+0x8c>)
 800a934:	f00b fbe0 	bl	80160f8 <iprintf>
      break;
 800a938:	bf00      	nop
  }
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	08017e50 	.word	0x08017e50
 800a948:	08017e80 	.word	0x08017e80
 800a94c:	08017ea0 	.word	0x08017ea0

0800a950 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a95c:	481a      	ldr	r0, [pc, #104]	; (800a9c8 <tcpip_inpkt+0x78>)
 800a95e:	f00b f992 	bl	8015c86 <sys_mbox_valid>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <tcpip_inpkt+0x24>
 800a968:	4b18      	ldr	r3, [pc, #96]	; (800a9cc <tcpip_inpkt+0x7c>)
 800a96a:	22fc      	movs	r2, #252	; 0xfc
 800a96c:	4918      	ldr	r1, [pc, #96]	; (800a9d0 <tcpip_inpkt+0x80>)
 800a96e:	4819      	ldr	r0, [pc, #100]	; (800a9d4 <tcpip_inpkt+0x84>)
 800a970:	f00b fbc2 	bl	80160f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a974:	2009      	movs	r0, #9
 800a976:	f000 fe81 	bl	800b67c <memp_malloc>
 800a97a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295
 800a986:	e01a      	b.n	800a9be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a9a0:	6979      	ldr	r1, [r7, #20]
 800a9a2:	4809      	ldr	r0, [pc, #36]	; (800a9c8 <tcpip_inpkt+0x78>)
 800a9a4:	f00b f8fa 	bl	8015b9c <sys_mbox_trypost>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d006      	beq.n	800a9bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a9ae:	6979      	ldr	r1, [r7, #20]
 800a9b0:	2009      	movs	r0, #9
 800a9b2:	f000 fed9 	bl	800b768 <memp_free>
    return ERR_MEM;
 800a9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ba:	e000      	b.n	800a9be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a9bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	240043a0 	.word	0x240043a0
 800a9cc:	08017e50 	.word	0x08017e50
 800a9d0:	08017ec8 	.word	0x08017ec8
 800a9d4:	08017ea0 	.word	0x08017ea0

0800a9d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a9e8:	f003 0318 	and.w	r3, r3, #24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a9f0:	4a08      	ldr	r2, [pc, #32]	; (800aa14 <tcpip_input+0x3c>)
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffab 	bl	800a950 <tcpip_inpkt>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	e005      	b.n	800aa0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a9fe:	4a06      	ldr	r2, [pc, #24]	; (800aa18 <tcpip_input+0x40>)
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ffa4 	bl	800a950 <tcpip_inpkt>
 800aa08:	4603      	mov	r3, r0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	08015989 	.word	0x08015989
 800aa18:	08014891 	.word	0x08014891

0800aa1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa26:	4819      	ldr	r0, [pc, #100]	; (800aa8c <tcpip_try_callback+0x70>)
 800aa28:	f00b f92d 	bl	8015c86 <sys_mbox_valid>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <tcpip_try_callback+0x24>
 800aa32:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <tcpip_try_callback+0x74>)
 800aa34:	f240 125d 	movw	r2, #349	; 0x15d
 800aa38:	4916      	ldr	r1, [pc, #88]	; (800aa94 <tcpip_try_callback+0x78>)
 800aa3a:	4817      	ldr	r0, [pc, #92]	; (800aa98 <tcpip_try_callback+0x7c>)
 800aa3c:	f00b fb5c 	bl	80160f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aa40:	2008      	movs	r0, #8
 800aa42:	f000 fe1b 	bl	800b67c <memp_malloc>
 800aa46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800aa4e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa52:	e017      	b.n	800aa84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	4808      	ldr	r0, [pc, #32]	; (800aa8c <tcpip_try_callback+0x70>)
 800aa6a:	f00b f897 	bl	8015b9c <sys_mbox_trypost>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa74:	68f9      	ldr	r1, [r7, #12]
 800aa76:	2008      	movs	r0, #8
 800aa78:	f000 fe76 	bl	800b768 <memp_free>
    return ERR_MEM;
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	e000      	b.n	800aa84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	240043a0 	.word	0x240043a0
 800aa90:	08017e50 	.word	0x08017e50
 800aa94:	08017ec8 	.word	0x08017ec8
 800aa98:	08017ea0 	.word	0x08017ea0

0800aa9c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800aaa8:	4806      	ldr	r0, [pc, #24]	; (800aac4 <tcpip_send_msg_wait_sem+0x28>)
 800aaaa:	f00b f9c5 	bl	8015e38 <sys_mutex_lock>
  fn(apimsg);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68b8      	ldr	r0, [r7, #8]
 800aab2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800aab4:	4803      	ldr	r0, [pc, #12]	; (800aac4 <tcpip_send_msg_wait_sem+0x28>)
 800aab6:	f00b f9ce 	bl	8015e56 <sys_mutex_unlock>
  return ERR_OK;
 800aaba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	240043a4 	.word	0x240043a4

0800aac8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af02      	add	r7, sp, #8
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800aad2:	f000 f92d 	bl	800ad30 <lwip_init>

  tcpip_init_done = initfunc;
 800aad6:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <tcpip_init+0x6c>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aadc:	4a16      	ldr	r2, [pc, #88]	; (800ab38 <tcpip_init+0x70>)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aae2:	2106      	movs	r1, #6
 800aae4:	4815      	ldr	r0, [pc, #84]	; (800ab3c <tcpip_init+0x74>)
 800aae6:	f00b f825 	bl	8015b34 <sys_mbox_new>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d006      	beq.n	800aafe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <tcpip_init+0x78>)
 800aaf2:	f240 2261 	movw	r2, #609	; 0x261
 800aaf6:	4913      	ldr	r1, [pc, #76]	; (800ab44 <tcpip_init+0x7c>)
 800aaf8:	4813      	ldr	r0, [pc, #76]	; (800ab48 <tcpip_init+0x80>)
 800aafa:	f00b fafd 	bl	80160f8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aafe:	4813      	ldr	r0, [pc, #76]	; (800ab4c <tcpip_init+0x84>)
 800ab00:	f00b f97e 	bl	8015e00 <sys_mutex_new>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ab0a:	4b0d      	ldr	r3, [pc, #52]	; (800ab40 <tcpip_init+0x78>)
 800ab0c:	f240 2265 	movw	r2, #613	; 0x265
 800ab10:	490f      	ldr	r1, [pc, #60]	; (800ab50 <tcpip_init+0x88>)
 800ab12:	480d      	ldr	r0, [pc, #52]	; (800ab48 <tcpip_init+0x80>)
 800ab14:	f00b faf0 	bl	80160f8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab20:	2200      	movs	r2, #0
 800ab22:	490c      	ldr	r1, [pc, #48]	; (800ab54 <tcpip_init+0x8c>)
 800ab24:	480c      	ldr	r0, [pc, #48]	; (800ab58 <tcpip_init+0x90>)
 800ab26:	f00b f9a3 	bl	8015e70 <sys_thread_new>
}
 800ab2a:	bf00      	nop
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	24004398 	.word	0x24004398
 800ab38:	2400439c 	.word	0x2400439c
 800ab3c:	240043a0 	.word	0x240043a0
 800ab40:	08017e50 	.word	0x08017e50
 800ab44:	08017ed8 	.word	0x08017ed8
 800ab48:	08017ea0 	.word	0x08017ea0
 800ab4c:	240043a4 	.word	0x240043a4
 800ab50:	08017efc 	.word	0x08017efc
 800ab54:	0800a859 	.word	0x0800a859
 800ab58:	08017f20 	.word	0x08017f20

0800ab5c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	b21a      	sxth	r2, r3
 800ab6c:	88fb      	ldrh	r3, [r7, #6]
 800ab6e:	0a1b      	lsrs	r3, r3, #8
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	b21b      	sxth	r3, r3
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	b29b      	uxth	r3, r3
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	061a      	lsls	r2, r3, #24
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aba4:	431a      	orrs	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	0e1b      	lsrs	r3, r3, #24
 800abaa:	4313      	orrs	r3, r2
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	; 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00d      	beq.n	800abf8 <lwip_standard_chksum+0x40>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dd0a      	ble.n	800abf8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800abe2:	69fa      	ldr	r2, [r7, #28]
 800abe4:	1c53      	adds	r3, r2, #1
 800abe6:	61fb      	str	r3, [r7, #28]
 800abe8:	f107 030e 	add.w	r3, r7, #14
 800abec:	3301      	adds	r3, #1
 800abee:	7812      	ldrb	r2, [r2, #0]
 800abf0:	701a      	strb	r2, [r3, #0]
    len--;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800abfc:	e00a      	b.n	800ac14 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	1c9a      	adds	r2, r3, #2
 800ac02:	61ba      	str	r2, [r7, #24]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	3b02      	subs	r3, #2
 800ac12:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	dcf1      	bgt.n	800abfe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd04      	ble.n	800ac2a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ac20:	f107 030e 	add.w	r3, r7, #14
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ac2a:	89fb      	ldrh	r3, [r7, #14]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	4413      	add	r3, r2
 800ac32:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	0c1a      	lsrs	r2, r3, #16
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	0c1a      	lsrs	r2, r3, #16
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	4413      	add	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	0a1b      	lsrs	r3, r3, #8
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	b29b      	uxth	r3, r3
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3724      	adds	r7, #36	; 0x24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ac7e:	887b      	ldrh	r3, [r7, #2]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff ff98 	bl	800abb8 <lwip_standard_chksum>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	43db      	mvns	r3, r3
 800ac8c:	b29b      	uxth	r3, r3
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	613b      	str	r3, [r7, #16]
 800acaa:	e02b      	b.n	800ad04 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	895b      	ldrh	r3, [r3, #10]
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7ff ff7e 	bl	800abb8 <lwip_standard_chksum>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	4413      	add	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	0c1a      	lsrs	r2, r3, #16
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	b29b      	uxth	r3, r3
 800acce:	4413      	add	r3, r2
 800acd0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	895b      	ldrh	r3, [r3, #10]
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	b29b      	uxth	r3, r3
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00e      	beq.n	800acfe <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bf0c      	ite	eq
 800ace6:	2301      	moveq	r3, #1
 800ace8:	2300      	movne	r3, #0
 800acea:	b2db      	uxtb	r3, r3
 800acec:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	0a1b      	lsrs	r3, r3, #8
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	4313      	orrs	r3, r2
 800acfc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1d0      	bne.n	800acac <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d007      	beq.n	800ad20 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	021b      	lsls	r3, r3, #8
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	0a1b      	lsrs	r3, r3, #8
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	43db      	mvns	r3, r3
 800ad26:	b29b      	uxth	r3, r3
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ad3a:	f00b f853 	bl	8015de4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ad3e:	f000 f8d5 	bl	800aeec <mem_init>
  memp_init();
 800ad42:	f000 fc2d 	bl	800b5a0 <memp_init>
  pbuf_init();
  netif_init();
 800ad46:	f000 fd39 	bl	800b7bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ad4a:	f008 f899 	bl	8012e80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad4e:	f001 fe49 	bl	800c9e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ad52:	f007 ffdb 	bl	8012d0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <ptr_to_mem+0x20>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	88fb      	ldrh	r3, [r7, #6]
 800ad70:	4413      	add	r3, r2
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	240043c0 	.word	0x240043c0

0800ad84 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad8c:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <mem_to_ptr+0x20>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	b29b      	uxth	r3, r3
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	240043c0 	.word	0x240043c0

0800ada8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ada8:	b590      	push	{r4, r7, lr}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800adb0:	4b45      	ldr	r3, [pc, #276]	; (800aec8 <plug_holes+0x120>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d206      	bcs.n	800adc8 <plug_holes+0x20>
 800adba:	4b44      	ldr	r3, [pc, #272]	; (800aecc <plug_holes+0x124>)
 800adbc:	f240 12df 	movw	r2, #479	; 0x1df
 800adc0:	4943      	ldr	r1, [pc, #268]	; (800aed0 <plug_holes+0x128>)
 800adc2:	4844      	ldr	r0, [pc, #272]	; (800aed4 <plug_holes+0x12c>)
 800adc4:	f00b f998 	bl	80160f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800adc8:	4b43      	ldr	r3, [pc, #268]	; (800aed8 <plug_holes+0x130>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	429a      	cmp	r2, r3
 800add0:	d306      	bcc.n	800ade0 <plug_holes+0x38>
 800add2:	4b3e      	ldr	r3, [pc, #248]	; (800aecc <plug_holes+0x124>)
 800add4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800add8:	4940      	ldr	r1, [pc, #256]	; (800aedc <plug_holes+0x134>)
 800adda:	483e      	ldr	r0, [pc, #248]	; (800aed4 <plug_holes+0x12c>)
 800addc:	f00b f98c 	bl	80160f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	791b      	ldrb	r3, [r3, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d006      	beq.n	800adf6 <plug_holes+0x4e>
 800ade8:	4b38      	ldr	r3, [pc, #224]	; (800aecc <plug_holes+0x124>)
 800adea:	f240 12e1 	movw	r2, #481	; 0x1e1
 800adee:	493c      	ldr	r1, [pc, #240]	; (800aee0 <plug_holes+0x138>)
 800adf0:	4838      	ldr	r0, [pc, #224]	; (800aed4 <plug_holes+0x12c>)
 800adf2:	f00b f981 	bl	80160f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adfe:	d906      	bls.n	800ae0e <plug_holes+0x66>
 800ae00:	4b32      	ldr	r3, [pc, #200]	; (800aecc <plug_holes+0x124>)
 800ae02:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ae06:	4937      	ldr	r1, [pc, #220]	; (800aee4 <plug_holes+0x13c>)
 800ae08:	4832      	ldr	r0, [pc, #200]	; (800aed4 <plug_holes+0x12c>)
 800ae0a:	f00b f975 	bl	80160f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff ffa4 	bl	800ad60 <ptr_to_mem>
 800ae18:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d024      	beq.n	800ae6c <plug_holes+0xc4>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	791b      	ldrb	r3, [r3, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d120      	bne.n	800ae6c <plug_holes+0xc4>
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <plug_holes+0x130>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d01b      	beq.n	800ae6c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ae34:	4b2c      	ldr	r3, [pc, #176]	; (800aee8 <plug_holes+0x140>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d102      	bne.n	800ae44 <plug_holes+0x9c>
      lfree = mem;
 800ae3e:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <plug_holes+0x140>)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	881a      	ldrh	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae54:	d00a      	beq.n	800ae6c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ff80 	bl	800ad60 <ptr_to_mem>
 800ae60:	4604      	mov	r4, r0
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ff8e 	bl	800ad84 <mem_to_ptr>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	885b      	ldrh	r3, [r3, #2]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff ff75 	bl	800ad60 <ptr_to_mem>
 800ae76:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d01f      	beq.n	800aec0 <plug_holes+0x118>
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	791b      	ldrb	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d11b      	bne.n	800aec0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae88:	4b17      	ldr	r3, [pc, #92]	; (800aee8 <plug_holes+0x140>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d102      	bne.n	800ae98 <plug_holes+0xf0>
      lfree = pmem;
 800ae92:	4a15      	ldr	r2, [pc, #84]	; (800aee8 <plug_holes+0x140>)
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	881a      	ldrh	r2, [r3, #0]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea8:	d00a      	beq.n	800aec0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff ff56 	bl	800ad60 <ptr_to_mem>
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	68b8      	ldr	r0, [r7, #8]
 800aeb8:	f7ff ff64 	bl	800ad84 <mem_to_ptr>
 800aebc:	4603      	mov	r3, r0
 800aebe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aec0:	bf00      	nop
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd90      	pop	{r4, r7, pc}
 800aec8:	240043c0 	.word	0x240043c0
 800aecc:	08017f30 	.word	0x08017f30
 800aed0:	08017f60 	.word	0x08017f60
 800aed4:	08017f78 	.word	0x08017f78
 800aed8:	240043c4 	.word	0x240043c4
 800aedc:	08017fa0 	.word	0x08017fa0
 800aee0:	08017fbc 	.word	0x08017fbc
 800aee4:	08017fd8 	.word	0x08017fd8
 800aee8:	240043cc 	.word	0x240043cc

0800aeec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aef2:	4b1d      	ldr	r3, [pc, #116]	; (800af68 <mem_init+0x7c>)
 800aef4:	4a1d      	ldr	r2, [pc, #116]	; (800af6c <mem_init+0x80>)
 800aef6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aef8:	4b1b      	ldr	r3, [pc, #108]	; (800af68 <mem_init+0x7c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800af12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af16:	f7ff ff23 	bl	800ad60 <ptr_to_mem>
 800af1a:	4603      	mov	r3, r0
 800af1c:	4a14      	ldr	r2, [pc, #80]	; (800af70 <mem_init+0x84>)
 800af1e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800af20:	4b13      	ldr	r3, [pc, #76]	; (800af70 <mem_init+0x84>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2201      	movs	r2, #1
 800af26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800af28:	4b11      	ldr	r3, [pc, #68]	; (800af70 <mem_init+0x84>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800af32:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <mem_init+0x84>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <mem_init+0x7c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0c      	ldr	r2, [pc, #48]	; (800af74 <mem_init+0x88>)
 800af42:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800af44:	480c      	ldr	r0, [pc, #48]	; (800af78 <mem_init+0x8c>)
 800af46:	f00a ff5b 	bl	8015e00 <sys_mutex_new>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800af50:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <mem_init+0x90>)
 800af52:	f240 221f 	movw	r2, #543	; 0x21f
 800af56:	490a      	ldr	r1, [pc, #40]	; (800af80 <mem_init+0x94>)
 800af58:	480a      	ldr	r0, [pc, #40]	; (800af84 <mem_init+0x98>)
 800af5a:	f00b f8cd 	bl	80160f8 <iprintf>
  }
}
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	240043c0 	.word	0x240043c0
 800af6c:	30020000 	.word	0x30020000
 800af70:	240043c4 	.word	0x240043c4
 800af74:	240043cc 	.word	0x240043cc
 800af78:	240043c8 	.word	0x240043c8
 800af7c:	08017f30 	.word	0x08017f30
 800af80:	08018004 	.word	0x08018004
 800af84:	08017f78 	.word	0x08017f78

0800af88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff fef7 	bl	800ad84 <mem_to_ptr>
 800af96:	4603      	mov	r3, r0
 800af98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fede 	bl	800ad60 <ptr_to_mem>
 800afa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fed8 	bl	800ad60 <ptr_to_mem>
 800afb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afba:	d818      	bhi.n	800afee <mem_link_valid+0x66>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	885b      	ldrh	r3, [r3, #2]
 800afc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc4:	d813      	bhi.n	800afee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800afca:	8afa      	ldrh	r2, [r7, #22]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d004      	beq.n	800afda <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	8afa      	ldrh	r2, [r7, #22]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d109      	bne.n	800afee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afda:	4b08      	ldr	r3, [pc, #32]	; (800affc <mem_link_valid+0x74>)
 800afdc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d006      	beq.n	800aff2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	885b      	ldrh	r3, [r3, #2]
 800afe8:	8afa      	ldrh	r2, [r7, #22]
 800afea:	429a      	cmp	r2, r3
 800afec:	d001      	beq.n	800aff2 <mem_link_valid+0x6a>
    return 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	e000      	b.n	800aff4 <mem_link_valid+0x6c>
  }
  return 1;
 800aff2:	2301      	movs	r3, #1
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	240043c4 	.word	0x240043c4

0800b000 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d070      	beq.n	800b0f0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f003 0303 	and.w	r3, r3, #3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00d      	beq.n	800b034 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b018:	4b37      	ldr	r3, [pc, #220]	; (800b0f8 <mem_free+0xf8>)
 800b01a:	f240 2273 	movw	r2, #627	; 0x273
 800b01e:	4937      	ldr	r1, [pc, #220]	; (800b0fc <mem_free+0xfc>)
 800b020:	4837      	ldr	r0, [pc, #220]	; (800b100 <mem_free+0x100>)
 800b022:	f00b f869 	bl	80160f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b026:	f00a ff49 	bl	8015ebc <sys_arch_protect>
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f00a ff53 	bl	8015ed8 <sys_arch_unprotect>
    return;
 800b032:	e05e      	b.n	800b0f2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3b08      	subs	r3, #8
 800b038:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b03a:	4b32      	ldr	r3, [pc, #200]	; (800b104 <mem_free+0x104>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69fa      	ldr	r2, [r7, #28]
 800b040:	429a      	cmp	r2, r3
 800b042:	d306      	bcc.n	800b052 <mem_free+0x52>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f103 020c 	add.w	r2, r3, #12
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <mem_free+0x108>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d90d      	bls.n	800b06e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b052:	4b29      	ldr	r3, [pc, #164]	; (800b0f8 <mem_free+0xf8>)
 800b054:	f240 227f 	movw	r2, #639	; 0x27f
 800b058:	492c      	ldr	r1, [pc, #176]	; (800b10c <mem_free+0x10c>)
 800b05a:	4829      	ldr	r0, [pc, #164]	; (800b100 <mem_free+0x100>)
 800b05c:	f00b f84c 	bl	80160f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b060:	f00a ff2c 	bl	8015ebc <sys_arch_protect>
 800b064:	6138      	str	r0, [r7, #16]
 800b066:	6938      	ldr	r0, [r7, #16]
 800b068:	f00a ff36 	bl	8015ed8 <sys_arch_unprotect>
    return;
 800b06c:	e041      	b.n	800b0f2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b06e:	4828      	ldr	r0, [pc, #160]	; (800b110 <mem_free+0x110>)
 800b070:	f00a fee2 	bl	8015e38 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	791b      	ldrb	r3, [r3, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d110      	bne.n	800b09e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b07c:	4b1e      	ldr	r3, [pc, #120]	; (800b0f8 <mem_free+0xf8>)
 800b07e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b082:	4924      	ldr	r1, [pc, #144]	; (800b114 <mem_free+0x114>)
 800b084:	481e      	ldr	r0, [pc, #120]	; (800b100 <mem_free+0x100>)
 800b086:	f00b f837 	bl	80160f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b08a:	4821      	ldr	r0, [pc, #132]	; (800b110 <mem_free+0x110>)
 800b08c:	f00a fee3 	bl	8015e56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b090:	f00a ff14 	bl	8015ebc <sys_arch_protect>
 800b094:	6178      	str	r0, [r7, #20]
 800b096:	6978      	ldr	r0, [r7, #20]
 800b098:	f00a ff1e 	bl	8015ed8 <sys_arch_unprotect>
    return;
 800b09c:	e029      	b.n	800b0f2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b09e:	69f8      	ldr	r0, [r7, #28]
 800b0a0:	f7ff ff72 	bl	800af88 <mem_link_valid>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d110      	bne.n	800b0cc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b0aa:	4b13      	ldr	r3, [pc, #76]	; (800b0f8 <mem_free+0xf8>)
 800b0ac:	f240 2295 	movw	r2, #661	; 0x295
 800b0b0:	4919      	ldr	r1, [pc, #100]	; (800b118 <mem_free+0x118>)
 800b0b2:	4813      	ldr	r0, [pc, #76]	; (800b100 <mem_free+0x100>)
 800b0b4:	f00b f820 	bl	80160f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b0b8:	4815      	ldr	r0, [pc, #84]	; (800b110 <mem_free+0x110>)
 800b0ba:	f00a fecc 	bl	8015e56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b0be:	f00a fefd 	bl	8015ebc <sys_arch_protect>
 800b0c2:	61b8      	str	r0, [r7, #24]
 800b0c4:	69b8      	ldr	r0, [r7, #24]
 800b0c6:	f00a ff07 	bl	8015ed8 <sys_arch_unprotect>
    return;
 800b0ca:	e012      	b.n	800b0f2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <mem_free+0x11c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d202      	bcs.n	800b0e2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b0dc:	4a0f      	ldr	r2, [pc, #60]	; (800b11c <mem_free+0x11c>)
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b0e2:	69f8      	ldr	r0, [r7, #28]
 800b0e4:	f7ff fe60 	bl	800ada8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b0e8:	4809      	ldr	r0, [pc, #36]	; (800b110 <mem_free+0x110>)
 800b0ea:	f00a feb4 	bl	8015e56 <sys_mutex_unlock>
 800b0ee:	e000      	b.n	800b0f2 <mem_free+0xf2>
    return;
 800b0f0:	bf00      	nop
}
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	08017f30 	.word	0x08017f30
 800b0fc:	08018020 	.word	0x08018020
 800b100:	08017f78 	.word	0x08017f78
 800b104:	240043c0 	.word	0x240043c0
 800b108:	240043c4 	.word	0x240043c4
 800b10c:	08018044 	.word	0x08018044
 800b110:	240043c8 	.word	0x240043c8
 800b114:	08018060 	.word	0x08018060
 800b118:	08018088 	.word	0x08018088
 800b11c:	240043cc 	.word	0x240043cc

0800b120 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b12c:	887b      	ldrh	r3, [r7, #2]
 800b12e:	3303      	adds	r3, #3
 800b130:	b29b      	uxth	r3, r3
 800b132:	f023 0303 	bic.w	r3, r3, #3
 800b136:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b138:	8bfb      	ldrh	r3, [r7, #30]
 800b13a:	2b0b      	cmp	r3, #11
 800b13c:	d801      	bhi.n	800b142 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b13e:	230c      	movs	r3, #12
 800b140:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b142:	8bfb      	ldrh	r3, [r7, #30]
 800b144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b148:	d803      	bhi.n	800b152 <mem_trim+0x32>
 800b14a:	8bfa      	ldrh	r2, [r7, #30]
 800b14c:	887b      	ldrh	r3, [r7, #2]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d201      	bcs.n	800b156 <mem_trim+0x36>
    return NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	e0d8      	b.n	800b308 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b156:	4b6e      	ldr	r3, [pc, #440]	; (800b310 <mem_trim+0x1f0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d304      	bcc.n	800b16a <mem_trim+0x4a>
 800b160:	4b6c      	ldr	r3, [pc, #432]	; (800b314 <mem_trim+0x1f4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d306      	bcc.n	800b178 <mem_trim+0x58>
 800b16a:	4b6b      	ldr	r3, [pc, #428]	; (800b318 <mem_trim+0x1f8>)
 800b16c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b170:	496a      	ldr	r1, [pc, #424]	; (800b31c <mem_trim+0x1fc>)
 800b172:	486b      	ldr	r0, [pc, #428]	; (800b320 <mem_trim+0x200>)
 800b174:	f00a ffc0 	bl	80160f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b178:	4b65      	ldr	r3, [pc, #404]	; (800b310 <mem_trim+0x1f0>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d304      	bcc.n	800b18c <mem_trim+0x6c>
 800b182:	4b64      	ldr	r3, [pc, #400]	; (800b314 <mem_trim+0x1f4>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d307      	bcc.n	800b19c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b18c:	f00a fe96 	bl	8015ebc <sys_arch_protect>
 800b190:	60b8      	str	r0, [r7, #8]
 800b192:	68b8      	ldr	r0, [r7, #8]
 800b194:	f00a fea0 	bl	8015ed8 <sys_arch_unprotect>
    return rmem;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	e0b5      	b.n	800b308 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3b08      	subs	r3, #8
 800b1a0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b1a2:	69b8      	ldr	r0, [r7, #24]
 800b1a4:	f7ff fdee 	bl	800ad84 <mem_to_ptr>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	881a      	ldrh	r2, [r3, #0]
 800b1b0:	8afb      	ldrh	r3, [r7, #22]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b08      	subs	r3, #8
 800b1b8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b1ba:	8bfa      	ldrh	r2, [r7, #30]
 800b1bc:	8abb      	ldrh	r3, [r7, #20]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d906      	bls.n	800b1d0 <mem_trim+0xb0>
 800b1c2:	4b55      	ldr	r3, [pc, #340]	; (800b318 <mem_trim+0x1f8>)
 800b1c4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b1c8:	4956      	ldr	r1, [pc, #344]	; (800b324 <mem_trim+0x204>)
 800b1ca:	4855      	ldr	r0, [pc, #340]	; (800b320 <mem_trim+0x200>)
 800b1cc:	f00a ff94 	bl	80160f8 <iprintf>
  if (newsize > size) {
 800b1d0:	8bfa      	ldrh	r2, [r7, #30]
 800b1d2:	8abb      	ldrh	r3, [r7, #20]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d901      	bls.n	800b1dc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e095      	b.n	800b308 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b1dc:	8bfa      	ldrh	r2, [r7, #30]
 800b1de:	8abb      	ldrh	r3, [r7, #20]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d101      	bne.n	800b1e8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	e08f      	b.n	800b308 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b1e8:	484f      	ldr	r0, [pc, #316]	; (800b328 <mem_trim+0x208>)
 800b1ea:	f00a fe25 	bl	8015e38 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff fdb4 	bl	800ad60 <ptr_to_mem>
 800b1f8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	791b      	ldrb	r3, [r3, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d13f      	bne.n	800b282 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b20a:	d106      	bne.n	800b21a <mem_trim+0xfa>
 800b20c:	4b42      	ldr	r3, [pc, #264]	; (800b318 <mem_trim+0x1f8>)
 800b20e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b212:	4946      	ldr	r1, [pc, #280]	; (800b32c <mem_trim+0x20c>)
 800b214:	4842      	ldr	r0, [pc, #264]	; (800b320 <mem_trim+0x200>)
 800b216:	f00a ff6f 	bl	80160f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b220:	8afa      	ldrh	r2, [r7, #22]
 800b222:	8bfb      	ldrh	r3, [r7, #30]
 800b224:	4413      	add	r3, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	3308      	adds	r3, #8
 800b22a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b22c:	4b40      	ldr	r3, [pc, #256]	; (800b330 <mem_trim+0x210>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	429a      	cmp	r2, r3
 800b234:	d106      	bne.n	800b244 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b236:	89fb      	ldrh	r3, [r7, #14]
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff fd91 	bl	800ad60 <ptr_to_mem>
 800b23e:	4603      	mov	r3, r0
 800b240:	4a3b      	ldr	r2, [pc, #236]	; (800b330 <mem_trim+0x210>)
 800b242:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b244:	89fb      	ldrh	r3, [r7, #14]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fd8a 	bl	800ad60 <ptr_to_mem>
 800b24c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2200      	movs	r2, #0
 800b252:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	89ba      	ldrh	r2, [r7, #12]
 800b258:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	8afa      	ldrh	r2, [r7, #22]
 800b25e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	89fa      	ldrh	r2, [r7, #14]
 800b264:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b26e:	d047      	beq.n	800b300 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fd73 	bl	800ad60 <ptr_to_mem>
 800b27a:	4602      	mov	r2, r0
 800b27c:	89fb      	ldrh	r3, [r7, #14]
 800b27e:	8053      	strh	r3, [r2, #2]
 800b280:	e03e      	b.n	800b300 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b282:	8bfb      	ldrh	r3, [r7, #30]
 800b284:	f103 0214 	add.w	r2, r3, #20
 800b288:	8abb      	ldrh	r3, [r7, #20]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d838      	bhi.n	800b300 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b28e:	8afa      	ldrh	r2, [r7, #22]
 800b290:	8bfb      	ldrh	r3, [r7, #30]
 800b292:	4413      	add	r3, r2
 800b294:	b29b      	uxth	r3, r3
 800b296:	3308      	adds	r3, #8
 800b298:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2a2:	d106      	bne.n	800b2b2 <mem_trim+0x192>
 800b2a4:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <mem_trim+0x1f8>)
 800b2a6:	f240 3216 	movw	r2, #790	; 0x316
 800b2aa:	4920      	ldr	r1, [pc, #128]	; (800b32c <mem_trim+0x20c>)
 800b2ac:	481c      	ldr	r0, [pc, #112]	; (800b320 <mem_trim+0x200>)
 800b2ae:	f00a ff23 	bl	80160f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b2b2:	89fb      	ldrh	r3, [r7, #14]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fd53 	bl	800ad60 <ptr_to_mem>
 800b2ba:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <mem_trim+0x210>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d202      	bcs.n	800b2cc <mem_trim+0x1ac>
      lfree = mem2;
 800b2c6:	4a1a      	ldr	r2, [pc, #104]	; (800b330 <mem_trim+0x210>)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	881a      	ldrh	r2, [r3, #0]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	8afa      	ldrh	r2, [r7, #22]
 800b2de:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	89fa      	ldrh	r2, [r7, #14]
 800b2e4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ee:	d007      	beq.n	800b300 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fd33 	bl	800ad60 <ptr_to_mem>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	89fb      	ldrh	r3, [r7, #14]
 800b2fe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b300:	4809      	ldr	r0, [pc, #36]	; (800b328 <mem_trim+0x208>)
 800b302:	f00a fda8 	bl	8015e56 <sys_mutex_unlock>
  return rmem;
 800b306:	687b      	ldr	r3, [r7, #4]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	240043c0 	.word	0x240043c0
 800b314:	240043c4 	.word	0x240043c4
 800b318:	08017f30 	.word	0x08017f30
 800b31c:	080180bc 	.word	0x080180bc
 800b320:	08017f78 	.word	0x08017f78
 800b324:	080180d4 	.word	0x080180d4
 800b328:	240043c8 	.word	0x240043c8
 800b32c:	080180f4 	.word	0x080180f4
 800b330:	240043cc 	.word	0x240043cc

0800b334 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	4603      	mov	r3, r0
 800b33c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b33e:	88fb      	ldrh	r3, [r7, #6]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <mem_malloc+0x14>
    return NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	e0e2      	b.n	800b50e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b348:	88fb      	ldrh	r3, [r7, #6]
 800b34a:	3303      	adds	r3, #3
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b354:	8bbb      	ldrh	r3, [r7, #28]
 800b356:	2b0b      	cmp	r3, #11
 800b358:	d801      	bhi.n	800b35e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b35a:	230c      	movs	r3, #12
 800b35c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b35e:	8bbb      	ldrh	r3, [r7, #28]
 800b360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b364:	d803      	bhi.n	800b36e <mem_malloc+0x3a>
 800b366:	8bba      	ldrh	r2, [r7, #28]
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d201      	bcs.n	800b372 <mem_malloc+0x3e>
    return NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	e0cd      	b.n	800b50e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b372:	4869      	ldr	r0, [pc, #420]	; (800b518 <mem_malloc+0x1e4>)
 800b374:	f00a fd60 	bl	8015e38 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b378:	4b68      	ldr	r3, [pc, #416]	; (800b51c <mem_malloc+0x1e8>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff fd01 	bl	800ad84 <mem_to_ptr>
 800b382:	4603      	mov	r3, r0
 800b384:	83fb      	strh	r3, [r7, #30]
 800b386:	e0b7      	b.n	800b4f8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b388:	8bfb      	ldrh	r3, [r7, #30]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fce8 	bl	800ad60 <ptr_to_mem>
 800b390:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	791b      	ldrb	r3, [r3, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f040 80a7 	bne.w	800b4ea <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	8bfb      	ldrh	r3, [r7, #30]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	f1a3 0208 	sub.w	r2, r3, #8
 800b3aa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	f0c0 809c 	bcc.w	800b4ea <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	8bfb      	ldrh	r3, [r7, #30]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	f1a3 0208 	sub.w	r2, r3, #8
 800b3c0:	8bbb      	ldrh	r3, [r7, #28]
 800b3c2:	3314      	adds	r3, #20
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d333      	bcc.n	800b430 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b3c8:	8bfa      	ldrh	r2, [r7, #30]
 800b3ca:	8bbb      	ldrh	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b3d4:	8a7b      	ldrh	r3, [r7, #18]
 800b3d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3da:	d106      	bne.n	800b3ea <mem_malloc+0xb6>
 800b3dc:	4b50      	ldr	r3, [pc, #320]	; (800b520 <mem_malloc+0x1ec>)
 800b3de:	f240 3287 	movw	r2, #903	; 0x387
 800b3e2:	4950      	ldr	r1, [pc, #320]	; (800b524 <mem_malloc+0x1f0>)
 800b3e4:	4850      	ldr	r0, [pc, #320]	; (800b528 <mem_malloc+0x1f4>)
 800b3e6:	f00a fe87 	bl	80160f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b3ea:	8a7b      	ldrh	r3, [r7, #18]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff fcb7 	bl	800ad60 <ptr_to_mem>
 800b3f2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	881a      	ldrh	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8bfa      	ldrh	r2, [r7, #30]
 800b406:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	8a7a      	ldrh	r2, [r7, #18]
 800b40c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2201      	movs	r2, #1
 800b412:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b41c:	d00b      	beq.n	800b436 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fc9c 	bl	800ad60 <ptr_to_mem>
 800b428:	4602      	mov	r2, r0
 800b42a:	8a7b      	ldrh	r3, [r7, #18]
 800b42c:	8053      	strh	r3, [r2, #2]
 800b42e:	e002      	b.n	800b436 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2201      	movs	r2, #1
 800b434:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b436:	4b39      	ldr	r3, [pc, #228]	; (800b51c <mem_malloc+0x1e8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d127      	bne.n	800b490 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b440:	4b36      	ldr	r3, [pc, #216]	; (800b51c <mem_malloc+0x1e8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b446:	e005      	b.n	800b454 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff fc87 	bl	800ad60 <ptr_to_mem>
 800b452:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	791b      	ldrb	r3, [r3, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <mem_malloc+0x132>
 800b45c:	4b33      	ldr	r3, [pc, #204]	; (800b52c <mem_malloc+0x1f8>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	429a      	cmp	r2, r3
 800b464:	d1f0      	bne.n	800b448 <mem_malloc+0x114>
          }
          lfree = cur;
 800b466:	4a2d      	ldr	r2, [pc, #180]	; (800b51c <mem_malloc+0x1e8>)
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b46c:	4b2b      	ldr	r3, [pc, #172]	; (800b51c <mem_malloc+0x1e8>)
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	4b2e      	ldr	r3, [pc, #184]	; (800b52c <mem_malloc+0x1f8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d00b      	beq.n	800b490 <mem_malloc+0x15c>
 800b478:	4b28      	ldr	r3, [pc, #160]	; (800b51c <mem_malloc+0x1e8>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	791b      	ldrb	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <mem_malloc+0x15c>
 800b482:	4b27      	ldr	r3, [pc, #156]	; (800b520 <mem_malloc+0x1ec>)
 800b484:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b488:	4929      	ldr	r1, [pc, #164]	; (800b530 <mem_malloc+0x1fc>)
 800b48a:	4827      	ldr	r0, [pc, #156]	; (800b528 <mem_malloc+0x1f4>)
 800b48c:	f00a fe34 	bl	80160f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b490:	4821      	ldr	r0, [pc, #132]	; (800b518 <mem_malloc+0x1e4>)
 800b492:	f00a fce0 	bl	8015e56 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b496:	8bba      	ldrh	r2, [r7, #28]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	4413      	add	r3, r2
 800b49c:	3308      	adds	r3, #8
 800b49e:	4a23      	ldr	r2, [pc, #140]	; (800b52c <mem_malloc+0x1f8>)
 800b4a0:	6812      	ldr	r2, [r2, #0]
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d906      	bls.n	800b4b4 <mem_malloc+0x180>
 800b4a6:	4b1e      	ldr	r3, [pc, #120]	; (800b520 <mem_malloc+0x1ec>)
 800b4a8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b4ac:	4921      	ldr	r1, [pc, #132]	; (800b534 <mem_malloc+0x200>)
 800b4ae:	481e      	ldr	r0, [pc, #120]	; (800b528 <mem_malloc+0x1f4>)
 800b4b0:	f00a fe22 	bl	80160f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d006      	beq.n	800b4cc <mem_malloc+0x198>
 800b4be:	4b18      	ldr	r3, [pc, #96]	; (800b520 <mem_malloc+0x1ec>)
 800b4c0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b4c4:	491c      	ldr	r1, [pc, #112]	; (800b538 <mem_malloc+0x204>)
 800b4c6:	4818      	ldr	r0, [pc, #96]	; (800b528 <mem_malloc+0x1f4>)
 800b4c8:	f00a fe16 	bl	80160f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <mem_malloc+0x1b0>
 800b4d6:	4b12      	ldr	r3, [pc, #72]	; (800b520 <mem_malloc+0x1ec>)
 800b4d8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b4dc:	4917      	ldr	r1, [pc, #92]	; (800b53c <mem_malloc+0x208>)
 800b4de:	4812      	ldr	r0, [pc, #72]	; (800b528 <mem_malloc+0x1f4>)
 800b4e0:	f00a fe0a 	bl	80160f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	e011      	b.n	800b50e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b4ea:	8bfb      	ldrh	r3, [r7, #30]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff fc37 	bl	800ad60 <ptr_to_mem>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b4f8:	8bfa      	ldrh	r2, [r7, #30]
 800b4fa:	8bbb      	ldrh	r3, [r7, #28]
 800b4fc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800b500:	429a      	cmp	r2, r3
 800b502:	f4ff af41 	bcc.w	800b388 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b506:	4804      	ldr	r0, [pc, #16]	; (800b518 <mem_malloc+0x1e4>)
 800b508:	f00a fca5 	bl	8015e56 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	240043c8 	.word	0x240043c8
 800b51c:	240043cc 	.word	0x240043cc
 800b520:	08017f30 	.word	0x08017f30
 800b524:	080180f4 	.word	0x080180f4
 800b528:	08017f78 	.word	0x08017f78
 800b52c:	240043c4 	.word	0x240043c4
 800b530:	08018108 	.word	0x08018108
 800b534:	08018124 	.word	0x08018124
 800b538:	08018154 	.word	0x08018154
 800b53c:	08018184 	.word	0x08018184

0800b540 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2200      	movs	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	3303      	adds	r3, #3
 800b556:	f023 0303 	bic.w	r3, r3, #3
 800b55a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	e011      	b.n	800b586 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	4413      	add	r3, r2
 800b57e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3301      	adds	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	885b      	ldrh	r3, [r3, #2]
 800b58a:	461a      	mov	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4293      	cmp	r3, r2
 800b590:	dbe7      	blt.n	800b562 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	80fb      	strh	r3, [r7, #6]
 800b5aa:	e009      	b.n	800b5c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b5ac:	88fb      	ldrh	r3, [r7, #6]
 800b5ae:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <memp_init+0x30>)
 800b5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff ffc3 	bl	800b540 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	80fb      	strh	r3, [r7, #6]
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	2b0c      	cmp	r3, #12
 800b5c4:	d9f2      	bls.n	800b5ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	0801a994 	.word	0x0801a994

0800b5d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b5dc:	f00a fc6e 	bl	8015ebc <sys_arch_protect>
 800b5e0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d015      	beq.n	800b61c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f003 0303 	and.w	r3, r3, #3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d006      	beq.n	800b612 <do_memp_malloc_pool+0x3e>
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <do_memp_malloc_pool+0x58>)
 800b606:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b60a:	4909      	ldr	r1, [pc, #36]	; (800b630 <do_memp_malloc_pool+0x5c>)
 800b60c:	4809      	ldr	r0, [pc, #36]	; (800b634 <do_memp_malloc_pool+0x60>)
 800b60e:	f00a fd73 	bl	80160f8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f00a fc60 	bl	8015ed8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	e003      	b.n	800b624 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f00a fc5b 	bl	8015ed8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	080181a8 	.word	0x080181a8
 800b630:	080181d8 	.word	0x080181d8
 800b634:	080181fc 	.word	0x080181fc

0800b638 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d106      	bne.n	800b654 <memp_malloc_pool+0x1c>
 800b646:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <memp_malloc_pool+0x38>)
 800b648:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b64c:	4909      	ldr	r1, [pc, #36]	; (800b674 <memp_malloc_pool+0x3c>)
 800b64e:	480a      	ldr	r0, [pc, #40]	; (800b678 <memp_malloc_pool+0x40>)
 800b650:	f00a fd52 	bl	80160f8 <iprintf>
  if (desc == NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <memp_malloc_pool+0x26>
    return NULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e003      	b.n	800b666 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff ffb8 	bl	800b5d4 <do_memp_malloc_pool>
 800b664:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	080181a8 	.word	0x080181a8
 800b674:	08018224 	.word	0x08018224
 800b678:	080181fc 	.word	0x080181fc

0800b67c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	2b0c      	cmp	r3, #12
 800b68a:	d908      	bls.n	800b69e <memp_malloc+0x22>
 800b68c:	4b0a      	ldr	r3, [pc, #40]	; (800b6b8 <memp_malloc+0x3c>)
 800b68e:	f240 1257 	movw	r2, #343	; 0x157
 800b692:	490a      	ldr	r1, [pc, #40]	; (800b6bc <memp_malloc+0x40>)
 800b694:	480a      	ldr	r0, [pc, #40]	; (800b6c0 <memp_malloc+0x44>)
 800b696:	f00a fd2f 	bl	80160f8 <iprintf>
 800b69a:	2300      	movs	r3, #0
 800b69c:	e008      	b.n	800b6b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	4a08      	ldr	r2, [pc, #32]	; (800b6c4 <memp_malloc+0x48>)
 800b6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff ff94 	bl	800b5d4 <do_memp_malloc_pool>
 800b6ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	080181a8 	.word	0x080181a8
 800b6bc:	08018238 	.word	0x08018238
 800b6c0:	080181fc 	.word	0x080181fc
 800b6c4:	0801a994 	.word	0x0801a994

0800b6c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	f003 0303 	and.w	r3, r3, #3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <do_memp_free_pool+0x22>
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <do_memp_free_pool+0x4c>)
 800b6de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b6e2:	490d      	ldr	r1, [pc, #52]	; (800b718 <do_memp_free_pool+0x50>)
 800b6e4:	480d      	ldr	r0, [pc, #52]	; (800b71c <do_memp_free_pool+0x54>)
 800b6e6:	f00a fd07 	bl	80160f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b6ee:	f00a fbe5 	bl	8015ebc <sys_arch_protect>
 800b6f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b706:	68b8      	ldr	r0, [r7, #8]
 800b708:	f00a fbe6 	bl	8015ed8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	080181a8 	.word	0x080181a8
 800b718:	08018258 	.word	0x08018258
 800b71c:	080181fc 	.word	0x080181fc

0800b720 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <memp_free_pool+0x1e>
 800b730:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <memp_free_pool+0x3c>)
 800b732:	f240 1295 	movw	r2, #405	; 0x195
 800b736:	490a      	ldr	r1, [pc, #40]	; (800b760 <memp_free_pool+0x40>)
 800b738:	480a      	ldr	r0, [pc, #40]	; (800b764 <memp_free_pool+0x44>)
 800b73a:	f00a fcdd 	bl	80160f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <memp_free_pool+0x34>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d004      	beq.n	800b754 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ffbb 	bl	800b6c8 <do_memp_free_pool>
 800b752:	e000      	b.n	800b756 <memp_free_pool+0x36>
    return;
 800b754:	bf00      	nop
}
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	080181a8 	.word	0x080181a8
 800b760:	08018224 	.word	0x08018224
 800b764:	080181fc 	.word	0x080181fc

0800b768 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	2b0c      	cmp	r3, #12
 800b778:	d907      	bls.n	800b78a <memp_free+0x22>
 800b77a:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <memp_free+0x44>)
 800b77c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b780:	490b      	ldr	r1, [pc, #44]	; (800b7b0 <memp_free+0x48>)
 800b782:	480c      	ldr	r0, [pc, #48]	; (800b7b4 <memp_free+0x4c>)
 800b784:	f00a fcb8 	bl	80160f8 <iprintf>
 800b788:	e00c      	b.n	800b7a4 <memp_free+0x3c>

  if (mem == NULL) {
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d008      	beq.n	800b7a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	4a09      	ldr	r2, [pc, #36]	; (800b7b8 <memp_free+0x50>)
 800b794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ff94 	bl	800b6c8 <do_memp_free_pool>
 800b7a0:	e000      	b.n	800b7a4 <memp_free+0x3c>
    return;
 800b7a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	080181a8 	.word	0x080181a8
 800b7b0:	08018278 	.word	0x08018278
 800b7b4:	080181fc 	.word	0x080181fc
 800b7b8:	0801a994 	.word	0x0801a994

0800b7bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b7c0:	bf00      	nop
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
	...

0800b7cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d108      	bne.n	800b7f2 <netif_add+0x26>
 800b7e0:	4b57      	ldr	r3, [pc, #348]	; (800b940 <netif_add+0x174>)
 800b7e2:	f240 1227 	movw	r2, #295	; 0x127
 800b7e6:	4957      	ldr	r1, [pc, #348]	; (800b944 <netif_add+0x178>)
 800b7e8:	4857      	ldr	r0, [pc, #348]	; (800b948 <netif_add+0x17c>)
 800b7ea:	f00a fc85 	bl	80160f8 <iprintf>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e0a2      	b.n	800b938 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d108      	bne.n	800b80a <netif_add+0x3e>
 800b7f8:	4b51      	ldr	r3, [pc, #324]	; (800b940 <netif_add+0x174>)
 800b7fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b7fe:	4953      	ldr	r1, [pc, #332]	; (800b94c <netif_add+0x180>)
 800b800:	4851      	ldr	r0, [pc, #324]	; (800b948 <netif_add+0x17c>)
 800b802:	f00a fc79 	bl	80160f8 <iprintf>
 800b806:	2300      	movs	r3, #0
 800b808:	e096      	b.n	800b938 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b810:	4b4f      	ldr	r3, [pc, #316]	; (800b950 <netif_add+0x184>)
 800b812:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b81a:	4b4d      	ldr	r3, [pc, #308]	; (800b950 <netif_add+0x184>)
 800b81c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b824:	4b4a      	ldr	r3, [pc, #296]	; (800b950 <netif_add+0x184>)
 800b826:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4a45      	ldr	r2, [pc, #276]	; (800b954 <netif_add+0x188>)
 800b83e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a3a      	ldr	r2, [r7, #32]
 800b858:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b85a:	4b3f      	ldr	r3, [pc, #252]	; (800b958 <netif_add+0x18c>)
 800b85c:	781a      	ldrb	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b868:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f913 	bl	800ba9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <netif_add+0xba>
    return NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	e058      	b.n	800b938 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b88c:	2bff      	cmp	r3, #255	; 0xff
 800b88e:	d103      	bne.n	800b898 <netif_add+0xcc>
        netif->num = 0;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b89c:	4b2f      	ldr	r3, [pc, #188]	; (800b95c <netif_add+0x190>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	e02b      	b.n	800b8fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d106      	bne.n	800b8ba <netif_add+0xee>
 800b8ac:	4b24      	ldr	r3, [pc, #144]	; (800b940 <netif_add+0x174>)
 800b8ae:	f240 128b 	movw	r2, #395	; 0x18b
 800b8b2:	492b      	ldr	r1, [pc, #172]	; (800b960 <netif_add+0x194>)
 800b8b4:	4824      	ldr	r0, [pc, #144]	; (800b948 <netif_add+0x17c>)
 800b8b6:	f00a fc1f 	bl	80160f8 <iprintf>
        num_netifs++;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	2bff      	cmp	r3, #255	; 0xff
 800b8c4:	dd06      	ble.n	800b8d4 <netif_add+0x108>
 800b8c6:	4b1e      	ldr	r3, [pc, #120]	; (800b940 <netif_add+0x174>)
 800b8c8:	f240 128d 	movw	r2, #397	; 0x18d
 800b8cc:	4925      	ldr	r1, [pc, #148]	; (800b964 <netif_add+0x198>)
 800b8ce:	481e      	ldr	r0, [pc, #120]	; (800b948 <netif_add+0x17c>)
 800b8d0:	f00a fc12 	bl	80160f8 <iprintf>
        if (netif2->num == netif->num) {
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d108      	bne.n	800b8f6 <netif_add+0x12a>
          netif->num++;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b8f4:	e005      	b.n	800b902 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1d0      	bne.n	800b8a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1be      	bne.n	800b886 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b90e:	2bfe      	cmp	r3, #254	; 0xfe
 800b910:	d103      	bne.n	800b91a <netif_add+0x14e>
    netif_num = 0;
 800b912:	4b11      	ldr	r3, [pc, #68]	; (800b958 <netif_add+0x18c>)
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	e006      	b.n	800b928 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b920:	3301      	adds	r3, #1
 800b922:	b2da      	uxtb	r2, r3
 800b924:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <netif_add+0x18c>)
 800b926:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <netif_add+0x190>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b930:	4a0a      	ldr	r2, [pc, #40]	; (800b95c <netif_add+0x190>)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b936:	68fb      	ldr	r3, [r7, #12]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	08018294 	.word	0x08018294
 800b944:	08018328 	.word	0x08018328
 800b948:	080182e4 	.word	0x080182e4
 800b94c:	08018344 	.word	0x08018344
 800b950:	0801aa08 	.word	0x0801aa08
 800b954:	0800bd77 	.word	0x0800bd77
 800b958:	240074a4 	.word	0x240074a4
 800b95c:	2400749c 	.word	0x2400749c
 800b960:	08018368 	.word	0x08018368
 800b964:	0801837c 	.word	0x0801837c

0800b968 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f002 fe9d 	bl	800e6b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f007 fdbd 	bl	80134fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <netif_do_set_ipaddr+0x20>
 800b99e:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <netif_do_set_ipaddr+0x88>)
 800b9a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b9a4:	491c      	ldr	r1, [pc, #112]	; (800ba18 <netif_do_set_ipaddr+0x8c>)
 800b9a6:	481d      	ldr	r0, [pc, #116]	; (800ba1c <netif_do_set_ipaddr+0x90>)
 800b9a8:	f00a fba6 	bl	80160f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <netif_do_set_ipaddr+0x34>
 800b9b2:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <netif_do_set_ipaddr+0x88>)
 800b9b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b9b8:	4917      	ldr	r1, [pc, #92]	; (800ba18 <netif_do_set_ipaddr+0x8c>)
 800b9ba:	4818      	ldr	r0, [pc, #96]	; (800ba1c <netif_do_set_ipaddr+0x90>)
 800b9bc:	f00a fb9c 	bl	80160f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d01c      	beq.n	800ba08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b9de:	f107 0314 	add.w	r3, r7, #20
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff ffbf 	bl	800b968 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <netif_do_set_ipaddr+0x6a>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	e000      	b.n	800b9f8 <netif_do_set_ipaddr+0x6c>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f8d2 	bl	800bba8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	08018294 	.word	0x08018294
 800ba18:	080183ac 	.word	0x080183ac
 800ba1c:	080182e4 	.word	0x080182e4

0800ba20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3308      	adds	r3, #8
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d00a      	beq.n	800ba50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <netif_do_set_netmask+0x26>
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	e000      	b.n	800ba48 <netif_do_set_netmask+0x28>
 800ba46:	2300      	movs	r3, #0
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e000      	b.n	800ba52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b085      	sub	sp, #20
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	330c      	adds	r3, #12
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d00a      	beq.n	800ba8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <netif_do_set_gw+0x26>
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	e000      	b.n	800ba86 <netif_do_set_gw+0x28>
 800ba84:	2300      	movs	r3, #0
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bab8:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <netif_set_addr+0x90>)
 800baba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bac2:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <netif_set_addr+0x90>)
 800bac4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bacc:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <netif_set_addr+0x90>)
 800bace:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <netif_set_addr+0x42>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <netif_set_addr+0x46>
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <netif_set_addr+0x48>
 800bae2:	2300      	movs	r3, #0
 800bae4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d006      	beq.n	800bafa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800baec:	f107 0310 	add.w	r3, r7, #16
 800baf0:	461a      	mov	r2, r3
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff ff49 	bl	800b98c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bafa:	69fa      	ldr	r2, [r7, #28]
 800bafc:	6879      	ldr	r1, [r7, #4]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff ff8e 	bl	800ba20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bb04:	69ba      	ldr	r2, [r7, #24]
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff ffa8 	bl	800ba5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bb14:	f107 0310 	add.w	r3, r7, #16
 800bb18:	461a      	mov	r2, r3
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7ff ff35 	bl	800b98c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bb22:	bf00      	nop
 800bb24:	3720      	adds	r7, #32
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	0801aa08 	.word	0x0801aa08

0800bb30 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bb38:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <netif_set_default+0x1c>)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bb3e:	bf00      	nop
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	240074a0 	.word	0x240074a0

0800bb50 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d107      	bne.n	800bb6e <netif_set_up+0x1e>
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <netif_set_up+0x4c>)
 800bb60:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bb64:	490e      	ldr	r1, [pc, #56]	; (800bba0 <netif_set_up+0x50>)
 800bb66:	480f      	ldr	r0, [pc, #60]	; (800bba4 <netif_set_up+0x54>)
 800bb68:	f00a fac6 	bl	80160f8 <iprintf>
 800bb6c:	e013      	b.n	800bb96 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10c      	bne.n	800bb96 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb8e:	2103      	movs	r1, #3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f809 	bl	800bba8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	08018294 	.word	0x08018294
 800bba0:	0801841c 	.word	0x0801841c
 800bba4:	080182e4 	.word	0x080182e4

0800bba8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <netif_issue_reports+0x20>
 800bbba:	4b18      	ldr	r3, [pc, #96]	; (800bc1c <netif_issue_reports+0x74>)
 800bbbc:	f240 326d 	movw	r2, #877	; 0x36d
 800bbc0:	4917      	ldr	r1, [pc, #92]	; (800bc20 <netif_issue_reports+0x78>)
 800bbc2:	4818      	ldr	r0, [pc, #96]	; (800bc24 <netif_issue_reports+0x7c>)
 800bbc4:	f00a fa98 	bl	80160f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01e      	beq.n	800bc14 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbdc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d017      	beq.n	800bc14 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bbe4:	78fb      	ldrb	r3, [r7, #3]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d013      	beq.n	800bc16 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00e      	beq.n	800bc16 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbfe:	f003 0308 	and.w	r3, r3, #8
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3304      	adds	r3, #4
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f008 fbdf 	bl	80143d0 <etharp_request>
 800bc12:	e000      	b.n	800bc16 <netif_issue_reports+0x6e>
    return;
 800bc14:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	08018294 	.word	0x08018294
 800bc20:	08018438 	.word	0x08018438
 800bc24:	080182e4 	.word	0x080182e4

0800bc28 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <netif_set_down+0x1e>
 800bc36:	4b12      	ldr	r3, [pc, #72]	; (800bc80 <netif_set_down+0x58>)
 800bc38:	f240 329b 	movw	r2, #923	; 0x39b
 800bc3c:	4911      	ldr	r1, [pc, #68]	; (800bc84 <netif_set_down+0x5c>)
 800bc3e:	4812      	ldr	r0, [pc, #72]	; (800bc88 <netif_set_down+0x60>)
 800bc40:	f00a fa5a 	bl	80160f8 <iprintf>
 800bc44:	e019      	b.n	800bc7a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d012      	beq.n	800bc7a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc5a:	f023 0301 	bic.w	r3, r3, #1
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc6c:	f003 0308 	and.w	r3, r3, #8
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f007 ff69 	bl	8013b4c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	08018294 	.word	0x08018294
 800bc84:	0801845c 	.word	0x0801845c
 800bc88:	080182e4 	.word	0x080182e4

0800bc8c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d107      	bne.n	800bcaa <netif_set_link_up+0x1e>
 800bc9a:	4b13      	ldr	r3, [pc, #76]	; (800bce8 <netif_set_link_up+0x5c>)
 800bc9c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bca0:	4912      	ldr	r1, [pc, #72]	; (800bcec <netif_set_link_up+0x60>)
 800bca2:	4813      	ldr	r0, [pc, #76]	; (800bcf0 <netif_set_link_up+0x64>)
 800bca4:	f00a fa28 	bl	80160f8 <iprintf>
 800bca8:	e01b      	b.n	800bce2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d114      	bne.n	800bce2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bcbe:	f043 0304 	orr.w	r3, r3, #4
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bcca:	2103      	movs	r1, #3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff ff6b 	bl	800bba8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <netif_set_link_up+0x56>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	08018294 	.word	0x08018294
 800bcec:	0801847c 	.word	0x0801847c
 800bcf0:	080182e4 	.word	0x080182e4

0800bcf4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d107      	bne.n	800bd12 <netif_set_link_down+0x1e>
 800bd02:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <netif_set_link_down+0x54>)
 800bd04:	f240 4206 	movw	r2, #1030	; 0x406
 800bd08:	4910      	ldr	r1, [pc, #64]	; (800bd4c <netif_set_link_down+0x58>)
 800bd0a:	4811      	ldr	r0, [pc, #68]	; (800bd50 <netif_set_link_down+0x5c>)
 800bd0c:	f00a f9f4 	bl	80160f8 <iprintf>
 800bd10:	e017      	b.n	800bd42 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d010      	beq.n	800bd42 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd26:	f023 0304 	bic.w	r3, r3, #4
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <netif_set_link_down+0x4e>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	08018294 	.word	0x08018294
 800bd4c:	080184a0 	.word	0x080184a0
 800bd50:	080182e4 	.word	0x080182e4

0800bd54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	61da      	str	r2, [r3, #28]
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bd82:	f06f 030b 	mvn.w	r3, #11
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
	...

0800bd94 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d013      	beq.n	800bdcc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bda4:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <netif_get_by_index+0x48>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e00c      	b.n	800bdc6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	79fa      	ldrb	r2, [r7, #7]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d101      	bne.n	800bdc0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	e006      	b.n	800bdce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1ef      	bne.n	800bdac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	2400749c 	.word	0x2400749c

0800bde0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bde6:	f00a f869 	bl	8015ebc <sys_arch_protect>
 800bdea:	6038      	str	r0, [r7, #0]
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <pbuf_free_ooseq+0x44>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
 800bdf2:	6838      	ldr	r0, [r7, #0]
 800bdf4:	f00a f870 	bl	8015ed8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bdf8:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <pbuf_free_ooseq+0x48>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	607b      	str	r3, [r7, #4]
 800bdfe:	e00a      	b.n	800be16 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f002 fc91 	bl	800e730 <tcp_free_ooseq>
      return;
 800be0e:	e005      	b.n	800be1c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	607b      	str	r3, [r7, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f1      	bne.n	800be00 <pbuf_free_ooseq+0x20>
    }
  }
}
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	240074a5 	.word	0x240074a5
 800be28:	240074b4 	.word	0x240074b4

0800be2c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800be34:	f7ff ffd4 	bl	800bde0 <pbuf_free_ooseq>
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800be46:	f00a f839 	bl	8015ebc <sys_arch_protect>
 800be4a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <pbuf_pool_is_empty+0x4c>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <pbuf_pool_is_empty+0x4c>)
 800be54:	2201      	movs	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f00a f83d 	bl	8015ed8 <sys_arch_unprotect>

  if (!queued) {
 800be5e:	78fb      	ldrb	r3, [r7, #3]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10f      	bne.n	800be84 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800be64:	2100      	movs	r1, #0
 800be66:	480a      	ldr	r0, [pc, #40]	; (800be90 <pbuf_pool_is_empty+0x50>)
 800be68:	f7fe fdd8 	bl	800aa1c <tcpip_try_callback>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d008      	beq.n	800be84 <pbuf_pool_is_empty+0x44>
 800be72:	f00a f823 	bl	8015ebc <sys_arch_protect>
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	4b04      	ldr	r3, [pc, #16]	; (800be8c <pbuf_pool_is_empty+0x4c>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f00a f82a 	bl	8015ed8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800be84:	bf00      	nop
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	240074a5 	.word	0x240074a5
 800be90:	0800be2d 	.word	0x0800be2d

0800be94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4611      	mov	r1, r2
 800bea0:	461a      	mov	r2, r3
 800bea2:	460b      	mov	r3, r1
 800bea4:	80fb      	strh	r3, [r7, #6]
 800bea6:	4613      	mov	r3, r2
 800bea8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	88fa      	ldrh	r2, [r7, #6]
 800beba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	88ba      	ldrh	r2, [r7, #4]
 800bec0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bec2:	8b3b      	ldrh	r3, [r7, #24]
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	7f3a      	ldrb	r2, [r7, #28]
 800bece:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	73da      	strb	r2, [r3, #15]
}
 800bedc:	bf00      	nop
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08c      	sub	sp, #48	; 0x30
 800beec:	af02      	add	r7, sp, #8
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
 800bef2:	460b      	mov	r3, r1
 800bef4:	80bb      	strh	r3, [r7, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800befe:	887b      	ldrh	r3, [r7, #2]
 800bf00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bf04:	d07f      	beq.n	800c006 <pbuf_alloc+0x11e>
 800bf06:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bf0a:	f300 80c8 	bgt.w	800c09e <pbuf_alloc+0x1b6>
 800bf0e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bf12:	d010      	beq.n	800bf36 <pbuf_alloc+0x4e>
 800bf14:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bf18:	f300 80c1 	bgt.w	800c09e <pbuf_alloc+0x1b6>
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d002      	beq.n	800bf26 <pbuf_alloc+0x3e>
 800bf20:	2b41      	cmp	r3, #65	; 0x41
 800bf22:	f040 80bc 	bne.w	800c09e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bf26:	887a      	ldrh	r2, [r7, #2]
 800bf28:	88bb      	ldrh	r3, [r7, #4]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	f000 f8d1 	bl	800c0d4 <pbuf_alloc_reference>
 800bf32:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bf34:	e0bd      	b.n	800c0b2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bf3e:	88bb      	ldrh	r3, [r7, #4]
 800bf40:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bf42:	200c      	movs	r0, #12
 800bf44:	f7ff fb9a 	bl	800b67c <memp_malloc>
 800bf48:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bf50:	f7ff ff76 	bl	800be40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d002      	beq.n	800bf60 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bf5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf5c:	f000 faa8 	bl	800c4b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	e0a7      	b.n	800c0b4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bf64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf66:	3303      	adds	r3, #3
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	8b7a      	ldrh	r2, [r7, #26]
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	bf28      	it	cs
 800bf7c:	4613      	movcs	r3, r2
 800bf7e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bf80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf82:	3310      	adds	r3, #16
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	4413      	add	r3, r2
 800bf88:	3303      	adds	r3, #3
 800bf8a:	f023 0303 	bic.w	r3, r3, #3
 800bf8e:	4618      	mov	r0, r3
 800bf90:	89f9      	ldrh	r1, [r7, #14]
 800bf92:	8b7a      	ldrh	r2, [r7, #26]
 800bf94:	2300      	movs	r3, #0
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	887b      	ldrh	r3, [r7, #2]
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4601      	mov	r1, r0
 800bfa0:	6938      	ldr	r0, [r7, #16]
 800bfa2:	f7ff ff77 	bl	800be94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f003 0303 	and.w	r3, r3, #3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <pbuf_alloc+0xd8>
 800bfb2:	4b42      	ldr	r3, [pc, #264]	; (800c0bc <pbuf_alloc+0x1d4>)
 800bfb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfb8:	4941      	ldr	r1, [pc, #260]	; (800c0c0 <pbuf_alloc+0x1d8>)
 800bfba:	4842      	ldr	r0, [pc, #264]	; (800c0c4 <pbuf_alloc+0x1dc>)
 800bfbc:	f00a f89c 	bl	80160f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bfc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	f023 0303 	bic.w	r3, r3, #3
 800bfc8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bfcc:	d106      	bne.n	800bfdc <pbuf_alloc+0xf4>
 800bfce:	4b3b      	ldr	r3, [pc, #236]	; (800c0bc <pbuf_alloc+0x1d4>)
 800bfd0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bfd4:	493c      	ldr	r1, [pc, #240]	; (800c0c8 <pbuf_alloc+0x1e0>)
 800bfd6:	483b      	ldr	r0, [pc, #236]	; (800c0c4 <pbuf_alloc+0x1dc>)
 800bfd8:	f00a f88e 	bl	80160f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe6:	e002      	b.n	800bfee <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bff2:	8b7a      	ldrh	r2, [r7, #26]
 800bff4:	89fb      	ldrh	r3, [r7, #14]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bffe:	8b7b      	ldrh	r3, [r7, #26]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d19e      	bne.n	800bf42 <pbuf_alloc+0x5a>
      break;
 800c004:	e055      	b.n	800c0b2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c008:	3303      	adds	r3, #3
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	b29a      	uxth	r2, r3
 800c012:	88bb      	ldrh	r3, [r7, #4]
 800c014:	3303      	adds	r3, #3
 800c016:	b29b      	uxth	r3, r3
 800c018:	f023 0303 	bic.w	r3, r3, #3
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	4413      	add	r3, r2
 800c020:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c022:	8b3b      	ldrh	r3, [r7, #24]
 800c024:	3310      	adds	r3, #16
 800c026:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c028:	8b3a      	ldrh	r2, [r7, #24]
 800c02a:	88bb      	ldrh	r3, [r7, #4]
 800c02c:	3303      	adds	r3, #3
 800c02e:	f023 0303 	bic.w	r3, r3, #3
 800c032:	429a      	cmp	r2, r3
 800c034:	d306      	bcc.n	800c044 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c036:	8afa      	ldrh	r2, [r7, #22]
 800c038:	88bb      	ldrh	r3, [r7, #4]
 800c03a:	3303      	adds	r3, #3
 800c03c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c040:	429a      	cmp	r2, r3
 800c042:	d201      	bcs.n	800c048 <pbuf_alloc+0x160>
        return NULL;
 800c044:	2300      	movs	r3, #0
 800c046:	e035      	b.n	800c0b4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c048:	8afb      	ldrh	r3, [r7, #22]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff f972 	bl	800b334 <mem_malloc>
 800c050:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <pbuf_alloc+0x174>
        return NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	e02b      	b.n	800c0b4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c05c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c05e:	3310      	adds	r3, #16
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	4413      	add	r3, r2
 800c064:	3303      	adds	r3, #3
 800c066:	f023 0303 	bic.w	r3, r3, #3
 800c06a:	4618      	mov	r0, r3
 800c06c:	88b9      	ldrh	r1, [r7, #4]
 800c06e:	88ba      	ldrh	r2, [r7, #4]
 800c070:	2300      	movs	r3, #0
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	887b      	ldrh	r3, [r7, #2]
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	460b      	mov	r3, r1
 800c07a:	4601      	mov	r1, r0
 800c07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c07e:	f7ff ff09 	bl	800be94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f003 0303 	and.w	r3, r3, #3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d010      	beq.n	800c0b0 <pbuf_alloc+0x1c8>
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <pbuf_alloc+0x1d4>)
 800c090:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c094:	490d      	ldr	r1, [pc, #52]	; (800c0cc <pbuf_alloc+0x1e4>)
 800c096:	480b      	ldr	r0, [pc, #44]	; (800c0c4 <pbuf_alloc+0x1dc>)
 800c098:	f00a f82e 	bl	80160f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c09c:	e008      	b.n	800c0b0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c09e:	4b07      	ldr	r3, [pc, #28]	; (800c0bc <pbuf_alloc+0x1d4>)
 800c0a0:	f240 1227 	movw	r2, #295	; 0x127
 800c0a4:	490a      	ldr	r1, [pc, #40]	; (800c0d0 <pbuf_alloc+0x1e8>)
 800c0a6:	4807      	ldr	r0, [pc, #28]	; (800c0c4 <pbuf_alloc+0x1dc>)
 800c0a8:	f00a f826 	bl	80160f8 <iprintf>
      return NULL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e001      	b.n	800c0b4 <pbuf_alloc+0x1cc>
      break;
 800c0b0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3728      	adds	r7, #40	; 0x28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	080184c4 	.word	0x080184c4
 800c0c0:	080184f4 	.word	0x080184f4
 800c0c4:	08018524 	.word	0x08018524
 800c0c8:	0801854c 	.word	0x0801854c
 800c0cc:	08018580 	.word	0x08018580
 800c0d0:	080185ac 	.word	0x080185ac

0800c0d4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af02      	add	r7, sp, #8
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	807b      	strh	r3, [r7, #2]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c0e4:	883b      	ldrh	r3, [r7, #0]
 800c0e6:	2b41      	cmp	r3, #65	; 0x41
 800c0e8:	d009      	beq.n	800c0fe <pbuf_alloc_reference+0x2a>
 800c0ea:	883b      	ldrh	r3, [r7, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d006      	beq.n	800c0fe <pbuf_alloc_reference+0x2a>
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <pbuf_alloc_reference+0x5c>)
 800c0f2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c0f6:	490f      	ldr	r1, [pc, #60]	; (800c134 <pbuf_alloc_reference+0x60>)
 800c0f8:	480f      	ldr	r0, [pc, #60]	; (800c138 <pbuf_alloc_reference+0x64>)
 800c0fa:	f009 fffd 	bl	80160f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c0fe:	200b      	movs	r0, #11
 800c100:	f7ff fabc 	bl	800b67c <memp_malloc>
 800c104:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	e00b      	b.n	800c128 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c110:	8879      	ldrh	r1, [r7, #2]
 800c112:	887a      	ldrh	r2, [r7, #2]
 800c114:	2300      	movs	r3, #0
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	883b      	ldrh	r3, [r7, #0]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	460b      	mov	r3, r1
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f7ff feb7 	bl	800be94 <pbuf_init_alloced_pbuf>
  return p;
 800c126:	68fb      	ldr	r3, [r7, #12]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	080184c4 	.word	0x080184c4
 800c134:	080185c8 	.word	0x080185c8
 800c138:	08018524 	.word	0x08018524

0800c13c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8
 800c142:	607b      	str	r3, [r7, #4]
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
 800c148:	460b      	mov	r3, r1
 800c14a:	81bb      	strh	r3, [r7, #12]
 800c14c:	4613      	mov	r3, r2
 800c14e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c154:	8a7b      	ldrh	r3, [r7, #18]
 800c156:	3303      	adds	r3, #3
 800c158:	f023 0203 	bic.w	r2, r3, #3
 800c15c:	89bb      	ldrh	r3, [r7, #12]
 800c15e:	441a      	add	r2, r3
 800c160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c162:	429a      	cmp	r2, r3
 800c164:	d901      	bls.n	800c16a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	e018      	b.n	800c19c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d007      	beq.n	800c180 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c170:	8a7b      	ldrh	r3, [r7, #18]
 800c172:	3303      	adds	r3, #3
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	6a3a      	ldr	r2, [r7, #32]
 800c17a:	4413      	add	r3, r2
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	e001      	b.n	800c184 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c180:	2300      	movs	r3, #0
 800c182:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	89b9      	ldrh	r1, [r7, #12]
 800c188:	89ba      	ldrh	r2, [r7, #12]
 800c18a:	2302      	movs	r3, #2
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	897b      	ldrh	r3, [r7, #10]
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	460b      	mov	r3, r1
 800c194:	6979      	ldr	r1, [r7, #20]
 800c196:	f7ff fe7d 	bl	800be94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c19a:	687b      	ldr	r3, [r7, #4]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d106      	bne.n	800c1c4 <pbuf_realloc+0x20>
 800c1b6:	4b3a      	ldr	r3, [pc, #232]	; (800c2a0 <pbuf_realloc+0xfc>)
 800c1b8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c1bc:	4939      	ldr	r1, [pc, #228]	; (800c2a4 <pbuf_realloc+0x100>)
 800c1be:	483a      	ldr	r0, [pc, #232]	; (800c2a8 <pbuf_realloc+0x104>)
 800c1c0:	f009 ff9a 	bl	80160f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	891b      	ldrh	r3, [r3, #8]
 800c1c8:	887a      	ldrh	r2, [r7, #2]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d263      	bcs.n	800c296 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	891a      	ldrh	r2, [r3, #8]
 800c1d2:	887b      	ldrh	r3, [r7, #2]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c1d8:	887b      	ldrh	r3, [r7, #2]
 800c1da:	817b      	strh	r3, [r7, #10]
  q = p;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c1e0:	e018      	b.n	800c214 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	895b      	ldrh	r3, [r3, #10]
 800c1e6:	897a      	ldrh	r2, [r7, #10]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	891a      	ldrh	r2, [r3, #8]
 800c1f0:	893b      	ldrh	r3, [r7, #8]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <pbuf_realloc+0x70>
 800c206:	4b26      	ldr	r3, [pc, #152]	; (800c2a0 <pbuf_realloc+0xfc>)
 800c208:	f240 12af 	movw	r2, #431	; 0x1af
 800c20c:	4927      	ldr	r1, [pc, #156]	; (800c2ac <pbuf_realloc+0x108>)
 800c20e:	4826      	ldr	r0, [pc, #152]	; (800c2a8 <pbuf_realloc+0x104>)
 800c210:	f009 ff72 	bl	80160f8 <iprintf>
  while (rem_len > q->len) {
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	895b      	ldrh	r3, [r3, #10]
 800c218:	897a      	ldrh	r2, [r7, #10]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d8e1      	bhi.n	800c1e2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	7b1b      	ldrb	r3, [r3, #12]
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	2b00      	cmp	r3, #0
 800c228:	d121      	bne.n	800c26e <pbuf_realloc+0xca>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	895b      	ldrh	r3, [r3, #10]
 800c22e:	897a      	ldrh	r2, [r7, #10]
 800c230:	429a      	cmp	r2, r3
 800c232:	d01c      	beq.n	800c26e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	7b5b      	ldrb	r3, [r3, #13]
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d116      	bne.n	800c26e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	685a      	ldr	r2, [r3, #4]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	b29a      	uxth	r2, r3
 800c24a:	897b      	ldrh	r3, [r7, #10]
 800c24c:	4413      	add	r3, r2
 800c24e:	b29b      	uxth	r3, r3
 800c250:	4619      	mov	r1, r3
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7fe ff64 	bl	800b120 <mem_trim>
 800c258:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <pbuf_realloc+0xca>
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <pbuf_realloc+0xfc>)
 800c262:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c266:	4912      	ldr	r1, [pc, #72]	; (800c2b0 <pbuf_realloc+0x10c>)
 800c268:	480f      	ldr	r0, [pc, #60]	; (800c2a8 <pbuf_realloc+0x104>)
 800c26a:	f009 ff45 	bl	80160f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	897a      	ldrh	r2, [r7, #10]
 800c272:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	895a      	ldrh	r2, [r3, #10]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d004      	beq.n	800c28e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f911 	bl	800c4b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	e000      	b.n	800c298 <pbuf_realloc+0xf4>
    return;
 800c296:	bf00      	nop

}
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	080184c4 	.word	0x080184c4
 800c2a4:	080185dc 	.word	0x080185dc
 800c2a8:	08018524 	.word	0x08018524
 800c2ac:	080185f4 	.word	0x080185f4
 800c2b0:	0801860c 	.word	0x0801860c

0800c2b4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <pbuf_add_header_impl+0x22>
 800c2c8:	4b2b      	ldr	r3, [pc, #172]	; (800c378 <pbuf_add_header_impl+0xc4>)
 800c2ca:	f240 12df 	movw	r2, #479	; 0x1df
 800c2ce:	492b      	ldr	r1, [pc, #172]	; (800c37c <pbuf_add_header_impl+0xc8>)
 800c2d0:	482b      	ldr	r0, [pc, #172]	; (800c380 <pbuf_add_header_impl+0xcc>)
 800c2d2:	f009 ff11 	bl	80160f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <pbuf_add_header_impl+0x30>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e2:	d301      	bcc.n	800c2e8 <pbuf_add_header_impl+0x34>
    return 1;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e043      	b.n	800c370 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <pbuf_add_header_impl+0x3e>
    return 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e03e      	b.n	800c370 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	891a      	ldrh	r2, [r3, #8]
 800c2fa:	8a7b      	ldrh	r3, [r7, #18]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	8a7a      	ldrh	r2, [r7, #18]
 800c302:	429a      	cmp	r2, r3
 800c304:	d901      	bls.n	800c30a <pbuf_add_header_impl+0x56>
    return 1;
 800c306:	2301      	movs	r3, #1
 800c308:	e032      	b.n	800c370 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	7b1b      	ldrb	r3, [r3, #12]
 800c30e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c310:	8a3b      	ldrh	r3, [r7, #16]
 800c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00c      	beq.n	800c334 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	425b      	negs	r3, r3
 800c322:	4413      	add	r3, r2
 800c324:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3310      	adds	r3, #16
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d20d      	bcs.n	800c34c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c330:	2301      	movs	r3, #1
 800c332:	e01d      	b.n	800c370 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d006      	beq.n	800c348 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	425b      	negs	r3, r3
 800c342:	4413      	add	r3, r2
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e001      	b.n	800c34c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c348:	2301      	movs	r3, #1
 800c34a:	e011      	b.n	800c370 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	895a      	ldrh	r2, [r3, #10]
 800c356:	8a7b      	ldrh	r3, [r7, #18]
 800c358:	4413      	add	r3, r2
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	891a      	ldrh	r2, [r3, #8]
 800c364:	8a7b      	ldrh	r3, [r7, #18]
 800c366:	4413      	add	r3, r2
 800c368:	b29a      	uxth	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	080184c4 	.word	0x080184c4
 800c37c:	08018628 	.word	0x08018628
 800c380:	08018524 	.word	0x08018524

0800c384 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c38e:	2200      	movs	r2, #0
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff ff8e 	bl	800c2b4 <pbuf_add_header_impl>
 800c398:	4603      	mov	r3, r0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <pbuf_remove_header+0x1e>
 800c3b4:	4b20      	ldr	r3, [pc, #128]	; (800c438 <pbuf_remove_header+0x94>)
 800c3b6:	f240 224b 	movw	r2, #587	; 0x24b
 800c3ba:	4920      	ldr	r1, [pc, #128]	; (800c43c <pbuf_remove_header+0x98>)
 800c3bc:	4820      	ldr	r0, [pc, #128]	; (800c440 <pbuf_remove_header+0x9c>)
 800c3be:	f009 fe9b 	bl	80160f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d003      	beq.n	800c3d0 <pbuf_remove_header+0x2c>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ce:	d301      	bcc.n	800c3d4 <pbuf_remove_header+0x30>
    return 1;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e02c      	b.n	800c42e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <pbuf_remove_header+0x3a>
    return 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e027      	b.n	800c42e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	895b      	ldrh	r3, [r3, #10]
 800c3e6:	89fa      	ldrh	r2, [r7, #14]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d908      	bls.n	800c3fe <pbuf_remove_header+0x5a>
 800c3ec:	4b12      	ldr	r3, [pc, #72]	; (800c438 <pbuf_remove_header+0x94>)
 800c3ee:	f240 2255 	movw	r2, #597	; 0x255
 800c3f2:	4914      	ldr	r1, [pc, #80]	; (800c444 <pbuf_remove_header+0xa0>)
 800c3f4:	4812      	ldr	r0, [pc, #72]	; (800c440 <pbuf_remove_header+0x9c>)
 800c3f6:	f009 fe7f 	bl	80160f8 <iprintf>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e017      	b.n	800c42e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	441a      	add	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	895a      	ldrh	r2, [r3, #10]
 800c414:	89fb      	ldrh	r3, [r7, #14]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	891a      	ldrh	r2, [r3, #8]
 800c422:	89fb      	ldrh	r3, [r7, #14]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	080184c4 	.word	0x080184c4
 800c43c:	08018628 	.word	0x08018628
 800c440:	08018524 	.word	0x08018524
 800c444:	08018634 	.word	0x08018634

0800c448 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	807b      	strh	r3, [r7, #2]
 800c454:	4613      	mov	r3, r2
 800c456:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	da08      	bge.n	800c472 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c460:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c464:	425b      	negs	r3, r3
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff ff9b 	bl	800c3a4 <pbuf_remove_header>
 800c46e:	4603      	mov	r3, r0
 800c470:	e007      	b.n	800c482 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c472:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c476:	787a      	ldrb	r2, [r7, #1]
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7ff ff1a 	bl	800c2b4 <pbuf_add_header_impl>
 800c480:	4603      	mov	r3, r0
  }
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	460b      	mov	r3, r1
 800c494:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c496:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c49a:	2201      	movs	r2, #1
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff ffd2 	bl	800c448 <pbuf_header_impl>
 800c4a4:	4603      	mov	r3, r0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
	...

0800c4b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10b      	bne.n	800c4d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d106      	bne.n	800c4d2 <pbuf_free+0x22>
 800c4c4:	4b3b      	ldr	r3, [pc, #236]	; (800c5b4 <pbuf_free+0x104>)
 800c4c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c4ca:	493b      	ldr	r1, [pc, #236]	; (800c5b8 <pbuf_free+0x108>)
 800c4cc:	483b      	ldr	r0, [pc, #236]	; (800c5bc <pbuf_free+0x10c>)
 800c4ce:	f009 fe13 	bl	80160f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e069      	b.n	800c5aa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c4da:	e062      	b.n	800c5a2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c4dc:	f009 fcee 	bl	8015ebc <sys_arch_protect>
 800c4e0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7b9b      	ldrb	r3, [r3, #14]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <pbuf_free+0x48>
 800c4ea:	4b32      	ldr	r3, [pc, #200]	; (800c5b4 <pbuf_free+0x104>)
 800c4ec:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c4f0:	4933      	ldr	r1, [pc, #204]	; (800c5c0 <pbuf_free+0x110>)
 800c4f2:	4832      	ldr	r0, [pc, #200]	; (800c5bc <pbuf_free+0x10c>)
 800c4f4:	f009 fe00 	bl	80160f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	7b9b      	ldrb	r3, [r3, #14]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	739a      	strb	r2, [r3, #14]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7b9b      	ldrb	r3, [r3, #14]
 800c508:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c50a:	69b8      	ldr	r0, [r7, #24]
 800c50c:	f009 fce4 	bl	8015ed8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d143      	bne.n	800c59e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7b1b      	ldrb	r3, [r3, #12]
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7b5b      	ldrb	r3, [r3, #13]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d011      	beq.n	800c556 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d106      	bne.n	800c54c <pbuf_free+0x9c>
 800c53e:	4b1d      	ldr	r3, [pc, #116]	; (800c5b4 <pbuf_free+0x104>)
 800c540:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c544:	491f      	ldr	r1, [pc, #124]	; (800c5c4 <pbuf_free+0x114>)
 800c546:	481d      	ldr	r0, [pc, #116]	; (800c5bc <pbuf_free+0x10c>)
 800c548:	f009 fdd6 	bl	80160f8 <iprintf>
        pc->custom_free_function(p);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
 800c554:	e01d      	b.n	800c592 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c556:	7bfb      	ldrb	r3, [r7, #15]
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d104      	bne.n	800c566 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	200c      	movs	r0, #12
 800c560:	f7ff f902 	bl	800b768 <memp_free>
 800c564:	e015      	b.n	800c592 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c566:	7bfb      	ldrb	r3, [r7, #15]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d104      	bne.n	800c576 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c56c:	6879      	ldr	r1, [r7, #4]
 800c56e:	200b      	movs	r0, #11
 800c570:	f7ff f8fa 	bl	800b768 <memp_free>
 800c574:	e00d      	b.n	800c592 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d103      	bne.n	800c584 <pbuf_free+0xd4>
          mem_free(p);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fe fd3f 	bl	800b000 <mem_free>
 800c582:	e006      	b.n	800c592 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c584:	4b0b      	ldr	r3, [pc, #44]	; (800c5b4 <pbuf_free+0x104>)
 800c586:	f240 320f 	movw	r2, #783	; 0x30f
 800c58a:	490f      	ldr	r1, [pc, #60]	; (800c5c8 <pbuf_free+0x118>)
 800c58c:	480b      	ldr	r0, [pc, #44]	; (800c5bc <pbuf_free+0x10c>)
 800c58e:	f009 fdb3 	bl	80160f8 <iprintf>
        }
      }
      count++;
 800c592:	7ffb      	ldrb	r3, [r7, #31]
 800c594:	3301      	adds	r3, #1
 800c596:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	607b      	str	r3, [r7, #4]
 800c59c:	e001      	b.n	800c5a2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d199      	bne.n	800c4dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c5a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3720      	adds	r7, #32
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	080184c4 	.word	0x080184c4
 800c5b8:	08018628 	.word	0x08018628
 800c5bc:	08018524 	.word	0x08018524
 800c5c0:	08018654 	.word	0x08018654
 800c5c4:	0801866c 	.word	0x0801866c
 800c5c8:	08018690 	.word	0x08018690

0800c5cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c5d8:	e005      	b.n	800c5e6 <pbuf_clen+0x1a>
    ++len;
 800c5da:	89fb      	ldrh	r3, [r7, #14]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1f6      	bne.n	800c5da <pbuf_clen+0xe>
  }
  return len;
 800c5ec:	89fb      	ldrh	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d016      	beq.n	800c638 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c60a:	f009 fc57 	bl	8015ebc <sys_arch_protect>
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7b9b      	ldrb	r3, [r3, #14]
 800c614:	3301      	adds	r3, #1
 800c616:	b2da      	uxtb	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	739a      	strb	r2, [r3, #14]
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f009 fc5b 	bl	8015ed8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7b9b      	ldrb	r3, [r3, #14]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <pbuf_ref+0x3c>
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <pbuf_ref+0x44>)
 800c62c:	f240 3242 	movw	r2, #834	; 0x342
 800c630:	4904      	ldr	r1, [pc, #16]	; (800c644 <pbuf_ref+0x48>)
 800c632:	4805      	ldr	r0, [pc, #20]	; (800c648 <pbuf_ref+0x4c>)
 800c634:	f009 fd60 	bl	80160f8 <iprintf>
  }
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	080184c4 	.word	0x080184c4
 800c644:	080186a4 	.word	0x080186a4
 800c648:	08018524 	.word	0x08018524

0800c64c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <pbuf_cat+0x16>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d107      	bne.n	800c672 <pbuf_cat+0x26>
 800c662:	4b20      	ldr	r3, [pc, #128]	; (800c6e4 <pbuf_cat+0x98>)
 800c664:	f240 3259 	movw	r2, #857	; 0x359
 800c668:	491f      	ldr	r1, [pc, #124]	; (800c6e8 <pbuf_cat+0x9c>)
 800c66a:	4820      	ldr	r0, [pc, #128]	; (800c6ec <pbuf_cat+0xa0>)
 800c66c:	f009 fd44 	bl	80160f8 <iprintf>
 800c670:	e034      	b.n	800c6dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	60fb      	str	r3, [r7, #12]
 800c676:	e00a      	b.n	800c68e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	891a      	ldrh	r2, [r3, #8]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	891b      	ldrh	r3, [r3, #8]
 800c680:	4413      	add	r3, r2
 800c682:	b29a      	uxth	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1f0      	bne.n	800c678 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	891a      	ldrh	r2, [r3, #8]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	895b      	ldrh	r3, [r3, #10]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d006      	beq.n	800c6b0 <pbuf_cat+0x64>
 800c6a2:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <pbuf_cat+0x98>)
 800c6a4:	f240 3262 	movw	r2, #866	; 0x362
 800c6a8:	4911      	ldr	r1, [pc, #68]	; (800c6f0 <pbuf_cat+0xa4>)
 800c6aa:	4810      	ldr	r0, [pc, #64]	; (800c6ec <pbuf_cat+0xa0>)
 800c6ac:	f009 fd24 	bl	80160f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d006      	beq.n	800c6c6 <pbuf_cat+0x7a>
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <pbuf_cat+0x98>)
 800c6ba:	f240 3263 	movw	r2, #867	; 0x363
 800c6be:	490d      	ldr	r1, [pc, #52]	; (800c6f4 <pbuf_cat+0xa8>)
 800c6c0:	480a      	ldr	r0, [pc, #40]	; (800c6ec <pbuf_cat+0xa0>)
 800c6c2:	f009 fd19 	bl	80160f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	891a      	ldrh	r2, [r3, #8]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	891b      	ldrh	r3, [r3, #8]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	080184c4 	.word	0x080184c4
 800c6e8:	080186b8 	.word	0x080186b8
 800c6ec:	08018524 	.word	0x08018524
 800c6f0:	080186f0 	.word	0x080186f0
 800c6f4:	08018720 	.word	0x08018720

0800c6f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	2300      	movs	r3, #0
 800c708:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d008      	beq.n	800c722 <pbuf_copy+0x2a>
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d005      	beq.n	800c722 <pbuf_copy+0x2a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	891a      	ldrh	r2, [r3, #8]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	891b      	ldrh	r3, [r3, #8]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d209      	bcs.n	800c736 <pbuf_copy+0x3e>
 800c722:	4b57      	ldr	r3, [pc, #348]	; (800c880 <pbuf_copy+0x188>)
 800c724:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c728:	4956      	ldr	r1, [pc, #344]	; (800c884 <pbuf_copy+0x18c>)
 800c72a:	4857      	ldr	r0, [pc, #348]	; (800c888 <pbuf_copy+0x190>)
 800c72c:	f009 fce4 	bl	80160f8 <iprintf>
 800c730:	f06f 030f 	mvn.w	r3, #15
 800c734:	e09f      	b.n	800c876 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	895b      	ldrh	r3, [r3, #10]
 800c73a:	461a      	mov	r2, r3
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	1ad2      	subs	r2, r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	895b      	ldrh	r3, [r3, #10]
 800c744:	4619      	mov	r1, r3
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	1acb      	subs	r3, r1, r3
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d306      	bcc.n	800c75c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	895b      	ldrh	r3, [r3, #10]
 800c752:	461a      	mov	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	e005      	b.n	800c768 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	895b      	ldrh	r3, [r3, #10]
 800c760:	461a      	mov	r2, r3
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	18d0      	adds	r0, r2, r3
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	4413      	add	r3, r2
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4619      	mov	r1, r3
 800c77c:	f009 fde3 	bl	8016346 <memcpy>
    offset_to += len;
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4413      	add	r3, r2
 800c786:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4413      	add	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	895b      	ldrh	r3, [r3, #10]
 800c794:	461a      	mov	r2, r3
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	4293      	cmp	r3, r2
 800c79a:	d906      	bls.n	800c7aa <pbuf_copy+0xb2>
 800c79c:	4b38      	ldr	r3, [pc, #224]	; (800c880 <pbuf_copy+0x188>)
 800c79e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c7a2:	493a      	ldr	r1, [pc, #232]	; (800c88c <pbuf_copy+0x194>)
 800c7a4:	4838      	ldr	r0, [pc, #224]	; (800c888 <pbuf_copy+0x190>)
 800c7a6:	f009 fca7 	bl	80160f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	895b      	ldrh	r3, [r3, #10]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d906      	bls.n	800c7c4 <pbuf_copy+0xcc>
 800c7b6:	4b32      	ldr	r3, [pc, #200]	; (800c880 <pbuf_copy+0x188>)
 800c7b8:	f240 32da 	movw	r2, #986	; 0x3da
 800c7bc:	4934      	ldr	r1, [pc, #208]	; (800c890 <pbuf_copy+0x198>)
 800c7be:	4832      	ldr	r0, [pc, #200]	; (800c888 <pbuf_copy+0x190>)
 800c7c0:	f009 fc9a 	bl	80160f8 <iprintf>
    if (offset_from >= p_from->len) {
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	895b      	ldrh	r3, [r3, #10]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d304      	bcc.n	800c7da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	895b      	ldrh	r3, [r3, #10]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d114      	bne.n	800c810 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10c      	bne.n	800c810 <pbuf_copy+0x118>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d009      	beq.n	800c810 <pbuf_copy+0x118>
 800c7fc:	4b20      	ldr	r3, [pc, #128]	; (800c880 <pbuf_copy+0x188>)
 800c7fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c802:	4924      	ldr	r1, [pc, #144]	; (800c894 <pbuf_copy+0x19c>)
 800c804:	4820      	ldr	r0, [pc, #128]	; (800c888 <pbuf_copy+0x190>)
 800c806:	f009 fc77 	bl	80160f8 <iprintf>
 800c80a:	f06f 030f 	mvn.w	r3, #15
 800c80e:	e032      	b.n	800c876 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d013      	beq.n	800c83e <pbuf_copy+0x146>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	895a      	ldrh	r2, [r3, #10]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	891b      	ldrh	r3, [r3, #8]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d10d      	bne.n	800c83e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d009      	beq.n	800c83e <pbuf_copy+0x146>
 800c82a:	4b15      	ldr	r3, [pc, #84]	; (800c880 <pbuf_copy+0x188>)
 800c82c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c830:	4919      	ldr	r1, [pc, #100]	; (800c898 <pbuf_copy+0x1a0>)
 800c832:	4815      	ldr	r0, [pc, #84]	; (800c888 <pbuf_copy+0x190>)
 800c834:	f009 fc60 	bl	80160f8 <iprintf>
 800c838:	f06f 0305 	mvn.w	r3, #5
 800c83c:	e01b      	b.n	800c876 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d013      	beq.n	800c86c <pbuf_copy+0x174>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	895a      	ldrh	r2, [r3, #10]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	891b      	ldrh	r3, [r3, #8]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d10d      	bne.n	800c86c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d009      	beq.n	800c86c <pbuf_copy+0x174>
 800c858:	4b09      	ldr	r3, [pc, #36]	; (800c880 <pbuf_copy+0x188>)
 800c85a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c85e:	490e      	ldr	r1, [pc, #56]	; (800c898 <pbuf_copy+0x1a0>)
 800c860:	4809      	ldr	r0, [pc, #36]	; (800c888 <pbuf_copy+0x190>)
 800c862:	f009 fc49 	bl	80160f8 <iprintf>
 800c866:	f06f 0305 	mvn.w	r3, #5
 800c86a:	e004      	b.n	800c876 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f47f af61 	bne.w	800c736 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	080184c4 	.word	0x080184c4
 800c884:	0801876c 	.word	0x0801876c
 800c888:	08018524 	.word	0x08018524
 800c88c:	0801879c 	.word	0x0801879c
 800c890:	080187b4 	.word	0x080187b4
 800c894:	080187d0 	.word	0x080187d0
 800c898:	080187e0 	.word	0x080187e0

0800c89c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	80fb      	strh	r3, [r7, #6]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d108      	bne.n	800c8d2 <pbuf_copy_partial+0x36>
 800c8c0:	4b2b      	ldr	r3, [pc, #172]	; (800c970 <pbuf_copy_partial+0xd4>)
 800c8c2:	f240 420a 	movw	r2, #1034	; 0x40a
 800c8c6:	492b      	ldr	r1, [pc, #172]	; (800c974 <pbuf_copy_partial+0xd8>)
 800c8c8:	482b      	ldr	r0, [pc, #172]	; (800c978 <pbuf_copy_partial+0xdc>)
 800c8ca:	f009 fc15 	bl	80160f8 <iprintf>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e04a      	b.n	800c968 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d108      	bne.n	800c8ea <pbuf_copy_partial+0x4e>
 800c8d8:	4b25      	ldr	r3, [pc, #148]	; (800c970 <pbuf_copy_partial+0xd4>)
 800c8da:	f240 420b 	movw	r2, #1035	; 0x40b
 800c8de:	4927      	ldr	r1, [pc, #156]	; (800c97c <pbuf_copy_partial+0xe0>)
 800c8e0:	4825      	ldr	r0, [pc, #148]	; (800c978 <pbuf_copy_partial+0xdc>)
 800c8e2:	f009 fc09 	bl	80160f8 <iprintf>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e03e      	b.n	800c968 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	61fb      	str	r3, [r7, #28]
 800c8ee:	e034      	b.n	800c95a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c8f0:	88bb      	ldrh	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <pbuf_copy_partial+0x70>
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	895b      	ldrh	r3, [r3, #10]
 800c8fa:	88ba      	ldrh	r2, [r7, #4]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d305      	bcc.n	800c90c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	895b      	ldrh	r3, [r3, #10]
 800c904:	88ba      	ldrh	r2, [r7, #4]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	80bb      	strh	r3, [r7, #4]
 800c90a:	e023      	b.n	800c954 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	895a      	ldrh	r2, [r3, #10]
 800c910:	88bb      	ldrh	r3, [r7, #4]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c916:	8b3a      	ldrh	r2, [r7, #24]
 800c918:	88fb      	ldrh	r3, [r7, #6]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d901      	bls.n	800c922 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c922:	8b7b      	ldrh	r3, [r7, #26]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	18d0      	adds	r0, r2, r3
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	88bb      	ldrh	r3, [r7, #4]
 800c92e:	4413      	add	r3, r2
 800c930:	8b3a      	ldrh	r2, [r7, #24]
 800c932:	4619      	mov	r1, r3
 800c934:	f009 fd07 	bl	8016346 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c938:	8afa      	ldrh	r2, [r7, #22]
 800c93a:	8b3b      	ldrh	r3, [r7, #24]
 800c93c:	4413      	add	r3, r2
 800c93e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c940:	8b7a      	ldrh	r2, [r7, #26]
 800c942:	8b3b      	ldrh	r3, [r7, #24]
 800c944:	4413      	add	r3, r2
 800c946:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c948:	88fa      	ldrh	r2, [r7, #6]
 800c94a:	8b3b      	ldrh	r3, [r7, #24]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	61fb      	str	r3, [r7, #28]
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <pbuf_copy_partial+0xca>
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1c4      	bne.n	800c8f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c966:	8afb      	ldrh	r3, [r7, #22]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	080184c4 	.word	0x080184c4
 800c974:	0801880c 	.word	0x0801880c
 800c978:	08018524 	.word	0x08018524
 800c97c:	0801882c 	.word	0x0801882c

0800c980 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	603a      	str	r2, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
 800c98c:	460b      	mov	r3, r1
 800c98e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	8919      	ldrh	r1, [r3, #8]
 800c994:	88ba      	ldrh	r2, [r7, #4]
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff faa5 	bl	800bee8 <pbuf_alloc>
 800c99e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <pbuf_clone+0x2a>
    return NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e011      	b.n	800c9ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff fea3 	bl	800c6f8 <pbuf_copy>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c9b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d006      	beq.n	800c9cc <pbuf_clone+0x4c>
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <pbuf_clone+0x58>)
 800c9c0:	f240 5224 	movw	r2, #1316	; 0x524
 800c9c4:	4905      	ldr	r1, [pc, #20]	; (800c9dc <pbuf_clone+0x5c>)
 800c9c6:	4806      	ldr	r0, [pc, #24]	; (800c9e0 <pbuf_clone+0x60>)
 800c9c8:	f009 fb96 	bl	80160f8 <iprintf>
  return q;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	080184c4 	.word	0x080184c4
 800c9dc:	08018938 	.word	0x08018938
 800c9e0:	08018524 	.word	0x08018524

0800c9e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c9e8:	f009 fa86 	bl	8015ef8 <rand>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	4b01      	ldr	r3, [pc, #4]	; (800ca04 <tcp_init+0x20>)
 800c9fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ca00:	bf00      	nop
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	24000028 	.word	0x24000028

0800ca08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7d1b      	ldrb	r3, [r3, #20]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d105      	bne.n	800ca24 <tcp_free+0x1c>
 800ca18:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <tcp_free+0x2c>)
 800ca1a:	22d4      	movs	r2, #212	; 0xd4
 800ca1c:	4906      	ldr	r1, [pc, #24]	; (800ca38 <tcp_free+0x30>)
 800ca1e:	4807      	ldr	r0, [pc, #28]	; (800ca3c <tcp_free+0x34>)
 800ca20:	f009 fb6a 	bl	80160f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ca24:	6879      	ldr	r1, [r7, #4]
 800ca26:	2001      	movs	r0, #1
 800ca28:	f7fe fe9e 	bl	800b768 <memp_free>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	080189c4 	.word	0x080189c4
 800ca38:	080189f4 	.word	0x080189f4
 800ca3c:	08018a08 	.word	0x08018a08

0800ca40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7d1b      	ldrb	r3, [r3, #20]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d105      	bne.n	800ca5c <tcp_free_listen+0x1c>
 800ca50:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <tcp_free_listen+0x2c>)
 800ca52:	22df      	movs	r2, #223	; 0xdf
 800ca54:	4906      	ldr	r1, [pc, #24]	; (800ca70 <tcp_free_listen+0x30>)
 800ca56:	4807      	ldr	r0, [pc, #28]	; (800ca74 <tcp_free_listen+0x34>)
 800ca58:	f009 fb4e 	bl	80160f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	2002      	movs	r0, #2
 800ca60:	f7fe fe82 	bl	800b768 <memp_free>
}
 800ca64:	bf00      	nop
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	080189c4 	.word	0x080189c4
 800ca70:	08018a30 	.word	0x08018a30
 800ca74:	08018a08 	.word	0x08018a08

0800ca78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ca7c:	f001 f8f4 	bl	800dc68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ca80:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <tcp_tmr+0x28>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	3301      	adds	r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <tcp_tmr+0x28>)
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <tcp_tmr+0x28>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ca98:	f000 fda6 	bl	800d5e8 <tcp_slowtmr>
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	240074bd 	.word	0x240074bd

0800caa4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d105      	bne.n	800cac0 <tcp_remove_listener+0x1c>
 800cab4:	4b0d      	ldr	r3, [pc, #52]	; (800caec <tcp_remove_listener+0x48>)
 800cab6:	22ff      	movs	r2, #255	; 0xff
 800cab8:	490d      	ldr	r1, [pc, #52]	; (800caf0 <tcp_remove_listener+0x4c>)
 800caba:	480e      	ldr	r0, [pc, #56]	; (800caf4 <tcp_remove_listener+0x50>)
 800cabc:	f009 fb1c 	bl	80160f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	e00a      	b.n	800cadc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d102      	bne.n	800cad6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1f1      	bne.n	800cac6 <tcp_remove_listener+0x22>
    }
  }
}
 800cae2:	bf00      	nop
 800cae4:	bf00      	nop
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	080189c4 	.word	0x080189c4
 800caf0:	08018a4c 	.word	0x08018a4c
 800caf4:	08018a08 	.word	0x08018a08

0800caf8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d106      	bne.n	800cb14 <tcp_listen_closed+0x1c>
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <tcp_listen_closed+0x60>)
 800cb08:	f240 1211 	movw	r2, #273	; 0x111
 800cb0c:	4913      	ldr	r1, [pc, #76]	; (800cb5c <tcp_listen_closed+0x64>)
 800cb0e:	4814      	ldr	r0, [pc, #80]	; (800cb60 <tcp_listen_closed+0x68>)
 800cb10:	f009 faf2 	bl	80160f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7d1b      	ldrb	r3, [r3, #20]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d006      	beq.n	800cb2a <tcp_listen_closed+0x32>
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <tcp_listen_closed+0x60>)
 800cb1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cb22:	4910      	ldr	r1, [pc, #64]	; (800cb64 <tcp_listen_closed+0x6c>)
 800cb24:	480e      	ldr	r0, [pc, #56]	; (800cb60 <tcp_listen_closed+0x68>)
 800cb26:	f009 fae7 	bl	80160f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e00b      	b.n	800cb48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cb30:	4a0d      	ldr	r2, [pc, #52]	; (800cb68 <tcp_listen_closed+0x70>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7ff ffb1 	bl	800caa4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3301      	adds	r3, #1
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d9f0      	bls.n	800cb30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cb4e:	bf00      	nop
 800cb50:	bf00      	nop
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	080189c4 	.word	0x080189c4
 800cb5c:	08018a74 	.word	0x08018a74
 800cb60:	08018a08 	.word	0x08018a08
 800cb64:	08018a80 	.word	0x08018a80
 800cb68:	0801a9e0 	.word	0x0801a9e0

0800cb6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cb6c:	b5b0      	push	{r4, r5, r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af04      	add	r7, sp, #16
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_close_shutdown+0x20>
 800cb7e:	4b63      	ldr	r3, [pc, #396]	; (800cd0c <tcp_close_shutdown+0x1a0>)
 800cb80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cb84:	4962      	ldr	r1, [pc, #392]	; (800cd10 <tcp_close_shutdown+0x1a4>)
 800cb86:	4863      	ldr	r0, [pc, #396]	; (800cd14 <tcp_close_shutdown+0x1a8>)
 800cb88:	f009 fab6 	bl	80160f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cb8c:	78fb      	ldrb	r3, [r7, #3]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d066      	beq.n	800cc60 <tcp_close_shutdown+0xf4>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	7d1b      	ldrb	r3, [r3, #20]
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	d003      	beq.n	800cba2 <tcp_close_shutdown+0x36>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7d1b      	ldrb	r3, [r3, #20]
 800cb9e:	2b07      	cmp	r3, #7
 800cba0:	d15e      	bne.n	800cc60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <tcp_close_shutdown+0x48>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cbb2:	d055      	beq.n	800cc60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	8b5b      	ldrh	r3, [r3, #26]
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d106      	bne.n	800cbce <tcp_close_shutdown+0x62>
 800cbc0:	4b52      	ldr	r3, [pc, #328]	; (800cd0c <tcp_close_shutdown+0x1a0>)
 800cbc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cbc6:	4954      	ldr	r1, [pc, #336]	; (800cd18 <tcp_close_shutdown+0x1ac>)
 800cbc8:	4852      	ldr	r0, [pc, #328]	; (800cd14 <tcp_close_shutdown+0x1a8>)
 800cbca:	f009 fa95 	bl	80160f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cbd6:	687d      	ldr	r5, [r7, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	8ad2      	ldrh	r2, [r2, #22]
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	8b09      	ldrh	r1, [r1, #24]
 800cbe4:	9102      	str	r1, [sp, #8]
 800cbe6:	9201      	str	r2, [sp, #4]
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	462b      	mov	r3, r5
 800cbec:	4622      	mov	r2, r4
 800cbee:	4601      	mov	r1, r0
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f005 fe09 	bl	8012808 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f001 fbe6 	bl	800e3c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cbfc:	4b47      	ldr	r3, [pc, #284]	; (800cd1c <tcp_close_shutdown+0x1b0>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d105      	bne.n	800cc12 <tcp_close_shutdown+0xa6>
 800cc06:	4b45      	ldr	r3, [pc, #276]	; (800cd1c <tcp_close_shutdown+0x1b0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	4a43      	ldr	r2, [pc, #268]	; (800cd1c <tcp_close_shutdown+0x1b0>)
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	e013      	b.n	800cc3a <tcp_close_shutdown+0xce>
 800cc12:	4b42      	ldr	r3, [pc, #264]	; (800cd1c <tcp_close_shutdown+0x1b0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	60fb      	str	r3, [r7, #12]
 800cc18:	e00c      	b.n	800cc34 <tcp_close_shutdown+0xc8>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d104      	bne.n	800cc2e <tcp_close_shutdown+0xc2>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	60da      	str	r2, [r3, #12]
 800cc2c:	e005      	b.n	800cc3a <tcp_close_shutdown+0xce>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1ef      	bne.n	800cc1a <tcp_close_shutdown+0xae>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	60da      	str	r2, [r3, #12]
 800cc40:	4b37      	ldr	r3, [pc, #220]	; (800cd20 <tcp_close_shutdown+0x1b4>)
 800cc42:	2201      	movs	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cc46:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <tcp_close_shutdown+0x1b8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d102      	bne.n	800cc56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cc50:	f004 f87e 	bl	8010d50 <tcp_trigger_input_pcb_close>
 800cc54:	e002      	b.n	800cc5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fed6 	bl	800ca08 <tcp_free>
      }
      return ERR_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e050      	b.n	800cd02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	7d1b      	ldrb	r3, [r3, #20]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d03b      	beq.n	800cce0 <tcp_close_shutdown+0x174>
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	dc44      	bgt.n	800ccf6 <tcp_close_shutdown+0x18a>
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <tcp_close_shutdown+0x10a>
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d02a      	beq.n	800ccca <tcp_close_shutdown+0x15e>
 800cc74:	e03f      	b.n	800ccf6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	8adb      	ldrh	r3, [r3, #22]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d021      	beq.n	800ccc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc7e:	4b2a      	ldr	r3, [pc, #168]	; (800cd28 <tcp_close_shutdown+0x1bc>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d105      	bne.n	800cc94 <tcp_close_shutdown+0x128>
 800cc88:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <tcp_close_shutdown+0x1bc>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	4a26      	ldr	r2, [pc, #152]	; (800cd28 <tcp_close_shutdown+0x1bc>)
 800cc90:	6013      	str	r3, [r2, #0]
 800cc92:	e013      	b.n	800ccbc <tcp_close_shutdown+0x150>
 800cc94:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <tcp_close_shutdown+0x1bc>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60bb      	str	r3, [r7, #8]
 800cc9a:	e00c      	b.n	800ccb6 <tcp_close_shutdown+0x14a>
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d104      	bne.n	800ccb0 <tcp_close_shutdown+0x144>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68da      	ldr	r2, [r3, #12]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	60da      	str	r2, [r3, #12]
 800ccae:	e005      	b.n	800ccbc <tcp_close_shutdown+0x150>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	60bb      	str	r3, [r7, #8]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1ef      	bne.n	800cc9c <tcp_close_shutdown+0x130>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fea0 	bl	800ca08 <tcp_free>
      break;
 800ccc8:	e01a      	b.n	800cd00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff ff14 	bl	800caf8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	4816      	ldr	r0, [pc, #88]	; (800cd2c <tcp_close_shutdown+0x1c0>)
 800ccd4:	f001 fbc8 	bl	800e468 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7ff feb1 	bl	800ca40 <tcp_free_listen>
      break;
 800ccde:	e00f      	b.n	800cd00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	480e      	ldr	r0, [pc, #56]	; (800cd1c <tcp_close_shutdown+0x1b0>)
 800cce4:	f001 fbc0 	bl	800e468 <tcp_pcb_remove>
 800cce8:	4b0d      	ldr	r3, [pc, #52]	; (800cd20 <tcp_close_shutdown+0x1b4>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff fe8a 	bl	800ca08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ccf4:	e004      	b.n	800cd00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f81a 	bl	800cd30 <tcp_close_shutdown_fin>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	e000      	b.n	800cd02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bdb0      	pop	{r4, r5, r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	080189c4 	.word	0x080189c4
 800cd10:	08018a98 	.word	0x08018a98
 800cd14:	08018a08 	.word	0x08018a08
 800cd18:	08018ab8 	.word	0x08018ab8
 800cd1c:	240074b4 	.word	0x240074b4
 800cd20:	240074bc 	.word	0x240074bc
 800cd24:	240074f4 	.word	0x240074f4
 800cd28:	240074ac 	.word	0x240074ac
 800cd2c:	240074b0 	.word	0x240074b0

0800cd30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <tcp_close_shutdown_fin+0x1c>
 800cd3e:	4b2e      	ldr	r3, [pc, #184]	; (800cdf8 <tcp_close_shutdown_fin+0xc8>)
 800cd40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cd44:	492d      	ldr	r1, [pc, #180]	; (800cdfc <tcp_close_shutdown_fin+0xcc>)
 800cd46:	482e      	ldr	r0, [pc, #184]	; (800ce00 <tcp_close_shutdown_fin+0xd0>)
 800cd48:	f009 f9d6 	bl	80160f8 <iprintf>

  switch (pcb->state) {
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7d1b      	ldrb	r3, [r3, #20]
 800cd50:	2b07      	cmp	r3, #7
 800cd52:	d020      	beq.n	800cd96 <tcp_close_shutdown_fin+0x66>
 800cd54:	2b07      	cmp	r3, #7
 800cd56:	dc2b      	bgt.n	800cdb0 <tcp_close_shutdown_fin+0x80>
 800cd58:	2b03      	cmp	r3, #3
 800cd5a:	d002      	beq.n	800cd62 <tcp_close_shutdown_fin+0x32>
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d00d      	beq.n	800cd7c <tcp_close_shutdown_fin+0x4c>
 800cd60:	e026      	b.n	800cdb0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f004 fe5e 	bl	8011a24 <tcp_send_fin>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d11f      	bne.n	800cdb4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2205      	movs	r2, #5
 800cd78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd7a:	e01b      	b.n	800cdb4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f004 fe51 	bl	8011a24 <tcp_send_fin>
 800cd82:	4603      	mov	r3, r0
 800cd84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d114      	bne.n	800cdb8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2205      	movs	r2, #5
 800cd92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd94:	e010      	b.n	800cdb8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f004 fe44 	bl	8011a24 <tcp_send_fin>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d109      	bne.n	800cdbc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2209      	movs	r2, #9
 800cdac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cdae:	e005      	b.n	800cdbc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e01c      	b.n	800cdee <tcp_close_shutdown_fin+0xbe>
      break;
 800cdb4:	bf00      	nop
 800cdb6:	e002      	b.n	800cdbe <tcp_close_shutdown_fin+0x8e>
      break;
 800cdb8:	bf00      	nop
 800cdba:	e000      	b.n	800cdbe <tcp_close_shutdown_fin+0x8e>
      break;
 800cdbc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cdbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d103      	bne.n	800cdce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f004 ff6a 	bl	8011ca0 <tcp_output>
 800cdcc:	e00d      	b.n	800cdea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cdce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd6:	d108      	bne.n	800cdea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	8b5b      	ldrh	r3, [r3, #26]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e001      	b.n	800cdee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	080189c4 	.word	0x080189c4
 800cdfc:	08018a74 	.word	0x08018a74
 800ce00:	08018a08 	.word	0x08018a08

0800ce04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <tcp_close+0x22>
 800ce12:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <tcp_close+0x4c>)
 800ce14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ce18:	490e      	ldr	r1, [pc, #56]	; (800ce54 <tcp_close+0x50>)
 800ce1a:	480f      	ldr	r0, [pc, #60]	; (800ce58 <tcp_close+0x54>)
 800ce1c:	f009 f96c 	bl	80160f8 <iprintf>
 800ce20:	f06f 030f 	mvn.w	r3, #15
 800ce24:	e00f      	b.n	800ce46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7d1b      	ldrb	r3, [r3, #20]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d006      	beq.n	800ce3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8b5b      	ldrh	r3, [r3, #26]
 800ce32:	f043 0310 	orr.w	r3, r3, #16
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff fe94 	bl	800cb6c <tcp_close_shutdown>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	080189c4 	.word	0x080189c4
 800ce54:	08018ad4 	.word	0x08018ad4
 800ce58:	08018a08 	.word	0x08018a08

0800ce5c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <tcp_shutdown+0x26>
 800ce6e:	4b26      	ldr	r3, [pc, #152]	; (800cf08 <tcp_shutdown+0xac>)
 800ce70:	f240 2207 	movw	r2, #519	; 0x207
 800ce74:	4925      	ldr	r1, [pc, #148]	; (800cf0c <tcp_shutdown+0xb0>)
 800ce76:	4826      	ldr	r0, [pc, #152]	; (800cf10 <tcp_shutdown+0xb4>)
 800ce78:	f009 f93e 	bl	80160f8 <iprintf>
 800ce7c:	f06f 030f 	mvn.w	r3, #15
 800ce80:	e03d      	b.n	800cefe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	7d1b      	ldrb	r3, [r3, #20]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d102      	bne.n	800ce90 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ce8a:	f06f 030a 	mvn.w	r3, #10
 800ce8e:	e036      	b.n	800cefe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d01b      	beq.n	800cece <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	8b5b      	ldrh	r3, [r3, #26]
 800ce9a:	f043 0310 	orr.w	r3, r3, #16
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ceaa:	2101      	movs	r1, #1
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff fe5d 	bl	800cb6c <tcp_close_shutdown>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	e023      	b.n	800cefe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d007      	beq.n	800cece <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff faf4 	bl	800c4b0 <pbuf_free>
      pcb->refused_data = NULL;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d013      	beq.n	800cefc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	7d1b      	ldrb	r3, [r3, #20]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	dc02      	bgt.n	800cee2 <tcp_shutdown+0x86>
 800cedc:	2b03      	cmp	r3, #3
 800cede:	da02      	bge.n	800cee6 <tcp_shutdown+0x8a>
 800cee0:	e009      	b.n	800cef6 <tcp_shutdown+0x9a>
 800cee2:	2b07      	cmp	r3, #7
 800cee4:	d107      	bne.n	800cef6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	4619      	mov	r1, r3
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f7ff fe3d 	bl	800cb6c <tcp_close_shutdown>
 800cef2:	4603      	mov	r3, r0
 800cef4:	e003      	b.n	800cefe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cef6:	f06f 030a 	mvn.w	r3, #10
 800cefa:	e000      	b.n	800cefe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	080189c4 	.word	0x080189c4
 800cf0c:	08018aec 	.word	0x08018aec
 800cf10:	08018a08 	.word	0x08018a08

0800cf14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08e      	sub	sp, #56	; 0x38
 800cf18:	af04      	add	r7, sp, #16
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d107      	bne.n	800cf34 <tcp_abandon+0x20>
 800cf24:	4b52      	ldr	r3, [pc, #328]	; (800d070 <tcp_abandon+0x15c>)
 800cf26:	f240 223d 	movw	r2, #573	; 0x23d
 800cf2a:	4952      	ldr	r1, [pc, #328]	; (800d074 <tcp_abandon+0x160>)
 800cf2c:	4852      	ldr	r0, [pc, #328]	; (800d078 <tcp_abandon+0x164>)
 800cf2e:	f009 f8e3 	bl	80160f8 <iprintf>
 800cf32:	e099      	b.n	800d068 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7d1b      	ldrb	r3, [r3, #20]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d106      	bne.n	800cf4a <tcp_abandon+0x36>
 800cf3c:	4b4c      	ldr	r3, [pc, #304]	; (800d070 <tcp_abandon+0x15c>)
 800cf3e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cf42:	494e      	ldr	r1, [pc, #312]	; (800d07c <tcp_abandon+0x168>)
 800cf44:	484c      	ldr	r0, [pc, #304]	; (800d078 <tcp_abandon+0x164>)
 800cf46:	f009 f8d7 	bl	80160f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7d1b      	ldrb	r3, [r3, #20]
 800cf4e:	2b0a      	cmp	r3, #10
 800cf50:	d107      	bne.n	800cf62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	484a      	ldr	r0, [pc, #296]	; (800d080 <tcp_abandon+0x16c>)
 800cf56:	f001 fa87 	bl	800e468 <tcp_pcb_remove>
    tcp_free(pcb);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f7ff fd54 	bl	800ca08 <tcp_free>
 800cf60:	e082      	b.n	800d068 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7d1b      	ldrb	r3, [r3, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d126      	bne.n	800cfda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	8adb      	ldrh	r3, [r3, #22]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02e      	beq.n	800cff2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf94:	4b3b      	ldr	r3, [pc, #236]	; (800d084 <tcp_abandon+0x170>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d105      	bne.n	800cfaa <tcp_abandon+0x96>
 800cf9e:	4b39      	ldr	r3, [pc, #228]	; (800d084 <tcp_abandon+0x170>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	4a37      	ldr	r2, [pc, #220]	; (800d084 <tcp_abandon+0x170>)
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	e013      	b.n	800cfd2 <tcp_abandon+0xbe>
 800cfaa:	4b36      	ldr	r3, [pc, #216]	; (800d084 <tcp_abandon+0x170>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	61fb      	str	r3, [r7, #28]
 800cfb0:	e00c      	b.n	800cfcc <tcp_abandon+0xb8>
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d104      	bne.n	800cfc6 <tcp_abandon+0xb2>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	60da      	str	r2, [r3, #12]
 800cfc4:	e005      	b.n	800cfd2 <tcp_abandon+0xbe>
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	61fb      	str	r3, [r7, #28]
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1ef      	bne.n	800cfb2 <tcp_abandon+0x9e>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	60da      	str	r2, [r3, #12]
 800cfd8:	e00b      	b.n	800cff2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	8adb      	ldrh	r3, [r3, #22]
 800cfe2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	4828      	ldr	r0, [pc, #160]	; (800d088 <tcp_abandon+0x174>)
 800cfe8:	f001 fa3e 	bl	800e468 <tcp_pcb_remove>
 800cfec:	4b27      	ldr	r3, [pc, #156]	; (800d08c <tcp_abandon+0x178>)
 800cfee:	2201      	movs	r2, #1
 800cff0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d004      	beq.n	800d004 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 ff12 	bl	800de28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d004      	beq.n	800d016 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d010:	4618      	mov	r0, r3
 800d012:	f000 ff09 	bl	800de28 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d022:	4618      	mov	r0, r3
 800d024:	f000 ff00 	bl	800de28 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	3304      	adds	r3, #4
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	8b12      	ldrh	r2, [r2, #24]
 800d038:	9202      	str	r2, [sp, #8]
 800d03a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d03c:	9201      	str	r2, [sp, #4]
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	460b      	mov	r3, r1
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	69b9      	ldr	r1, [r7, #24]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f005 fbde 	bl	8012808 <tcp_rst>
    }
    last_state = pcb->state;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff fcd8 	bl	800ca08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <tcp_abandon+0x154>
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	f06f 010c 	mvn.w	r1, #12
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	4798      	blx	r3
  }
}
 800d068:	3728      	adds	r7, #40	; 0x28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	080189c4 	.word	0x080189c4
 800d074:	08018b08 	.word	0x08018b08
 800d078:	08018a08 	.word	0x08018a08
 800d07c:	08018b24 	.word	0x08018b24
 800d080:	240074b8 	.word	0x240074b8
 800d084:	240074ac 	.word	0x240074ac
 800d088:	240074b4 	.word	0x240074b4
 800d08c:	240074bc 	.word	0x240074bc

0800d090 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d098:	2101      	movs	r1, #1
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7ff ff3a 	bl	800cf14 <tcp_abandon>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d0b6:	2304      	movs	r3, #4
 800d0b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d0c0:	4b3e      	ldr	r3, [pc, #248]	; (800d1bc <tcp_bind+0x114>)
 800d0c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d109      	bne.n	800d0de <tcp_bind+0x36>
 800d0ca:	4b3d      	ldr	r3, [pc, #244]	; (800d1c0 <tcp_bind+0x118>)
 800d0cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d0d0:	493c      	ldr	r1, [pc, #240]	; (800d1c4 <tcp_bind+0x11c>)
 800d0d2:	483d      	ldr	r0, [pc, #244]	; (800d1c8 <tcp_bind+0x120>)
 800d0d4:	f009 f810 	bl	80160f8 <iprintf>
 800d0d8:	f06f 030f 	mvn.w	r3, #15
 800d0dc:	e06a      	b.n	800d1b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	7d1b      	ldrb	r3, [r3, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d009      	beq.n	800d0fa <tcp_bind+0x52>
 800d0e6:	4b36      	ldr	r3, [pc, #216]	; (800d1c0 <tcp_bind+0x118>)
 800d0e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d0ec:	4937      	ldr	r1, [pc, #220]	; (800d1cc <tcp_bind+0x124>)
 800d0ee:	4836      	ldr	r0, [pc, #216]	; (800d1c8 <tcp_bind+0x120>)
 800d0f0:	f009 f802 	bl	80160f8 <iprintf>
 800d0f4:	f06f 0305 	mvn.w	r3, #5
 800d0f8:	e05c      	b.n	800d1b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d109      	bne.n	800d114 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d100:	f000 f914 	bl	800d32c <tcp_new_port>
 800d104:	4603      	mov	r3, r0
 800d106:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d135      	bne.n	800d17a <tcp_bind+0xd2>
      return ERR_BUF;
 800d10e:	f06f 0301 	mvn.w	r3, #1
 800d112:	e04f      	b.n	800d1b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d114:	2300      	movs	r3, #0
 800d116:	61fb      	str	r3, [r7, #28]
 800d118:	e02b      	b.n	800d172 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d11a:	4a2d      	ldr	r2, [pc, #180]	; (800d1d0 <tcp_bind+0x128>)
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	61bb      	str	r3, [r7, #24]
 800d126:	e01e      	b.n	800d166 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	8adb      	ldrh	r3, [r3, #22]
 800d12c:	88fa      	ldrh	r2, [r7, #6]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d116      	bne.n	800d160 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d132:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d134:	2b00      	cmp	r3, #0
 800d136:	d010      	beq.n	800d15a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00c      	beq.n	800d15a <tcp_bind+0xb2>
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d009      	beq.n	800d15a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d156:	429a      	cmp	r2, r3
 800d158:	d102      	bne.n	800d160 <tcp_bind+0xb8>
              return ERR_USE;
 800d15a:	f06f 0307 	mvn.w	r3, #7
 800d15e:	e029      	b.n	800d1b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	61bb      	str	r3, [r7, #24]
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1dd      	bne.n	800d128 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	3301      	adds	r3, #1
 800d170:	61fb      	str	r3, [r7, #28]
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	429a      	cmp	r2, r3
 800d178:	dbcf      	blt.n	800d11a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00c      	beq.n	800d19a <tcp_bind+0xf2>
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d008      	beq.n	800d19a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <tcp_bind+0xec>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	e000      	b.n	800d196 <tcp_bind+0xee>
 800d194:	2300      	movs	r3, #0
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	88fa      	ldrh	r2, [r7, #6]
 800d19e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d1a0:	4b0c      	ldr	r3, [pc, #48]	; (800d1d4 <tcp_bind+0x12c>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	60da      	str	r2, [r3, #12]
 800d1a8:	4a0a      	ldr	r2, [pc, #40]	; (800d1d4 <tcp_bind+0x12c>)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	f005 fced 	bl	8012b8c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3720      	adds	r7, #32
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	0801aa08 	.word	0x0801aa08
 800d1c0:	080189c4 	.word	0x080189c4
 800d1c4:	08018b58 	.word	0x08018b58
 800d1c8:	08018a08 	.word	0x08018a08
 800d1cc:	08018b70 	.word	0x08018b70
 800d1d0:	0801a9e0 	.word	0x0801a9e0
 800d1d4:	240074ac 	.word	0x240074ac

0800d1d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <tcp_update_rcv_ann_wnd+0x1c>
 800d1e6:	4b25      	ldr	r3, [pc, #148]	; (800d27c <tcp_update_rcv_ann_wnd+0xa4>)
 800d1e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d1ec:	4924      	ldr	r1, [pc, #144]	; (800d280 <tcp_update_rcv_ann_wnd+0xa8>)
 800d1ee:	4825      	ldr	r0, [pc, #148]	; (800d284 <tcp_update_rcv_ann_wnd+0xac>)
 800d1f0:	f008 ff82 	bl	80160f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d1fc:	4413      	add	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d208:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d20c:	bf28      	it	cs
 800d20e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d212:	b292      	uxth	r2, r2
 800d214:	4413      	add	r3, r2
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	db08      	blt.n	800d230 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	e020      	b.n	800d272 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dd03      	ble.n	800d246 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d244:	e014      	b.n	800d270 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d258:	d306      	bcc.n	800d268 <tcp_update_rcv_ann_wnd+0x90>
 800d25a:	4b08      	ldr	r3, [pc, #32]	; (800d27c <tcp_update_rcv_ann_wnd+0xa4>)
 800d25c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d260:	4909      	ldr	r1, [pc, #36]	; (800d288 <tcp_update_rcv_ann_wnd+0xb0>)
 800d262:	4808      	ldr	r0, [pc, #32]	; (800d284 <tcp_update_rcv_ann_wnd+0xac>)
 800d264:	f008 ff48 	bl	80160f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d270:	2300      	movs	r3, #0
  }
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	080189c4 	.word	0x080189c4
 800d280:	08018c20 	.word	0x08018c20
 800d284:	08018a08 	.word	0x08018a08
 800d288:	08018c44 	.word	0x08018c44

0800d28c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d107      	bne.n	800d2ae <tcp_recved+0x22>
 800d29e:	4b1f      	ldr	r3, [pc, #124]	; (800d31c <tcp_recved+0x90>)
 800d2a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d2a4:	491e      	ldr	r1, [pc, #120]	; (800d320 <tcp_recved+0x94>)
 800d2a6:	481f      	ldr	r0, [pc, #124]	; (800d324 <tcp_recved+0x98>)
 800d2a8:	f008 ff26 	bl	80160f8 <iprintf>
 800d2ac:	e032      	b.n	800d314 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7d1b      	ldrb	r3, [r3, #20]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d106      	bne.n	800d2c4 <tcp_recved+0x38>
 800d2b6:	4b19      	ldr	r3, [pc, #100]	; (800d31c <tcp_recved+0x90>)
 800d2b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d2bc:	491a      	ldr	r1, [pc, #104]	; (800d328 <tcp_recved+0x9c>)
 800d2be:	4819      	ldr	r0, [pc, #100]	; (800d324 <tcp_recved+0x98>)
 800d2c0:	f008 ff1a 	bl	80160f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2c8:	887b      	ldrh	r3, [r7, #2]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d2ce:	89fb      	ldrh	r3, [r7, #14]
 800d2d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d2d4:	d804      	bhi.n	800d2e0 <tcp_recved+0x54>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2da:	89fa      	ldrh	r2, [r7, #14]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d204      	bcs.n	800d2ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d2e6:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2e8:	e002      	b.n	800d2f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	89fa      	ldrh	r2, [r7, #14]
 800d2ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff ff71 	bl	800d1d8 <tcp_update_rcv_ann_wnd>
 800d2f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d2fe:	d309      	bcc.n	800d314 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8b5b      	ldrh	r3, [r3, #26]
 800d304:	f043 0302 	orr.w	r3, r3, #2
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f004 fcc6 	bl	8011ca0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	080189c4 	.word	0x080189c4
 800d320:	08018c60 	.word	0x08018c60
 800d324:	08018a08 	.word	0x08018a08
 800d328:	08018c78 	.word	0x08018c78

0800d32c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d336:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <tcp_new_port+0x84>)
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	3301      	adds	r3, #1
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	4b1c      	ldr	r3, [pc, #112]	; (800d3b0 <tcp_new_port+0x84>)
 800d340:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d342:	4b1b      	ldr	r3, [pc, #108]	; (800d3b0 <tcp_new_port+0x84>)
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d103      	bne.n	800d356 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d34e:	4b18      	ldr	r3, [pc, #96]	; (800d3b0 <tcp_new_port+0x84>)
 800d350:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d354:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d356:	2300      	movs	r3, #0
 800d358:	71fb      	strb	r3, [r7, #7]
 800d35a:	e01e      	b.n	800d39a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	4a15      	ldr	r2, [pc, #84]	; (800d3b4 <tcp_new_port+0x88>)
 800d360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	603b      	str	r3, [r7, #0]
 800d368:	e011      	b.n	800d38e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	8ada      	ldrh	r2, [r3, #22]
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <tcp_new_port+0x84>)
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	429a      	cmp	r2, r3
 800d374:	d108      	bne.n	800d388 <tcp_new_port+0x5c>
        n++;
 800d376:	88bb      	ldrh	r3, [r7, #4]
 800d378:	3301      	adds	r3, #1
 800d37a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d37c:	88bb      	ldrh	r3, [r7, #4]
 800d37e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d382:	d3d8      	bcc.n	800d336 <tcp_new_port+0xa>
          return 0;
 800d384:	2300      	movs	r3, #0
 800d386:	e00d      	b.n	800d3a4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	603b      	str	r3, [r7, #0]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1ea      	bne.n	800d36a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	3301      	adds	r3, #1
 800d398:	71fb      	strb	r3, [r7, #7]
 800d39a:	79fb      	ldrb	r3, [r7, #7]
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d9dd      	bls.n	800d35c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d3a0:	4b03      	ldr	r3, [pc, #12]	; (800d3b0 <tcp_new_port+0x84>)
 800d3a2:	881b      	ldrh	r3, [r3, #0]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	24000028 	.word	0x24000028
 800d3b4:	0801a9e0 	.word	0x0801a9e0

0800d3b8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08a      	sub	sp, #40	; 0x28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d109      	bne.n	800d3e6 <tcp_connect+0x2e>
 800d3d2:	4b7d      	ldr	r3, [pc, #500]	; (800d5c8 <tcp_connect+0x210>)
 800d3d4:	f240 4235 	movw	r2, #1077	; 0x435
 800d3d8:	497c      	ldr	r1, [pc, #496]	; (800d5cc <tcp_connect+0x214>)
 800d3da:	487d      	ldr	r0, [pc, #500]	; (800d5d0 <tcp_connect+0x218>)
 800d3dc:	f008 fe8c 	bl	80160f8 <iprintf>
 800d3e0:	f06f 030f 	mvn.w	r3, #15
 800d3e4:	e0ec      	b.n	800d5c0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d109      	bne.n	800d400 <tcp_connect+0x48>
 800d3ec:	4b76      	ldr	r3, [pc, #472]	; (800d5c8 <tcp_connect+0x210>)
 800d3ee:	f240 4236 	movw	r2, #1078	; 0x436
 800d3f2:	4978      	ldr	r1, [pc, #480]	; (800d5d4 <tcp_connect+0x21c>)
 800d3f4:	4876      	ldr	r0, [pc, #472]	; (800d5d0 <tcp_connect+0x218>)
 800d3f6:	f008 fe7f 	bl	80160f8 <iprintf>
 800d3fa:	f06f 030f 	mvn.w	r3, #15
 800d3fe:	e0df      	b.n	800d5c0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	7d1b      	ldrb	r3, [r3, #20]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d009      	beq.n	800d41c <tcp_connect+0x64>
 800d408:	4b6f      	ldr	r3, [pc, #444]	; (800d5c8 <tcp_connect+0x210>)
 800d40a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d40e:	4972      	ldr	r1, [pc, #456]	; (800d5d8 <tcp_connect+0x220>)
 800d410:	486f      	ldr	r0, [pc, #444]	; (800d5d0 <tcp_connect+0x218>)
 800d412:	f008 fe71 	bl	80160f8 <iprintf>
 800d416:	f06f 0309 	mvn.w	r3, #9
 800d41a:	e0d1      	b.n	800d5c0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <tcp_connect+0x70>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	e000      	b.n	800d42a <tcp_connect+0x72>
 800d428:	2300      	movs	r3, #0
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	88fa      	ldrh	r2, [r7, #6]
 800d432:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	7a1b      	ldrb	r3, [r3, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	7a1b      	ldrb	r3, [r3, #8]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fca7 	bl	800bd94 <netif_get_by_index>
 800d446:	6278      	str	r0, [r7, #36]	; 0x24
 800d448:	e005      	b.n	800d456 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4618      	mov	r0, r3
 800d450:	f007 f984 	bl	801475c <ip4_route>
 800d454:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d45c:	f06f 0303 	mvn.w	r3, #3
 800d460:	e0ae      	b.n	800d5c0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <tcp_connect+0xb8>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d111      	bne.n	800d494 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <tcp_connect+0xc4>
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	3304      	adds	r3, #4
 800d47a:	e000      	b.n	800d47e <tcp_connect+0xc6>
 800d47c:	2300      	movs	r3, #0
 800d47e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d102      	bne.n	800d48c <tcp_connect+0xd4>
      return ERR_RTE;
 800d486:	f06f 0303 	mvn.w	r3, #3
 800d48a:	e099      	b.n	800d5c0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	8adb      	ldrh	r3, [r3, #22]
 800d498:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	8adb      	ldrh	r3, [r3, #22]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10c      	bne.n	800d4bc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d4a2:	f7ff ff43 	bl	800d32c <tcp_new_port>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8adb      	ldrh	r3, [r3, #22]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d102      	bne.n	800d4bc <tcp_connect+0x104>
      return ERR_BUF;
 800d4b6:	f06f 0301 	mvn.w	r3, #1
 800d4ba:	e081      	b.n	800d5c0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f001 f867 	bl	800e590 <tcp_next_iss>
 800d4c2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	1e5a      	subs	r2, r3, #1
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	1e5a      	subs	r2, r3, #1
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	1e5a      	subs	r2, r3, #1
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d510:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3304      	adds	r3, #4
 800d51a:	461a      	mov	r2, r3
 800d51c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d51e:	f001 f85d 	bl	800e5dc <tcp_eff_send_mss_netif>
 800d522:	4603      	mov	r3, r0
 800d524:	461a      	mov	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d53a:	2102      	movs	r1, #2
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f004 fac1 	bl	8011ac4 <tcp_enqueue_flags>
 800d542:	4603      	mov	r3, r0
 800d544:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d546:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d136      	bne.n	800d5bc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2202      	movs	r2, #2
 800d552:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d554:	8b7b      	ldrh	r3, [r7, #26]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d021      	beq.n	800d59e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d55a:	4b20      	ldr	r3, [pc, #128]	; (800d5dc <tcp_connect+0x224>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	429a      	cmp	r2, r3
 800d562:	d105      	bne.n	800d570 <tcp_connect+0x1b8>
 800d564:	4b1d      	ldr	r3, [pc, #116]	; (800d5dc <tcp_connect+0x224>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	4a1c      	ldr	r2, [pc, #112]	; (800d5dc <tcp_connect+0x224>)
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	e013      	b.n	800d598 <tcp_connect+0x1e0>
 800d570:	4b1a      	ldr	r3, [pc, #104]	; (800d5dc <tcp_connect+0x224>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	e00c      	b.n	800d592 <tcp_connect+0x1da>
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d104      	bne.n	800d58c <tcp_connect+0x1d4>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	60da      	str	r2, [r3, #12]
 800d58a:	e005      	b.n	800d598 <tcp_connect+0x1e0>
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	623b      	str	r3, [r7, #32]
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1ef      	bne.n	800d578 <tcp_connect+0x1c0>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d59e:	4b10      	ldr	r3, [pc, #64]	; (800d5e0 <tcp_connect+0x228>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	4a0e      	ldr	r2, [pc, #56]	; (800d5e0 <tcp_connect+0x228>)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	f005 faee 	bl	8012b8c <tcp_timer_needed>
 800d5b0:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <tcp_connect+0x22c>)
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f004 fb72 	bl	8011ca0 <tcp_output>
  }
  return ret;
 800d5bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3728      	adds	r7, #40	; 0x28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	080189c4 	.word	0x080189c4
 800d5cc:	08018ca0 	.word	0x08018ca0
 800d5d0:	08018a08 	.word	0x08018a08
 800d5d4:	08018cbc 	.word	0x08018cbc
 800d5d8:	08018cd8 	.word	0x08018cd8
 800d5dc:	240074ac 	.word	0x240074ac
 800d5e0:	240074b4 	.word	0x240074b4
 800d5e4:	240074bc 	.word	0x240074bc

0800d5e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d5e8:	b5b0      	push	{r4, r5, r7, lr}
 800d5ea:	b090      	sub	sp, #64	; 0x40
 800d5ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d5f4:	4b94      	ldr	r3, [pc, #592]	; (800d848 <tcp_slowtmr+0x260>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	4a93      	ldr	r2, [pc, #588]	; (800d848 <tcp_slowtmr+0x260>)
 800d5fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d5fe:	4b93      	ldr	r3, [pc, #588]	; (800d84c <tcp_slowtmr+0x264>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	b2da      	uxtb	r2, r3
 800d606:	4b91      	ldr	r3, [pc, #580]	; (800d84c <tcp_slowtmr+0x264>)
 800d608:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d60e:	4b90      	ldr	r3, [pc, #576]	; (800d850 <tcp_slowtmr+0x268>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d614:	e29d      	b.n	800db52 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	7d1b      	ldrb	r3, [r3, #20]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <tcp_slowtmr+0x44>
 800d61e:	4b8d      	ldr	r3, [pc, #564]	; (800d854 <tcp_slowtmr+0x26c>)
 800d620:	f240 42be 	movw	r2, #1214	; 0x4be
 800d624:	498c      	ldr	r1, [pc, #560]	; (800d858 <tcp_slowtmr+0x270>)
 800d626:	488d      	ldr	r0, [pc, #564]	; (800d85c <tcp_slowtmr+0x274>)
 800d628:	f008 fd66 	bl	80160f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d106      	bne.n	800d642 <tcp_slowtmr+0x5a>
 800d634:	4b87      	ldr	r3, [pc, #540]	; (800d854 <tcp_slowtmr+0x26c>)
 800d636:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d63a:	4989      	ldr	r1, [pc, #548]	; (800d860 <tcp_slowtmr+0x278>)
 800d63c:	4887      	ldr	r0, [pc, #540]	; (800d85c <tcp_slowtmr+0x274>)
 800d63e:	f008 fd5b 	bl	80160f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	7d1b      	ldrb	r3, [r3, #20]
 800d646:	2b0a      	cmp	r3, #10
 800d648:	d106      	bne.n	800d658 <tcp_slowtmr+0x70>
 800d64a:	4b82      	ldr	r3, [pc, #520]	; (800d854 <tcp_slowtmr+0x26c>)
 800d64c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d650:	4984      	ldr	r1, [pc, #528]	; (800d864 <tcp_slowtmr+0x27c>)
 800d652:	4882      	ldr	r0, [pc, #520]	; (800d85c <tcp_slowtmr+0x274>)
 800d654:	f008 fd50 	bl	80160f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	7f9a      	ldrb	r2, [r3, #30]
 800d65c:	4b7b      	ldr	r3, [pc, #492]	; (800d84c <tcp_slowtmr+0x264>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d105      	bne.n	800d670 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d66e:	e270      	b.n	800db52 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d670:	4b76      	ldr	r3, [pc, #472]	; (800d84c <tcp_slowtmr+0x264>)
 800d672:	781a      	ldrb	r2, [r3, #0]
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d678:	2300      	movs	r3, #0
 800d67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d686:	7d1b      	ldrb	r3, [r3, #20]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d10a      	bne.n	800d6a2 <tcp_slowtmr+0xba>
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d692:	2b05      	cmp	r3, #5
 800d694:	d905      	bls.n	800d6a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69a:	3301      	adds	r3, #1
 800d69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6a0:	e11e      	b.n	800d8e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6a8:	2b0b      	cmp	r3, #11
 800d6aa:	d905      	bls.n	800d6b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6b6:	e113      	b.n	800d8e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d075      	beq.n	800d7ae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <tcp_slowtmr+0xf0>
 800d6ca:	4b62      	ldr	r3, [pc, #392]	; (800d854 <tcp_slowtmr+0x26c>)
 800d6cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d6d0:	4965      	ldr	r1, [pc, #404]	; (800d868 <tcp_slowtmr+0x280>)
 800d6d2:	4862      	ldr	r0, [pc, #392]	; (800d85c <tcp_slowtmr+0x274>)
 800d6d4:	f008 fd10 	bl	80160f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <tcp_slowtmr+0x106>
 800d6e0:	4b5c      	ldr	r3, [pc, #368]	; (800d854 <tcp_slowtmr+0x26c>)
 800d6e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d6e6:	4961      	ldr	r1, [pc, #388]	; (800d86c <tcp_slowtmr+0x284>)
 800d6e8:	485c      	ldr	r0, [pc, #368]	; (800d85c <tcp_slowtmr+0x274>)
 800d6ea:	f008 fd05 	bl	80160f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6f4:	2b0b      	cmp	r3, #11
 800d6f6:	d905      	bls.n	800d704 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d702:	e0ed      	b.n	800d8e0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d706:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4a58      	ldr	r2, [pc, #352]	; (800d870 <tcp_slowtmr+0x288>)
 800d70e:	5cd3      	ldrb	r3, [r2, r3]
 800d710:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d718:	7c7a      	ldrb	r2, [r7, #17]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d907      	bls.n	800d72e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d724:	3301      	adds	r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d734:	7c7a      	ldrb	r2, [r7, #17]
 800d736:	429a      	cmp	r2, r3
 800d738:	f200 80d2 	bhi.w	800d8e0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d73c:	2301      	movs	r3, #1
 800d73e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d746:	2b00      	cmp	r3, #0
 800d748:	d108      	bne.n	800d75c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d74a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d74c:	f005 f950 	bl	80129f0 <tcp_zero_window_probe>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d014      	beq.n	800d780 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d756:	2300      	movs	r3, #0
 800d758:	623b      	str	r3, [r7, #32]
 800d75a:	e011      	b.n	800d780 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d762:	4619      	mov	r1, r3
 800d764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d766:	f004 f815 	bl	8011794 <tcp_split_unsent_seg>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d107      	bne.n	800d780 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d772:	f004 fa95 	bl	8011ca0 <tcp_output>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d780:	6a3b      	ldr	r3, [r7, #32]
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 80ac 	beq.w	800d8e0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d796:	2b06      	cmp	r3, #6
 800d798:	f200 80a2 	bhi.w	800d8e0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d7ac:	e098      	b.n	800d8e0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	db0f      	blt.n	800d7d8 <tcp_slowtmr+0x1f0>
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d008      	beq.n	800d7d8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	b21a      	sxth	r2, r3
 800d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	db7b      	blt.n	800d8e0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ea:	f004 fd4d 	bl	8012288 <tcp_rexmit_rto_prepare>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d007      	beq.n	800d804 <tcp_slowtmr+0x21c>
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d171      	bne.n	800d8e0 <tcp_slowtmr+0x2f8>
 800d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d800:	2b00      	cmp	r3, #0
 800d802:	d06d      	beq.n	800d8e0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d03a      	beq.n	800d882 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d812:	2b0c      	cmp	r3, #12
 800d814:	bf28      	it	cs
 800d816:	230c      	movcs	r3, #12
 800d818:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d820:	10db      	asrs	r3, r3, #3
 800d822:	b21b      	sxth	r3, r3
 800d824:	461a      	mov	r2, r3
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d82c:	4413      	add	r3, r2
 800d82e:	7efa      	ldrb	r2, [r7, #27]
 800d830:	4910      	ldr	r1, [pc, #64]	; (800d874 <tcp_slowtmr+0x28c>)
 800d832:	5c8a      	ldrb	r2, [r1, r2]
 800d834:	4093      	lsls	r3, r2
 800d836:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d83e:	4293      	cmp	r3, r2
 800d840:	dc1a      	bgt.n	800d878 <tcp_slowtmr+0x290>
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	b21a      	sxth	r2, r3
 800d846:	e019      	b.n	800d87c <tcp_slowtmr+0x294>
 800d848:	240074a8 	.word	0x240074a8
 800d84c:	240074be 	.word	0x240074be
 800d850:	240074b4 	.word	0x240074b4
 800d854:	080189c4 	.word	0x080189c4
 800d858:	08018d08 	.word	0x08018d08
 800d85c:	08018a08 	.word	0x08018a08
 800d860:	08018d34 	.word	0x08018d34
 800d864:	08018d60 	.word	0x08018d60
 800d868:	08018d90 	.word	0x08018d90
 800d86c:	08018dc4 	.word	0x08018dc4
 800d870:	0801a9d8 	.word	0x0801a9d8
 800d874:	0801a9c8 	.word	0x0801a9c8
 800d878:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	2200      	movs	r2, #0
 800d886:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d894:	4293      	cmp	r3, r2
 800d896:	bf28      	it	cs
 800d898:	4613      	movcs	r3, r2
 800d89a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d89c:	8a7b      	ldrh	r3, [r7, #18]
 800d89e:	085b      	lsrs	r3, r3, #1
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d206      	bcs.n	800d8c8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8dc:	f004 fd44 	bl	8012368 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	2b06      	cmp	r3, #6
 800d8e6:	d111      	bne.n	800d90c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	8b5b      	ldrh	r3, [r3, #26]
 800d8ec:	f003 0310 	and.w	r3, r3, #16
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00b      	beq.n	800d90c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8f4:	4b9c      	ldr	r3, [pc, #624]	; (800db68 <tcp_slowtmr+0x580>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	6a1b      	ldr	r3, [r3, #32]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	2b28      	cmp	r3, #40	; 0x28
 800d900:	d904      	bls.n	800d90c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d906:	3301      	adds	r3, #1
 800d908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	7a5b      	ldrb	r3, [r3, #9]
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d04a      	beq.n	800d9ae <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	d003      	beq.n	800d928 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d924:	2b07      	cmp	r3, #7
 800d926:	d142      	bne.n	800d9ae <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d928:	4b8f      	ldr	r3, [pc, #572]	; (800db68 <tcp_slowtmr+0x580>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d938:	4b8c      	ldr	r3, [pc, #560]	; (800db6c <tcp_slowtmr+0x584>)
 800d93a:	440b      	add	r3, r1
 800d93c:	498c      	ldr	r1, [pc, #560]	; (800db70 <tcp_slowtmr+0x588>)
 800d93e:	fba1 1303 	umull	r1, r3, r1, r3
 800d942:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d944:	429a      	cmp	r2, r3
 800d946:	d90a      	bls.n	800d95e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d94c:	3301      	adds	r3, #1
 800d94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d956:	3301      	adds	r3, #1
 800d958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d95c:	e027      	b.n	800d9ae <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d95e:	4b82      	ldr	r3, [pc, #520]	; (800db68 <tcp_slowtmr+0x580>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d974:	4618      	mov	r0, r3
 800d976:	4b7f      	ldr	r3, [pc, #508]	; (800db74 <tcp_slowtmr+0x58c>)
 800d978:	fb00 f303 	mul.w	r3, r0, r3
 800d97c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d97e:	497c      	ldr	r1, [pc, #496]	; (800db70 <tcp_slowtmr+0x588>)
 800d980:	fba1 1303 	umull	r1, r3, r1, r3
 800d984:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d986:	429a      	cmp	r2, r3
 800d988:	d911      	bls.n	800d9ae <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d98a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d98c:	f004 fff0 	bl	8012970 <tcp_keepalive>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d996:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d107      	bne.n	800d9ae <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9aa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d011      	beq.n	800d9da <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d9b6:	4b6c      	ldr	r3, [pc, #432]	; (800db68 <tcp_slowtmr+0x580>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	1ad2      	subs	r2, r2, r3
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	440b      	add	r3, r1
 800d9ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d302      	bcc.n	800d9da <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9d6:	f000 feab 	bl	800e730 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	7d1b      	ldrb	r3, [r3, #20]
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d10b      	bne.n	800d9fa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9e2:	4b61      	ldr	r3, [pc, #388]	; (800db68 <tcp_slowtmr+0x580>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b28      	cmp	r3, #40	; 0x28
 800d9ee:	d904      	bls.n	800d9fa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	7d1b      	ldrb	r3, [r3, #20]
 800d9fe:	2b09      	cmp	r3, #9
 800da00:	d10b      	bne.n	800da1a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da02:	4b59      	ldr	r3, [pc, #356]	; (800db68 <tcp_slowtmr+0x580>)
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	2bf0      	cmp	r3, #240	; 0xf0
 800da0e:	d904      	bls.n	800da1a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800da10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da14:	3301      	adds	r3, #1
 800da16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d060      	beq.n	800dae4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da28:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800da2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da2c:	f000 fccc 	bl	800e3c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	2b00      	cmp	r3, #0
 800da34:	d010      	beq.n	800da58 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da36:	4b50      	ldr	r3, [pc, #320]	; (800db78 <tcp_slowtmr+0x590>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d106      	bne.n	800da4e <tcp_slowtmr+0x466>
 800da40:	4b4e      	ldr	r3, [pc, #312]	; (800db7c <tcp_slowtmr+0x594>)
 800da42:	f240 526d 	movw	r2, #1389	; 0x56d
 800da46:	494e      	ldr	r1, [pc, #312]	; (800db80 <tcp_slowtmr+0x598>)
 800da48:	484e      	ldr	r0, [pc, #312]	; (800db84 <tcp_slowtmr+0x59c>)
 800da4a:	f008 fb55 	bl	80160f8 <iprintf>
        prev->next = pcb->next;
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	68da      	ldr	r2, [r3, #12]
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	e00f      	b.n	800da78 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800da58:	4b47      	ldr	r3, [pc, #284]	; (800db78 <tcp_slowtmr+0x590>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da5e:	429a      	cmp	r2, r3
 800da60:	d006      	beq.n	800da70 <tcp_slowtmr+0x488>
 800da62:	4b46      	ldr	r3, [pc, #280]	; (800db7c <tcp_slowtmr+0x594>)
 800da64:	f240 5271 	movw	r2, #1393	; 0x571
 800da68:	4947      	ldr	r1, [pc, #284]	; (800db88 <tcp_slowtmr+0x5a0>)
 800da6a:	4846      	ldr	r0, [pc, #280]	; (800db84 <tcp_slowtmr+0x59c>)
 800da6c:	f008 fb44 	bl	80160f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	4a40      	ldr	r2, [pc, #256]	; (800db78 <tcp_slowtmr+0x590>)
 800da76:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800da78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d013      	beq.n	800daa8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da88:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800da8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8c:	3304      	adds	r3, #4
 800da8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da90:	8ad2      	ldrh	r2, [r2, #22]
 800da92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da94:	8b09      	ldrh	r1, [r1, #24]
 800da96:	9102      	str	r1, [sp, #8]
 800da98:	9201      	str	r2, [sp, #4]
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	462b      	mov	r3, r5
 800da9e:	4622      	mov	r2, r4
 800daa0:	4601      	mov	r1, r0
 800daa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daa4:	f004 feb0 	bl	8012808 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	7d1b      	ldrb	r3, [r3, #20]
 800dab2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dabe:	6838      	ldr	r0, [r7, #0]
 800dac0:	f7fe ffa2 	bl	800ca08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dac4:	4b31      	ldr	r3, [pc, #196]	; (800db8c <tcp_slowtmr+0x5a4>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d004      	beq.n	800dada <tcp_slowtmr+0x4f2>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f06f 010c 	mvn.w	r1, #12
 800dad6:	68b8      	ldr	r0, [r7, #8]
 800dad8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dada:	4b2c      	ldr	r3, [pc, #176]	; (800db8c <tcp_slowtmr+0x5a4>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d037      	beq.n	800db52 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800dae2:	e592      	b.n	800d60a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	7f1b      	ldrb	r3, [r3, #28]
 800daf2:	3301      	adds	r3, #1
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafc:	7f1a      	ldrb	r2, [r3, #28]
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	7f5b      	ldrb	r3, [r3, #29]
 800db02:	429a      	cmp	r2, r3
 800db04:	d325      	bcc.n	800db52 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	2200      	movs	r2, #0
 800db0a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800db0c:	4b1f      	ldr	r3, [pc, #124]	; (800db8c <tcp_slowtmr+0x5a4>)
 800db0e:	2200      	movs	r2, #0
 800db10:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <tcp_slowtmr+0x54c>
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db24:	6912      	ldr	r2, [r2, #16]
 800db26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db28:	4610      	mov	r0, r2
 800db2a:	4798      	blx	r3
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800db32:	e002      	b.n	800db3a <tcp_slowtmr+0x552>
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800db3a:	4b14      	ldr	r3, [pc, #80]	; (800db8c <tcp_slowtmr+0x5a4>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d000      	beq.n	800db44 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800db42:	e562      	b.n	800d60a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800db4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db4e:	f004 f8a7 	bl	8011ca0 <tcp_output>
  while (pcb != NULL) {
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	2b00      	cmp	r3, #0
 800db56:	f47f ad5e 	bne.w	800d616 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <tcp_slowtmr+0x5a8>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800db64:	e069      	b.n	800dc3a <tcp_slowtmr+0x652>
 800db66:	bf00      	nop
 800db68:	240074a8 	.word	0x240074a8
 800db6c:	000a4cb8 	.word	0x000a4cb8
 800db70:	10624dd3 	.word	0x10624dd3
 800db74:	000124f8 	.word	0x000124f8
 800db78:	240074b4 	.word	0x240074b4
 800db7c:	080189c4 	.word	0x080189c4
 800db80:	08018dfc 	.word	0x08018dfc
 800db84:	08018a08 	.word	0x08018a08
 800db88:	08018e28 	.word	0x08018e28
 800db8c:	240074bc 	.word	0x240074bc
 800db90:	240074b8 	.word	0x240074b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	7d1b      	ldrb	r3, [r3, #20]
 800db98:	2b0a      	cmp	r3, #10
 800db9a:	d006      	beq.n	800dbaa <tcp_slowtmr+0x5c2>
 800db9c:	4b2b      	ldr	r3, [pc, #172]	; (800dc4c <tcp_slowtmr+0x664>)
 800db9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dba2:	492b      	ldr	r1, [pc, #172]	; (800dc50 <tcp_slowtmr+0x668>)
 800dba4:	482b      	ldr	r0, [pc, #172]	; (800dc54 <tcp_slowtmr+0x66c>)
 800dba6:	f008 faa7 	bl	80160f8 <iprintf>
    pcb_remove = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dbb0:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <tcp_slowtmr+0x670>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	6a1b      	ldr	r3, [r3, #32]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2bf0      	cmp	r3, #240	; 0xf0
 800dbbc:	d904      	bls.n	800dbc8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d02f      	beq.n	800dc30 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbd2:	f000 fbf9 	bl	800e3c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d010      	beq.n	800dbfe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dbdc:	4b1f      	ldr	r3, [pc, #124]	; (800dc5c <tcp_slowtmr+0x674>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d106      	bne.n	800dbf4 <tcp_slowtmr+0x60c>
 800dbe6:	4b19      	ldr	r3, [pc, #100]	; (800dc4c <tcp_slowtmr+0x664>)
 800dbe8:	f240 52af 	movw	r2, #1455	; 0x5af
 800dbec:	491c      	ldr	r1, [pc, #112]	; (800dc60 <tcp_slowtmr+0x678>)
 800dbee:	4819      	ldr	r0, [pc, #100]	; (800dc54 <tcp_slowtmr+0x66c>)
 800dbf0:	f008 fa82 	bl	80160f8 <iprintf>
        prev->next = pcb->next;
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	68da      	ldr	r2, [r3, #12]
 800dbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfa:	60da      	str	r2, [r3, #12]
 800dbfc:	e00f      	b.n	800dc1e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dbfe:	4b17      	ldr	r3, [pc, #92]	; (800dc5c <tcp_slowtmr+0x674>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d006      	beq.n	800dc16 <tcp_slowtmr+0x62e>
 800dc08:	4b10      	ldr	r3, [pc, #64]	; (800dc4c <tcp_slowtmr+0x664>)
 800dc0a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dc0e:	4915      	ldr	r1, [pc, #84]	; (800dc64 <tcp_slowtmr+0x67c>)
 800dc10:	4810      	ldr	r0, [pc, #64]	; (800dc54 <tcp_slowtmr+0x66c>)
 800dc12:	f008 fa71 	bl	80160f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	4a10      	ldr	r2, [pc, #64]	; (800dc5c <tcp_slowtmr+0x674>)
 800dc1c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dc28:	69f8      	ldr	r0, [r7, #28]
 800dc2a:	f7fe feed 	bl	800ca08 <tcp_free>
 800dc2e:	e004      	b.n	800dc3a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1a9      	bne.n	800db94 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dc40:	bf00      	nop
 800dc42:	bf00      	nop
 800dc44:	3730      	adds	r7, #48	; 0x30
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bdb0      	pop	{r4, r5, r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	080189c4 	.word	0x080189c4
 800dc50:	08018e54 	.word	0x08018e54
 800dc54:	08018a08 	.word	0x08018a08
 800dc58:	240074a8 	.word	0x240074a8
 800dc5c:	240074b8 	.word	0x240074b8
 800dc60:	08018e84 	.word	0x08018e84
 800dc64:	08018eac 	.word	0x08018eac

0800dc68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dc6e:	4b2d      	ldr	r3, [pc, #180]	; (800dd24 <tcp_fasttmr+0xbc>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	4b2b      	ldr	r3, [pc, #172]	; (800dd24 <tcp_fasttmr+0xbc>)
 800dc78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dc7a:	4b2b      	ldr	r3, [pc, #172]	; (800dd28 <tcp_fasttmr+0xc0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc80:	e048      	b.n	800dd14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	7f9a      	ldrb	r2, [r3, #30]
 800dc86:	4b27      	ldr	r3, [pc, #156]	; (800dd24 <tcp_fasttmr+0xbc>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d03f      	beq.n	800dd0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dc8e:	4b25      	ldr	r3, [pc, #148]	; (800dd24 <tcp_fasttmr+0xbc>)
 800dc90:	781a      	ldrb	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	8b5b      	ldrh	r3, [r3, #26]
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d010      	beq.n	800dcc4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f043 0302 	orr.w	r3, r3, #2
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f003 fff5 	bl	8011ca0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8b5b      	ldrh	r3, [r3, #26]
 800dcba:	f023 0303 	bic.w	r3, r3, #3
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	8b5b      	ldrh	r3, [r3, #26]
 800dcc8:	f003 0308 	and.w	r3, r3, #8
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d009      	beq.n	800dce4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	8b5b      	ldrh	r3, [r3, #26]
 800dcd4:	f023 0308 	bic.w	r3, r3, #8
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff f826 	bl	800cd30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00a      	beq.n	800dd08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	; (800dd2c <tcp_fasttmr+0xc4>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f819 	bl	800dd30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dcfe:	4b0b      	ldr	r3, [pc, #44]	; (800dd2c <tcp_fasttmr+0xc4>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d000      	beq.n	800dd08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd06:	e7b8      	b.n	800dc7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	607b      	str	r3, [r7, #4]
 800dd0c:	e002      	b.n	800dd14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1b3      	bne.n	800dc82 <tcp_fasttmr+0x1a>
    }
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	240074be 	.word	0x240074be
 800dd28:	240074b4 	.word	0x240074b4
 800dd2c:	240074bc 	.word	0x240074bc

0800dd30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd30:	b590      	push	{r4, r7, lr}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d109      	bne.n	800dd52 <tcp_process_refused_data+0x22>
 800dd3e:	4b37      	ldr	r3, [pc, #220]	; (800de1c <tcp_process_refused_data+0xec>)
 800dd40:	f240 6209 	movw	r2, #1545	; 0x609
 800dd44:	4936      	ldr	r1, [pc, #216]	; (800de20 <tcp_process_refused_data+0xf0>)
 800dd46:	4837      	ldr	r0, [pc, #220]	; (800de24 <tcp_process_refused_data+0xf4>)
 800dd48:	f008 f9d6 	bl	80160f8 <iprintf>
 800dd4c:	f06f 030f 	mvn.w	r3, #15
 800dd50:	e060      	b.n	800de14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd56:	7b5b      	ldrb	r3, [r3, #13]
 800dd58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00b      	beq.n	800dd88 <tcp_process_refused_data+0x58>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6918      	ldr	r0, [r3, #16]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	47a0      	blx	r4
 800dd82:	4603      	mov	r3, r0
 800dd84:	73fb      	strb	r3, [r7, #15]
 800dd86:	e007      	b.n	800dd98 <tcp_process_refused_data+0x68>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	6879      	ldr	r1, [r7, #4]
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f000 f8a4 	bl	800dedc <tcp_recv_null>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d12a      	bne.n	800ddf6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d033      	beq.n	800de12 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddb2:	d005      	beq.n	800ddc0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb8:	3301      	adds	r3, #1
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00b      	beq.n	800dde2 <tcp_process_refused_data+0xb2>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6918      	ldr	r0, [r3, #16]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	6879      	ldr	r1, [r7, #4]
 800ddda:	47a0      	blx	r4
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]
 800dde0:	e001      	b.n	800dde6 <tcp_process_refused_data+0xb6>
 800dde2:	2300      	movs	r3, #0
 800dde4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddea:	f113 0f0d 	cmn.w	r3, #13
 800ddee:	d110      	bne.n	800de12 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ddf0:	f06f 030c 	mvn.w	r3, #12
 800ddf4:	e00e      	b.n	800de14 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ddf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfa:	f113 0f0d 	cmn.w	r3, #13
 800ddfe:	d102      	bne.n	800de06 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de00:	f06f 030c 	mvn.w	r3, #12
 800de04:	e006      	b.n	800de14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800de0c:	f06f 0304 	mvn.w	r3, #4
 800de10:	e000      	b.n	800de14 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd90      	pop	{r4, r7, pc}
 800de1c:	080189c4 	.word	0x080189c4
 800de20:	08018ed4 	.word	0x08018ed4
 800de24:	08018a08 	.word	0x08018a08

0800de28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de30:	e007      	b.n	800de42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f80a 	bl	800de52 <tcp_seg_free>
    seg = next;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f4      	bne.n	800de32 <tcp_segs_free+0xa>
  }
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b082      	sub	sp, #8
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00c      	beq.n	800de7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe fb1f 	bl	800c4b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	2003      	movs	r0, #3
 800de76:	f7fd fc77 	bl	800b768 <memp_free>
  }
}
 800de7a:	bf00      	nop
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
	...

0800de84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <tcp_seg_copy+0x1c>
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <tcp_seg_copy+0x4c>)
 800de94:	f240 6282 	movw	r2, #1666	; 0x682
 800de98:	490e      	ldr	r1, [pc, #56]	; (800ded4 <tcp_seg_copy+0x50>)
 800de9a:	480f      	ldr	r0, [pc, #60]	; (800ded8 <tcp_seg_copy+0x54>)
 800de9c:	f008 f92c 	bl	80160f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dea0:	2003      	movs	r0, #3
 800dea2:	f7fd fbeb 	bl	800b67c <memp_malloc>
 800dea6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <tcp_seg_copy+0x2e>
    return NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	e00a      	b.n	800dec8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800deb2:	2210      	movs	r2, #16
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f008 fa45 	bl	8016346 <memcpy>
  pbuf_ref(cseg->p);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fb9b 	bl	800c5fc <pbuf_ref>
  return cseg;
 800dec6:	68fb      	ldr	r3, [r7, #12]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	080189c4 	.word	0x080189c4
 800ded4:	08018f18 	.word	0x08018f18
 800ded8:	08018a08 	.word	0x08018a08

0800dedc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d109      	bne.n	800df04 <tcp_recv_null+0x28>
 800def0:	4b12      	ldr	r3, [pc, #72]	; (800df3c <tcp_recv_null+0x60>)
 800def2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800def6:	4912      	ldr	r1, [pc, #72]	; (800df40 <tcp_recv_null+0x64>)
 800def8:	4812      	ldr	r0, [pc, #72]	; (800df44 <tcp_recv_null+0x68>)
 800defa:	f008 f8fd 	bl	80160f8 <iprintf>
 800defe:	f06f 030f 	mvn.w	r3, #15
 800df02:	e016      	b.n	800df32 <tcp_recv_null+0x56>

  if (p != NULL) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	4619      	mov	r1, r3
 800df10:	68b8      	ldr	r0, [r7, #8]
 800df12:	f7ff f9bb 	bl	800d28c <tcp_recved>
    pbuf_free(p);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fe faca 	bl	800c4b0 <pbuf_free>
 800df1c:	e008      	b.n	800df30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d104      	bne.n	800df30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df26:	68b8      	ldr	r0, [r7, #8]
 800df28:	f7fe ff6c 	bl	800ce04 <tcp_close>
 800df2c:	4603      	mov	r3, r0
 800df2e:	e000      	b.n	800df32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	080189c4 	.word	0x080189c4
 800df40:	08018f34 	.word	0x08018f34
 800df44:	08018a08 	.word	0x08018a08

0800df48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df56:	2b00      	cmp	r3, #0
 800df58:	db01      	blt.n	800df5e <tcp_kill_prio+0x16>
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	e000      	b.n	800df60 <tcp_kill_prio+0x18>
 800df5e:	237f      	movs	r3, #127	; 0x7f
 800df60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800df62:	7afb      	ldrb	r3, [r7, #11]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d034      	beq.n	800dfd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df76:	4b19      	ldr	r3, [pc, #100]	; (800dfdc <tcp_kill_prio+0x94>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e01f      	b.n	800dfbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	7d5b      	ldrb	r3, [r3, #21]
 800df82:	7afa      	ldrb	r2, [r7, #11]
 800df84:	429a      	cmp	r2, r3
 800df86:	d80c      	bhi.n	800dfa2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800df8c:	7afa      	ldrb	r2, [r7, #11]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d112      	bne.n	800dfb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df92:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <tcp_kill_prio+0x98>)
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d80a      	bhi.n	800dfb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dfa2:	4b0f      	ldr	r3, [pc, #60]	; (800dfe0 <tcp_kill_prio+0x98>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	6a1b      	ldr	r3, [r3, #32]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	7d5b      	ldrb	r3, [r3, #21]
 800dfb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1dc      	bne.n	800df7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d004      	beq.n	800dfd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfca:	6938      	ldr	r0, [r7, #16]
 800dfcc:	f7ff f860 	bl	800d090 <tcp_abort>
 800dfd0:	e000      	b.n	800dfd4 <tcp_kill_prio+0x8c>
    return;
 800dfd2:	bf00      	nop
  }
}
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	240074b4 	.word	0x240074b4
 800dfe0:	240074a8 	.word	0x240074a8

0800dfe4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	2b08      	cmp	r3, #8
 800dff2:	d009      	beq.n	800e008 <tcp_kill_state+0x24>
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	2b09      	cmp	r3, #9
 800dff8:	d006      	beq.n	800e008 <tcp_kill_state+0x24>
 800dffa:	4b1a      	ldr	r3, [pc, #104]	; (800e064 <tcp_kill_state+0x80>)
 800dffc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e000:	4919      	ldr	r1, [pc, #100]	; (800e068 <tcp_kill_state+0x84>)
 800e002:	481a      	ldr	r0, [pc, #104]	; (800e06c <tcp_kill_state+0x88>)
 800e004:	f008 f878 	bl	80160f8 <iprintf>

  inactivity = 0;
 800e008:	2300      	movs	r3, #0
 800e00a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e010:	4b17      	ldr	r3, [pc, #92]	; (800e070 <tcp_kill_state+0x8c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	617b      	str	r3, [r7, #20]
 800e016:	e017      	b.n	800e048 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	79fa      	ldrb	r2, [r7, #7]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d10f      	bne.n	800e042 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e022:	4b14      	ldr	r3, [pc, #80]	; (800e074 <tcp_kill_state+0x90>)
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d807      	bhi.n	800e042 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e032:	4b10      	ldr	r3, [pc, #64]	; (800e074 <tcp_kill_state+0x90>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e4      	bne.n	800e018 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d003      	beq.n	800e05c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e054:	2100      	movs	r1, #0
 800e056:	6938      	ldr	r0, [r7, #16]
 800e058:	f7fe ff5c 	bl	800cf14 <tcp_abandon>
  }
}
 800e05c:	bf00      	nop
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	080189c4 	.word	0x080189c4
 800e068:	08018f50 	.word	0x08018f50
 800e06c:	08018a08 	.word	0x08018a08
 800e070:	240074b4 	.word	0x240074b4
 800e074:	240074a8 	.word	0x240074a8

0800e078 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e082:	2300      	movs	r3, #0
 800e084:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e086:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <tcp_kill_timewait+0x58>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	e012      	b.n	800e0b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <tcp_kill_timewait+0x5c>)
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d807      	bhi.n	800e0ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <tcp_kill_timewait+0x5c>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e9      	bne.n	800e08e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7fe ffe5 	bl	800d090 <tcp_abort>
  }
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	240074b8 	.word	0x240074b8
 800e0d4:	240074a8 	.word	0x240074a8

0800e0d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e0de:	4b10      	ldr	r3, [pc, #64]	; (800e120 <tcp_handle_closepend+0x48>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e0e4:	e014      	b.n	800e110 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8b5b      	ldrh	r3, [r3, #26]
 800e0f0:	f003 0308 	and.w	r3, r3, #8
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	8b5b      	ldrh	r3, [r3, #26]
 800e0fc:	f023 0308 	bic.w	r3, r3, #8
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7fe fe12 	bl	800cd30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1e7      	bne.n	800e0e6 <tcp_handle_closepend+0xe>
  }
}
 800e116:	bf00      	nop
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	240074b4 	.word	0x240074b4

0800e124 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e12e:	2001      	movs	r0, #1
 800e130:	f7fd faa4 	bl	800b67c <memp_malloc>
 800e134:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d126      	bne.n	800e18a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e13c:	f7ff ffcc 	bl	800e0d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e140:	f7ff ff9a 	bl	800e078 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e144:	2001      	movs	r0, #1
 800e146:	f7fd fa99 	bl	800b67c <memp_malloc>
 800e14a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d11b      	bne.n	800e18a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e152:	2009      	movs	r0, #9
 800e154:	f7ff ff46 	bl	800dfe4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e158:	2001      	movs	r0, #1
 800e15a:	f7fd fa8f 	bl	800b67c <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d111      	bne.n	800e18a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e166:	2008      	movs	r0, #8
 800e168:	f7ff ff3c 	bl	800dfe4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e16c:	2001      	movs	r0, #1
 800e16e:	f7fd fa85 	bl	800b67c <memp_malloc>
 800e172:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d107      	bne.n	800e18a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fee3 	bl	800df48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e182:	2001      	movs	r0, #1
 800e184:	f7fd fa7a 	bl	800b67c <memp_malloc>
 800e188:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d03f      	beq.n	800e210 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e190:	229c      	movs	r2, #156	; 0x9c
 800e192:	2100      	movs	r1, #0
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f008 f84e 	bl	8016236 <memset>
    pcb->prio = prio;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	79fa      	ldrb	r2, [r7, #7]
 800e19e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e1b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	22ff      	movs	r2, #255	; 0xff
 800e1be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e1c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2206      	movs	r2, #6
 800e1cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2206      	movs	r2, #6
 800e1d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <tcp_alloc+0xf8>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e1ee:	4b0c      	ldr	r3, [pc, #48]	; (800e220 <tcp_alloc+0xfc>)
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a08      	ldr	r2, [pc, #32]	; (800e224 <tcp_alloc+0x100>)
 800e204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4a07      	ldr	r2, [pc, #28]	; (800e228 <tcp_alloc+0x104>)
 800e20c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e210:	68fb      	ldr	r3, [r7, #12]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	240074a8 	.word	0x240074a8
 800e220:	240074be 	.word	0x240074be
 800e224:	0800dedd 	.word	0x0800dedd
 800e228:	006ddd00 	.word	0x006ddd00

0800e22c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	4603      	mov	r3, r0
 800e234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e236:	2040      	movs	r0, #64	; 0x40
 800e238:	f7ff ff74 	bl	800e124 <tcp_alloc>
 800e23c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e23e:	68fb      	ldr	r3, [r7, #12]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	611a      	str	r2, [r3, #16]
  }
}
 800e25e:	bf00      	nop
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
	...

0800e26c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00e      	beq.n	800e29a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	7d1b      	ldrb	r3, [r3, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d106      	bne.n	800e292 <tcp_recv+0x26>
 800e284:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <tcp_recv+0x38>)
 800e286:	f240 72df 	movw	r2, #2015	; 0x7df
 800e28a:	4907      	ldr	r1, [pc, #28]	; (800e2a8 <tcp_recv+0x3c>)
 800e28c:	4807      	ldr	r0, [pc, #28]	; (800e2ac <tcp_recv+0x40>)
 800e28e:	f007 ff33 	bl	80160f8 <iprintf>
    pcb->recv = recv;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e29a:	bf00      	nop
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	080189c4 	.word	0x080189c4
 800e2a8:	08018f60 	.word	0x08018f60
 800e2ac:	08018a08 	.word	0x08018a08

0800e2b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00e      	beq.n	800e2de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d106      	bne.n	800e2d6 <tcp_sent+0x26>
 800e2c8:	4b07      	ldr	r3, [pc, #28]	; (800e2e8 <tcp_sent+0x38>)
 800e2ca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e2ce:	4907      	ldr	r1, [pc, #28]	; (800e2ec <tcp_sent+0x3c>)
 800e2d0:	4807      	ldr	r0, [pc, #28]	; (800e2f0 <tcp_sent+0x40>)
 800e2d2:	f007 ff11 	bl	80160f8 <iprintf>
    pcb->sent = sent;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	080189c4 	.word	0x080189c4
 800e2ec:	08018f88 	.word	0x08018f88
 800e2f0:	08018a08 	.word	0x08018a08

0800e2f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00e      	beq.n	800e322 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7d1b      	ldrb	r3, [r3, #20]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d106      	bne.n	800e31a <tcp_err+0x26>
 800e30c:	4b07      	ldr	r3, [pc, #28]	; (800e32c <tcp_err+0x38>)
 800e30e:	f640 020d 	movw	r2, #2061	; 0x80d
 800e312:	4907      	ldr	r1, [pc, #28]	; (800e330 <tcp_err+0x3c>)
 800e314:	4807      	ldr	r0, [pc, #28]	; (800e334 <tcp_err+0x40>)
 800e316:	f007 feef 	bl	80160f8 <iprintf>
    pcb->errf = err;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e322:	bf00      	nop
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	080189c4 	.word	0x080189c4
 800e330:	08018fb0 	.word	0x08018fb0
 800e334:	08018a08 	.word	0x08018a08

0800e338 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d008      	beq.n	800e35a <tcp_accept+0x22>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	7d1b      	ldrb	r3, [r3, #20]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d104      	bne.n	800e35a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	619a      	str	r2, [r3, #24]
  }
}
 800e35a:	bf00      	nop
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
	...

0800e368 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d107      	bne.n	800e38c <tcp_poll+0x24>
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <tcp_poll+0x50>)
 800e37e:	f640 023d 	movw	r2, #2109	; 0x83d
 800e382:	490e      	ldr	r1, [pc, #56]	; (800e3bc <tcp_poll+0x54>)
 800e384:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <tcp_poll+0x58>)
 800e386:	f007 feb7 	bl	80160f8 <iprintf>
 800e38a:	e011      	b.n	800e3b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	7d1b      	ldrb	r3, [r3, #20]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d106      	bne.n	800e3a2 <tcp_poll+0x3a>
 800e394:	4b08      	ldr	r3, [pc, #32]	; (800e3b8 <tcp_poll+0x50>)
 800e396:	f640 023e 	movw	r2, #2110	; 0x83e
 800e39a:	490a      	ldr	r1, [pc, #40]	; (800e3c4 <tcp_poll+0x5c>)
 800e39c:	4808      	ldr	r0, [pc, #32]	; (800e3c0 <tcp_poll+0x58>)
 800e39e:	f007 feab 	bl	80160f8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	79fa      	ldrb	r2, [r7, #7]
 800e3ae:	775a      	strb	r2, [r3, #29]
}
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	080189c4 	.word	0x080189c4
 800e3bc:	08018fd8 	.word	0x08018fd8
 800e3c0:	08018a08 	.word	0x08018a08
 800e3c4:	08018ff0 	.word	0x08018ff0

0800e3c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d107      	bne.n	800e3e6 <tcp_pcb_purge+0x1e>
 800e3d6:	4b21      	ldr	r3, [pc, #132]	; (800e45c <tcp_pcb_purge+0x94>)
 800e3d8:	f640 0251 	movw	r2, #2129	; 0x851
 800e3dc:	4920      	ldr	r1, [pc, #128]	; (800e460 <tcp_pcb_purge+0x98>)
 800e3de:	4821      	ldr	r0, [pc, #132]	; (800e464 <tcp_pcb_purge+0x9c>)
 800e3e0:	f007 fe8a 	bl	80160f8 <iprintf>
 800e3e4:	e037      	b.n	800e456 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d033      	beq.n	800e456 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e3f2:	2b0a      	cmp	r3, #10
 800e3f4:	d02f      	beq.n	800e456 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d02b      	beq.n	800e456 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e402:	2b00      	cmp	r3, #0
 800e404:	d007      	beq.n	800e416 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f850 	bl	800c4b0 <pbuf_free>
      pcb->refused_data = NULL;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f986 	bl	800e730 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e42a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fcf9 	bl	800de28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7ff fcf4 	bl	800de28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	66da      	str	r2, [r3, #108]	; 0x6c
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	080189c4 	.word	0x080189c4
 800e460:	08019010 	.word	0x08019010
 800e464:	08018a08 	.word	0x08018a08

0800e468 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d106      	bne.n	800e486 <tcp_pcb_remove+0x1e>
 800e478:	4b3e      	ldr	r3, [pc, #248]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e47a:	f640 0283 	movw	r2, #2179	; 0x883
 800e47e:	493e      	ldr	r1, [pc, #248]	; (800e578 <tcp_pcb_remove+0x110>)
 800e480:	483e      	ldr	r0, [pc, #248]	; (800e57c <tcp_pcb_remove+0x114>)
 800e482:	f007 fe39 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d106      	bne.n	800e49a <tcp_pcb_remove+0x32>
 800e48c:	4b39      	ldr	r3, [pc, #228]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e48e:	f640 0284 	movw	r2, #2180	; 0x884
 800e492:	493b      	ldr	r1, [pc, #236]	; (800e580 <tcp_pcb_remove+0x118>)
 800e494:	4839      	ldr	r0, [pc, #228]	; (800e57c <tcp_pcb_remove+0x114>)
 800e496:	f007 fe2f 	bl	80160f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d105      	bne.n	800e4b0 <tcp_pcb_remove+0x48>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	e013      	b.n	800e4d8 <tcp_pcb_remove+0x70>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	e00c      	b.n	800e4d2 <tcp_pcb_remove+0x6a>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d104      	bne.n	800e4cc <tcp_pcb_remove+0x64>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	68da      	ldr	r2, [r3, #12]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	60da      	str	r2, [r3, #12]
 800e4ca:	e005      	b.n	800e4d8 <tcp_pcb_remove+0x70>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1ef      	bne.n	800e4b8 <tcp_pcb_remove+0x50>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e4de:	6838      	ldr	r0, [r7, #0]
 800e4e0:	f7ff ff72 	bl	800e3c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	7d1b      	ldrb	r3, [r3, #20]
 800e4e8:	2b0a      	cmp	r3, #10
 800e4ea:	d013      	beq.n	800e514 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d00f      	beq.n	800e514 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	8b5b      	ldrh	r3, [r3, #26]
 800e4f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	8b5b      	ldrh	r3, [r3, #26]
 800e504:	f043 0302 	orr.w	r3, r3, #2
 800e508:	b29a      	uxth	r2, r3
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e50e:	6838      	ldr	r0, [r7, #0]
 800e510:	f003 fbc6 	bl	8011ca0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d020      	beq.n	800e55e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e520:	2b00      	cmp	r3, #0
 800e522:	d006      	beq.n	800e532 <tcp_pcb_remove+0xca>
 800e524:	4b13      	ldr	r3, [pc, #76]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e526:	f640 0293 	movw	r2, #2195	; 0x893
 800e52a:	4916      	ldr	r1, [pc, #88]	; (800e584 <tcp_pcb_remove+0x11c>)
 800e52c:	4813      	ldr	r0, [pc, #76]	; (800e57c <tcp_pcb_remove+0x114>)
 800e52e:	f007 fde3 	bl	80160f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e536:	2b00      	cmp	r3, #0
 800e538:	d006      	beq.n	800e548 <tcp_pcb_remove+0xe0>
 800e53a:	4b0e      	ldr	r3, [pc, #56]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e53c:	f640 0294 	movw	r2, #2196	; 0x894
 800e540:	4911      	ldr	r1, [pc, #68]	; (800e588 <tcp_pcb_remove+0x120>)
 800e542:	480e      	ldr	r0, [pc, #56]	; (800e57c <tcp_pcb_remove+0x114>)
 800e544:	f007 fdd8 	bl	80160f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <tcp_pcb_remove+0xf6>
 800e550:	4b08      	ldr	r3, [pc, #32]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e552:	f640 0296 	movw	r2, #2198	; 0x896
 800e556:	490d      	ldr	r1, [pc, #52]	; (800e58c <tcp_pcb_remove+0x124>)
 800e558:	4808      	ldr	r0, [pc, #32]	; (800e57c <tcp_pcb_remove+0x114>)
 800e55a:	f007 fdcd 	bl	80160f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2200      	movs	r2, #0
 800e562:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2200      	movs	r2, #0
 800e568:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e56a:	bf00      	nop
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	080189c4 	.word	0x080189c4
 800e578:	0801902c 	.word	0x0801902c
 800e57c:	08018a08 	.word	0x08018a08
 800e580:	08019048 	.word	0x08019048
 800e584:	08019068 	.word	0x08019068
 800e588:	08019080 	.word	0x08019080
 800e58c:	0801909c 	.word	0x0801909c

0800e590 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <tcp_next_iss+0x1c>
 800e59e:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <tcp_next_iss+0x38>)
 800e5a0:	f640 02af 	movw	r2, #2223	; 0x8af
 800e5a4:	4909      	ldr	r1, [pc, #36]	; (800e5cc <tcp_next_iss+0x3c>)
 800e5a6:	480a      	ldr	r0, [pc, #40]	; (800e5d0 <tcp_next_iss+0x40>)
 800e5a8:	f007 fda6 	bl	80160f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <tcp_next_iss+0x48>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	4a07      	ldr	r2, [pc, #28]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5b8:	6013      	str	r3, [r2, #0]
  return iss;
 800e5ba:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	080189c4 	.word	0x080189c4
 800e5cc:	080190b4 	.word	0x080190b4
 800e5d0:	08018a08 	.word	0x08018a08
 800e5d4:	2400002c 	.word	0x2400002c
 800e5d8:	240074a8 	.word	0x240074a8

0800e5dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <tcp_eff_send_mss_netif+0x22>
 800e5f0:	4b14      	ldr	r3, [pc, #80]	; (800e644 <tcp_eff_send_mss_netif+0x68>)
 800e5f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e5f6:	4914      	ldr	r1, [pc, #80]	; (800e648 <tcp_eff_send_mss_netif+0x6c>)
 800e5f8:	4814      	ldr	r0, [pc, #80]	; (800e64c <tcp_eff_send_mss_netif+0x70>)
 800e5fa:	f007 fd7d 	bl	80160f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d101      	bne.n	800e608 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e604:	89fb      	ldrh	r3, [r7, #14]
 800e606:	e019      	b.n	800e63c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e60c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e60e:	8afb      	ldrh	r3, [r7, #22]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d012      	beq.n	800e63a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e614:	2328      	movs	r3, #40	; 0x28
 800e616:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e618:	8afa      	ldrh	r2, [r7, #22]
 800e61a:	8abb      	ldrh	r3, [r7, #20]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d904      	bls.n	800e62a <tcp_eff_send_mss_netif+0x4e>
 800e620:	8afa      	ldrh	r2, [r7, #22]
 800e622:	8abb      	ldrh	r3, [r7, #20]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	b29b      	uxth	r3, r3
 800e628:	e000      	b.n	800e62c <tcp_eff_send_mss_netif+0x50>
 800e62a:	2300      	movs	r3, #0
 800e62c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e62e:	8a7a      	ldrh	r2, [r7, #18]
 800e630:	89fb      	ldrh	r3, [r7, #14]
 800e632:	4293      	cmp	r3, r2
 800e634:	bf28      	it	cs
 800e636:	4613      	movcs	r3, r2
 800e638:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e63a:	89fb      	ldrh	r3, [r7, #14]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	080189c4 	.word	0x080189c4
 800e648:	080190d0 	.word	0x080190d0
 800e64c:	08018a08 	.word	0x08018a08

0800e650 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d119      	bne.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e664:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e666:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e66a:	4910      	ldr	r1, [pc, #64]	; (800e6ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e66c:	4810      	ldr	r0, [pc, #64]	; (800e6b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e66e:	f007 fd43 	bl	80160f8 <iprintf>

  while (pcb != NULL) {
 800e672:	e011      	b.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d108      	bne.n	800e692 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe fd02 	bl	800d090 <tcp_abort>
      pcb = next;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	e002      	b.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1ea      	bne.n	800e674 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e69e:	bf00      	nop
 800e6a0:	bf00      	nop
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	080189c4 	.word	0x080189c4
 800e6ac:	080190f8 	.word	0x080190f8
 800e6b0:	08018a08 	.word	0x08018a08

0800e6b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d02a      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d026      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e6cc:	4b15      	ldr	r3, [pc, #84]	; (800e724 <tcp_netif_ip_addr_changed+0x70>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ffbc 	bl	800e650 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e6d8:	4b13      	ldr	r3, [pc, #76]	; (800e728 <tcp_netif_ip_addr_changed+0x74>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ffb6 	bl	800e650 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d017      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d013      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6f2:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <tcp_netif_ip_addr_changed+0x78>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	e00c      	b.n	800e714 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	429a      	cmp	r2, r3
 800e704:	d103      	bne.n	800e70e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1ef      	bne.n	800e6fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	240074b4 	.word	0x240074b4
 800e728:	240074ac 	.word	0x240074ac
 800e72c:	240074b0 	.word	0x240074b0

0800e730 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d007      	beq.n	800e750 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fb6f 	bl	800de28 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b08d      	sub	sp, #52	; 0x34
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d105      	bne.n	800e774 <tcp_input+0x1c>
 800e768:	4b9b      	ldr	r3, [pc, #620]	; (800e9d8 <tcp_input+0x280>)
 800e76a:	2283      	movs	r2, #131	; 0x83
 800e76c:	499b      	ldr	r1, [pc, #620]	; (800e9dc <tcp_input+0x284>)
 800e76e:	489c      	ldr	r0, [pc, #624]	; (800e9e0 <tcp_input+0x288>)
 800e770:	f007 fcc2 	bl	80160f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4a9a      	ldr	r2, [pc, #616]	; (800e9e4 <tcp_input+0x28c>)
 800e77a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	2b13      	cmp	r3, #19
 800e782:	f240 83d1 	bls.w	800ef28 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e786:	4b98      	ldr	r3, [pc, #608]	; (800e9e8 <tcp_input+0x290>)
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	4a97      	ldr	r2, [pc, #604]	; (800e9e8 <tcp_input+0x290>)
 800e78c:	6812      	ldr	r2, [r2, #0]
 800e78e:	4611      	mov	r1, r2
 800e790:	4618      	mov	r0, r3
 800e792:	f006 fa79 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f040 83c7 	bne.w	800ef2c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e79e:	4b92      	ldr	r3, [pc, #584]	; (800e9e8 <tcp_input+0x290>)
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e7a6:	2be0      	cmp	r3, #224	; 0xe0
 800e7a8:	f000 83c0 	beq.w	800ef2c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e7ac:	4b8d      	ldr	r3, [pc, #564]	; (800e9e4 <tcp_input+0x28c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	899b      	ldrh	r3, [r3, #12]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fc f9d1 	bl	800ab5c <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e7c6:	7cbb      	ldrb	r3, [r7, #18]
 800e7c8:	2b13      	cmp	r3, #19
 800e7ca:	f240 83b1 	bls.w	800ef30 <tcp_input+0x7d8>
 800e7ce:	7cbb      	ldrb	r3, [r7, #18]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	891b      	ldrh	r3, [r3, #8]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	f200 83aa 	bhi.w	800ef30 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e7dc:	7cbb      	ldrb	r3, [r7, #18]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3b14      	subs	r3, #20
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	4b81      	ldr	r3, [pc, #516]	; (800e9ec <tcp_input+0x294>)
 800e7e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e7e8:	4b81      	ldr	r3, [pc, #516]	; (800e9f0 <tcp_input+0x298>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	895a      	ldrh	r2, [r3, #10]
 800e7f2:	7cbb      	ldrb	r3, [r7, #18]
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d309      	bcc.n	800e80e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e7fa:	4b7c      	ldr	r3, [pc, #496]	; (800e9ec <tcp_input+0x294>)
 800e7fc:	881a      	ldrh	r2, [r3, #0]
 800e7fe:	4b7d      	ldr	r3, [pc, #500]	; (800e9f4 <tcp_input+0x29c>)
 800e800:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e802:	7cbb      	ldrb	r3, [r7, #18]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7fd fdcc 	bl	800c3a4 <pbuf_remove_header>
 800e80c:	e04e      	b.n	800e8ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d105      	bne.n	800e822 <tcp_input+0xca>
 800e816:	4b70      	ldr	r3, [pc, #448]	; (800e9d8 <tcp_input+0x280>)
 800e818:	22c2      	movs	r2, #194	; 0xc2
 800e81a:	4977      	ldr	r1, [pc, #476]	; (800e9f8 <tcp_input+0x2a0>)
 800e81c:	4870      	ldr	r0, [pc, #448]	; (800e9e0 <tcp_input+0x288>)
 800e81e:	f007 fc6b 	bl	80160f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e822:	2114      	movs	r1, #20
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7fd fdbd 	bl	800c3a4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	895a      	ldrh	r2, [r3, #10]
 800e82e:	4b71      	ldr	r3, [pc, #452]	; (800e9f4 <tcp_input+0x29c>)
 800e830:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e832:	4b6e      	ldr	r3, [pc, #440]	; (800e9ec <tcp_input+0x294>)
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	4b6f      	ldr	r3, [pc, #444]	; (800e9f4 <tcp_input+0x29c>)
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e83e:	4b6d      	ldr	r3, [pc, #436]	; (800e9f4 <tcp_input+0x29c>)
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	4619      	mov	r1, r3
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7fd fdad 	bl	800c3a4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	8a3a      	ldrh	r2, [r7, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	f200 836e 	bhi.w	800ef34 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	4a64      	ldr	r2, [pc, #400]	; (800e9f0 <tcp_input+0x298>)
 800e860:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	8a3a      	ldrh	r2, [r7, #16]
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fd fd9a 	bl	800c3a4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	891a      	ldrh	r2, [r3, #8]
 800e874:	8a3b      	ldrh	r3, [r7, #16]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	895b      	ldrh	r3, [r3, #10]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <tcp_input+0x13a>
 800e886:	4b54      	ldr	r3, [pc, #336]	; (800e9d8 <tcp_input+0x280>)
 800e888:	22df      	movs	r2, #223	; 0xdf
 800e88a:	495c      	ldr	r1, [pc, #368]	; (800e9fc <tcp_input+0x2a4>)
 800e88c:	4854      	ldr	r0, [pc, #336]	; (800e9e0 <tcp_input+0x288>)
 800e88e:	f007 fc33 	bl	80160f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	891a      	ldrh	r2, [r3, #8]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d005      	beq.n	800e8ac <tcp_input+0x154>
 800e8a0:	4b4d      	ldr	r3, [pc, #308]	; (800e9d8 <tcp_input+0x280>)
 800e8a2:	22e0      	movs	r2, #224	; 0xe0
 800e8a4:	4956      	ldr	r1, [pc, #344]	; (800ea00 <tcp_input+0x2a8>)
 800e8a6:	484e      	ldr	r0, [pc, #312]	; (800e9e0 <tcp_input+0x288>)
 800e8a8:	f007 fc26 	bl	80160f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e8ac:	4b4d      	ldr	r3, [pc, #308]	; (800e9e4 <tcp_input+0x28c>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	4a4b      	ldr	r2, [pc, #300]	; (800e9e4 <tcp_input+0x28c>)
 800e8b6:	6814      	ldr	r4, [r2, #0]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fc f94f 	bl	800ab5c <lwip_htons>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e8c2:	4b48      	ldr	r3, [pc, #288]	; (800e9e4 <tcp_input+0x28c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	885b      	ldrh	r3, [r3, #2]
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	4a46      	ldr	r2, [pc, #280]	; (800e9e4 <tcp_input+0x28c>)
 800e8cc:	6814      	ldr	r4, [r2, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fc f944 	bl	800ab5c <lwip_htons>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e8d8:	4b42      	ldr	r3, [pc, #264]	; (800e9e4 <tcp_input+0x28c>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	4a41      	ldr	r2, [pc, #260]	; (800e9e4 <tcp_input+0x28c>)
 800e8e0:	6814      	ldr	r4, [r2, #0]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fc f94f 	bl	800ab86 <lwip_htonl>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	6063      	str	r3, [r4, #4]
 800e8ec:	6863      	ldr	r3, [r4, #4]
 800e8ee:	4a45      	ldr	r2, [pc, #276]	; (800ea04 <tcp_input+0x2ac>)
 800e8f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e8f2:	4b3c      	ldr	r3, [pc, #240]	; (800e9e4 <tcp_input+0x28c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	4a3a      	ldr	r2, [pc, #232]	; (800e9e4 <tcp_input+0x28c>)
 800e8fa:	6814      	ldr	r4, [r2, #0]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fc f942 	bl	800ab86 <lwip_htonl>
 800e902:	4603      	mov	r3, r0
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	4a3f      	ldr	r2, [pc, #252]	; (800ea08 <tcp_input+0x2b0>)
 800e90a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e90c:	4b35      	ldr	r3, [pc, #212]	; (800e9e4 <tcp_input+0x28c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	89db      	ldrh	r3, [r3, #14]
 800e912:	b29b      	uxth	r3, r3
 800e914:	4a33      	ldr	r2, [pc, #204]	; (800e9e4 <tcp_input+0x28c>)
 800e916:	6814      	ldr	r4, [r2, #0]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fc f91f 	bl	800ab5c <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e922:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <tcp_input+0x28c>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	899b      	ldrh	r3, [r3, #12]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fc f916 	bl	800ab5c <lwip_htons>
 800e930:	4603      	mov	r3, r0
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4b34      	ldr	r3, [pc, #208]	; (800ea0c <tcp_input+0x2b4>)
 800e93c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	891a      	ldrh	r2, [r3, #8]
 800e942:	4b33      	ldr	r3, [pc, #204]	; (800ea10 <tcp_input+0x2b8>)
 800e944:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e946:	4b31      	ldr	r3, [pc, #196]	; (800ea0c <tcp_input+0x2b4>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	f003 0303 	and.w	r3, r3, #3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00c      	beq.n	800e96c <tcp_input+0x214>
    tcplen++;
 800e952:	4b2f      	ldr	r3, [pc, #188]	; (800ea10 <tcp_input+0x2b8>)
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	3301      	adds	r3, #1
 800e958:	b29a      	uxth	r2, r3
 800e95a:	4b2d      	ldr	r3, [pc, #180]	; (800ea10 <tcp_input+0x2b8>)
 800e95c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	891a      	ldrh	r2, [r3, #8]
 800e962:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <tcp_input+0x2b8>)
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	f200 82e6 	bhi.w	800ef38 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e970:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <tcp_input+0x2bc>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	e09d      	b.n	800eab4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d105      	bne.n	800e98c <tcp_input+0x234>
 800e980:	4b15      	ldr	r3, [pc, #84]	; (800e9d8 <tcp_input+0x280>)
 800e982:	22fb      	movs	r2, #251	; 0xfb
 800e984:	4924      	ldr	r1, [pc, #144]	; (800ea18 <tcp_input+0x2c0>)
 800e986:	4816      	ldr	r0, [pc, #88]	; (800e9e0 <tcp_input+0x288>)
 800e988:	f007 fbb6 	bl	80160f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	7d1b      	ldrb	r3, [r3, #20]
 800e990:	2b0a      	cmp	r3, #10
 800e992:	d105      	bne.n	800e9a0 <tcp_input+0x248>
 800e994:	4b10      	ldr	r3, [pc, #64]	; (800e9d8 <tcp_input+0x280>)
 800e996:	22fc      	movs	r2, #252	; 0xfc
 800e998:	4920      	ldr	r1, [pc, #128]	; (800ea1c <tcp_input+0x2c4>)
 800e99a:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <tcp_input+0x288>)
 800e99c:	f007 fbac 	bl	80160f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	7d1b      	ldrb	r3, [r3, #20]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d105      	bne.n	800e9b4 <tcp_input+0x25c>
 800e9a8:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <tcp_input+0x280>)
 800e9aa:	22fd      	movs	r2, #253	; 0xfd
 800e9ac:	491c      	ldr	r1, [pc, #112]	; (800ea20 <tcp_input+0x2c8>)
 800e9ae:	480c      	ldr	r0, [pc, #48]	; (800e9e0 <tcp_input+0x288>)
 800e9b0:	f007 fba2 	bl	80160f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	7a1b      	ldrb	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d033      	beq.n	800ea24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	7a1a      	ldrb	r2, [r3, #8]
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <tcp_input+0x290>)
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d029      	beq.n	800ea24 <tcp_input+0x2cc>
      prev = pcb;
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	61bb      	str	r3, [r7, #24]
      continue;
 800e9d4:	e06b      	b.n	800eaae <tcp_input+0x356>
 800e9d6:	bf00      	nop
 800e9d8:	0801912c 	.word	0x0801912c
 800e9dc:	08019160 	.word	0x08019160
 800e9e0:	08019178 	.word	0x08019178
 800e9e4:	240074d0 	.word	0x240074d0
 800e9e8:	240043a8 	.word	0x240043a8
 800e9ec:	240074d4 	.word	0x240074d4
 800e9f0:	240074d8 	.word	0x240074d8
 800e9f4:	240074d6 	.word	0x240074d6
 800e9f8:	080191a0 	.word	0x080191a0
 800e9fc:	080191b0 	.word	0x080191b0
 800ea00:	080191bc 	.word	0x080191bc
 800ea04:	240074e0 	.word	0x240074e0
 800ea08:	240074e4 	.word	0x240074e4
 800ea0c:	240074ec 	.word	0x240074ec
 800ea10:	240074ea 	.word	0x240074ea
 800ea14:	240074b4 	.word	0x240074b4
 800ea18:	080191dc 	.word	0x080191dc
 800ea1c:	08019204 	.word	0x08019204
 800ea20:	08019230 	.word	0x08019230
    }

    if (pcb->remote_port == tcphdr->src &&
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	8b1a      	ldrh	r2, [r3, #24]
 800ea28:	4b72      	ldr	r3, [pc, #456]	; (800ebf4 <tcp_input+0x49c>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d13a      	bne.n	800eaaa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	8ada      	ldrh	r2, [r3, #22]
 800ea38:	4b6e      	ldr	r3, [pc, #440]	; (800ebf4 <tcp_input+0x49c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	885b      	ldrh	r3, [r3, #2]
 800ea3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d132      	bne.n	800eaaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	4b6b      	ldr	r3, [pc, #428]	; (800ebf8 <tcp_input+0x4a0>)
 800ea4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d12c      	bne.n	800eaaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	4b68      	ldr	r3, [pc, #416]	; (800ebf8 <tcp_input+0x4a0>)
 800ea56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d126      	bne.n	800eaaa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	69fa      	ldr	r2, [r7, #28]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d106      	bne.n	800ea74 <tcp_input+0x31c>
 800ea66:	4b65      	ldr	r3, [pc, #404]	; (800ebfc <tcp_input+0x4a4>)
 800ea68:	f240 120d 	movw	r2, #269	; 0x10d
 800ea6c:	4964      	ldr	r1, [pc, #400]	; (800ec00 <tcp_input+0x4a8>)
 800ea6e:	4865      	ldr	r0, [pc, #404]	; (800ec04 <tcp_input+0x4ac>)
 800ea70:	f007 fb42 	bl	80160f8 <iprintf>
      if (prev != NULL) {
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <tcp_input+0x338>
        prev->next = pcb->next;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	68da      	ldr	r2, [r3, #12]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ea82:	4b61      	ldr	r3, [pc, #388]	; (800ec08 <tcp_input+0x4b0>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ea8a:	4a5f      	ldr	r2, [pc, #380]	; (800ec08 <tcp_input+0x4b0>)
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d111      	bne.n	800eabe <tcp_input+0x366>
 800ea9a:	4b58      	ldr	r3, [pc, #352]	; (800ebfc <tcp_input+0x4a4>)
 800ea9c:	f240 1215 	movw	r2, #277	; 0x115
 800eaa0:	495a      	ldr	r1, [pc, #360]	; (800ec0c <tcp_input+0x4b4>)
 800eaa2:	4858      	ldr	r0, [pc, #352]	; (800ec04 <tcp_input+0x4ac>)
 800eaa4:	f007 fb28 	bl	80160f8 <iprintf>
      break;
 800eaa8:	e009      	b.n	800eabe <tcp_input+0x366>
    }
    prev = pcb;
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	61fb      	str	r3, [r7, #28]
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f47f af5e 	bne.w	800e978 <tcp_input+0x220>
 800eabc:	e000      	b.n	800eac0 <tcp_input+0x368>
      break;
 800eabe:	bf00      	nop
  }

  if (pcb == NULL) {
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 80aa 	bne.w	800ec1c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eac8:	4b51      	ldr	r3, [pc, #324]	; (800ec10 <tcp_input+0x4b8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	61fb      	str	r3, [r7, #28]
 800eace:	e03f      	b.n	800eb50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	2b0a      	cmp	r3, #10
 800ead6:	d006      	beq.n	800eae6 <tcp_input+0x38e>
 800ead8:	4b48      	ldr	r3, [pc, #288]	; (800ebfc <tcp_input+0x4a4>)
 800eada:	f240 121f 	movw	r2, #287	; 0x11f
 800eade:	494d      	ldr	r1, [pc, #308]	; (800ec14 <tcp_input+0x4bc>)
 800eae0:	4848      	ldr	r0, [pc, #288]	; (800ec04 <tcp_input+0x4ac>)
 800eae2:	f007 fb09 	bl	80160f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	7a1b      	ldrb	r3, [r3, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	7a1a      	ldrb	r2, [r3, #8]
 800eaf2:	4b41      	ldr	r3, [pc, #260]	; (800ebf8 <tcp_input+0x4a0>)
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eafa:	3301      	adds	r3, #1
 800eafc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d122      	bne.n	800eb48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	8b1a      	ldrh	r2, [r3, #24]
 800eb06:	4b3b      	ldr	r3, [pc, #236]	; (800ebf4 <tcp_input+0x49c>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	881b      	ldrh	r3, [r3, #0]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d11b      	bne.n	800eb4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	8ada      	ldrh	r2, [r3, #22]
 800eb16:	4b37      	ldr	r3, [pc, #220]	; (800ebf4 <tcp_input+0x49c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	885b      	ldrh	r3, [r3, #2]
 800eb1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d113      	bne.n	800eb4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	4b34      	ldr	r3, [pc, #208]	; (800ebf8 <tcp_input+0x4a0>)
 800eb28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d10d      	bne.n	800eb4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	4b31      	ldr	r3, [pc, #196]	; (800ebf8 <tcp_input+0x4a0>)
 800eb34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d107      	bne.n	800eb4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800eb3a:	69f8      	ldr	r0, [r7, #28]
 800eb3c:	f000 fb56 	bl	800f1ec <tcp_timewait_input>
        }
        pbuf_free(p);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fd fcb5 	bl	800c4b0 <pbuf_free>
        return;
 800eb46:	e1fd      	b.n	800ef44 <tcp_input+0x7ec>
        continue;
 800eb48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	61fb      	str	r3, [r7, #28]
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1bc      	bne.n	800ead0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb5a:	4b2f      	ldr	r3, [pc, #188]	; (800ec18 <tcp_input+0x4c0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	e02a      	b.n	800ebb8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	7a1b      	ldrb	r3, [r3, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00c      	beq.n	800eb84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	7a1a      	ldrb	r2, [r3, #8]
 800eb6e:	4b22      	ldr	r3, [pc, #136]	; (800ebf8 <tcp_input+0x4a0>)
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb76:	3301      	adds	r3, #1
 800eb78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d002      	beq.n	800eb84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	61bb      	str	r3, [r7, #24]
        continue;
 800eb82:	e016      	b.n	800ebb2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	8ada      	ldrh	r2, [r3, #22]
 800eb88:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <tcp_input+0x49c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	885b      	ldrh	r3, [r3, #2]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d10c      	bne.n	800ebae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	4b17      	ldr	r3, [pc, #92]	; (800ebf8 <tcp_input+0x4a0>)
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d00f      	beq.n	800ebc0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00d      	beq.n	800ebc2 <tcp_input+0x46a>
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d009      	beq.n	800ebc2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1d1      	bne.n	800eb62 <tcp_input+0x40a>
 800ebbe:	e000      	b.n	800ebc2 <tcp_input+0x46a>
            break;
 800ebc0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d029      	beq.n	800ec1c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00a      	beq.n	800ebe4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	68da      	ldr	r2, [r3, #12]
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ebd6:	4b10      	ldr	r3, [pc, #64]	; (800ec18 <tcp_input+0x4c0>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ebde:	4a0e      	ldr	r2, [pc, #56]	; (800ec18 <tcp_input+0x4c0>)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ebe4:	6978      	ldr	r0, [r7, #20]
 800ebe6:	f000 fa03 	bl	800eff0 <tcp_listen_input>
      }
      pbuf_free(p);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7fd fc60 	bl	800c4b0 <pbuf_free>
      return;
 800ebf0:	e1a8      	b.n	800ef44 <tcp_input+0x7ec>
 800ebf2:	bf00      	nop
 800ebf4:	240074d0 	.word	0x240074d0
 800ebf8:	240043a8 	.word	0x240043a8
 800ebfc:	0801912c 	.word	0x0801912c
 800ec00:	08019258 	.word	0x08019258
 800ec04:	08019178 	.word	0x08019178
 800ec08:	240074b4 	.word	0x240074b4
 800ec0c:	08019284 	.word	0x08019284
 800ec10:	240074b8 	.word	0x240074b8
 800ec14:	080192b0 	.word	0x080192b0
 800ec18:	240074b0 	.word	0x240074b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 8158 	beq.w	800eed4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ec24:	4b95      	ldr	r3, [pc, #596]	; (800ee7c <tcp_input+0x724>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	891a      	ldrh	r2, [r3, #8]
 800ec2e:	4b93      	ldr	r3, [pc, #588]	; (800ee7c <tcp_input+0x724>)
 800ec30:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ec32:	4a92      	ldr	r2, [pc, #584]	; (800ee7c <tcp_input+0x724>)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ec38:	4b91      	ldr	r3, [pc, #580]	; (800ee80 <tcp_input+0x728>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a8f      	ldr	r2, [pc, #572]	; (800ee7c <tcp_input+0x724>)
 800ec3e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ec40:	4b90      	ldr	r3, [pc, #576]	; (800ee84 <tcp_input+0x72c>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ec46:	4b90      	ldr	r3, [pc, #576]	; (800ee88 <tcp_input+0x730>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ec4c:	4b8f      	ldr	r3, [pc, #572]	; (800ee8c <tcp_input+0x734>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ec52:	4b8f      	ldr	r3, [pc, #572]	; (800ee90 <tcp_input+0x738>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	f003 0308 	and.w	r3, r3, #8
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d006      	beq.n	800ec6c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7b5b      	ldrb	r3, [r3, #13]
 800ec62:	f043 0301 	orr.w	r3, r3, #1
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d017      	beq.n	800eca4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec74:	69f8      	ldr	r0, [r7, #28]
 800ec76:	f7ff f85b 	bl	800dd30 <tcp_process_refused_data>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	f113 0f0d 	cmn.w	r3, #13
 800ec80:	d007      	beq.n	800ec92 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00c      	beq.n	800eca4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec8a:	4b82      	ldr	r3, [pc, #520]	; (800ee94 <tcp_input+0x73c>)
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d008      	beq.n	800eca4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f040 80e3 	bne.w	800ee62 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	f003 fe05 	bl	80128ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eca2:	e0de      	b.n	800ee62 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eca4:	4a7c      	ldr	r2, [pc, #496]	; (800ee98 <tcp_input+0x740>)
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ecaa:	69f8      	ldr	r0, [r7, #28]
 800ecac:	f000 fb18 	bl	800f2e0 <tcp_process>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ecb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecb8:	f113 0f0d 	cmn.w	r3, #13
 800ecbc:	f000 80d3 	beq.w	800ee66 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ecc0:	4b71      	ldr	r3, [pc, #452]	; (800ee88 <tcp_input+0x730>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	f003 0308 	and.w	r3, r3, #8
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d015      	beq.n	800ecf8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d008      	beq.n	800ece8 <tcp_input+0x590>
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecdc:	69fa      	ldr	r2, [r7, #28]
 800ecde:	6912      	ldr	r2, [r2, #16]
 800ece0:	f06f 010d 	mvn.w	r1, #13
 800ece4:	4610      	mov	r0, r2
 800ece6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ece8:	69f9      	ldr	r1, [r7, #28]
 800ecea:	486c      	ldr	r0, [pc, #432]	; (800ee9c <tcp_input+0x744>)
 800ecec:	f7ff fbbc 	bl	800e468 <tcp_pcb_remove>
        tcp_free(pcb);
 800ecf0:	69f8      	ldr	r0, [r7, #28]
 800ecf2:	f7fd fe89 	bl	800ca08 <tcp_free>
 800ecf6:	e0da      	b.n	800eeae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ecfc:	4b63      	ldr	r3, [pc, #396]	; (800ee8c <tcp_input+0x734>)
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d01d      	beq.n	800ed40 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ed04:	4b61      	ldr	r3, [pc, #388]	; (800ee8c <tcp_input+0x734>)
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00a      	beq.n	800ed2a <tcp_input+0x5d2>
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed1a:	69fa      	ldr	r2, [r7, #28]
 800ed1c:	6910      	ldr	r0, [r2, #16]
 800ed1e:	89fa      	ldrh	r2, [r7, #14]
 800ed20:	69f9      	ldr	r1, [r7, #28]
 800ed22:	4798      	blx	r3
 800ed24:	4603      	mov	r3, r0
 800ed26:	74fb      	strb	r3, [r7, #19]
 800ed28:	e001      	b.n	800ed2e <tcp_input+0x5d6>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ed2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed32:	f113 0f0d 	cmn.w	r3, #13
 800ed36:	f000 8098 	beq.w	800ee6a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ed3a:	4b54      	ldr	r3, [pc, #336]	; (800ee8c <tcp_input+0x734>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ed40:	69f8      	ldr	r0, [r7, #28]
 800ed42:	f000 f915 	bl	800ef70 <tcp_input_delayed_close>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f040 8090 	bne.w	800ee6e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ed4e:	4b4d      	ldr	r3, [pc, #308]	; (800ee84 <tcp_input+0x72c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d041      	beq.n	800edda <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d006      	beq.n	800ed6c <tcp_input+0x614>
 800ed5e:	4b50      	ldr	r3, [pc, #320]	; (800eea0 <tcp_input+0x748>)
 800ed60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ed64:	494f      	ldr	r1, [pc, #316]	; (800eea4 <tcp_input+0x74c>)
 800ed66:	4850      	ldr	r0, [pc, #320]	; (800eea8 <tcp_input+0x750>)
 800ed68:	f007 f9c6 	bl	80160f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	8b5b      	ldrh	r3, [r3, #26]
 800ed70:	f003 0310 	and.w	r3, r3, #16
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d008      	beq.n	800ed8a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ed78:	4b42      	ldr	r3, [pc, #264]	; (800ee84 <tcp_input+0x72c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fd fb97 	bl	800c4b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ed82:	69f8      	ldr	r0, [r7, #28]
 800ed84:	f7fe f984 	bl	800d090 <tcp_abort>
            goto aborted;
 800ed88:	e091      	b.n	800eeae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00c      	beq.n	800edae <tcp_input+0x656>
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	6918      	ldr	r0, [r3, #16]
 800ed9e:	4b39      	ldr	r3, [pc, #228]	; (800ee84 <tcp_input+0x72c>)
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	2300      	movs	r3, #0
 800eda4:	69f9      	ldr	r1, [r7, #28]
 800eda6:	47a0      	blx	r4
 800eda8:	4603      	mov	r3, r0
 800edaa:	74fb      	strb	r3, [r7, #19]
 800edac:	e008      	b.n	800edc0 <tcp_input+0x668>
 800edae:	4b35      	ldr	r3, [pc, #212]	; (800ee84 <tcp_input+0x72c>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	2300      	movs	r3, #0
 800edb4:	69f9      	ldr	r1, [r7, #28]
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7ff f890 	bl	800dedc <tcp_recv_null>
 800edbc:	4603      	mov	r3, r0
 800edbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800edc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800edc4:	f113 0f0d 	cmn.w	r3, #13
 800edc8:	d053      	beq.n	800ee72 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800edca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d003      	beq.n	800edda <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800edd2:	4b2c      	ldr	r3, [pc, #176]	; (800ee84 <tcp_input+0x72c>)
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800edda:	4b2b      	ldr	r3, [pc, #172]	; (800ee88 <tcp_input+0x730>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	f003 0320 	and.w	r3, r3, #32
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d030      	beq.n	800ee48 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edea:	2b00      	cmp	r3, #0
 800edec:	d009      	beq.n	800ee02 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf2:	7b5a      	ldrb	r2, [r3, #13]
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf8:	f042 0220 	orr.w	r2, r2, #32
 800edfc:	b2d2      	uxtb	r2, r2
 800edfe:	735a      	strb	r2, [r3, #13]
 800ee00:	e022      	b.n	800ee48 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee0a:	d005      	beq.n	800ee18 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee10:	3301      	adds	r3, #1
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00b      	beq.n	800ee3a <tcp_input+0x6e2>
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	6918      	ldr	r0, [r3, #16]
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	2200      	movs	r2, #0
 800ee30:	69f9      	ldr	r1, [r7, #28]
 800ee32:	47a0      	blx	r4
 800ee34:	4603      	mov	r3, r0
 800ee36:	74fb      	strb	r3, [r7, #19]
 800ee38:	e001      	b.n	800ee3e <tcp_input+0x6e6>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ee3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee42:	f113 0f0d 	cmn.w	r3, #13
 800ee46:	d016      	beq.n	800ee76 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ee48:	4b13      	ldr	r3, [pc, #76]	; (800ee98 <tcp_input+0x740>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ee4e:	69f8      	ldr	r0, [r7, #28]
 800ee50:	f000 f88e 	bl	800ef70 <tcp_input_delayed_close>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d128      	bne.n	800eeac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ee5a:	69f8      	ldr	r0, [r7, #28]
 800ee5c:	f002 ff20 	bl	8011ca0 <tcp_output>
 800ee60:	e025      	b.n	800eeae <tcp_input+0x756>
        goto aborted;
 800ee62:	bf00      	nop
 800ee64:	e023      	b.n	800eeae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ee66:	bf00      	nop
 800ee68:	e021      	b.n	800eeae <tcp_input+0x756>
              goto aborted;
 800ee6a:	bf00      	nop
 800ee6c:	e01f      	b.n	800eeae <tcp_input+0x756>
          goto aborted;
 800ee6e:	bf00      	nop
 800ee70:	e01d      	b.n	800eeae <tcp_input+0x756>
            goto aborted;
 800ee72:	bf00      	nop
 800ee74:	e01b      	b.n	800eeae <tcp_input+0x756>
              goto aborted;
 800ee76:	bf00      	nop
 800ee78:	e019      	b.n	800eeae <tcp_input+0x756>
 800ee7a:	bf00      	nop
 800ee7c:	240074c0 	.word	0x240074c0
 800ee80:	240074d0 	.word	0x240074d0
 800ee84:	240074f0 	.word	0x240074f0
 800ee88:	240074ed 	.word	0x240074ed
 800ee8c:	240074e8 	.word	0x240074e8
 800ee90:	240074ec 	.word	0x240074ec
 800ee94:	240074ea 	.word	0x240074ea
 800ee98:	240074f4 	.word	0x240074f4
 800ee9c:	240074b4 	.word	0x240074b4
 800eea0:	0801912c 	.word	0x0801912c
 800eea4:	080192e0 	.word	0x080192e0
 800eea8:	08019178 	.word	0x08019178
          goto aborted;
 800eeac:	bf00      	nop
    tcp_input_pcb = NULL;
 800eeae:	4b27      	ldr	r3, [pc, #156]	; (800ef4c <tcp_input+0x7f4>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eeb4:	4b26      	ldr	r3, [pc, #152]	; (800ef50 <tcp_input+0x7f8>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eeba:	4b26      	ldr	r3, [pc, #152]	; (800ef54 <tcp_input+0x7fc>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d03f      	beq.n	800ef42 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800eec2:	4b24      	ldr	r3, [pc, #144]	; (800ef54 <tcp_input+0x7fc>)
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fd faf2 	bl	800c4b0 <pbuf_free>
      inseg.p = NULL;
 800eecc:	4b21      	ldr	r3, [pc, #132]	; (800ef54 <tcp_input+0x7fc>)
 800eece:	2200      	movs	r2, #0
 800eed0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eed2:	e036      	b.n	800ef42 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eed4:	4b20      	ldr	r3, [pc, #128]	; (800ef58 <tcp_input+0x800>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	899b      	ldrh	r3, [r3, #12]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fb fe3d 	bl	800ab5c <lwip_htons>
 800eee2:	4603      	mov	r3, r0
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	f003 0304 	and.w	r3, r3, #4
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d118      	bne.n	800ef20 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeee:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <tcp_input+0x804>)
 800eef0:	6819      	ldr	r1, [r3, #0]
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <tcp_input+0x808>)
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	4b1a      	ldr	r3, [pc, #104]	; (800ef64 <tcp_input+0x80c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eefe:	4b16      	ldr	r3, [pc, #88]	; (800ef58 <tcp_input+0x800>)
 800ef00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef02:	885b      	ldrh	r3, [r3, #2]
 800ef04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef06:	4a14      	ldr	r2, [pc, #80]	; (800ef58 <tcp_input+0x800>)
 800ef08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef0a:	8812      	ldrh	r2, [r2, #0]
 800ef0c:	b292      	uxth	r2, r2
 800ef0e:	9202      	str	r2, [sp, #8]
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	4b15      	ldr	r3, [pc, #84]	; (800ef68 <tcp_input+0x810>)
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	4b15      	ldr	r3, [pc, #84]	; (800ef6c <tcp_input+0x814>)
 800ef18:	4602      	mov	r2, r0
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	f003 fc74 	bl	8012808 <tcp_rst>
    pbuf_free(p);
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7fd fac5 	bl	800c4b0 <pbuf_free>
  return;
 800ef26:	e00c      	b.n	800ef42 <tcp_input+0x7ea>
    goto dropped;
 800ef28:	bf00      	nop
 800ef2a:	e006      	b.n	800ef3a <tcp_input+0x7e2>
    goto dropped;
 800ef2c:	bf00      	nop
 800ef2e:	e004      	b.n	800ef3a <tcp_input+0x7e2>
    goto dropped;
 800ef30:	bf00      	nop
 800ef32:	e002      	b.n	800ef3a <tcp_input+0x7e2>
      goto dropped;
 800ef34:	bf00      	nop
 800ef36:	e000      	b.n	800ef3a <tcp_input+0x7e2>
      goto dropped;
 800ef38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7fd fab8 	bl	800c4b0 <pbuf_free>
 800ef40:	e000      	b.n	800ef44 <tcp_input+0x7ec>
  return;
 800ef42:	bf00      	nop
}
 800ef44:	3724      	adds	r7, #36	; 0x24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd90      	pop	{r4, r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	240074f4 	.word	0x240074f4
 800ef50:	240074f0 	.word	0x240074f0
 800ef54:	240074c0 	.word	0x240074c0
 800ef58:	240074d0 	.word	0x240074d0
 800ef5c:	240074e4 	.word	0x240074e4
 800ef60:	240074ea 	.word	0x240074ea
 800ef64:	240074e0 	.word	0x240074e0
 800ef68:	240043b8 	.word	0x240043b8
 800ef6c:	240043bc 	.word	0x240043bc

0800ef70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_input_delayed_close+0x1c>
 800ef7e:	4b17      	ldr	r3, [pc, #92]	; (800efdc <tcp_input_delayed_close+0x6c>)
 800ef80:	f240 225a 	movw	r2, #602	; 0x25a
 800ef84:	4916      	ldr	r1, [pc, #88]	; (800efe0 <tcp_input_delayed_close+0x70>)
 800ef86:	4817      	ldr	r0, [pc, #92]	; (800efe4 <tcp_input_delayed_close+0x74>)
 800ef88:	f007 f8b6 	bl	80160f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ef8c:	4b16      	ldr	r3, [pc, #88]	; (800efe8 <tcp_input_delayed_close+0x78>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0310 	and.w	r3, r3, #16
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d01c      	beq.n	800efd2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	8b5b      	ldrh	r3, [r3, #26]
 800ef9c:	f003 0310 	and.w	r3, r3, #16
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10d      	bne.n	800efc0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d008      	beq.n	800efc0 <tcp_input_delayed_close+0x50>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	6912      	ldr	r2, [r2, #16]
 800efb8:	f06f 010e 	mvn.w	r1, #14
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	480a      	ldr	r0, [pc, #40]	; (800efec <tcp_input_delayed_close+0x7c>)
 800efc4:	f7ff fa50 	bl	800e468 <tcp_pcb_remove>
    tcp_free(pcb);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7fd fd1d 	bl	800ca08 <tcp_free>
    return 1;
 800efce:	2301      	movs	r3, #1
 800efd0:	e000      	b.n	800efd4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	0801912c 	.word	0x0801912c
 800efe0:	080192fc 	.word	0x080192fc
 800efe4:	08019178 	.word	0x08019178
 800efe8:	240074ed 	.word	0x240074ed
 800efec:	240074b4 	.word	0x240074b4

0800eff0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eff0:	b590      	push	{r4, r7, lr}
 800eff2:	b08b      	sub	sp, #44	; 0x2c
 800eff4:	af04      	add	r7, sp, #16
 800eff6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eff8:	4b6f      	ldr	r3, [pc, #444]	; (800f1b8 <tcp_listen_input+0x1c8>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f003 0304 	and.w	r3, r3, #4
 800f000:	2b00      	cmp	r3, #0
 800f002:	f040 80d2 	bne.w	800f1aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <tcp_listen_input+0x2a>
 800f00c:	4b6b      	ldr	r3, [pc, #428]	; (800f1bc <tcp_listen_input+0x1cc>)
 800f00e:	f240 2281 	movw	r2, #641	; 0x281
 800f012:	496b      	ldr	r1, [pc, #428]	; (800f1c0 <tcp_listen_input+0x1d0>)
 800f014:	486b      	ldr	r0, [pc, #428]	; (800f1c4 <tcp_listen_input+0x1d4>)
 800f016:	f007 f86f 	bl	80160f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f01a:	4b67      	ldr	r3, [pc, #412]	; (800f1b8 <tcp_listen_input+0x1c8>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f003 0310 	and.w	r3, r3, #16
 800f022:	2b00      	cmp	r3, #0
 800f024:	d019      	beq.n	800f05a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f026:	4b68      	ldr	r3, [pc, #416]	; (800f1c8 <tcp_listen_input+0x1d8>)
 800f028:	6819      	ldr	r1, [r3, #0]
 800f02a:	4b68      	ldr	r3, [pc, #416]	; (800f1cc <tcp_listen_input+0x1dc>)
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	4b67      	ldr	r3, [pc, #412]	; (800f1d0 <tcp_listen_input+0x1e0>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f036:	4b67      	ldr	r3, [pc, #412]	; (800f1d4 <tcp_listen_input+0x1e4>)
 800f038:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03a:	885b      	ldrh	r3, [r3, #2]
 800f03c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f03e:	4a65      	ldr	r2, [pc, #404]	; (800f1d4 <tcp_listen_input+0x1e4>)
 800f040:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f042:	8812      	ldrh	r2, [r2, #0]
 800f044:	b292      	uxth	r2, r2
 800f046:	9202      	str	r2, [sp, #8]
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	4b63      	ldr	r3, [pc, #396]	; (800f1d8 <tcp_listen_input+0x1e8>)
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	4b63      	ldr	r3, [pc, #396]	; (800f1dc <tcp_listen_input+0x1ec>)
 800f050:	4602      	mov	r2, r0
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f003 fbd8 	bl	8012808 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f058:	e0a9      	b.n	800f1ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f05a:	4b57      	ldr	r3, [pc, #348]	; (800f1b8 <tcp_listen_input+0x1c8>)
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 80a3 	beq.w	800f1ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	7d5b      	ldrb	r3, [r3, #21]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7ff f859 	bl	800e124 <tcp_alloc>
 800f072:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d111      	bne.n	800f09e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00a      	beq.n	800f098 <tcp_listen_input+0xa8>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	6910      	ldr	r0, [r2, #16]
 800f08a:	f04f 32ff 	mov.w	r2, #4294967295
 800f08e:	2100      	movs	r1, #0
 800f090:	4798      	blx	r3
 800f092:	4603      	mov	r3, r0
 800f094:	73bb      	strb	r3, [r7, #14]
      return;
 800f096:	e08b      	b.n	800f1b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f098:	23f0      	movs	r3, #240	; 0xf0
 800f09a:	73bb      	strb	r3, [r7, #14]
      return;
 800f09c:	e088      	b.n	800f1b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f09e:	4b50      	ldr	r3, [pc, #320]	; (800f1e0 <tcp_listen_input+0x1f0>)
 800f0a0:	695a      	ldr	r2, [r3, #20]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f0a6:	4b4e      	ldr	r3, [pc, #312]	; (800f1e0 <tcp_listen_input+0x1f0>)
 800f0a8:	691a      	ldr	r2, [r3, #16]
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	8ada      	ldrh	r2, [r3, #22]
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f0b6:	4b47      	ldr	r3, [pc, #284]	; (800f1d4 <tcp_listen_input+0x1e4>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f0c8:	4b41      	ldr	r3, [pc, #260]	; (800f1d0 <tcp_listen_input+0x1e0>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f0da:	6978      	ldr	r0, [r7, #20]
 800f0dc:	f7ff fa58 	bl	800e590 <tcp_next_iss>
 800f0e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	693a      	ldr	r2, [r7, #16]
 800f0e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	693a      	ldr	r2, [r7, #16]
 800f0ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f0fa:	4b35      	ldr	r3, [pc, #212]	; (800f1d0 <tcp_listen_input+0x1e0>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	1e5a      	subs	r2, r3, #1
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691a      	ldr	r2, [r3, #16]
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	7a5b      	ldrb	r3, [r3, #9]
 800f116:	f003 030c 	and.w	r3, r3, #12
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7a1a      	ldrb	r2, [r3, #8]
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f128:	4b2e      	ldr	r3, [pc, #184]	; (800f1e4 <tcp_listen_input+0x1f4>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	60da      	str	r2, [r3, #12]
 800f130:	4a2c      	ldr	r2, [pc, #176]	; (800f1e4 <tcp_listen_input+0x1f4>)
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	6013      	str	r3, [r2, #0]
 800f136:	f003 fd29 	bl	8012b8c <tcp_timer_needed>
 800f13a:	4b2b      	ldr	r3, [pc, #172]	; (800f1e8 <tcp_listen_input+0x1f8>)
 800f13c:	2201      	movs	r2, #1
 800f13e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f140:	6978      	ldr	r0, [r7, #20]
 800f142:	f001 fd8f 	bl	8010c64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f146:	4b23      	ldr	r3, [pc, #140]	; (800f1d4 <tcp_listen_input+0x1e4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	89db      	ldrh	r3, [r3, #14]
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	3304      	adds	r3, #4
 800f168:	4618      	mov	r0, r3
 800f16a:	f005 faf7 	bl	801475c <ip4_route>
 800f16e:	4601      	mov	r1, r0
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	3304      	adds	r3, #4
 800f174:	461a      	mov	r2, r3
 800f176:	4620      	mov	r0, r4
 800f178:	f7ff fa30 	bl	800e5dc <tcp_eff_send_mss_netif>
 800f17c:	4603      	mov	r3, r0
 800f17e:	461a      	mov	r2, r3
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f184:	2112      	movs	r1, #18
 800f186:	6978      	ldr	r0, [r7, #20]
 800f188:	f002 fc9c 	bl	8011ac4 <tcp_enqueue_flags>
 800f18c:	4603      	mov	r3, r0
 800f18e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f198:	2100      	movs	r1, #0
 800f19a:	6978      	ldr	r0, [r7, #20]
 800f19c:	f7fd feba 	bl	800cf14 <tcp_abandon>
      return;
 800f1a0:	e006      	b.n	800f1b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f1a2:	6978      	ldr	r0, [r7, #20]
 800f1a4:	f002 fd7c 	bl	8011ca0 <tcp_output>
  return;
 800f1a8:	e001      	b.n	800f1ae <tcp_listen_input+0x1be>
    return;
 800f1aa:	bf00      	nop
 800f1ac:	e000      	b.n	800f1b0 <tcp_listen_input+0x1c0>
  return;
 800f1ae:	bf00      	nop
}
 800f1b0:	371c      	adds	r7, #28
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd90      	pop	{r4, r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	240074ec 	.word	0x240074ec
 800f1bc:	0801912c 	.word	0x0801912c
 800f1c0:	08019324 	.word	0x08019324
 800f1c4:	08019178 	.word	0x08019178
 800f1c8:	240074e4 	.word	0x240074e4
 800f1cc:	240074ea 	.word	0x240074ea
 800f1d0:	240074e0 	.word	0x240074e0
 800f1d4:	240074d0 	.word	0x240074d0
 800f1d8:	240043b8 	.word	0x240043b8
 800f1dc:	240043bc 	.word	0x240043bc
 800f1e0:	240043a8 	.word	0x240043a8
 800f1e4:	240074b4 	.word	0x240074b4
 800f1e8:	240074bc 	.word	0x240074bc

0800f1ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af04      	add	r7, sp, #16
 800f1f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f1f4:	4b2f      	ldr	r3, [pc, #188]	; (800f2b4 <tcp_timewait_input+0xc8>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 0304 	and.w	r3, r3, #4
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d153      	bne.n	800f2a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d106      	bne.n	800f214 <tcp_timewait_input+0x28>
 800f206:	4b2c      	ldr	r3, [pc, #176]	; (800f2b8 <tcp_timewait_input+0xcc>)
 800f208:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f20c:	492b      	ldr	r1, [pc, #172]	; (800f2bc <tcp_timewait_input+0xd0>)
 800f20e:	482c      	ldr	r0, [pc, #176]	; (800f2c0 <tcp_timewait_input+0xd4>)
 800f210:	f006 ff72 	bl	80160f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f214:	4b27      	ldr	r3, [pc, #156]	; (800f2b4 <tcp_timewait_input+0xc8>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0302 	and.w	r3, r3, #2
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d02a      	beq.n	800f276 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f220:	4b28      	ldr	r3, [pc, #160]	; (800f2c4 <tcp_timewait_input+0xd8>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	db2d      	blt.n	800f28a <tcp_timewait_input+0x9e>
 800f22e:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <tcp_timewait_input+0xd8>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f23a:	440b      	add	r3, r1
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dc23      	bgt.n	800f28a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f242:	4b21      	ldr	r3, [pc, #132]	; (800f2c8 <tcp_timewait_input+0xdc>)
 800f244:	6819      	ldr	r1, [r3, #0]
 800f246:	4b21      	ldr	r3, [pc, #132]	; (800f2cc <tcp_timewait_input+0xe0>)
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	4b1d      	ldr	r3, [pc, #116]	; (800f2c4 <tcp_timewait_input+0xd8>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f252:	4b1f      	ldr	r3, [pc, #124]	; (800f2d0 <tcp_timewait_input+0xe4>)
 800f254:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f256:	885b      	ldrh	r3, [r3, #2]
 800f258:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f25a:	4a1d      	ldr	r2, [pc, #116]	; (800f2d0 <tcp_timewait_input+0xe4>)
 800f25c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f25e:	8812      	ldrh	r2, [r2, #0]
 800f260:	b292      	uxth	r2, r2
 800f262:	9202      	str	r2, [sp, #8]
 800f264:	9301      	str	r3, [sp, #4]
 800f266:	4b1b      	ldr	r3, [pc, #108]	; (800f2d4 <tcp_timewait_input+0xe8>)
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	4b1b      	ldr	r3, [pc, #108]	; (800f2d8 <tcp_timewait_input+0xec>)
 800f26c:	4602      	mov	r2, r0
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f003 faca 	bl	8012808 <tcp_rst>
      return;
 800f274:	e01b      	b.n	800f2ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f276:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <tcp_timewait_input+0xc8>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f282:	4b16      	ldr	r3, [pc, #88]	; (800f2dc <tcp_timewait_input+0xf0>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f28a:	4b10      	ldr	r3, [pc, #64]	; (800f2cc <tcp_timewait_input+0xe0>)
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00c      	beq.n	800f2ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	8b5b      	ldrh	r3, [r3, #26]
 800f296:	f043 0302 	orr.w	r3, r3, #2
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f002 fcfd 	bl	8011ca0 <tcp_output>
  }
  return;
 800f2a6:	e001      	b.n	800f2ac <tcp_timewait_input+0xc0>
    return;
 800f2a8:	bf00      	nop
 800f2aa:	e000      	b.n	800f2ae <tcp_timewait_input+0xc2>
  return;
 800f2ac:	bf00      	nop
}
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	240074ec 	.word	0x240074ec
 800f2b8:	0801912c 	.word	0x0801912c
 800f2bc:	08019344 	.word	0x08019344
 800f2c0:	08019178 	.word	0x08019178
 800f2c4:	240074e0 	.word	0x240074e0
 800f2c8:	240074e4 	.word	0x240074e4
 800f2cc:	240074ea 	.word	0x240074ea
 800f2d0:	240074d0 	.word	0x240074d0
 800f2d4:	240043b8 	.word	0x240043b8
 800f2d8:	240043bc 	.word	0x240043bc
 800f2dc:	240074a8 	.word	0x240074a8

0800f2e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f2e0:	b590      	push	{r4, r7, lr}
 800f2e2:	b08d      	sub	sp, #52	; 0x34
 800f2e4:	af04      	add	r7, sp, #16
 800f2e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_process+0x24>
 800f2f6:	4b9d      	ldr	r3, [pc, #628]	; (800f56c <tcp_process+0x28c>)
 800f2f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f2fc:	499c      	ldr	r1, [pc, #624]	; (800f570 <tcp_process+0x290>)
 800f2fe:	489d      	ldr	r0, [pc, #628]	; (800f574 <tcp_process+0x294>)
 800f300:	f006 fefa 	bl	80160f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f304:	4b9c      	ldr	r3, [pc, #624]	; (800f578 <tcp_process+0x298>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f003 0304 	and.w	r3, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d04e      	beq.n	800f3ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	2b02      	cmp	r3, #2
 800f316:	d108      	bne.n	800f32a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f31c:	4b97      	ldr	r3, [pc, #604]	; (800f57c <tcp_process+0x29c>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	d123      	bne.n	800f36c <tcp_process+0x8c>
        acceptable = 1;
 800f324:	2301      	movs	r3, #1
 800f326:	76fb      	strb	r3, [r7, #27]
 800f328:	e020      	b.n	800f36c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f32e:	4b94      	ldr	r3, [pc, #592]	; (800f580 <tcp_process+0x2a0>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	429a      	cmp	r2, r3
 800f334:	d102      	bne.n	800f33c <tcp_process+0x5c>
        acceptable = 1;
 800f336:	2301      	movs	r3, #1
 800f338:	76fb      	strb	r3, [r7, #27]
 800f33a:	e017      	b.n	800f36c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f33c:	4b90      	ldr	r3, [pc, #576]	; (800f580 <tcp_process+0x2a0>)
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f344:	1ad3      	subs	r3, r2, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	db10      	blt.n	800f36c <tcp_process+0x8c>
 800f34a:	4b8d      	ldr	r3, [pc, #564]	; (800f580 <tcp_process+0x2a0>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f356:	440b      	add	r3, r1
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dc06      	bgt.n	800f36c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	8b5b      	ldrh	r3, [r3, #26]
 800f362:	f043 0302 	orr.w	r3, r3, #2
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f36c:	7efb      	ldrb	r3, [r7, #27]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d01b      	beq.n	800f3aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	7d1b      	ldrb	r3, [r3, #20]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d106      	bne.n	800f388 <tcp_process+0xa8>
 800f37a:	4b7c      	ldr	r3, [pc, #496]	; (800f56c <tcp_process+0x28c>)
 800f37c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f380:	4980      	ldr	r1, [pc, #512]	; (800f584 <tcp_process+0x2a4>)
 800f382:	487c      	ldr	r0, [pc, #496]	; (800f574 <tcp_process+0x294>)
 800f384:	f006 feb8 	bl	80160f8 <iprintf>
      recv_flags |= TF_RESET;
 800f388:	4b7f      	ldr	r3, [pc, #508]	; (800f588 <tcp_process+0x2a8>)
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	f043 0308 	orr.w	r3, r3, #8
 800f390:	b2da      	uxtb	r2, r3
 800f392:	4b7d      	ldr	r3, [pc, #500]	; (800f588 <tcp_process+0x2a8>)
 800f394:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	8b5b      	ldrh	r3, [r3, #26]
 800f39a:	f023 0301 	bic.w	r3, r3, #1
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f3a4:	f06f 030d 	mvn.w	r3, #13
 800f3a8:	e37a      	b.n	800faa0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	e378      	b.n	800faa0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f3ae:	4b72      	ldr	r3, [pc, #456]	; (800f578 <tcp_process+0x298>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	f003 0302 	and.w	r3, r3, #2
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d010      	beq.n	800f3dc <tcp_process+0xfc>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	7d1b      	ldrb	r3, [r3, #20]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d00c      	beq.n	800f3dc <tcp_process+0xfc>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d008      	beq.n	800f3dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8b5b      	ldrh	r3, [r3, #26]
 800f3ce:	f043 0302 	orr.w	r3, r3, #2
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e361      	b.n	800faa0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	8b5b      	ldrh	r3, [r3, #26]
 800f3e0:	f003 0310 	and.w	r3, r3, #16
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d103      	bne.n	800f3f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f3e8:	4b68      	ldr	r3, [pc, #416]	; (800f58c <tcp_process+0x2ac>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f001 fc2f 	bl	8010c64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	7d1b      	ldrb	r3, [r3, #20]
 800f40a:	3b02      	subs	r3, #2
 800f40c:	2b07      	cmp	r3, #7
 800f40e:	f200 8337 	bhi.w	800fa80 <tcp_process+0x7a0>
 800f412:	a201      	add	r2, pc, #4	; (adr r2, 800f418 <tcp_process+0x138>)
 800f414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f418:	0800f439 	.word	0x0800f439
 800f41c:	0800f669 	.word	0x0800f669
 800f420:	0800f7e1 	.word	0x0800f7e1
 800f424:	0800f80b 	.word	0x0800f80b
 800f428:	0800f92f 	.word	0x0800f92f
 800f42c:	0800f7e1 	.word	0x0800f7e1
 800f430:	0800f9bb 	.word	0x0800f9bb
 800f434:	0800fa4b 	.word	0x0800fa4b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f438:	4b4f      	ldr	r3, [pc, #316]	; (800f578 <tcp_process+0x298>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	f003 0310 	and.w	r3, r3, #16
 800f440:	2b00      	cmp	r3, #0
 800f442:	f000 80e4 	beq.w	800f60e <tcp_process+0x32e>
 800f446:	4b4c      	ldr	r3, [pc, #304]	; (800f578 <tcp_process+0x298>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	f003 0302 	and.w	r3, r3, #2
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 80dd 	beq.w	800f60e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	4b48      	ldr	r3, [pc, #288]	; (800f57c <tcp_process+0x29c>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	f040 80d5 	bne.w	800f60e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f464:	4b46      	ldr	r3, [pc, #280]	; (800f580 <tcp_process+0x2a0>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f476:	4b41      	ldr	r3, [pc, #260]	; (800f57c <tcp_process+0x29c>)
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f47e:	4b44      	ldr	r3, [pc, #272]	; (800f590 <tcp_process+0x2b0>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	89db      	ldrh	r3, [r3, #14]
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f498:	4b39      	ldr	r3, [pc, #228]	; (800f580 <tcp_process+0x2a0>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	1e5a      	subs	r2, r3, #1
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2204      	movs	r2, #4
 800f4a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f005 f953 	bl	801475c <ip4_route>
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	461a      	mov	r2, r3
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f7ff f88c 	bl	800e5dc <tcp_eff_send_mss_netif>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4d0:	009a      	lsls	r2, r3, #2
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	f241 111c 	movw	r1, #4380	; 0x111c
 800f4dc:	428b      	cmp	r3, r1
 800f4de:	bf38      	it	cc
 800f4e0:	460b      	movcc	r3, r1
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d204      	bcs.n	800f4f0 <tcp_process+0x210>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	e00d      	b.n	800f50c <tcp_process+0x22c>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4f4:	005b      	lsls	r3, r3, #1
 800f4f6:	f241 121c 	movw	r2, #4380	; 0x111c
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d904      	bls.n	800f508 <tcp_process+0x228>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f502:	005b      	lsls	r3, r3, #1
 800f504:	b29b      	uxth	r3, r3
 800f506:	e001      	b.n	800f50c <tcp_process+0x22c>
 800f508:	f241 131c 	movw	r3, #4380	; 0x111c
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d106      	bne.n	800f52a <tcp_process+0x24a>
 800f51c:	4b13      	ldr	r3, [pc, #76]	; (800f56c <tcp_process+0x28c>)
 800f51e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f522:	491c      	ldr	r1, [pc, #112]	; (800f594 <tcp_process+0x2b4>)
 800f524:	4813      	ldr	r0, [pc, #76]	; (800f574 <tcp_process+0x294>)
 800f526:	f006 fde7 	bl	80160f8 <iprintf>
        --pcb->snd_queuelen;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f530:	3b01      	subs	r3, #1
 800f532:	b29a      	uxth	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f53e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d12a      	bne.n	800f59c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f54a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <tcp_process+0x280>
 800f552:	4b06      	ldr	r3, [pc, #24]	; (800f56c <tcp_process+0x28c>)
 800f554:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f558:	490f      	ldr	r1, [pc, #60]	; (800f598 <tcp_process+0x2b8>)
 800f55a:	4806      	ldr	r0, [pc, #24]	; (800f574 <tcp_process+0x294>)
 800f55c:	f006 fdcc 	bl	80160f8 <iprintf>
          pcb->unsent = rseg->next;
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	66da      	str	r2, [r3, #108]	; 0x6c
 800f568:	e01c      	b.n	800f5a4 <tcp_process+0x2c4>
 800f56a:	bf00      	nop
 800f56c:	0801912c 	.word	0x0801912c
 800f570:	08019364 	.word	0x08019364
 800f574:	08019178 	.word	0x08019178
 800f578:	240074ec 	.word	0x240074ec
 800f57c:	240074e4 	.word	0x240074e4
 800f580:	240074e0 	.word	0x240074e0
 800f584:	08019380 	.word	0x08019380
 800f588:	240074ed 	.word	0x240074ed
 800f58c:	240074a8 	.word	0x240074a8
 800f590:	240074d0 	.word	0x240074d0
 800f594:	080193a0 	.word	0x080193a0
 800f598:	080193b8 	.word	0x080193b8
        } else {
          pcb->unacked = rseg->next;
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f5a4:	69f8      	ldr	r0, [r7, #28]
 800f5a6:	f7fe fc54 	bl	800de52 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d104      	bne.n	800f5bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5b8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5ba:	e006      	b.n	800f5ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00a      	beq.n	800f5ea <tcp_process+0x30a>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	6910      	ldr	r0, [r2, #16]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	6879      	ldr	r1, [r7, #4]
 800f5e2:	4798      	blx	r3
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	76bb      	strb	r3, [r7, #26]
 800f5e8:	e001      	b.n	800f5ee <tcp_process+0x30e>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f5ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5f2:	f113 0f0d 	cmn.w	r3, #13
 800f5f6:	d102      	bne.n	800f5fe <tcp_process+0x31e>
          return ERR_ABRT;
 800f5f8:	f06f 030c 	mvn.w	r3, #12
 800f5fc:	e250      	b.n	800faa0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	8b5b      	ldrh	r3, [r3, #26]
 800f602:	f043 0302 	orr.w	r3, r3, #2
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f60c:	e23a      	b.n	800fa84 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f60e:	4b98      	ldr	r3, [pc, #608]	; (800f870 <tcp_process+0x590>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	f003 0310 	and.w	r3, r3, #16
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 8234 	beq.w	800fa84 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f61c:	4b95      	ldr	r3, [pc, #596]	; (800f874 <tcp_process+0x594>)
 800f61e:	6819      	ldr	r1, [r3, #0]
 800f620:	4b95      	ldr	r3, [pc, #596]	; (800f878 <tcp_process+0x598>)
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	461a      	mov	r2, r3
 800f626:	4b95      	ldr	r3, [pc, #596]	; (800f87c <tcp_process+0x59c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f62c:	4b94      	ldr	r3, [pc, #592]	; (800f880 <tcp_process+0x5a0>)
 800f62e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f630:	885b      	ldrh	r3, [r3, #2]
 800f632:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f634:	4a92      	ldr	r2, [pc, #584]	; (800f880 <tcp_process+0x5a0>)
 800f636:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f638:	8812      	ldrh	r2, [r2, #0]
 800f63a:	b292      	uxth	r2, r2
 800f63c:	9202      	str	r2, [sp, #8]
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	4b90      	ldr	r3, [pc, #576]	; (800f884 <tcp_process+0x5a4>)
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	4b90      	ldr	r3, [pc, #576]	; (800f888 <tcp_process+0x5a8>)
 800f646:	4602      	mov	r2, r0
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f003 f8dd 	bl	8012808 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f654:	2b05      	cmp	r3, #5
 800f656:	f200 8215 	bhi.w	800fa84 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2200      	movs	r2, #0
 800f65e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f002 fea9 	bl	80123b8 <tcp_rexmit_rto>
      break;
 800f666:	e20d      	b.n	800fa84 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f668:	4b81      	ldr	r3, [pc, #516]	; (800f870 <tcp_process+0x590>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f003 0310 	and.w	r3, r3, #16
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 80a1 	beq.w	800f7b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f676:	4b7f      	ldr	r3, [pc, #508]	; (800f874 <tcp_process+0x594>)
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	3b01      	subs	r3, #1
 800f682:	2b00      	cmp	r3, #0
 800f684:	db7e      	blt.n	800f784 <tcp_process+0x4a4>
 800f686:	4b7b      	ldr	r3, [pc, #492]	; (800f874 <tcp_process+0x594>)
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	2b00      	cmp	r3, #0
 800f692:	dc77      	bgt.n	800f784 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2204      	movs	r2, #4
 800f698:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d102      	bne.n	800f6a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f6a2:	23fa      	movs	r3, #250	; 0xfa
 800f6a4:	76bb      	strb	r3, [r7, #26]
 800f6a6:	e01d      	b.n	800f6e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d106      	bne.n	800f6c0 <tcp_process+0x3e0>
 800f6b2:	4b76      	ldr	r3, [pc, #472]	; (800f88c <tcp_process+0x5ac>)
 800f6b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f6b8:	4975      	ldr	r1, [pc, #468]	; (800f890 <tcp_process+0x5b0>)
 800f6ba:	4876      	ldr	r0, [pc, #472]	; (800f894 <tcp_process+0x5b4>)
 800f6bc:	f006 fd1c 	bl	80160f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <tcp_process+0x400>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ce:	699b      	ldr	r3, [r3, #24]
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	6910      	ldr	r0, [r2, #16]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	6879      	ldr	r1, [r7, #4]
 800f6d8:	4798      	blx	r3
 800f6da:	4603      	mov	r3, r0
 800f6dc:	76bb      	strb	r3, [r7, #26]
 800f6de:	e001      	b.n	800f6e4 <tcp_process+0x404>
 800f6e0:	23f0      	movs	r3, #240	; 0xf0
 800f6e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f6e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f6ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6f0:	f113 0f0d 	cmn.w	r3, #13
 800f6f4:	d002      	beq.n	800f6fc <tcp_process+0x41c>
              tcp_abort(pcb);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7fd fcca 	bl	800d090 <tcp_abort>
            }
            return ERR_ABRT;
 800f6fc:	f06f 030c 	mvn.w	r3, #12
 800f700:	e1ce      	b.n	800faa0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fae0 	bl	800fcc8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f708:	4b63      	ldr	r3, [pc, #396]	; (800f898 <tcp_process+0x5b8>)
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d005      	beq.n	800f71c <tcp_process+0x43c>
            recv_acked--;
 800f710:	4b61      	ldr	r3, [pc, #388]	; (800f898 <tcp_process+0x5b8>)
 800f712:	881b      	ldrh	r3, [r3, #0]
 800f714:	3b01      	subs	r3, #1
 800f716:	b29a      	uxth	r2, r3
 800f718:	4b5f      	ldr	r3, [pc, #380]	; (800f898 <tcp_process+0x5b8>)
 800f71a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f720:	009a      	lsls	r2, r3, #2
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	f241 111c 	movw	r1, #4380	; 0x111c
 800f72c:	428b      	cmp	r3, r1
 800f72e:	bf38      	it	cc
 800f730:	460b      	movcc	r3, r1
 800f732:	429a      	cmp	r2, r3
 800f734:	d204      	bcs.n	800f740 <tcp_process+0x460>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	e00d      	b.n	800f75c <tcp_process+0x47c>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f744:	005b      	lsls	r3, r3, #1
 800f746:	f241 121c 	movw	r2, #4380	; 0x111c
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d904      	bls.n	800f758 <tcp_process+0x478>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	b29b      	uxth	r3, r3
 800f756:	e001      	b.n	800f75c <tcp_process+0x47c>
 800f758:	f241 131c 	movw	r3, #4380	; 0x111c
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f762:	4b4e      	ldr	r3, [pc, #312]	; (800f89c <tcp_process+0x5bc>)
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	f003 0320 	and.w	r3, r3, #32
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d037      	beq.n	800f7de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8b5b      	ldrh	r3, [r3, #26]
 800f772:	f043 0302 	orr.w	r3, r3, #2
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2207      	movs	r2, #7
 800f780:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f782:	e02c      	b.n	800f7de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f784:	4b3b      	ldr	r3, [pc, #236]	; (800f874 <tcp_process+0x594>)
 800f786:	6819      	ldr	r1, [r3, #0]
 800f788:	4b3b      	ldr	r3, [pc, #236]	; (800f878 <tcp_process+0x598>)
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	461a      	mov	r2, r3
 800f78e:	4b3b      	ldr	r3, [pc, #236]	; (800f87c <tcp_process+0x59c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f794:	4b3a      	ldr	r3, [pc, #232]	; (800f880 <tcp_process+0x5a0>)
 800f796:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f798:	885b      	ldrh	r3, [r3, #2]
 800f79a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f79c:	4a38      	ldr	r2, [pc, #224]	; (800f880 <tcp_process+0x5a0>)
 800f79e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7a0:	8812      	ldrh	r2, [r2, #0]
 800f7a2:	b292      	uxth	r2, r2
 800f7a4:	9202      	str	r2, [sp, #8]
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	4b36      	ldr	r3, [pc, #216]	; (800f884 <tcp_process+0x5a4>)
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4b36      	ldr	r3, [pc, #216]	; (800f888 <tcp_process+0x5a8>)
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f003 f829 	bl	8012808 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f7b6:	e167      	b.n	800fa88 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f7b8:	4b2d      	ldr	r3, [pc, #180]	; (800f870 <tcp_process+0x590>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f003 0302 	and.w	r3, r3, #2
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 8161 	beq.w	800fa88 <tcp_process+0x7a8>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ca:	1e5a      	subs	r2, r3, #1
 800f7cc:	4b2b      	ldr	r3, [pc, #172]	; (800f87c <tcp_process+0x59c>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	f040 8159 	bne.w	800fa88 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f002 fe10 	bl	80123fc <tcp_rexmit>
      break;
 800f7dc:	e154      	b.n	800fa88 <tcp_process+0x7a8>
 800f7de:	e153      	b.n	800fa88 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fa71 	bl	800fcc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f7e6:	4b2d      	ldr	r3, [pc, #180]	; (800f89c <tcp_process+0x5bc>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	f003 0320 	and.w	r3, r3, #32
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 814c 	beq.w	800fa8c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	8b5b      	ldrh	r3, [r3, #26]
 800f7f8:	f043 0302 	orr.w	r3, r3, #2
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2207      	movs	r2, #7
 800f806:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f808:	e140      	b.n	800fa8c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fa5c 	bl	800fcc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f810:	4b22      	ldr	r3, [pc, #136]	; (800f89c <tcp_process+0x5bc>)
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	f003 0320 	and.w	r3, r3, #32
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d071      	beq.n	800f900 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f81c:	4b14      	ldr	r3, [pc, #80]	; (800f870 <tcp_process+0x590>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 0310 	and.w	r3, r3, #16
 800f824:	2b00      	cmp	r3, #0
 800f826:	d060      	beq.n	800f8ea <tcp_process+0x60a>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f82c:	4b11      	ldr	r3, [pc, #68]	; (800f874 <tcp_process+0x594>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	429a      	cmp	r2, r3
 800f832:	d15a      	bne.n	800f8ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d156      	bne.n	800f8ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8b5b      	ldrh	r3, [r3, #26]
 800f840:	f043 0302 	orr.w	r3, r3, #2
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fe fdbc 	bl	800e3c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f850:	4b13      	ldr	r3, [pc, #76]	; (800f8a0 <tcp_process+0x5c0>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	429a      	cmp	r2, r3
 800f858:	d105      	bne.n	800f866 <tcp_process+0x586>
 800f85a:	4b11      	ldr	r3, [pc, #68]	; (800f8a0 <tcp_process+0x5c0>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	4a0f      	ldr	r2, [pc, #60]	; (800f8a0 <tcp_process+0x5c0>)
 800f862:	6013      	str	r3, [r2, #0]
 800f864:	e02e      	b.n	800f8c4 <tcp_process+0x5e4>
 800f866:	4b0e      	ldr	r3, [pc, #56]	; (800f8a0 <tcp_process+0x5c0>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	617b      	str	r3, [r7, #20]
 800f86c:	e027      	b.n	800f8be <tcp_process+0x5de>
 800f86e:	bf00      	nop
 800f870:	240074ec 	.word	0x240074ec
 800f874:	240074e4 	.word	0x240074e4
 800f878:	240074ea 	.word	0x240074ea
 800f87c:	240074e0 	.word	0x240074e0
 800f880:	240074d0 	.word	0x240074d0
 800f884:	240043b8 	.word	0x240043b8
 800f888:	240043bc 	.word	0x240043bc
 800f88c:	0801912c 	.word	0x0801912c
 800f890:	080193cc 	.word	0x080193cc
 800f894:	08019178 	.word	0x08019178
 800f898:	240074e8 	.word	0x240074e8
 800f89c:	240074ed 	.word	0x240074ed
 800f8a0:	240074b4 	.word	0x240074b4
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d104      	bne.n	800f8b8 <tcp_process+0x5d8>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	60da      	str	r2, [r3, #12]
 800f8b6:	e005      	b.n	800f8c4 <tcp_process+0x5e4>
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	617b      	str	r3, [r7, #20]
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1ef      	bne.n	800f8a4 <tcp_process+0x5c4>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	60da      	str	r2, [r3, #12]
 800f8ca:	4b77      	ldr	r3, [pc, #476]	; (800faa8 <tcp_process+0x7c8>)
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	220a      	movs	r2, #10
 800f8d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f8d6:	4b75      	ldr	r3, [pc, #468]	; (800faac <tcp_process+0x7cc>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	60da      	str	r2, [r3, #12]
 800f8de:	4a73      	ldr	r2, [pc, #460]	; (800faac <tcp_process+0x7cc>)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6013      	str	r3, [r2, #0]
 800f8e4:	f003 f952 	bl	8012b8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f8e8:	e0d2      	b.n	800fa90 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8b5b      	ldrh	r3, [r3, #26]
 800f8ee:	f043 0302 	orr.w	r3, r3, #2
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2208      	movs	r2, #8
 800f8fc:	751a      	strb	r2, [r3, #20]
      break;
 800f8fe:	e0c7      	b.n	800fa90 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f900:	4b6b      	ldr	r3, [pc, #428]	; (800fab0 <tcp_process+0x7d0>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	f003 0310 	and.w	r3, r3, #16
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 80c1 	beq.w	800fa90 <tcp_process+0x7b0>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f912:	4b68      	ldr	r3, [pc, #416]	; (800fab4 <tcp_process+0x7d4>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	f040 80ba 	bne.w	800fa90 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	f040 80b5 	bne.w	800fa90 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2206      	movs	r2, #6
 800f92a:	751a      	strb	r2, [r3, #20]
      break;
 800f92c:	e0b0      	b.n	800fa90 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f9ca 	bl	800fcc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f934:	4b60      	ldr	r3, [pc, #384]	; (800fab8 <tcp_process+0x7d8>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	f003 0320 	and.w	r3, r3, #32
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80a9 	beq.w	800fa94 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f043 0302 	orr.w	r3, r3, #2
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7fe fd39 	bl	800e3c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f956:	4b59      	ldr	r3, [pc, #356]	; (800fabc <tcp_process+0x7dc>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d105      	bne.n	800f96c <tcp_process+0x68c>
 800f960:	4b56      	ldr	r3, [pc, #344]	; (800fabc <tcp_process+0x7dc>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	4a55      	ldr	r2, [pc, #340]	; (800fabc <tcp_process+0x7dc>)
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	e013      	b.n	800f994 <tcp_process+0x6b4>
 800f96c:	4b53      	ldr	r3, [pc, #332]	; (800fabc <tcp_process+0x7dc>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	613b      	str	r3, [r7, #16]
 800f972:	e00c      	b.n	800f98e <tcp_process+0x6ae>
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d104      	bne.n	800f988 <tcp_process+0x6a8>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	68da      	ldr	r2, [r3, #12]
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	60da      	str	r2, [r3, #12]
 800f986:	e005      	b.n	800f994 <tcp_process+0x6b4>
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	613b      	str	r3, [r7, #16]
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1ef      	bne.n	800f974 <tcp_process+0x694>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	60da      	str	r2, [r3, #12]
 800f99a:	4b43      	ldr	r3, [pc, #268]	; (800faa8 <tcp_process+0x7c8>)
 800f99c:	2201      	movs	r2, #1
 800f99e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	220a      	movs	r2, #10
 800f9a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f9a6:	4b41      	ldr	r3, [pc, #260]	; (800faac <tcp_process+0x7cc>)
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	60da      	str	r2, [r3, #12]
 800f9ae:	4a3f      	ldr	r2, [pc, #252]	; (800faac <tcp_process+0x7cc>)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6013      	str	r3, [r2, #0]
 800f9b4:	f003 f8ea 	bl	8012b8c <tcp_timer_needed>
      }
      break;
 800f9b8:	e06c      	b.n	800fa94 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f984 	bl	800fcc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f9c0:	4b3b      	ldr	r3, [pc, #236]	; (800fab0 <tcp_process+0x7d0>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	f003 0310 	and.w	r3, r3, #16
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d065      	beq.n	800fa98 <tcp_process+0x7b8>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9d0:	4b38      	ldr	r3, [pc, #224]	; (800fab4 <tcp_process+0x7d4>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d15f      	bne.n	800fa98 <tcp_process+0x7b8>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d15b      	bne.n	800fa98 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7fe fcf1 	bl	800e3c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f9e6:	4b35      	ldr	r3, [pc, #212]	; (800fabc <tcp_process+0x7dc>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d105      	bne.n	800f9fc <tcp_process+0x71c>
 800f9f0:	4b32      	ldr	r3, [pc, #200]	; (800fabc <tcp_process+0x7dc>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	4a31      	ldr	r2, [pc, #196]	; (800fabc <tcp_process+0x7dc>)
 800f9f8:	6013      	str	r3, [r2, #0]
 800f9fa:	e013      	b.n	800fa24 <tcp_process+0x744>
 800f9fc:	4b2f      	ldr	r3, [pc, #188]	; (800fabc <tcp_process+0x7dc>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	e00c      	b.n	800fa1e <tcp_process+0x73e>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d104      	bne.n	800fa18 <tcp_process+0x738>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68da      	ldr	r2, [r3, #12]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	60da      	str	r2, [r3, #12]
 800fa16:	e005      	b.n	800fa24 <tcp_process+0x744>
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	60fb      	str	r3, [r7, #12]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1ef      	bne.n	800fa04 <tcp_process+0x724>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	60da      	str	r2, [r3, #12]
 800fa2a:	4b1f      	ldr	r3, [pc, #124]	; (800faa8 <tcp_process+0x7c8>)
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	220a      	movs	r2, #10
 800fa34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fa36:	4b1d      	ldr	r3, [pc, #116]	; (800faac <tcp_process+0x7cc>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	60da      	str	r2, [r3, #12]
 800fa3e:	4a1b      	ldr	r2, [pc, #108]	; (800faac <tcp_process+0x7cc>)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6013      	str	r3, [r2, #0]
 800fa44:	f003 f8a2 	bl	8012b8c <tcp_timer_needed>
      }
      break;
 800fa48:	e026      	b.n	800fa98 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f93c 	bl	800fcc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fa50:	4b17      	ldr	r3, [pc, #92]	; (800fab0 <tcp_process+0x7d0>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01f      	beq.n	800fa9c <tcp_process+0x7bc>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa60:	4b14      	ldr	r3, [pc, #80]	; (800fab4 <tcp_process+0x7d4>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d119      	bne.n	800fa9c <tcp_process+0x7bc>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d115      	bne.n	800fa9c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fa70:	4b11      	ldr	r3, [pc, #68]	; (800fab8 <tcp_process+0x7d8>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	f043 0310 	orr.w	r3, r3, #16
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <tcp_process+0x7d8>)
 800fa7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fa7e:	e00d      	b.n	800fa9c <tcp_process+0x7bc>
    default:
      break;
 800fa80:	bf00      	nop
 800fa82:	e00c      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa84:	bf00      	nop
 800fa86:	e00a      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa88:	bf00      	nop
 800fa8a:	e008      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa8c:	bf00      	nop
 800fa8e:	e006      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa90:	bf00      	nop
 800fa92:	e004      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa94:	bf00      	nop
 800fa96:	e002      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa98:	bf00      	nop
 800fa9a:	e000      	b.n	800fa9e <tcp_process+0x7be>
      break;
 800fa9c:	bf00      	nop
  }
  return ERR_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3724      	adds	r7, #36	; 0x24
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}
 800faa8:	240074bc 	.word	0x240074bc
 800faac:	240074b8 	.word	0x240074b8
 800fab0:	240074ec 	.word	0x240074ec
 800fab4:	240074e4 	.word	0x240074e4
 800fab8:	240074ed 	.word	0x240074ed
 800fabc:	240074b4 	.word	0x240074b4

0800fac0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fac0:	b590      	push	{r4, r7, lr}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <tcp_oos_insert_segment+0x1e>
 800fad0:	4b3b      	ldr	r3, [pc, #236]	; (800fbc0 <tcp_oos_insert_segment+0x100>)
 800fad2:	f240 421f 	movw	r2, #1055	; 0x41f
 800fad6:	493b      	ldr	r1, [pc, #236]	; (800fbc4 <tcp_oos_insert_segment+0x104>)
 800fad8:	483b      	ldr	r0, [pc, #236]	; (800fbc8 <tcp_oos_insert_segment+0x108>)
 800fada:	f006 fb0d 	bl	80160f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	899b      	ldrh	r3, [r3, #12]
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fb f838 	bl	800ab5c <lwip_htons>
 800faec:	4603      	mov	r3, r0
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	f003 0301 	and.w	r3, r3, #1
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d028      	beq.n	800fb4a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800faf8:	6838      	ldr	r0, [r7, #0]
 800fafa:	f7fe f995 	bl	800de28 <tcp_segs_free>
    next = NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	603b      	str	r3, [r7, #0]
 800fb02:	e056      	b.n	800fbb2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	899b      	ldrh	r3, [r3, #12]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fb f825 	bl	800ab5c <lwip_htons>
 800fb12:	4603      	mov	r3, r0
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	f003 0301 	and.w	r3, r3, #1
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00d      	beq.n	800fb3a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	899b      	ldrh	r3, [r3, #12]
 800fb24:	b29c      	uxth	r4, r3
 800fb26:	2001      	movs	r0, #1
 800fb28:	f7fb f818 	bl	800ab5c <lwip_htons>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	4322      	orrs	r2, r4
 800fb36:	b292      	uxth	r2, r2
 800fb38:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7fe f984 	bl	800de52 <tcp_seg_free>
    while (next &&
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00e      	beq.n	800fb6e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	891b      	ldrh	r3, [r3, #8]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b1d      	ldr	r3, [pc, #116]	; (800fbcc <tcp_oos_insert_segment+0x10c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	441a      	add	r2, r3
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	8909      	ldrh	r1, [r1, #8]
 800fb66:	440b      	add	r3, r1
 800fb68:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	daca      	bge.n	800fb04 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d01e      	beq.n	800fbb2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	891b      	ldrh	r3, [r3, #8]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b14      	ldr	r3, [pc, #80]	; (800fbcc <tcp_oos_insert_segment+0x10c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	441a      	add	r2, r3
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	dd12      	ble.n	800fbb2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	4b0d      	ldr	r3, [pc, #52]	; (800fbcc <tcp_oos_insert_segment+0x10c>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	1ad3      	subs	r3, r2, r3
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	891b      	ldrh	r3, [r3, #8]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f7fc faf9 	bl	800c1a4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	601a      	str	r2, [r3, #0]
}
 800fbb8:	bf00      	nop
 800fbba:	3714      	adds	r7, #20
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd90      	pop	{r4, r7, pc}
 800fbc0:	0801912c 	.word	0x0801912c
 800fbc4:	080193ec 	.word	0x080193ec
 800fbc8:	08019178 	.word	0x08019178
 800fbcc:	240074e0 	.word	0x240074e0

0800fbd0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fbd0:	b5b0      	push	{r4, r5, r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fbde:	e03e      	b.n	800fc5e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fc fcec 	bl	800c5cc <pbuf_clen>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbfe:	8a7a      	ldrh	r2, [r7, #18]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d906      	bls.n	800fc12 <tcp_free_acked_segments+0x42>
 800fc04:	4b2a      	ldr	r3, [pc, #168]	; (800fcb0 <tcp_free_acked_segments+0xe0>)
 800fc06:	f240 4257 	movw	r2, #1111	; 0x457
 800fc0a:	492a      	ldr	r1, [pc, #168]	; (800fcb4 <tcp_free_acked_segments+0xe4>)
 800fc0c:	482a      	ldr	r0, [pc, #168]	; (800fcb8 <tcp_free_acked_segments+0xe8>)
 800fc0e:	f006 fa73 	bl	80160f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fc18:	8a7b      	ldrh	r3, [r7, #18]
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	891a      	ldrh	r2, [r3, #8]
 800fc28:	4b24      	ldr	r3, [pc, #144]	; (800fcbc <tcp_free_acked_segments+0xec>)
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	4b22      	ldr	r3, [pc, #136]	; (800fcbc <tcp_free_acked_segments+0xec>)
 800fc32:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fc34:	6978      	ldr	r0, [r7, #20]
 800fc36:	f7fe f90c 	bl	800de52 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00c      	beq.n	800fc5e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d109      	bne.n	800fc5e <tcp_free_acked_segments+0x8e>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d106      	bne.n	800fc5e <tcp_free_acked_segments+0x8e>
 800fc50:	4b17      	ldr	r3, [pc, #92]	; (800fcb0 <tcp_free_acked_segments+0xe0>)
 800fc52:	f240 4261 	movw	r2, #1121	; 0x461
 800fc56:	491a      	ldr	r1, [pc, #104]	; (800fcc0 <tcp_free_acked_segments+0xf0>)
 800fc58:	4817      	ldr	r0, [pc, #92]	; (800fcb8 <tcp_free_acked_segments+0xe8>)
 800fc5a:	f006 fa4d 	bl	80160f8 <iprintf>
  while (seg_list != NULL &&
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d020      	beq.n	800fca6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fa ff8b 	bl	800ab86 <lwip_htonl>
 800fc70:	4604      	mov	r4, r0
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	891b      	ldrh	r3, [r3, #8]
 800fc76:	461d      	mov	r5, r3
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	899b      	ldrh	r3, [r3, #12]
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fa ff6b 	bl	800ab5c <lwip_htons>
 800fc86:	4603      	mov	r3, r0
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <tcp_free_acked_segments+0xc6>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <tcp_free_acked_segments+0xc8>
 800fc96:	2300      	movs	r3, #0
 800fc98:	442b      	add	r3, r5
 800fc9a:	18e2      	adds	r2, r4, r3
 800fc9c:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <tcp_free_acked_segments+0xf4>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dd9c      	ble.n	800fbe0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fca6:	68bb      	ldr	r3, [r7, #8]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3718      	adds	r7, #24
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bdb0      	pop	{r4, r5, r7, pc}
 800fcb0:	0801912c 	.word	0x0801912c
 800fcb4:	08019414 	.word	0x08019414
 800fcb8:	08019178 	.word	0x08019178
 800fcbc:	240074e8 	.word	0x240074e8
 800fcc0:	0801943c 	.word	0x0801943c
 800fcc4:	240074e4 	.word	0x240074e4

0800fcc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fcc8:	b5b0      	push	{r4, r5, r7, lr}
 800fcca:	b094      	sub	sp, #80	; 0x50
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <tcp_receive+0x20>
 800fcda:	4b91      	ldr	r3, [pc, #580]	; (800ff20 <tcp_receive+0x258>)
 800fcdc:	f240 427b 	movw	r2, #1147	; 0x47b
 800fce0:	4990      	ldr	r1, [pc, #576]	; (800ff24 <tcp_receive+0x25c>)
 800fce2:	4891      	ldr	r0, [pc, #580]	; (800ff28 <tcp_receive+0x260>)
 800fce4:	f006 fa08 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7d1b      	ldrb	r3, [r3, #20]
 800fcec:	2b03      	cmp	r3, #3
 800fcee:	d806      	bhi.n	800fcfe <tcp_receive+0x36>
 800fcf0:	4b8b      	ldr	r3, [pc, #556]	; (800ff20 <tcp_receive+0x258>)
 800fcf2:	f240 427c 	movw	r2, #1148	; 0x47c
 800fcf6:	498d      	ldr	r1, [pc, #564]	; (800ff2c <tcp_receive+0x264>)
 800fcf8:	488b      	ldr	r0, [pc, #556]	; (800ff28 <tcp_receive+0x260>)
 800fcfa:	f006 f9fd 	bl	80160f8 <iprintf>

  if (flags & TCP_ACK) {
 800fcfe:	4b8c      	ldr	r3, [pc, #560]	; (800ff30 <tcp_receive+0x268>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0310 	and.w	r3, r3, #16
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 8264 	beq.w	80101d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd12:	461a      	mov	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd18:	4413      	add	r3, r2
 800fd1a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd20:	4b84      	ldr	r3, [pc, #528]	; (800ff34 <tcp_receive+0x26c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	db1b      	blt.n	800fd62 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd2e:	4b81      	ldr	r3, [pc, #516]	; (800ff34 <tcp_receive+0x26c>)
 800fd30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d106      	bne.n	800fd44 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd3a:	4b7f      	ldr	r3, [pc, #508]	; (800ff38 <tcp_receive+0x270>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	db0e      	blt.n	800fd62 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd48:	4b7b      	ldr	r3, [pc, #492]	; (800ff38 <tcp_receive+0x270>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d125      	bne.n	800fd9c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd50:	4b7a      	ldr	r3, [pc, #488]	; (800ff3c <tcp_receive+0x274>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	89db      	ldrh	r3, [r3, #14]
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d91c      	bls.n	800fd9c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fd62:	4b76      	ldr	r3, [pc, #472]	; (800ff3c <tcp_receive+0x274>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	89db      	ldrh	r3, [r3, #14]
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d205      	bcs.n	800fd8c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fd8c:	4b69      	ldr	r3, [pc, #420]	; (800ff34 <tcp_receive+0x26c>)
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fd94:	4b68      	ldr	r3, [pc, #416]	; (800ff38 <tcp_receive+0x270>)
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fd9c:	4b66      	ldr	r3, [pc, #408]	; (800ff38 <tcp_receive+0x270>)
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	dc58      	bgt.n	800fe5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fdaa:	4b65      	ldr	r3, [pc, #404]	; (800ff40 <tcp_receive+0x278>)
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d14b      	bne.n	800fe4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fdbc:	4413      	add	r3, r2
 800fdbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d142      	bne.n	800fe4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	db3d      	blt.n	800fe4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdd2:	4b59      	ldr	r3, [pc, #356]	; (800ff38 <tcp_receive+0x270>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d137      	bne.n	800fe4a <tcp_receive+0x182>
              found_dupack = 1;
 800fdda:	2301      	movs	r3, #1
 800fddc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fde4:	2bff      	cmp	r3, #255	; 0xff
 800fde6:	d007      	beq.n	800fdf8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d91b      	bls.n	800fe3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe0c:	4413      	add	r3, r2
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d30a      	bcc.n	800fe30 <tcp_receive+0x168>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe24:	4413      	add	r3, r2
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe2e:	e004      	b.n	800fe3a <tcp_receive+0x172>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	d902      	bls.n	800fe4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f002 fb45 	bl	80124d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fe4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f040 8161 	bne.w	8010114 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe5a:	e15b      	b.n	8010114 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe5c:	4b36      	ldr	r3, [pc, #216]	; (800ff38 <tcp_receive+0x270>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	3b01      	subs	r3, #1
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f2c0 814e 	blt.w	801010a <tcp_receive+0x442>
 800fe6e:	4b32      	ldr	r3, [pc, #200]	; (800ff38 <tcp_receive+0x270>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f300 8146 	bgt.w	801010a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	8b5b      	ldrh	r3, [r3, #26]
 800fe82:	f003 0304 	and.w	r3, r3, #4
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d010      	beq.n	800feac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8b5b      	ldrh	r3, [r3, #26]
 800fe8e:	f023 0304 	bic.w	r3, r3, #4
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800feba:	10db      	asrs	r3, r3, #3
 800febc:	b21b      	sxth	r3, r3
 800febe:	b29a      	uxth	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	4413      	add	r3, r2
 800feca:	b29b      	uxth	r3, r3
 800fecc:	b21a      	sxth	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fed4:	4b18      	ldr	r3, [pc, #96]	; (800ff38 <tcp_receive+0x270>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	b29a      	uxth	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fede:	b29b      	uxth	r3, r3
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2200      	movs	r2, #0
 800fee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800feec:	4b12      	ldr	r3, [pc, #72]	; (800ff38 <tcp_receive+0x270>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	7d1b      	ldrb	r3, [r3, #20]
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	f240 8097 	bls.w	801002c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d245      	bcs.n	800ff9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	8b5b      	ldrh	r3, [r3, #26]
 800ff12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d014      	beq.n	800ff44 <tcp_receive+0x27c>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e013      	b.n	800ff46 <tcp_receive+0x27e>
 800ff1e:	bf00      	nop
 800ff20:	0801912c 	.word	0x0801912c
 800ff24:	0801945c 	.word	0x0801945c
 800ff28:	08019178 	.word	0x08019178
 800ff2c:	08019478 	.word	0x08019478
 800ff30:	240074ec 	.word	0x240074ec
 800ff34:	240074e0 	.word	0x240074e0
 800ff38:	240074e4 	.word	0x240074e4
 800ff3c:	240074d0 	.word	0x240074d0
 800ff40:	240074ea 	.word	0x240074ea
 800ff44:	2302      	movs	r3, #2
 800ff46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ff4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff54:	fb12 f303 	smulbb	r3, r2, r3
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	bf28      	it	cs
 800ff60:	4613      	movcs	r3, r2
 800ff62:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff6c:	4413      	add	r3, r2
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d309      	bcc.n	800ff8e <tcp_receive+0x2c6>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff82:	4413      	add	r3, r2
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff8c:	e04e      	b.n	801002c <tcp_receive+0x364>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff98:	e048      	b.n	801002c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffa2:	4413      	add	r3, r2
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d309      	bcc.n	800ffc4 <tcp_receive+0x2fc>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffb8:	4413      	add	r3, r2
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ffc2:	e004      	b.n	800ffce <tcp_receive+0x306>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d326      	bcc.n	801002c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fffe:	4413      	add	r3, r2
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010008:	429a      	cmp	r2, r3
 801000a:	d30a      	bcc.n	8010022 <tcp_receive+0x35a>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010016:	4413      	add	r3, r2
 8010018:	b29a      	uxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010020:	e004      	b.n	801002c <tcp_receive+0x364>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010028:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010034:	4a98      	ldr	r2, [pc, #608]	; (8010298 <tcp_receive+0x5d0>)
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f7ff fdca 	bl	800fbd0 <tcp_free_acked_segments>
 801003c:	4602      	mov	r2, r0
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801004a:	4a94      	ldr	r2, [pc, #592]	; (801029c <tcp_receive+0x5d4>)
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7ff fdbf 	bl	800fbd0 <tcp_free_acked_segments>
 8010052:	4602      	mov	r2, r0
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801005c:	2b00      	cmp	r3, #0
 801005e:	d104      	bne.n	801006a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010066:	861a      	strh	r2, [r3, #48]	; 0x30
 8010068:	e002      	b.n	8010070 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801007a:	2b00      	cmp	r3, #0
 801007c:	d103      	bne.n	8010086 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801008c:	4b84      	ldr	r3, [pc, #528]	; (80102a0 <tcp_receive+0x5d8>)
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	4413      	add	r3, r2
 8010092:	b29a      	uxth	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8b5b      	ldrh	r3, [r3, #26]
 801009e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d035      	beq.n	8010112 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d118      	bne.n	80100e0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00c      	beq.n	80100d0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fa fd5f 	bl	800ab86 <lwip_htonl>
 80100c8:	4603      	mov	r3, r0
 80100ca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	dc20      	bgt.n	8010112 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	8b5b      	ldrh	r3, [r3, #26]
 80100d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100d8:	b29a      	uxth	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100de:	e018      	b.n	8010112 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fa fd4a 	bl	800ab86 <lwip_htonl>
 80100f2:	4603      	mov	r3, r0
 80100f4:	1ae3      	subs	r3, r4, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	dc0b      	bgt.n	8010112 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	8b5b      	ldrh	r3, [r3, #26]
 80100fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010108:	e003      	b.n	8010112 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f002 fbce 	bl	80128ac <tcp_send_empty_ack>
 8010110:	e000      	b.n	8010114 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010112:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010118:	2b00      	cmp	r3, #0
 801011a:	d05b      	beq.n	80101d4 <tcp_receive+0x50c>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010120:	4b60      	ldr	r3, [pc, #384]	; (80102a4 <tcp_receive+0x5dc>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	da54      	bge.n	80101d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801012a:	4b5f      	ldr	r3, [pc, #380]	; (80102a8 <tcp_receive+0x5e0>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	b29a      	uxth	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010134:	b29b      	uxth	r3, r3
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	b29b      	uxth	r3, r3
 801013a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801013e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010148:	10db      	asrs	r3, r3, #3
 801014a:	b21b      	sxth	r3, r3
 801014c:	b29b      	uxth	r3, r3
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	b29b      	uxth	r3, r3
 8010152:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801015c:	b29a      	uxth	r2, r3
 801015e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010162:	4413      	add	r3, r2
 8010164:	b29b      	uxth	r3, r3
 8010166:	b21a      	sxth	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801016c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010170:	2b00      	cmp	r3, #0
 8010172:	da05      	bge.n	8010180 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010178:	425b      	negs	r3, r3
 801017a:	b29b      	uxth	r3, r3
 801017c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010180:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801018a:	109b      	asrs	r3, r3, #2
 801018c:	b21b      	sxth	r3, r3
 801018e:	b29b      	uxth	r3, r3
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	b29b      	uxth	r3, r3
 8010194:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801019e:	b29a      	uxth	r2, r3
 80101a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80101a4:	4413      	add	r3, r2
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	b21a      	sxth	r2, r3
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101b4:	10db      	asrs	r3, r3, #3
 80101b6:	b21b      	sxth	r3, r3
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	4413      	add	r3, r2
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	b21a      	sxth	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80101d4:	4b35      	ldr	r3, [pc, #212]	; (80102ac <tcp_receive+0x5e4>)
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f000 84e2 	beq.w	8010ba2 <tcp_receive+0xeda>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	7d1b      	ldrb	r3, [r3, #20]
 80101e2:	2b06      	cmp	r3, #6
 80101e4:	f200 84dd 	bhi.w	8010ba2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ec:	4b30      	ldr	r3, [pc, #192]	; (80102b0 <tcp_receive+0x5e8>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	3b01      	subs	r3, #1
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f2c0 808f 	blt.w	8010318 <tcp_receive+0x650>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101fe:	4b2b      	ldr	r3, [pc, #172]	; (80102ac <tcp_receive+0x5e4>)
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	4619      	mov	r1, r3
 8010204:	4b2a      	ldr	r3, [pc, #168]	; (80102b0 <tcp_receive+0x5e8>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	440b      	add	r3, r1
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	3301      	adds	r3, #1
 801020e:	2b00      	cmp	r3, #0
 8010210:	f300 8082 	bgt.w	8010318 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010214:	4b27      	ldr	r3, [pc, #156]	; (80102b4 <tcp_receive+0x5ec>)
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801021e:	4b24      	ldr	r3, [pc, #144]	; (80102b0 <tcp_receive+0x5e8>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010226:	4b23      	ldr	r3, [pc, #140]	; (80102b4 <tcp_receive+0x5ec>)
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <tcp_receive+0x574>
 801022e:	4b22      	ldr	r3, [pc, #136]	; (80102b8 <tcp_receive+0x5f0>)
 8010230:	f240 5294 	movw	r2, #1428	; 0x594
 8010234:	4921      	ldr	r1, [pc, #132]	; (80102bc <tcp_receive+0x5f4>)
 8010236:	4822      	ldr	r0, [pc, #136]	; (80102c0 <tcp_receive+0x5f8>)
 8010238:	f005 ff5e 	bl	80160f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010242:	4293      	cmp	r3, r2
 8010244:	d906      	bls.n	8010254 <tcp_receive+0x58c>
 8010246:	4b1c      	ldr	r3, [pc, #112]	; (80102b8 <tcp_receive+0x5f0>)
 8010248:	f240 5295 	movw	r2, #1429	; 0x595
 801024c:	491d      	ldr	r1, [pc, #116]	; (80102c4 <tcp_receive+0x5fc>)
 801024e:	481c      	ldr	r0, [pc, #112]	; (80102c0 <tcp_receive+0x5f8>)
 8010250:	f005 ff52 	bl	80160f8 <iprintf>
      off = (u16_t)off32;
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801025a:	4b16      	ldr	r3, [pc, #88]	; (80102b4 <tcp_receive+0x5ec>)
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	891b      	ldrh	r3, [r3, #8]
 8010260:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010264:	429a      	cmp	r2, r3
 8010266:	d906      	bls.n	8010276 <tcp_receive+0x5ae>
 8010268:	4b13      	ldr	r3, [pc, #76]	; (80102b8 <tcp_receive+0x5f0>)
 801026a:	f240 5297 	movw	r2, #1431	; 0x597
 801026e:	4916      	ldr	r1, [pc, #88]	; (80102c8 <tcp_receive+0x600>)
 8010270:	4813      	ldr	r0, [pc, #76]	; (80102c0 <tcp_receive+0x5f8>)
 8010272:	f005 ff41 	bl	80160f8 <iprintf>
      inseg.len -= off;
 8010276:	4b0f      	ldr	r3, [pc, #60]	; (80102b4 <tcp_receive+0x5ec>)
 8010278:	891a      	ldrh	r2, [r3, #8]
 801027a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	b29a      	uxth	r2, r3
 8010282:	4b0c      	ldr	r3, [pc, #48]	; (80102b4 <tcp_receive+0x5ec>)
 8010284:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010286:	4b0b      	ldr	r3, [pc, #44]	; (80102b4 <tcp_receive+0x5ec>)
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	891a      	ldrh	r2, [r3, #8]
 801028c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010294:	e02a      	b.n	80102ec <tcp_receive+0x624>
 8010296:	bf00      	nop
 8010298:	08019494 	.word	0x08019494
 801029c:	0801949c 	.word	0x0801949c
 80102a0:	240074e8 	.word	0x240074e8
 80102a4:	240074e4 	.word	0x240074e4
 80102a8:	240074a8 	.word	0x240074a8
 80102ac:	240074ea 	.word	0x240074ea
 80102b0:	240074e0 	.word	0x240074e0
 80102b4:	240074c0 	.word	0x240074c0
 80102b8:	0801912c 	.word	0x0801912c
 80102bc:	080194a4 	.word	0x080194a4
 80102c0:	08019178 	.word	0x08019178
 80102c4:	080194b4 	.word	0x080194b4
 80102c8:	080194c4 	.word	0x080194c4
        off -= p->len;
 80102cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ce:	895b      	ldrh	r3, [r3, #10]
 80102d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80102da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80102de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80102e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e2:	2200      	movs	r2, #0
 80102e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80102e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80102ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ee:	895b      	ldrh	r3, [r3, #10]
 80102f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d8e9      	bhi.n	80102cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80102f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102fc:	4619      	mov	r1, r3
 80102fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010300:	f7fc f850 	bl	800c3a4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010308:	4a91      	ldr	r2, [pc, #580]	; (8010550 <tcp_receive+0x888>)
 801030a:	6013      	str	r3, [r2, #0]
 801030c:	4b91      	ldr	r3, [pc, #580]	; (8010554 <tcp_receive+0x88c>)
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	4a8f      	ldr	r2, [pc, #572]	; (8010550 <tcp_receive+0x888>)
 8010312:	6812      	ldr	r2, [r2, #0]
 8010314:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010316:	e00d      	b.n	8010334 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010318:	4b8d      	ldr	r3, [pc, #564]	; (8010550 <tcp_receive+0x888>)
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010320:	1ad3      	subs	r3, r2, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	da06      	bge.n	8010334 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8b5b      	ldrh	r3, [r3, #26]
 801032a:	f043 0302 	orr.w	r3, r3, #2
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010334:	4b86      	ldr	r3, [pc, #536]	; (8010550 <tcp_receive+0x888>)
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	f2c0 842a 	blt.w	8010b98 <tcp_receive+0xed0>
 8010344:	4b82      	ldr	r3, [pc, #520]	; (8010550 <tcp_receive+0x888>)
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034c:	6879      	ldr	r1, [r7, #4]
 801034e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010350:	440b      	add	r3, r1
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	3301      	adds	r3, #1
 8010356:	2b00      	cmp	r3, #0
 8010358:	f300 841e 	bgt.w	8010b98 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010360:	4b7b      	ldr	r3, [pc, #492]	; (8010550 <tcp_receive+0x888>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	429a      	cmp	r2, r3
 8010366:	f040 829a 	bne.w	801089e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801036a:	4b7a      	ldr	r3, [pc, #488]	; (8010554 <tcp_receive+0x88c>)
 801036c:	891c      	ldrh	r4, [r3, #8]
 801036e:	4b79      	ldr	r3, [pc, #484]	; (8010554 <tcp_receive+0x88c>)
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	899b      	ldrh	r3, [r3, #12]
 8010374:	b29b      	uxth	r3, r3
 8010376:	4618      	mov	r0, r3
 8010378:	f7fa fbf0 	bl	800ab5c <lwip_htons>
 801037c:	4603      	mov	r3, r0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	f003 0303 	and.w	r3, r3, #3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <tcp_receive+0x6c4>
 8010388:	2301      	movs	r3, #1
 801038a:	e000      	b.n	801038e <tcp_receive+0x6c6>
 801038c:	2300      	movs	r3, #0
 801038e:	4423      	add	r3, r4
 8010390:	b29a      	uxth	r2, r3
 8010392:	4b71      	ldr	r3, [pc, #452]	; (8010558 <tcp_receive+0x890>)
 8010394:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801039a:	4b6f      	ldr	r3, [pc, #444]	; (8010558 <tcp_receive+0x890>)
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d275      	bcs.n	801048e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80103a2:	4b6c      	ldr	r3, [pc, #432]	; (8010554 <tcp_receive+0x88c>)
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	899b      	ldrh	r3, [r3, #12]
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fa fbd6 	bl	800ab5c <lwip_htons>
 80103b0:	4603      	mov	r3, r0
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d01f      	beq.n	80103fc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80103bc:	4b65      	ldr	r3, [pc, #404]	; (8010554 <tcp_receive+0x88c>)
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	b21b      	sxth	r3, r3
 80103c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80103ca:	b21c      	sxth	r4, r3
 80103cc:	4b61      	ldr	r3, [pc, #388]	; (8010554 <tcp_receive+0x88c>)
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	899b      	ldrh	r3, [r3, #12]
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fa fbc1 	bl	800ab5c <lwip_htons>
 80103da:	4603      	mov	r3, r0
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	b29b      	uxth	r3, r3
 80103e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fa fbb8 	bl	800ab5c <lwip_htons>
 80103ec:	4603      	mov	r3, r0
 80103ee:	b21b      	sxth	r3, r3
 80103f0:	4323      	orrs	r3, r4
 80103f2:	b21a      	sxth	r2, r3
 80103f4:	4b57      	ldr	r3, [pc, #348]	; (8010554 <tcp_receive+0x88c>)
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	b292      	uxth	r2, r2
 80103fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010400:	4b54      	ldr	r3, [pc, #336]	; (8010554 <tcp_receive+0x88c>)
 8010402:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010404:	4b53      	ldr	r3, [pc, #332]	; (8010554 <tcp_receive+0x88c>)
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7fa fba5 	bl	800ab5c <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f003 0302 	and.w	r3, r3, #2
 801041a:	2b00      	cmp	r3, #0
 801041c:	d005      	beq.n	801042a <tcp_receive+0x762>
            inseg.len -= 1;
 801041e:	4b4d      	ldr	r3, [pc, #308]	; (8010554 <tcp_receive+0x88c>)
 8010420:	891b      	ldrh	r3, [r3, #8]
 8010422:	3b01      	subs	r3, #1
 8010424:	b29a      	uxth	r2, r3
 8010426:	4b4b      	ldr	r3, [pc, #300]	; (8010554 <tcp_receive+0x88c>)
 8010428:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801042a:	4b4a      	ldr	r3, [pc, #296]	; (8010554 <tcp_receive+0x88c>)
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	4a49      	ldr	r2, [pc, #292]	; (8010554 <tcp_receive+0x88c>)
 8010430:	8912      	ldrh	r2, [r2, #8]
 8010432:	4611      	mov	r1, r2
 8010434:	4618      	mov	r0, r3
 8010436:	f7fb feb5 	bl	800c1a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801043a:	4b46      	ldr	r3, [pc, #280]	; (8010554 <tcp_receive+0x88c>)
 801043c:	891c      	ldrh	r4, [r3, #8]
 801043e:	4b45      	ldr	r3, [pc, #276]	; (8010554 <tcp_receive+0x88c>)
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	899b      	ldrh	r3, [r3, #12]
 8010444:	b29b      	uxth	r3, r3
 8010446:	4618      	mov	r0, r3
 8010448:	f7fa fb88 	bl	800ab5c <lwip_htons>
 801044c:	4603      	mov	r3, r0
 801044e:	b2db      	uxtb	r3, r3
 8010450:	f003 0303 	and.w	r3, r3, #3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <tcp_receive+0x794>
 8010458:	2301      	movs	r3, #1
 801045a:	e000      	b.n	801045e <tcp_receive+0x796>
 801045c:	2300      	movs	r3, #0
 801045e:	4423      	add	r3, r4
 8010460:	b29a      	uxth	r2, r3
 8010462:	4b3d      	ldr	r3, [pc, #244]	; (8010558 <tcp_receive+0x890>)
 8010464:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010466:	4b3c      	ldr	r3, [pc, #240]	; (8010558 <tcp_receive+0x890>)
 8010468:	881b      	ldrh	r3, [r3, #0]
 801046a:	461a      	mov	r2, r3
 801046c:	4b38      	ldr	r3, [pc, #224]	; (8010550 <tcp_receive+0x888>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	441a      	add	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010476:	6879      	ldr	r1, [r7, #4]
 8010478:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801047a:	440b      	add	r3, r1
 801047c:	429a      	cmp	r2, r3
 801047e:	d006      	beq.n	801048e <tcp_receive+0x7c6>
 8010480:	4b36      	ldr	r3, [pc, #216]	; (801055c <tcp_receive+0x894>)
 8010482:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010486:	4936      	ldr	r1, [pc, #216]	; (8010560 <tcp_receive+0x898>)
 8010488:	4836      	ldr	r0, [pc, #216]	; (8010564 <tcp_receive+0x89c>)
 801048a:	f005 fe35 	bl	80160f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 80e7 	beq.w	8010666 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010498:	4b2e      	ldr	r3, [pc, #184]	; (8010554 <tcp_receive+0x88c>)
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	899b      	ldrh	r3, [r3, #12]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fa fb5b 	bl	800ab5c <lwip_htons>
 80104a6:	4603      	mov	r3, r0
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d010      	beq.n	80104d4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80104b2:	e00a      	b.n	80104ca <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104b8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f7fd fcc4 	bl	800de52 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1f0      	bne.n	80104b4 <tcp_receive+0x7ec>
 80104d2:	e0c8      	b.n	8010666 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80104da:	e052      	b.n	8010582 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80104dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	899b      	ldrh	r3, [r3, #12]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fa fb39 	bl	800ab5c <lwip_htons>
 80104ea:	4603      	mov	r3, r0
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	f003 0301 	and.w	r3, r3, #1
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d03d      	beq.n	8010572 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80104f6:	4b17      	ldr	r3, [pc, #92]	; (8010554 <tcp_receive+0x88c>)
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	899b      	ldrh	r3, [r3, #12]
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fa fb2c 	bl	800ab5c <lwip_htons>
 8010504:	4603      	mov	r3, r0
 8010506:	b2db      	uxtb	r3, r3
 8010508:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801050c:	2b00      	cmp	r3, #0
 801050e:	d130      	bne.n	8010572 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010510:	4b10      	ldr	r3, [pc, #64]	; (8010554 <tcp_receive+0x88c>)
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	899b      	ldrh	r3, [r3, #12]
 8010516:	b29c      	uxth	r4, r3
 8010518:	2001      	movs	r0, #1
 801051a:	f7fa fb1f 	bl	800ab5c <lwip_htons>
 801051e:	4603      	mov	r3, r0
 8010520:	461a      	mov	r2, r3
 8010522:	4b0c      	ldr	r3, [pc, #48]	; (8010554 <tcp_receive+0x88c>)
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	4322      	orrs	r2, r4
 8010528:	b292      	uxth	r2, r2
 801052a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801052c:	4b09      	ldr	r3, [pc, #36]	; (8010554 <tcp_receive+0x88c>)
 801052e:	891c      	ldrh	r4, [r3, #8]
 8010530:	4b08      	ldr	r3, [pc, #32]	; (8010554 <tcp_receive+0x88c>)
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	899b      	ldrh	r3, [r3, #12]
 8010536:	b29b      	uxth	r3, r3
 8010538:	4618      	mov	r0, r3
 801053a:	f7fa fb0f 	bl	800ab5c <lwip_htons>
 801053e:	4603      	mov	r3, r0
 8010540:	b2db      	uxtb	r3, r3
 8010542:	f003 0303 	and.w	r3, r3, #3
 8010546:	2b00      	cmp	r3, #0
 8010548:	d00e      	beq.n	8010568 <tcp_receive+0x8a0>
 801054a:	2301      	movs	r3, #1
 801054c:	e00d      	b.n	801056a <tcp_receive+0x8a2>
 801054e:	bf00      	nop
 8010550:	240074e0 	.word	0x240074e0
 8010554:	240074c0 	.word	0x240074c0
 8010558:	240074ea 	.word	0x240074ea
 801055c:	0801912c 	.word	0x0801912c
 8010560:	080194d4 	.word	0x080194d4
 8010564:	08019178 	.word	0x08019178
 8010568:	2300      	movs	r3, #0
 801056a:	4423      	add	r3, r4
 801056c:	b29a      	uxth	r2, r3
 801056e:	4b98      	ldr	r3, [pc, #608]	; (80107d0 <tcp_receive+0xb08>)
 8010570:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010574:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801057c:	6938      	ldr	r0, [r7, #16]
 801057e:	f7fd fc68 	bl	800de52 <tcp_seg_free>
            while (next &&
 8010582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00e      	beq.n	80105a6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010588:	4b91      	ldr	r3, [pc, #580]	; (80107d0 <tcp_receive+0xb08>)
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	461a      	mov	r2, r3
 801058e:	4b91      	ldr	r3, [pc, #580]	; (80107d4 <tcp_receive+0xb0c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	441a      	add	r2, r3
 8010594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801059c:	8909      	ldrh	r1, [r1, #8]
 801059e:	440b      	add	r3, r1
 80105a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	da9a      	bge.n	80104dc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80105a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d059      	beq.n	8010660 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80105ac:	4b88      	ldr	r3, [pc, #544]	; (80107d0 <tcp_receive+0xb08>)
 80105ae:	881b      	ldrh	r3, [r3, #0]
 80105b0:	461a      	mov	r2, r3
 80105b2:	4b88      	ldr	r3, [pc, #544]	; (80107d4 <tcp_receive+0xb0c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	441a      	add	r2, r3
 80105b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	1ad3      	subs	r3, r2, r3
            if (next &&
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	dd4d      	ble.n	8010660 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80105c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	4b81      	ldr	r3, [pc, #516]	; (80107d4 <tcp_receive+0xb0c>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	4b80      	ldr	r3, [pc, #512]	; (80107d8 <tcp_receive+0xb10>)
 80105d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80105da:	4b7f      	ldr	r3, [pc, #508]	; (80107d8 <tcp_receive+0xb10>)
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	899b      	ldrh	r3, [r3, #12]
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fa faba 	bl	800ab5c <lwip_htons>
 80105e8:	4603      	mov	r3, r0
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f003 0302 	and.w	r3, r3, #2
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d005      	beq.n	8010600 <tcp_receive+0x938>
                inseg.len -= 1;
 80105f4:	4b78      	ldr	r3, [pc, #480]	; (80107d8 <tcp_receive+0xb10>)
 80105f6:	891b      	ldrh	r3, [r3, #8]
 80105f8:	3b01      	subs	r3, #1
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	4b76      	ldr	r3, [pc, #472]	; (80107d8 <tcp_receive+0xb10>)
 80105fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010600:	4b75      	ldr	r3, [pc, #468]	; (80107d8 <tcp_receive+0xb10>)
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	4a74      	ldr	r2, [pc, #464]	; (80107d8 <tcp_receive+0xb10>)
 8010606:	8912      	ldrh	r2, [r2, #8]
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7fb fdca 	bl	800c1a4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010610:	4b71      	ldr	r3, [pc, #452]	; (80107d8 <tcp_receive+0xb10>)
 8010612:	891c      	ldrh	r4, [r3, #8]
 8010614:	4b70      	ldr	r3, [pc, #448]	; (80107d8 <tcp_receive+0xb10>)
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	899b      	ldrh	r3, [r3, #12]
 801061a:	b29b      	uxth	r3, r3
 801061c:	4618      	mov	r0, r3
 801061e:	f7fa fa9d 	bl	800ab5c <lwip_htons>
 8010622:	4603      	mov	r3, r0
 8010624:	b2db      	uxtb	r3, r3
 8010626:	f003 0303 	and.w	r3, r3, #3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <tcp_receive+0x96a>
 801062e:	2301      	movs	r3, #1
 8010630:	e000      	b.n	8010634 <tcp_receive+0x96c>
 8010632:	2300      	movs	r3, #0
 8010634:	4423      	add	r3, r4
 8010636:	b29a      	uxth	r2, r3
 8010638:	4b65      	ldr	r3, [pc, #404]	; (80107d0 <tcp_receive+0xb08>)
 801063a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801063c:	4b64      	ldr	r3, [pc, #400]	; (80107d0 <tcp_receive+0xb08>)
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	461a      	mov	r2, r3
 8010642:	4b64      	ldr	r3, [pc, #400]	; (80107d4 <tcp_receive+0xb0c>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	441a      	add	r2, r3
 8010648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	429a      	cmp	r2, r3
 8010650:	d006      	beq.n	8010660 <tcp_receive+0x998>
 8010652:	4b62      	ldr	r3, [pc, #392]	; (80107dc <tcp_receive+0xb14>)
 8010654:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010658:	4961      	ldr	r1, [pc, #388]	; (80107e0 <tcp_receive+0xb18>)
 801065a:	4862      	ldr	r0, [pc, #392]	; (80107e4 <tcp_receive+0xb1c>)
 801065c:	f005 fd4c 	bl	80160f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010664:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010666:	4b5a      	ldr	r3, [pc, #360]	; (80107d0 <tcp_receive+0xb08>)
 8010668:	881b      	ldrh	r3, [r3, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	4b59      	ldr	r3, [pc, #356]	; (80107d4 <tcp_receive+0xb0c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	441a      	add	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801067a:	4b55      	ldr	r3, [pc, #340]	; (80107d0 <tcp_receive+0xb08>)
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	429a      	cmp	r2, r3
 8010680:	d206      	bcs.n	8010690 <tcp_receive+0x9c8>
 8010682:	4b56      	ldr	r3, [pc, #344]	; (80107dc <tcp_receive+0xb14>)
 8010684:	f240 6207 	movw	r2, #1543	; 0x607
 8010688:	4957      	ldr	r1, [pc, #348]	; (80107e8 <tcp_receive+0xb20>)
 801068a:	4856      	ldr	r0, [pc, #344]	; (80107e4 <tcp_receive+0xb1c>)
 801068c:	f005 fd34 	bl	80160f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010694:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <tcp_receive+0xb08>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	b29a      	uxth	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7fc fd99 	bl	800d1d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80106a6:	4b4c      	ldr	r3, [pc, #304]	; (80107d8 <tcp_receive+0xb10>)
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	891b      	ldrh	r3, [r3, #8]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d006      	beq.n	80106be <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80106b0:	4b49      	ldr	r3, [pc, #292]	; (80107d8 <tcp_receive+0xb10>)
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	4a4d      	ldr	r2, [pc, #308]	; (80107ec <tcp_receive+0xb24>)
 80106b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80106b8:	4b47      	ldr	r3, [pc, #284]	; (80107d8 <tcp_receive+0xb10>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106be:	4b46      	ldr	r3, [pc, #280]	; (80107d8 <tcp_receive+0xb10>)
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	899b      	ldrh	r3, [r3, #12]
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fa fa48 	bl	800ab5c <lwip_htons>
 80106cc:	4603      	mov	r3, r0
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80b8 	beq.w	801084a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80106da:	4b45      	ldr	r3, [pc, #276]	; (80107f0 <tcp_receive+0xb28>)
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f043 0320 	orr.w	r3, r3, #32
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	4b42      	ldr	r3, [pc, #264]	; (80107f0 <tcp_receive+0xb28>)
 80106e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80106e8:	e0af      	b.n	801084a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	4a36      	ldr	r2, [pc, #216]	; (80107d4 <tcp_receive+0xb0c>)
 80106fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	891b      	ldrh	r3, [r3, #8]
 8010700:	461c      	mov	r4, r3
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	899b      	ldrh	r3, [r3, #12]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4618      	mov	r0, r3
 801070c:	f7fa fa26 	bl	800ab5c <lwip_htons>
 8010710:	4603      	mov	r3, r0
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0303 	and.w	r3, r3, #3
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <tcp_receive+0xa58>
 801071c:	2301      	movs	r3, #1
 801071e:	e000      	b.n	8010722 <tcp_receive+0xa5a>
 8010720:	2300      	movs	r3, #0
 8010722:	191a      	adds	r2, r3, r4
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	441a      	add	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010732:	461c      	mov	r4, r3
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	891b      	ldrh	r3, [r3, #8]
 8010738:	461d      	mov	r5, r3
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	899b      	ldrh	r3, [r3, #12]
 8010740:	b29b      	uxth	r3, r3
 8010742:	4618      	mov	r0, r3
 8010744:	f7fa fa0a 	bl	800ab5c <lwip_htons>
 8010748:	4603      	mov	r3, r0
 801074a:	b2db      	uxtb	r3, r3
 801074c:	f003 0303 	and.w	r3, r3, #3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <tcp_receive+0xa90>
 8010754:	2301      	movs	r3, #1
 8010756:	e000      	b.n	801075a <tcp_receive+0xa92>
 8010758:	2300      	movs	r3, #0
 801075a:	442b      	add	r3, r5
 801075c:	429c      	cmp	r4, r3
 801075e:	d206      	bcs.n	801076e <tcp_receive+0xaa6>
 8010760:	4b1e      	ldr	r3, [pc, #120]	; (80107dc <tcp_receive+0xb14>)
 8010762:	f240 622b 	movw	r2, #1579	; 0x62b
 8010766:	4923      	ldr	r1, [pc, #140]	; (80107f4 <tcp_receive+0xb2c>)
 8010768:	481e      	ldr	r0, [pc, #120]	; (80107e4 <tcp_receive+0xb1c>)
 801076a:	f005 fcc5 	bl	80160f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	891b      	ldrh	r3, [r3, #8]
 8010772:	461c      	mov	r4, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	899b      	ldrh	r3, [r3, #12]
 801077a:	b29b      	uxth	r3, r3
 801077c:	4618      	mov	r0, r3
 801077e:	f7fa f9ed 	bl	800ab5c <lwip_htons>
 8010782:	4603      	mov	r3, r0
 8010784:	b2db      	uxtb	r3, r3
 8010786:	f003 0303 	and.w	r3, r3, #3
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <tcp_receive+0xaca>
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <tcp_receive+0xacc>
 8010792:	2300      	movs	r3, #0
 8010794:	1919      	adds	r1, r3, r4
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801079a:	b28b      	uxth	r3, r1
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	b29a      	uxth	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7fc fd17 	bl	800d1d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	891b      	ldrh	r3, [r3, #8]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d028      	beq.n	8010806 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80107b4:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <tcp_receive+0xb24>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d01d      	beq.n	80107f8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80107bc:	4b0b      	ldr	r3, [pc, #44]	; (80107ec <tcp_receive+0xb24>)
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	4619      	mov	r1, r3
 80107c6:	4610      	mov	r0, r2
 80107c8:	f7fb ff40 	bl	800c64c <pbuf_cat>
 80107cc:	e018      	b.n	8010800 <tcp_receive+0xb38>
 80107ce:	bf00      	nop
 80107d0:	240074ea 	.word	0x240074ea
 80107d4:	240074e0 	.word	0x240074e0
 80107d8:	240074c0 	.word	0x240074c0
 80107dc:	0801912c 	.word	0x0801912c
 80107e0:	0801950c 	.word	0x0801950c
 80107e4:	08019178 	.word	0x08019178
 80107e8:	08019548 	.word	0x08019548
 80107ec:	240074f0 	.word	0x240074f0
 80107f0:	240074ed 	.word	0x240074ed
 80107f4:	08019568 	.word	0x08019568
            } else {
              recv_data = cseg->p;
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	4a70      	ldr	r2, [pc, #448]	; (80109c0 <tcp_receive+0xcf8>)
 80107fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	2200      	movs	r2, #0
 8010804:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	899b      	ldrh	r3, [r3, #12]
 801080c:	b29b      	uxth	r3, r3
 801080e:	4618      	mov	r0, r3
 8010810:	f7fa f9a4 	bl	800ab5c <lwip_htons>
 8010814:	4603      	mov	r3, r0
 8010816:	b2db      	uxtb	r3, r3
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00d      	beq.n	801083c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010820:	4b68      	ldr	r3, [pc, #416]	; (80109c4 <tcp_receive+0xcfc>)
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	f043 0320 	orr.w	r3, r3, #32
 8010828:	b2da      	uxtb	r2, r3
 801082a:	4b66      	ldr	r3, [pc, #408]	; (80109c4 <tcp_receive+0xcfc>)
 801082c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7d1b      	ldrb	r3, [r3, #20]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d102      	bne.n	801083c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2207      	movs	r2, #7
 801083a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010844:	68b8      	ldr	r0, [r7, #8]
 8010846:	f7fd fb04 	bl	800de52 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801084e:	2b00      	cmp	r3, #0
 8010850:	d008      	beq.n	8010864 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	685a      	ldr	r2, [r3, #4]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801085e:	429a      	cmp	r2, r3
 8010860:	f43f af43 	beq.w	80106ea <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	8b5b      	ldrh	r3, [r3, #26]
 8010868:	f003 0301 	and.w	r3, r3, #1
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00e      	beq.n	801088e <tcp_receive+0xbc6>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	8b5b      	ldrh	r3, [r3, #26]
 8010874:	f023 0301 	bic.w	r3, r3, #1
 8010878:	b29a      	uxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	835a      	strh	r2, [r3, #26]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	8b5b      	ldrh	r3, [r3, #26]
 8010882:	f043 0302 	orr.w	r3, r3, #2
 8010886:	b29a      	uxth	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801088c:	e188      	b.n	8010ba0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	8b5b      	ldrh	r3, [r3, #26]
 8010892:	f043 0301 	orr.w	r3, r3, #1
 8010896:	b29a      	uxth	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801089c:	e180      	b.n	8010ba0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80108a6:	4848      	ldr	r0, [pc, #288]	; (80109c8 <tcp_receive+0xd00>)
 80108a8:	f7fd faec 	bl	800de84 <tcp_seg_copy>
 80108ac:	4602      	mov	r2, r0
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	675a      	str	r2, [r3, #116]	; 0x74
 80108b2:	e16d      	b.n	8010b90 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80108be:	e157      	b.n	8010b70 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80108c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	4b41      	ldr	r3, [pc, #260]	; (80109cc <tcp_receive+0xd04>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d11d      	bne.n	801090a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80108ce:	4b3e      	ldr	r3, [pc, #248]	; (80109c8 <tcp_receive+0xd00>)
 80108d0:	891a      	ldrh	r2, [r3, #8]
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	891b      	ldrh	r3, [r3, #8]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	f240 814f 	bls.w	8010b7a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80108dc:	483a      	ldr	r0, [pc, #232]	; (80109c8 <tcp_receive+0xd00>)
 80108de:	f7fd fad1 	bl	800de84 <tcp_seg_copy>
 80108e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f000 8149 	beq.w	8010b7e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80108ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <tcp_receive+0xc32>
                    prev->next = cseg;
 80108f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	e002      	b.n	8010900 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010902:	6978      	ldr	r0, [r7, #20]
 8010904:	f7ff f8dc 	bl	800fac0 <tcp_oos_insert_segment>
                }
                break;
 8010908:	e139      	b.n	8010b7e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090c:	2b00      	cmp	r3, #0
 801090e:	d117      	bne.n	8010940 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010910:	4b2e      	ldr	r3, [pc, #184]	; (80109cc <tcp_receive+0xd04>)
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	da57      	bge.n	80109d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010920:	4829      	ldr	r0, [pc, #164]	; (80109c8 <tcp_receive+0xd00>)
 8010922:	f7fd faaf 	bl	800de84 <tcp_seg_copy>
 8010926:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 8129 	beq.w	8010b82 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	69ba      	ldr	r2, [r7, #24]
 8010934:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010938:	69b8      	ldr	r0, [r7, #24]
 801093a:	f7ff f8c1 	bl	800fac0 <tcp_oos_insert_segment>
                  }
                  break;
 801093e:	e120      	b.n	8010b82 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010940:	4b22      	ldr	r3, [pc, #136]	; (80109cc <tcp_receive+0xd04>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	3b01      	subs	r3, #1
 801094e:	2b00      	cmp	r3, #0
 8010950:	db3e      	blt.n	80109d0 <tcp_receive+0xd08>
 8010952:	4b1e      	ldr	r3, [pc, #120]	; (80109cc <tcp_receive+0xd04>)
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	3301      	adds	r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	dc35      	bgt.n	80109d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010964:	4818      	ldr	r0, [pc, #96]	; (80109c8 <tcp_receive+0xd00>)
 8010966:	f7fd fa8d 	bl	800de84 <tcp_seg_copy>
 801096a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	2b00      	cmp	r3, #0
 8010970:	f000 8109 	beq.w	8010b86 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801097c:	8912      	ldrh	r2, [r2, #8]
 801097e:	441a      	add	r2, r3
 8010980:	4b12      	ldr	r3, [pc, #72]	; (80109cc <tcp_receive+0xd04>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	dd12      	ble.n	80109b0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801098a:	4b10      	ldr	r3, [pc, #64]	; (80109cc <tcp_receive+0xd04>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	b29a      	uxth	r2, r3
 8010990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	b29b      	uxth	r3, r3
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	b29a      	uxth	r2, r3
 801099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80109a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a6:	891b      	ldrh	r3, [r3, #8]
 80109a8:	4619      	mov	r1, r3
 80109aa:	4610      	mov	r0, r2
 80109ac:	f7fb fbfa 	bl	800c1a4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80109b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b2:	69fa      	ldr	r2, [r7, #28]
 80109b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80109b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109b8:	69f8      	ldr	r0, [r7, #28]
 80109ba:	f7ff f881 	bl	800fac0 <tcp_oos_insert_segment>
                  }
                  break;
 80109be:	e0e2      	b.n	8010b86 <tcp_receive+0xebe>
 80109c0:	240074f0 	.word	0x240074f0
 80109c4:	240074ed 	.word	0x240074ed
 80109c8:	240074c0 	.word	0x240074c0
 80109cc:	240074e0 	.word	0x240074e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80109d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f040 80c6 	bne.w	8010b6a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80109de:	4b80      	ldr	r3, [pc, #512]	; (8010be0 <tcp_receive+0xf18>)
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f340 80bd 	ble.w	8010b6a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	899b      	ldrh	r3, [r3, #12]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fa f8af 	bl	800ab5c <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f040 80bf 	bne.w	8010b8a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010a0c:	4875      	ldr	r0, [pc, #468]	; (8010be4 <tcp_receive+0xf1c>)
 8010a0e:	f7fd fa39 	bl	800de84 <tcp_seg_copy>
 8010a12:	4602      	mov	r2, r0
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 80b6 	beq.w	8010b8e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a2a:	8912      	ldrh	r2, [r2, #8]
 8010a2c:	441a      	add	r2, r3
 8010a2e:	4b6c      	ldr	r3, [pc, #432]	; (8010be0 <tcp_receive+0xf18>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd12      	ble.n	8010a5e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010a38:	4b69      	ldr	r3, [pc, #420]	; (8010be0 <tcp_receive+0xf18>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a54:	891b      	ldrh	r3, [r3, #8]
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7fb fba3 	bl	800c1a4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010a5e:	4b62      	ldr	r3, [pc, #392]	; (8010be8 <tcp_receive+0xf20>)
 8010a60:	881b      	ldrh	r3, [r3, #0]
 8010a62:	461a      	mov	r2, r3
 8010a64:	4b5e      	ldr	r3, [pc, #376]	; (8010be0 <tcp_receive+0xf18>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	441a      	add	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	6879      	ldr	r1, [r7, #4]
 8010a70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a72:	440b      	add	r3, r1
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f340 8089 	ble.w	8010b8e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	899b      	ldrh	r3, [r3, #12]
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fa f868 	bl	800ab5c <lwip_htons>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	f003 0301 	and.w	r3, r3, #1
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d022      	beq.n	8010ade <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	899b      	ldrh	r3, [r3, #12]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	b21b      	sxth	r3, r3
 8010aa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010aa8:	b21c      	sxth	r4, r3
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	899b      	ldrh	r3, [r3, #12]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fa f851 	bl	800ab5c <lwip_htons>
 8010aba:	4603      	mov	r3, r0
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fa f848 	bl	800ab5c <lwip_htons>
 8010acc:	4603      	mov	r3, r0
 8010ace:	b21b      	sxth	r3, r3
 8010ad0:	4323      	orrs	r3, r4
 8010ad2:	b21a      	sxth	r2, r3
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	b292      	uxth	r2, r2
 8010adc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ae8:	4413      	add	r3, r2
 8010aea:	b299      	uxth	r1, r3
 8010aec:	4b3c      	ldr	r3, [pc, #240]	; (8010be0 <tcp_receive+0xf18>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	1a8a      	subs	r2, r1, r2
 8010af8:	b292      	uxth	r2, r2
 8010afa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	891b      	ldrh	r3, [r3, #8]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	4610      	mov	r0, r2
 8010b0c:	f7fb fb4a 	bl	800c1a4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	891c      	ldrh	r4, [r3, #8]
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fa f81b 	bl	800ab5c <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	f003 0303 	and.w	r3, r3, #3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <tcp_receive+0xe6e>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <tcp_receive+0xe70>
 8010b36:	2300      	movs	r3, #0
 8010b38:	4423      	add	r3, r4
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	4b2a      	ldr	r3, [pc, #168]	; (8010be8 <tcp_receive+0xf20>)
 8010b3e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b40:	4b29      	ldr	r3, [pc, #164]	; (8010be8 <tcp_receive+0xf20>)
 8010b42:	881b      	ldrh	r3, [r3, #0]
 8010b44:	461a      	mov	r2, r3
 8010b46:	4b26      	ldr	r3, [pc, #152]	; (8010be0 <tcp_receive+0xf18>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	441a      	add	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b50:	6879      	ldr	r1, [r7, #4]
 8010b52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b54:	440b      	add	r3, r1
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d019      	beq.n	8010b8e <tcp_receive+0xec6>
 8010b5a:	4b24      	ldr	r3, [pc, #144]	; (8010bec <tcp_receive+0xf24>)
 8010b5c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010b60:	4923      	ldr	r1, [pc, #140]	; (8010bf0 <tcp_receive+0xf28>)
 8010b62:	4824      	ldr	r0, [pc, #144]	; (8010bf4 <tcp_receive+0xf2c>)
 8010b64:	f005 fac8 	bl	80160f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010b68:	e011      	b.n	8010b8e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f47f aea4 	bne.w	80108c0 <tcp_receive+0xbf8>
 8010b78:	e00a      	b.n	8010b90 <tcp_receive+0xec8>
                break;
 8010b7a:	bf00      	nop
 8010b7c:	e008      	b.n	8010b90 <tcp_receive+0xec8>
                break;
 8010b7e:	bf00      	nop
 8010b80:	e006      	b.n	8010b90 <tcp_receive+0xec8>
                  break;
 8010b82:	bf00      	nop
 8010b84:	e004      	b.n	8010b90 <tcp_receive+0xec8>
                  break;
 8010b86:	bf00      	nop
 8010b88:	e002      	b.n	8010b90 <tcp_receive+0xec8>
                  break;
 8010b8a:	bf00      	nop
 8010b8c:	e000      	b.n	8010b90 <tcp_receive+0xec8>
                break;
 8010b8e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fe8b 	bl	80128ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010b96:	e003      	b.n	8010ba0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f001 fe87 	bl	80128ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b9e:	e01a      	b.n	8010bd6 <tcp_receive+0xf0e>
 8010ba0:	e019      	b.n	8010bd6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010ba2:	4b0f      	ldr	r3, [pc, #60]	; (8010be0 <tcp_receive+0xf18>)
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	db0a      	blt.n	8010bc6 <tcp_receive+0xefe>
 8010bb0:	4b0b      	ldr	r3, [pc, #44]	; (8010be0 <tcp_receive+0xf18>)
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb8:	6879      	ldr	r1, [r7, #4]
 8010bba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bbc:	440b      	add	r3, r1
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	dd07      	ble.n	8010bd6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8b5b      	ldrh	r3, [r3, #26]
 8010bca:	f043 0302 	orr.w	r3, r3, #2
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010bd4:	e7ff      	b.n	8010bd6 <tcp_receive+0xf0e>
 8010bd6:	bf00      	nop
 8010bd8:	3750      	adds	r7, #80	; 0x50
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8010bde:	bf00      	nop
 8010be0:	240074e0 	.word	0x240074e0
 8010be4:	240074c0 	.word	0x240074c0
 8010be8:	240074ea 	.word	0x240074ea
 8010bec:	0801912c 	.word	0x0801912c
 8010bf0:	080194d4 	.word	0x080194d4
 8010bf4:	08019178 	.word	0x08019178

08010bf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010bfe:	4b15      	ldr	r3, [pc, #84]	; (8010c54 <tcp_get_next_optbyte+0x5c>)
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	b291      	uxth	r1, r2
 8010c06:	4a13      	ldr	r2, [pc, #76]	; (8010c54 <tcp_get_next_optbyte+0x5c>)
 8010c08:	8011      	strh	r1, [r2, #0]
 8010c0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010c0c:	4b12      	ldr	r3, [pc, #72]	; (8010c58 <tcp_get_next_optbyte+0x60>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d004      	beq.n	8010c1e <tcp_get_next_optbyte+0x26>
 8010c14:	4b11      	ldr	r3, [pc, #68]	; (8010c5c <tcp_get_next_optbyte+0x64>)
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	88fa      	ldrh	r2, [r7, #6]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d208      	bcs.n	8010c30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <tcp_get_next_optbyte+0x68>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3314      	adds	r3, #20
 8010c24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010c26:	88fb      	ldrh	r3, [r7, #6]
 8010c28:	683a      	ldr	r2, [r7, #0]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	e00b      	b.n	8010c48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010c30:	88fb      	ldrh	r3, [r7, #6]
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	4b09      	ldr	r3, [pc, #36]	; (8010c5c <tcp_get_next_optbyte+0x64>)
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010c3e:	4b06      	ldr	r3, [pc, #24]	; (8010c58 <tcp_get_next_optbyte+0x60>)
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	797b      	ldrb	r3, [r7, #5]
 8010c44:	4413      	add	r3, r2
 8010c46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	240074dc 	.word	0x240074dc
 8010c58:	240074d8 	.word	0x240074d8
 8010c5c:	240074d6 	.word	0x240074d6
 8010c60:	240074d0 	.word	0x240074d0

08010c64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d106      	bne.n	8010c80 <tcp_parseopt+0x1c>
 8010c72:	4b32      	ldr	r3, [pc, #200]	; (8010d3c <tcp_parseopt+0xd8>)
 8010c74:	f240 727d 	movw	r2, #1917	; 0x77d
 8010c78:	4931      	ldr	r1, [pc, #196]	; (8010d40 <tcp_parseopt+0xdc>)
 8010c7a:	4832      	ldr	r0, [pc, #200]	; (8010d44 <tcp_parseopt+0xe0>)
 8010c7c:	f005 fa3c 	bl	80160f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010c80:	4b31      	ldr	r3, [pc, #196]	; (8010d48 <tcp_parseopt+0xe4>)
 8010c82:	881b      	ldrh	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d055      	beq.n	8010d34 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010c88:	4b30      	ldr	r3, [pc, #192]	; (8010d4c <tcp_parseopt+0xe8>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	801a      	strh	r2, [r3, #0]
 8010c8e:	e045      	b.n	8010d1c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010c90:	f7ff ffb2 	bl	8010bf8 <tcp_get_next_optbyte>
 8010c94:	4603      	mov	r3, r0
 8010c96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010c98:	7bfb      	ldrb	r3, [r7, #15]
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d006      	beq.n	8010cac <tcp_parseopt+0x48>
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	dc2b      	bgt.n	8010cfa <tcp_parseopt+0x96>
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d041      	beq.n	8010d2a <tcp_parseopt+0xc6>
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d127      	bne.n	8010cfa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010caa:	e037      	b.n	8010d1c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010cac:	f7ff ffa4 	bl	8010bf8 <tcp_get_next_optbyte>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b04      	cmp	r3, #4
 8010cb4:	d13b      	bne.n	8010d2e <tcp_parseopt+0xca>
 8010cb6:	4b25      	ldr	r3, [pc, #148]	; (8010d4c <tcp_parseopt+0xe8>)
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	4a22      	ldr	r2, [pc, #136]	; (8010d48 <tcp_parseopt+0xe4>)
 8010cbe:	8812      	ldrh	r2, [r2, #0]
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	da34      	bge.n	8010d2e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010cc4:	f7ff ff98 	bl	8010bf8 <tcp_get_next_optbyte>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	021b      	lsls	r3, r3, #8
 8010cce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010cd0:	f7ff ff92 	bl	8010bf8 <tcp_get_next_optbyte>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	89bb      	ldrh	r3, [r7, #12]
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010cde:	89bb      	ldrh	r3, [r7, #12]
 8010ce0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010ce4:	d804      	bhi.n	8010cf0 <tcp_parseopt+0x8c>
 8010ce6:	89bb      	ldrh	r3, [r7, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <tcp_parseopt+0x8c>
 8010cec:	89ba      	ldrh	r2, [r7, #12]
 8010cee:	e001      	b.n	8010cf4 <tcp_parseopt+0x90>
 8010cf0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010cf8:	e010      	b.n	8010d1c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010cfa:	f7ff ff7d 	bl	8010bf8 <tcp_get_next_optbyte>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010d02:	7afb      	ldrb	r3, [r7, #11]
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d914      	bls.n	8010d32 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010d08:	7afb      	ldrb	r3, [r7, #11]
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <tcp_parseopt+0xe8>)
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	4413      	add	r3, r2
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	3b02      	subs	r3, #2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	4b0c      	ldr	r3, [pc, #48]	; (8010d4c <tcp_parseopt+0xe8>)
 8010d1a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010d1c:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <tcp_parseopt+0xe8>)
 8010d1e:	881a      	ldrh	r2, [r3, #0]
 8010d20:	4b09      	ldr	r3, [pc, #36]	; (8010d48 <tcp_parseopt+0xe4>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d3b3      	bcc.n	8010c90 <tcp_parseopt+0x2c>
 8010d28:	e004      	b.n	8010d34 <tcp_parseopt+0xd0>
          return;
 8010d2a:	bf00      	nop
 8010d2c:	e002      	b.n	8010d34 <tcp_parseopt+0xd0>
            return;
 8010d2e:	bf00      	nop
 8010d30:	e000      	b.n	8010d34 <tcp_parseopt+0xd0>
            return;
 8010d32:	bf00      	nop
      }
    }
  }
}
 8010d34:	3710      	adds	r7, #16
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	0801912c 	.word	0x0801912c
 8010d40:	08019590 	.word	0x08019590
 8010d44:	08019178 	.word	0x08019178
 8010d48:	240074d4 	.word	0x240074d4
 8010d4c:	240074dc 	.word	0x240074dc

08010d50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010d50:	b480      	push	{r7}
 8010d52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010d54:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <tcp_trigger_input_pcb_close+0x1c>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f043 0310 	orr.w	r3, r3, #16
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	4b03      	ldr	r3, [pc, #12]	; (8010d6c <tcp_trigger_input_pcb_close+0x1c>)
 8010d60:	701a      	strb	r2, [r3, #0]
}
 8010d62:	bf00      	nop
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	240074ed 	.word	0x240074ed

08010d70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00a      	beq.n	8010d98 <tcp_route+0x28>
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	7a1b      	ldrb	r3, [r3, #8]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d006      	beq.n	8010d98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	7a1b      	ldrb	r3, [r3, #8]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fb f800 	bl	800bd94 <netif_get_by_index>
 8010d94:	4603      	mov	r3, r0
 8010d96:	e003      	b.n	8010da0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f003 fcdf 	bl	801475c <ip4_route>
 8010d9e:	4603      	mov	r3, r0
  }
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3710      	adds	r7, #16
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010da8:	b590      	push	{r4, r7, lr}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	603b      	str	r3, [r7, #0]
 8010db4:	4613      	mov	r3, r2
 8010db6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d105      	bne.n	8010dca <tcp_create_segment+0x22>
 8010dbe:	4b44      	ldr	r3, [pc, #272]	; (8010ed0 <tcp_create_segment+0x128>)
 8010dc0:	22a3      	movs	r2, #163	; 0xa3
 8010dc2:	4944      	ldr	r1, [pc, #272]	; (8010ed4 <tcp_create_segment+0x12c>)
 8010dc4:	4844      	ldr	r0, [pc, #272]	; (8010ed8 <tcp_create_segment+0x130>)
 8010dc6:	f005 f997 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d105      	bne.n	8010ddc <tcp_create_segment+0x34>
 8010dd0:	4b3f      	ldr	r3, [pc, #252]	; (8010ed0 <tcp_create_segment+0x128>)
 8010dd2:	22a4      	movs	r2, #164	; 0xa4
 8010dd4:	4941      	ldr	r1, [pc, #260]	; (8010edc <tcp_create_segment+0x134>)
 8010dd6:	4840      	ldr	r0, [pc, #256]	; (8010ed8 <tcp_create_segment+0x130>)
 8010dd8:	f005 f98e 	bl	80160f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	f003 0304 	and.w	r3, r3, #4
 8010de8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010dea:	2003      	movs	r0, #3
 8010dec:	f7fa fc46 	bl	800b67c <memp_malloc>
 8010df0:	6138      	str	r0, [r7, #16]
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d104      	bne.n	8010e02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010df8:	68b8      	ldr	r0, [r7, #8]
 8010dfa:	f7fb fb59 	bl	800c4b0 <pbuf_free>
    return NULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e061      	b.n	8010ec6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010e08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	68ba      	ldr	r2, [r7, #8]
 8010e14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	891a      	ldrh	r2, [r3, #8]
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d205      	bcs.n	8010e2e <tcp_create_segment+0x86>
 8010e22:	4b2b      	ldr	r3, [pc, #172]	; (8010ed0 <tcp_create_segment+0x128>)
 8010e24:	22b0      	movs	r2, #176	; 0xb0
 8010e26:	492e      	ldr	r1, [pc, #184]	; (8010ee0 <tcp_create_segment+0x138>)
 8010e28:	482b      	ldr	r0, [pc, #172]	; (8010ed8 <tcp_create_segment+0x130>)
 8010e2a:	f005 f965 	bl	80160f8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	891a      	ldrh	r2, [r3, #8]
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010e3e:	2114      	movs	r1, #20
 8010e40:	68b8      	ldr	r0, [r7, #8]
 8010e42:	f7fb fa9f 	bl	800c384 <pbuf_add_header>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d004      	beq.n	8010e56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010e4c:	6938      	ldr	r0, [r7, #16]
 8010e4e:	f7fd f800 	bl	800de52 <tcp_seg_free>
    return NULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	e037      	b.n	8010ec6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	8ada      	ldrh	r2, [r3, #22]
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	68dc      	ldr	r4, [r3, #12]
 8010e68:	4610      	mov	r0, r2
 8010e6a:	f7f9 fe77 	bl	800ab5c <lwip_htons>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	8b1a      	ldrh	r2, [r3, #24]
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	68dc      	ldr	r4, [r3, #12]
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	f7f9 fe6e 	bl	800ab5c <lwip_htons>
 8010e80:	4603      	mov	r3, r0
 8010e82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	68dc      	ldr	r4, [r3, #12]
 8010e88:	6838      	ldr	r0, [r7, #0]
 8010e8a:	f7f9 fe7c 	bl	800ab86 <lwip_htonl>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	089b      	lsrs	r3, r3, #2
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	3305      	adds	r3, #5
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	031b      	lsls	r3, r3, #12
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	79fb      	ldrb	r3, [r7, #7]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	68dc      	ldr	r4, [r3, #12]
 8010eae:	4610      	mov	r0, r2
 8010eb0:	f7f9 fe54 	bl	800ab5c <lwip_htons>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	749a      	strb	r2, [r3, #18]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	74da      	strb	r2, [r3, #19]
  return seg;
 8010ec4:	693b      	ldr	r3, [r7, #16]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	371c      	adds	r7, #28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd90      	pop	{r4, r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	080195ac 	.word	0x080195ac
 8010ed4:	080195e0 	.word	0x080195e0
 8010ed8:	08019600 	.word	0x08019600
 8010edc:	08019628 	.word	0x08019628
 8010ee0:	0801964c 	.word	0x0801964c

08010ee4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	607b      	str	r3, [r7, #4]
 8010eec:	4603      	mov	r3, r0
 8010eee:	73fb      	strb	r3, [r7, #15]
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	81bb      	strh	r3, [r7, #12]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010ef8:	89bb      	ldrh	r3, [r7, #12]
 8010efa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d105      	bne.n	8010f0e <tcp_pbuf_prealloc+0x2a>
 8010f02:	4b30      	ldr	r3, [pc, #192]	; (8010fc4 <tcp_pbuf_prealloc+0xe0>)
 8010f04:	22e8      	movs	r2, #232	; 0xe8
 8010f06:	4930      	ldr	r1, [pc, #192]	; (8010fc8 <tcp_pbuf_prealloc+0xe4>)
 8010f08:	4830      	ldr	r0, [pc, #192]	; (8010fcc <tcp_pbuf_prealloc+0xe8>)
 8010f0a:	f005 f8f5 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d105      	bne.n	8010f20 <tcp_pbuf_prealloc+0x3c>
 8010f14:	4b2b      	ldr	r3, [pc, #172]	; (8010fc4 <tcp_pbuf_prealloc+0xe0>)
 8010f16:	22e9      	movs	r2, #233	; 0xe9
 8010f18:	492d      	ldr	r1, [pc, #180]	; (8010fd0 <tcp_pbuf_prealloc+0xec>)
 8010f1a:	482c      	ldr	r0, [pc, #176]	; (8010fcc <tcp_pbuf_prealloc+0xe8>)
 8010f1c:	f005 f8ec 	bl	80160f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010f20:	89ba      	ldrh	r2, [r7, #12]
 8010f22:	897b      	ldrh	r3, [r7, #10]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d221      	bcs.n	8010f6c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d111      	bne.n	8010f58 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010f34:	6a3b      	ldr	r3, [r7, #32]
 8010f36:	8b5b      	ldrh	r3, [r3, #26]
 8010f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d115      	bne.n	8010f6c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d007      	beq.n	8010f58 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010f48:	6a3b      	ldr	r3, [r7, #32]
 8010f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d103      	bne.n	8010f58 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010f50:	6a3b      	ldr	r3, [r7, #32]
 8010f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d009      	beq.n	8010f6c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010f58:	89bb      	ldrh	r3, [r7, #12]
 8010f5a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010f5e:	f023 0203 	bic.w	r2, r3, #3
 8010f62:	897b      	ldrh	r3, [r7, #10]
 8010f64:	4293      	cmp	r3, r2
 8010f66:	bf28      	it	cs
 8010f68:	4613      	movcs	r3, r2
 8010f6a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010f6c:	8af9      	ldrh	r1, [r7, #22]
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
 8010f70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fa ffb7 	bl	800bee8 <pbuf_alloc>
 8010f7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010f82:	2300      	movs	r3, #0
 8010f84:	e019      	b.n	8010fba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d006      	beq.n	8010f9c <tcp_pbuf_prealloc+0xb8>
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <tcp_pbuf_prealloc+0xe0>)
 8010f90:	f240 120b 	movw	r2, #267	; 0x10b
 8010f94:	490f      	ldr	r1, [pc, #60]	; (8010fd4 <tcp_pbuf_prealloc+0xf0>)
 8010f96:	480d      	ldr	r0, [pc, #52]	; (8010fcc <tcp_pbuf_prealloc+0xe8>)
 8010f98:	f005 f8ae 	bl	80160f8 <iprintf>
  *oversize = p->len - length;
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	895a      	ldrh	r2, [r3, #10]
 8010fa0:	89bb      	ldrh	r3, [r7, #12]
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	89ba      	ldrh	r2, [r7, #12]
 8010fae:	811a      	strh	r2, [r3, #8]
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	891a      	ldrh	r2, [r3, #8]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	815a      	strh	r2, [r3, #10]
  return p;
 8010fb8:	693b      	ldr	r3, [r7, #16]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	080195ac 	.word	0x080195ac
 8010fc8:	08019664 	.word	0x08019664
 8010fcc:	08019600 	.word	0x08019600
 8010fd0:	08019688 	.word	0x08019688
 8010fd4:	080196a8 	.word	0x080196a8

08010fd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d106      	bne.n	8010ff8 <tcp_write_checks+0x20>
 8010fea:	4b33      	ldr	r3, [pc, #204]	; (80110b8 <tcp_write_checks+0xe0>)
 8010fec:	f240 1233 	movw	r2, #307	; 0x133
 8010ff0:	4932      	ldr	r1, [pc, #200]	; (80110bc <tcp_write_checks+0xe4>)
 8010ff2:	4833      	ldr	r0, [pc, #204]	; (80110c0 <tcp_write_checks+0xe8>)
 8010ff4:	f005 f880 	bl	80160f8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	7d1b      	ldrb	r3, [r3, #20]
 8010ffc:	2b04      	cmp	r3, #4
 8010ffe:	d00e      	beq.n	801101e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011004:	2b07      	cmp	r3, #7
 8011006:	d00a      	beq.n	801101e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801100c:	2b02      	cmp	r3, #2
 801100e:	d006      	beq.n	801101e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011014:	2b03      	cmp	r3, #3
 8011016:	d002      	beq.n	801101e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011018:	f06f 030a 	mvn.w	r3, #10
 801101c:	e048      	b.n	80110b0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801101e:	887b      	ldrh	r3, [r7, #2]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <tcp_write_checks+0x50>
    return ERR_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	e043      	b.n	80110b0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801102e:	887a      	ldrh	r2, [r7, #2]
 8011030:	429a      	cmp	r2, r3
 8011032:	d909      	bls.n	8011048 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8b5b      	ldrh	r3, [r3, #26]
 8011038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801103c:	b29a      	uxth	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011042:	f04f 33ff 	mov.w	r3, #4294967295
 8011046:	e033      	b.n	80110b0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801104e:	2b08      	cmp	r3, #8
 8011050:	d909      	bls.n	8011066 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8b5b      	ldrh	r3, [r3, #26]
 8011056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295
 8011064:	e024      	b.n	80110b0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00f      	beq.n	8011090 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011074:	2b00      	cmp	r3, #0
 8011076:	d11a      	bne.n	80110ae <tcp_write_checks+0xd6>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107c:	2b00      	cmp	r3, #0
 801107e:	d116      	bne.n	80110ae <tcp_write_checks+0xd6>
 8011080:	4b0d      	ldr	r3, [pc, #52]	; (80110b8 <tcp_write_checks+0xe0>)
 8011082:	f240 1255 	movw	r2, #341	; 0x155
 8011086:	490f      	ldr	r1, [pc, #60]	; (80110c4 <tcp_write_checks+0xec>)
 8011088:	480d      	ldr	r0, [pc, #52]	; (80110c0 <tcp_write_checks+0xe8>)
 801108a:	f005 f835 	bl	80160f8 <iprintf>
 801108e:	e00e      	b.n	80110ae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011094:	2b00      	cmp	r3, #0
 8011096:	d103      	bne.n	80110a0 <tcp_write_checks+0xc8>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109c:	2b00      	cmp	r3, #0
 801109e:	d006      	beq.n	80110ae <tcp_write_checks+0xd6>
 80110a0:	4b05      	ldr	r3, [pc, #20]	; (80110b8 <tcp_write_checks+0xe0>)
 80110a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80110a6:	4908      	ldr	r1, [pc, #32]	; (80110c8 <tcp_write_checks+0xf0>)
 80110a8:	4805      	ldr	r0, [pc, #20]	; (80110c0 <tcp_write_checks+0xe8>)
 80110aa:	f005 f825 	bl	80160f8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	080195ac 	.word	0x080195ac
 80110bc:	080196bc 	.word	0x080196bc
 80110c0:	08019600 	.word	0x08019600
 80110c4:	080196dc 	.word	0x080196dc
 80110c8:	08019718 	.word	0x08019718

080110cc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80110cc:	b590      	push	{r4, r7, lr}
 80110ce:	b09b      	sub	sp, #108	; 0x6c
 80110d0:	af04      	add	r7, sp, #16
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	4611      	mov	r1, r2
 80110d8:	461a      	mov	r2, r3
 80110da:	460b      	mov	r3, r1
 80110dc:	80fb      	strh	r3, [r7, #6]
 80110de:	4613      	mov	r3, r2
 80110e0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80110e2:	2300      	movs	r3, #0
 80110e4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80110e6:	2300      	movs	r3, #0
 80110e8:	653b      	str	r3, [r7, #80]	; 0x50
 80110ea:	2300      	movs	r3, #0
 80110ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110ee:	2300      	movs	r3, #0
 80110f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80110f2:	2300      	movs	r3, #0
 80110f4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80110f6:	2300      	movs	r3, #0
 80110f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80110fc:	2300      	movs	r3, #0
 80110fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d109      	bne.n	8011128 <tcp_write+0x5c>
 8011114:	4ba4      	ldr	r3, [pc, #656]	; (80113a8 <tcp_write+0x2dc>)
 8011116:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801111a:	49a4      	ldr	r1, [pc, #656]	; (80113ac <tcp_write+0x2e0>)
 801111c:	48a4      	ldr	r0, [pc, #656]	; (80113b0 <tcp_write+0x2e4>)
 801111e:	f004 ffeb 	bl	80160f8 <iprintf>
 8011122:	f06f 030f 	mvn.w	r3, #15
 8011126:	e32a      	b.n	801177e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801112e:	085b      	lsrs	r3, r3, #1
 8011130:	b29a      	uxth	r2, r3
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011136:	4293      	cmp	r3, r2
 8011138:	bf28      	it	cs
 801113a:	4613      	movcs	r3, r2
 801113c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801113e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011140:	2b00      	cmp	r3, #0
 8011142:	d102      	bne.n	801114a <tcp_write+0x7e>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011148:	e000      	b.n	801114c <tcp_write+0x80>
 801114a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801114c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d109      	bne.n	8011168 <tcp_write+0x9c>
 8011154:	4b94      	ldr	r3, [pc, #592]	; (80113a8 <tcp_write+0x2dc>)
 8011156:	f240 12ad 	movw	r2, #429	; 0x1ad
 801115a:	4996      	ldr	r1, [pc, #600]	; (80113b4 <tcp_write+0x2e8>)
 801115c:	4894      	ldr	r0, [pc, #592]	; (80113b0 <tcp_write+0x2e4>)
 801115e:	f004 ffcb 	bl	80160f8 <iprintf>
 8011162:	f06f 030f 	mvn.w	r3, #15
 8011166:	e30a      	b.n	801177e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011168:	88fb      	ldrh	r3, [r7, #6]
 801116a:	4619      	mov	r1, r3
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f7ff ff33 	bl	8010fd8 <tcp_write_checks>
 8011172:	4603      	mov	r3, r0
 8011174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011178:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <tcp_write+0xba>
    return err;
 8011180:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011184:	e2fb      	b.n	801177e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801118c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011190:	2300      	movs	r3, #0
 8011192:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 80f6 	beq.w	801138c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111a4:	653b      	str	r3, [r7, #80]	; 0x50
 80111a6:	e002      	b.n	80111ae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80111a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80111ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d1f8      	bne.n	80111a8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80111b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b8:	7a9b      	ldrb	r3, [r3, #10]
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f003 0304 	and.w	r3, r3, #4
 80111c2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80111c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111c8:	891b      	ldrh	r3, [r3, #8]
 80111ca:	4619      	mov	r1, r3
 80111cc:	8c3b      	ldrh	r3, [r7, #32]
 80111ce:	440b      	add	r3, r1
 80111d0:	429a      	cmp	r2, r3
 80111d2:	da06      	bge.n	80111e2 <tcp_write+0x116>
 80111d4:	4b74      	ldr	r3, [pc, #464]	; (80113a8 <tcp_write+0x2dc>)
 80111d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80111da:	4977      	ldr	r1, [pc, #476]	; (80113b8 <tcp_write+0x2ec>)
 80111dc:	4874      	ldr	r0, [pc, #464]	; (80113b0 <tcp_write+0x2e4>)
 80111de:	f004 ff8b 	bl	80160f8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80111e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e4:	891a      	ldrh	r2, [r3, #8]
 80111e6:	8c3b      	ldrh	r3, [r7, #32]
 80111e8:	4413      	add	r3, r2
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80111f8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80111fa:	8a7b      	ldrh	r3, [r7, #18]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d026      	beq.n	801124e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011200:	8a7b      	ldrh	r3, [r7, #18]
 8011202:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011204:	429a      	cmp	r2, r3
 8011206:	d206      	bcs.n	8011216 <tcp_write+0x14a>
 8011208:	4b67      	ldr	r3, [pc, #412]	; (80113a8 <tcp_write+0x2dc>)
 801120a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801120e:	496b      	ldr	r1, [pc, #428]	; (80113bc <tcp_write+0x2f0>)
 8011210:	4867      	ldr	r0, [pc, #412]	; (80113b0 <tcp_write+0x2e4>)
 8011212:	f004 ff71 	bl	80160f8 <iprintf>
      seg = last_unsent;
 8011216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011218:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801121a:	8a7b      	ldrh	r3, [r7, #18]
 801121c:	88fa      	ldrh	r2, [r7, #6]
 801121e:	4293      	cmp	r3, r2
 8011220:	bf28      	it	cs
 8011222:	4613      	movcs	r3, r2
 8011224:	b29b      	uxth	r3, r3
 8011226:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011228:	4293      	cmp	r3, r2
 801122a:	bf28      	it	cs
 801122c:	4613      	movcs	r3, r2
 801122e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011234:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011236:	4413      	add	r3, r2
 8011238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801123c:	8a7a      	ldrh	r2, [r7, #18]
 801123e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	b29b      	uxth	r3, r3
 8011244:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801124a:	1ad3      	subs	r3, r2, r3
 801124c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801124e:	8a7b      	ldrh	r3, [r7, #18]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00b      	beq.n	801126c <tcp_write+0x1a0>
 8011254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011258:	88fb      	ldrh	r3, [r7, #6]
 801125a:	429a      	cmp	r2, r3
 801125c:	d006      	beq.n	801126c <tcp_write+0x1a0>
 801125e:	4b52      	ldr	r3, [pc, #328]	; (80113a8 <tcp_write+0x2dc>)
 8011260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011264:	4956      	ldr	r1, [pc, #344]	; (80113c0 <tcp_write+0x2f4>)
 8011266:	4852      	ldr	r0, [pc, #328]	; (80113b0 <tcp_write+0x2e4>)
 8011268:	f004 ff46 	bl	80160f8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801126c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011270:	88fb      	ldrh	r3, [r7, #6]
 8011272:	429a      	cmp	r2, r3
 8011274:	f080 8167 	bcs.w	8011546 <tcp_write+0x47a>
 8011278:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801127a:	2b00      	cmp	r3, #0
 801127c:	f000 8163 	beq.w	8011546 <tcp_write+0x47a>
 8011280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011282:	891b      	ldrh	r3, [r3, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 815e 	beq.w	8011546 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801128a:	88fa      	ldrh	r2, [r7, #6]
 801128c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011290:	1ad2      	subs	r2, r2, r3
 8011292:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011294:	4293      	cmp	r3, r2
 8011296:	bfa8      	it	ge
 8011298:	4613      	movge	r3, r2
 801129a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801129c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801129e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80112a0:	797b      	ldrb	r3, [r7, #5]
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d027      	beq.n	80112fa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80112aa:	f107 0012 	add.w	r0, r7, #18
 80112ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112b0:	8bf9      	ldrh	r1, [r7, #30]
 80112b2:	2301      	movs	r3, #1
 80112b4:	9302      	str	r3, [sp, #8]
 80112b6:	797b      	ldrb	r3, [r7, #5]
 80112b8:	9301      	str	r3, [sp, #4]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	4603      	mov	r3, r0
 80112c0:	2000      	movs	r0, #0
 80112c2:	f7ff fe0f 	bl	8010ee4 <tcp_pbuf_prealloc>
 80112c6:	6578      	str	r0, [r7, #84]	; 0x54
 80112c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 8225 	beq.w	801171a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80112d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112d2:	6858      	ldr	r0, [r3, #4]
 80112d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112d8:	68ba      	ldr	r2, [r7, #8]
 80112da:	4413      	add	r3, r2
 80112dc:	8bfa      	ldrh	r2, [r7, #30]
 80112de:	4619      	mov	r1, r3
 80112e0:	f005 f831 	bl	8016346 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80112e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112e6:	f7fb f971 	bl	800c5cc <pbuf_clen>
 80112ea:	4603      	mov	r3, r0
 80112ec:	461a      	mov	r2, r3
 80112ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112f2:	4413      	add	r3, r2
 80112f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80112f8:	e041      	b.n	801137e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80112fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	637b      	str	r3, [r7, #52]	; 0x34
 8011300:	e002      	b.n	8011308 <tcp_write+0x23c>
 8011302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	637b      	str	r3, [r7, #52]	; 0x34
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1f8      	bne.n	8011302 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011312:	7b1b      	ldrb	r3, [r3, #12]
 8011314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d115      	bne.n	8011348 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011322:	8952      	ldrh	r2, [r2, #10]
 8011324:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011326:	68ba      	ldr	r2, [r7, #8]
 8011328:	429a      	cmp	r2, r3
 801132a:	d10d      	bne.n	8011348 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801132c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011330:	2b00      	cmp	r3, #0
 8011332:	d006      	beq.n	8011342 <tcp_write+0x276>
 8011334:	4b1c      	ldr	r3, [pc, #112]	; (80113a8 <tcp_write+0x2dc>)
 8011336:	f240 2231 	movw	r2, #561	; 0x231
 801133a:	4922      	ldr	r1, [pc, #136]	; (80113c4 <tcp_write+0x2f8>)
 801133c:	481c      	ldr	r0, [pc, #112]	; (80113b0 <tcp_write+0x2e4>)
 801133e:	f004 fedb 	bl	80160f8 <iprintf>
          extendlen = seglen;
 8011342:	8bfb      	ldrh	r3, [r7, #30]
 8011344:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011346:	e01a      	b.n	801137e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011348:	8bfb      	ldrh	r3, [r7, #30]
 801134a:	2201      	movs	r2, #1
 801134c:	4619      	mov	r1, r3
 801134e:	2000      	movs	r0, #0
 8011350:	f7fa fdca 	bl	800bee8 <pbuf_alloc>
 8011354:	6578      	str	r0, [r7, #84]	; 0x54
 8011356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011358:	2b00      	cmp	r3, #0
 801135a:	f000 81e0 	beq.w	801171e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801135e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	441a      	add	r2, r3
 8011366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011368:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801136a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801136c:	f7fb f92e 	bl	800c5cc <pbuf_clen>
 8011370:	4603      	mov	r3, r0
 8011372:	461a      	mov	r2, r3
 8011374:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011378:	4413      	add	r3, r2
 801137a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801137e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011382:	8bfb      	ldrh	r3, [r7, #30]
 8011384:	4413      	add	r3, r2
 8011386:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801138a:	e0dc      	b.n	8011546 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011392:	2b00      	cmp	r3, #0
 8011394:	f000 80d7 	beq.w	8011546 <tcp_write+0x47a>
 8011398:	4b03      	ldr	r3, [pc, #12]	; (80113a8 <tcp_write+0x2dc>)
 801139a:	f240 224a 	movw	r2, #586	; 0x24a
 801139e:	490a      	ldr	r1, [pc, #40]	; (80113c8 <tcp_write+0x2fc>)
 80113a0:	4803      	ldr	r0, [pc, #12]	; (80113b0 <tcp_write+0x2e4>)
 80113a2:	f004 fea9 	bl	80160f8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80113a6:	e0ce      	b.n	8011546 <tcp_write+0x47a>
 80113a8:	080195ac 	.word	0x080195ac
 80113ac:	0801974c 	.word	0x0801974c
 80113b0:	08019600 	.word	0x08019600
 80113b4:	08019764 	.word	0x08019764
 80113b8:	08019798 	.word	0x08019798
 80113bc:	080197b0 	.word	0x080197b0
 80113c0:	080197d0 	.word	0x080197d0
 80113c4:	080197f0 	.word	0x080197f0
 80113c8:	0801981c 	.word	0x0801981c
    struct pbuf *p;
    u16_t left = len - pos;
 80113cc:	88fa      	ldrh	r2, [r7, #6]
 80113ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80113d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80113da:	b29b      	uxth	r3, r3
 80113dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80113e2:	8b7a      	ldrh	r2, [r7, #26]
 80113e4:	8bbb      	ldrh	r3, [r7, #28]
 80113e6:	4293      	cmp	r3, r2
 80113e8:	bf28      	it	cs
 80113ea:	4613      	movcs	r3, r2
 80113ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113ee:	797b      	ldrb	r3, [r7, #5]
 80113f0:	f003 0301 	and.w	r3, r3, #1
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d036      	beq.n	8011466 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80113f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	8b3b      	ldrh	r3, [r7, #24]
 8011400:	4413      	add	r3, r2
 8011402:	b299      	uxth	r1, r3
 8011404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011406:	2b00      	cmp	r3, #0
 8011408:	bf0c      	ite	eq
 801140a:	2301      	moveq	r3, #1
 801140c:	2300      	movne	r3, #0
 801140e:	b2db      	uxtb	r3, r3
 8011410:	f107 0012 	add.w	r0, r7, #18
 8011414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011416:	9302      	str	r3, [sp, #8]
 8011418:	797b      	ldrb	r3, [r7, #5]
 801141a:	9301      	str	r3, [sp, #4]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	4603      	mov	r3, r0
 8011422:	2036      	movs	r0, #54	; 0x36
 8011424:	f7ff fd5e 	bl	8010ee4 <tcp_pbuf_prealloc>
 8011428:	6338      	str	r0, [r7, #48]	; 0x30
 801142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 8178 	beq.w	8011722 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011434:	895b      	ldrh	r3, [r3, #10]
 8011436:	8b3a      	ldrh	r2, [r7, #24]
 8011438:	429a      	cmp	r2, r3
 801143a:	d906      	bls.n	801144a <tcp_write+0x37e>
 801143c:	4b8c      	ldr	r3, [pc, #560]	; (8011670 <tcp_write+0x5a4>)
 801143e:	f240 2266 	movw	r2, #614	; 0x266
 8011442:	498c      	ldr	r1, [pc, #560]	; (8011674 <tcp_write+0x5a8>)
 8011444:	488c      	ldr	r0, [pc, #560]	; (8011678 <tcp_write+0x5ac>)
 8011446:	f004 fe57 	bl	80160f8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	685a      	ldr	r2, [r3, #4]
 801144e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011452:	18d0      	adds	r0, r2, r3
 8011454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	4413      	add	r3, r2
 801145c:	8b3a      	ldrh	r2, [r7, #24]
 801145e:	4619      	mov	r1, r3
 8011460:	f004 ff71 	bl	8016346 <memcpy>
 8011464:	e02f      	b.n	80114c6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011466:	8a7b      	ldrh	r3, [r7, #18]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d006      	beq.n	801147a <tcp_write+0x3ae>
 801146c:	4b80      	ldr	r3, [pc, #512]	; (8011670 <tcp_write+0x5a4>)
 801146e:	f240 2271 	movw	r2, #625	; 0x271
 8011472:	4982      	ldr	r1, [pc, #520]	; (801167c <tcp_write+0x5b0>)
 8011474:	4880      	ldr	r0, [pc, #512]	; (8011678 <tcp_write+0x5ac>)
 8011476:	f004 fe3f 	bl	80160f8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801147a:	8b3b      	ldrh	r3, [r7, #24]
 801147c:	2201      	movs	r2, #1
 801147e:	4619      	mov	r1, r3
 8011480:	2036      	movs	r0, #54	; 0x36
 8011482:	f7fa fd31 	bl	800bee8 <pbuf_alloc>
 8011486:	6178      	str	r0, [r7, #20]
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 814b 	beq.w	8011726 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	441a      	add	r2, r3
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801149c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114a6:	4619      	mov	r1, r3
 80114a8:	2036      	movs	r0, #54	; 0x36
 80114aa:	f7fa fd1d 	bl	800bee8 <pbuf_alloc>
 80114ae:	6338      	str	r0, [r7, #48]	; 0x30
 80114b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d103      	bne.n	80114be <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80114b6:	6978      	ldr	r0, [r7, #20]
 80114b8:	f7fa fffa 	bl	800c4b0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80114bc:	e136      	b.n	801172c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80114be:	6979      	ldr	r1, [r7, #20]
 80114c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114c2:	f7fb f8c3 	bl	800c64c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80114c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114c8:	f7fb f880 	bl	800c5cc <pbuf_clen>
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
 80114d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114d4:	4413      	add	r3, r2
 80114d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80114da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114de:	2b09      	cmp	r3, #9
 80114e0:	d903      	bls.n	80114ea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80114e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114e4:	f7fa ffe4 	bl	800c4b0 <pbuf_free>
      goto memerr;
 80114e8:	e120      	b.n	801172c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114f2:	441a      	add	r2, r3
 80114f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	4613      	mov	r3, r2
 80114fc:	2200      	movs	r2, #0
 80114fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7ff fc51 	bl	8010da8 <tcp_create_segment>
 8011506:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 810d 	beq.w	801172a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011512:	2b00      	cmp	r3, #0
 8011514:	d102      	bne.n	801151c <tcp_write+0x450>
      queue = seg;
 8011516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011518:	647b      	str	r3, [r7, #68]	; 0x44
 801151a:	e00c      	b.n	8011536 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801151c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <tcp_write+0x464>
 8011522:	4b53      	ldr	r3, [pc, #332]	; (8011670 <tcp_write+0x5a4>)
 8011524:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011528:	4955      	ldr	r1, [pc, #340]	; (8011680 <tcp_write+0x5b4>)
 801152a:	4853      	ldr	r0, [pc, #332]	; (8011678 <tcp_write+0x5ac>)
 801152c:	f004 fde4 	bl	80160f8 <iprintf>
      prev_seg->next = seg;
 8011530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011534:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011538:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801153a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801153e:	8b3b      	ldrh	r3, [r7, #24]
 8011540:	4413      	add	r3, r2
 8011542:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	429a      	cmp	r2, r3
 801154e:	f4ff af3d 	bcc.w	80113cc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011552:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011554:	2b00      	cmp	r3, #0
 8011556:	d02c      	beq.n	80115b2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801155e:	e01e      	b.n	801159e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	891a      	ldrh	r2, [r3, #8]
 8011564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011566:	4413      	add	r3, r2
 8011568:	b29a      	uxth	r2, r3
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d110      	bne.n	8011598 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801157c:	8952      	ldrh	r2, [r2, #10]
 801157e:	4413      	add	r3, r2
 8011580:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011582:	68b9      	ldr	r1, [r7, #8]
 8011584:	4618      	mov	r0, r3
 8011586:	f004 fede 	bl	8016346 <memcpy>
        p->len += oversize_used;
 801158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158c:	895a      	ldrh	r2, [r3, #10]
 801158e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011590:	4413      	add	r3, r2
 8011592:	b29a      	uxth	r2, r3
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d1dd      	bne.n	8011560 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80115a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a6:	891a      	ldrh	r2, [r3, #8]
 80115a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115aa:	4413      	add	r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80115b2:	8a7a      	ldrh	r2, [r7, #18]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80115ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d018      	beq.n	80115f2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80115c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d106      	bne.n	80115d4 <tcp_write+0x508>
 80115c6:	4b2a      	ldr	r3, [pc, #168]	; (8011670 <tcp_write+0x5a4>)
 80115c8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80115cc:	492d      	ldr	r1, [pc, #180]	; (8011684 <tcp_write+0x5b8>)
 80115ce:	482a      	ldr	r0, [pc, #168]	; (8011678 <tcp_write+0x5ac>)
 80115d0:	f004 fd92 	bl	80160f8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80115d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fb f836 	bl	800c64c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80115e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e2:	891a      	ldrh	r2, [r3, #8]
 80115e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115e6:	891b      	ldrh	r3, [r3, #8]
 80115e8:	4413      	add	r3, r2
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ee:	811a      	strh	r2, [r3, #8]
 80115f0:	e037      	b.n	8011662 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80115f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d034      	beq.n	8011662 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80115f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <tcp_write+0x53a>
 80115fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d106      	bne.n	8011614 <tcp_write+0x548>
 8011606:	4b1a      	ldr	r3, [pc, #104]	; (8011670 <tcp_write+0x5a4>)
 8011608:	f240 22e6 	movw	r2, #742	; 0x2e6
 801160c:	491e      	ldr	r1, [pc, #120]	; (8011688 <tcp_write+0x5bc>)
 801160e:	481a      	ldr	r0, [pc, #104]	; (8011678 <tcp_write+0x5ac>)
 8011610:	f004 fd72 	bl	80160f8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	62bb      	str	r3, [r7, #40]	; 0x28
 801161a:	e009      	b.n	8011630 <tcp_write+0x564>
      p->tot_len += extendlen;
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	891a      	ldrh	r2, [r3, #8]
 8011620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011622:	4413      	add	r3, r2
 8011624:	b29a      	uxth	r2, r3
 8011626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011628:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1f1      	bne.n	801161c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	891a      	ldrh	r2, [r3, #8]
 801163c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801163e:	4413      	add	r3, r2
 8011640:	b29a      	uxth	r2, r3
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011648:	895a      	ldrh	r2, [r3, #10]
 801164a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801164c:	4413      	add	r3, r2
 801164e:	b29a      	uxth	r2, r3
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011656:	891a      	ldrh	r2, [r3, #8]
 8011658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801165a:	4413      	add	r3, r2
 801165c:	b29a      	uxth	r2, r3
 801165e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011660:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011664:	2b00      	cmp	r3, #0
 8011666:	d111      	bne.n	801168c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801166c:	66da      	str	r2, [r3, #108]	; 0x6c
 801166e:	e010      	b.n	8011692 <tcp_write+0x5c6>
 8011670:	080195ac 	.word	0x080195ac
 8011674:	0801984c 	.word	0x0801984c
 8011678:	08019600 	.word	0x08019600
 801167c:	0801988c 	.word	0x0801988c
 8011680:	0801989c 	.word	0x0801989c
 8011684:	080198b0 	.word	0x080198b0
 8011688:	080198e8 	.word	0x080198e8
  } else {
    last_unsent->next = queue;
 801168c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011690:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011696:	88fb      	ldrh	r3, [r7, #6]
 8011698:	441a      	add	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80116a4:	88fb      	ldrh	r3, [r7, #6]
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80116b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00e      	beq.n	80116e2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10a      	bne.n	80116e2 <tcp_write+0x616>
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d106      	bne.n	80116e2 <tcp_write+0x616>
 80116d4:	4b2c      	ldr	r3, [pc, #176]	; (8011788 <tcp_write+0x6bc>)
 80116d6:	f240 3212 	movw	r2, #786	; 0x312
 80116da:	492c      	ldr	r1, [pc, #176]	; (801178c <tcp_write+0x6c0>)
 80116dc:	482c      	ldr	r0, [pc, #176]	; (8011790 <tcp_write+0x6c4>)
 80116de:	f004 fd0b 	bl	80160f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80116e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d016      	beq.n	8011716 <tcp_write+0x64a>
 80116e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d012      	beq.n	8011716 <tcp_write+0x64a>
 80116f0:	797b      	ldrb	r3, [r7, #5]
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d10d      	bne.n	8011716 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80116fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	899b      	ldrh	r3, [r3, #12]
 8011700:	b29c      	uxth	r4, r3
 8011702:	2008      	movs	r0, #8
 8011704:	f7f9 fa2a 	bl	800ab5c <lwip_htons>
 8011708:	4603      	mov	r3, r0
 801170a:	461a      	mov	r2, r3
 801170c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	4322      	orrs	r2, r4
 8011712:	b292      	uxth	r2, r2
 8011714:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011716:	2300      	movs	r3, #0
 8011718:	e031      	b.n	801177e <tcp_write+0x6b2>
          goto memerr;
 801171a:	bf00      	nop
 801171c:	e006      	b.n	801172c <tcp_write+0x660>
            goto memerr;
 801171e:	bf00      	nop
 8011720:	e004      	b.n	801172c <tcp_write+0x660>
        goto memerr;
 8011722:	bf00      	nop
 8011724:	e002      	b.n	801172c <tcp_write+0x660>
        goto memerr;
 8011726:	bf00      	nop
 8011728:	e000      	b.n	801172c <tcp_write+0x660>
      goto memerr;
 801172a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	8b5b      	ldrh	r3, [r3, #26]
 8011730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011734:	b29a      	uxth	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011740:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011742:	f7fa feb5 	bl	800c4b0 <pbuf_free>
  }
  if (queue != NULL) {
 8011746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011748:	2b00      	cmp	r3, #0
 801174a:	d002      	beq.n	8011752 <tcp_write+0x686>
    tcp_segs_free(queue);
 801174c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801174e:	f7fc fb6b 	bl	800de28 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00e      	beq.n	801177a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10a      	bne.n	801177a <tcp_write+0x6ae>
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011768:	2b00      	cmp	r3, #0
 801176a:	d106      	bne.n	801177a <tcp_write+0x6ae>
 801176c:	4b06      	ldr	r3, [pc, #24]	; (8011788 <tcp_write+0x6bc>)
 801176e:	f240 3227 	movw	r2, #807	; 0x327
 8011772:	4906      	ldr	r1, [pc, #24]	; (801178c <tcp_write+0x6c0>)
 8011774:	4806      	ldr	r0, [pc, #24]	; (8011790 <tcp_write+0x6c4>)
 8011776:	f004 fcbf 	bl	80160f8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801177e:	4618      	mov	r0, r3
 8011780:	375c      	adds	r7, #92	; 0x5c
 8011782:	46bd      	mov	sp, r7
 8011784:	bd90      	pop	{r4, r7, pc}
 8011786:	bf00      	nop
 8011788:	080195ac 	.word	0x080195ac
 801178c:	08019920 	.word	0x08019920
 8011790:	08019600 	.word	0x08019600

08011794 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011794:	b590      	push	{r4, r7, lr}
 8011796:	b08b      	sub	sp, #44	; 0x2c
 8011798:	af02      	add	r7, sp, #8
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	460b      	mov	r3, r1
 801179e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80117a0:	2300      	movs	r3, #0
 80117a2:	61fb      	str	r3, [r7, #28]
 80117a4:	2300      	movs	r3, #0
 80117a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80117a8:	2300      	movs	r3, #0
 80117aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d106      	bne.n	80117c0 <tcp_split_unsent_seg+0x2c>
 80117b2:	4b95      	ldr	r3, [pc, #596]	; (8011a08 <tcp_split_unsent_seg+0x274>)
 80117b4:	f240 324b 	movw	r2, #843	; 0x34b
 80117b8:	4994      	ldr	r1, [pc, #592]	; (8011a0c <tcp_split_unsent_seg+0x278>)
 80117ba:	4895      	ldr	r0, [pc, #596]	; (8011a10 <tcp_split_unsent_seg+0x27c>)
 80117bc:	f004 fc9c 	bl	80160f8 <iprintf>

  useg = pcb->unsent;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d102      	bne.n	80117d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80117cc:	f04f 33ff 	mov.w	r3, #4294967295
 80117d0:	e116      	b.n	8011a00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80117d2:	887b      	ldrh	r3, [r7, #2]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d109      	bne.n	80117ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80117d8:	4b8b      	ldr	r3, [pc, #556]	; (8011a08 <tcp_split_unsent_seg+0x274>)
 80117da:	f240 3253 	movw	r2, #851	; 0x353
 80117de:	498d      	ldr	r1, [pc, #564]	; (8011a14 <tcp_split_unsent_seg+0x280>)
 80117e0:	488b      	ldr	r0, [pc, #556]	; (8011a10 <tcp_split_unsent_seg+0x27c>)
 80117e2:	f004 fc89 	bl	80160f8 <iprintf>
    return ERR_VAL;
 80117e6:	f06f 0305 	mvn.w	r3, #5
 80117ea:	e109      	b.n	8011a00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	891b      	ldrh	r3, [r3, #8]
 80117f0:	887a      	ldrh	r2, [r7, #2]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d301      	bcc.n	80117fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	e102      	b.n	8011a00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117fe:	887a      	ldrh	r2, [r7, #2]
 8011800:	429a      	cmp	r2, r3
 8011802:	d906      	bls.n	8011812 <tcp_split_unsent_seg+0x7e>
 8011804:	4b80      	ldr	r3, [pc, #512]	; (8011a08 <tcp_split_unsent_seg+0x274>)
 8011806:	f240 325b 	movw	r2, #859	; 0x35b
 801180a:	4983      	ldr	r1, [pc, #524]	; (8011a18 <tcp_split_unsent_seg+0x284>)
 801180c:	4880      	ldr	r0, [pc, #512]	; (8011a10 <tcp_split_unsent_seg+0x27c>)
 801180e:	f004 fc73 	bl	80160f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	891b      	ldrh	r3, [r3, #8]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d106      	bne.n	8011828 <tcp_split_unsent_seg+0x94>
 801181a:	4b7b      	ldr	r3, [pc, #492]	; (8011a08 <tcp_split_unsent_seg+0x274>)
 801181c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011820:	497e      	ldr	r1, [pc, #504]	; (8011a1c <tcp_split_unsent_seg+0x288>)
 8011822:	487b      	ldr	r0, [pc, #492]	; (8011a10 <tcp_split_unsent_seg+0x27c>)
 8011824:	f004 fc68 	bl	80160f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	7a9b      	ldrb	r3, [r3, #10]
 801182c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	b2db      	uxtb	r3, r3
 8011834:	f003 0304 	and.w	r3, r3, #4
 8011838:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	891a      	ldrh	r2, [r3, #8]
 801183e:	887b      	ldrh	r3, [r7, #2]
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011844:	7bbb      	ldrb	r3, [r7, #14]
 8011846:	b29a      	uxth	r2, r3
 8011848:	89bb      	ldrh	r3, [r7, #12]
 801184a:	4413      	add	r3, r2
 801184c:	b29b      	uxth	r3, r3
 801184e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011852:	4619      	mov	r1, r3
 8011854:	2036      	movs	r0, #54	; 0x36
 8011856:	f7fa fb47 	bl	800bee8 <pbuf_alloc>
 801185a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 80b7 	beq.w	80119d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	891a      	ldrh	r2, [r3, #8]
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	891b      	ldrh	r3, [r3, #8]
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	b29a      	uxth	r2, r3
 8011872:	887b      	ldrh	r3, [r7, #2]
 8011874:	4413      	add	r3, r2
 8011876:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	6858      	ldr	r0, [r3, #4]
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	685a      	ldr	r2, [r3, #4]
 8011880:	7bbb      	ldrb	r3, [r7, #14]
 8011882:	18d1      	adds	r1, r2, r3
 8011884:	897b      	ldrh	r3, [r7, #10]
 8011886:	89ba      	ldrh	r2, [r7, #12]
 8011888:	f7fb f808 	bl	800c89c <pbuf_copy_partial>
 801188c:	4603      	mov	r3, r0
 801188e:	461a      	mov	r2, r3
 8011890:	89bb      	ldrh	r3, [r7, #12]
 8011892:	4293      	cmp	r3, r2
 8011894:	f040 809f 	bne.w	80119d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	899b      	ldrh	r3, [r3, #12]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f9 f95b 	bl	800ab5c <lwip_htons>
 80118a6:	4603      	mov	r3, r0
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80118b0:	2300      	movs	r3, #0
 80118b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80118b4:	7efb      	ldrb	r3, [r7, #27]
 80118b6:	f003 0308 	and.w	r3, r3, #8
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d007      	beq.n	80118ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80118be:	7efb      	ldrb	r3, [r7, #27]
 80118c0:	f023 0308 	bic.w	r3, r3, #8
 80118c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80118c6:	7ebb      	ldrb	r3, [r7, #26]
 80118c8:	f043 0308 	orr.w	r3, r3, #8
 80118cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80118ce:	7efb      	ldrb	r3, [r7, #27]
 80118d0:	f003 0301 	and.w	r3, r3, #1
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d007      	beq.n	80118e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80118d8:	7efb      	ldrb	r3, [r7, #27]
 80118da:	f023 0301 	bic.w	r3, r3, #1
 80118de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80118e0:	7ebb      	ldrb	r3, [r7, #26]
 80118e2:	f043 0301 	orr.w	r3, r3, #1
 80118e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7f9 f949 	bl	800ab86 <lwip_htonl>
 80118f4:	4602      	mov	r2, r0
 80118f6:	887b      	ldrh	r3, [r7, #2]
 80118f8:	18d1      	adds	r1, r2, r3
 80118fa:	7eba      	ldrb	r2, [r7, #26]
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	460b      	mov	r3, r1
 8011902:	6939      	ldr	r1, [r7, #16]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7ff fa4f 	bl	8010da8 <tcp_create_segment>
 801190a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d063      	beq.n	80119da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	4618      	mov	r0, r3
 8011918:	f7fa fe58 	bl	800c5cc <pbuf_clen>
 801191c:	4603      	mov	r3, r0
 801191e:	461a      	mov	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	b29a      	uxth	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	6858      	ldr	r0, [r3, #4]
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	891a      	ldrh	r2, [r3, #8]
 801193a:	89bb      	ldrh	r3, [r7, #12]
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	b29b      	uxth	r3, r3
 8011940:	4619      	mov	r1, r3
 8011942:	f7fa fc2f 	bl	800c1a4 <pbuf_realloc>
  useg->len -= remainder;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	891a      	ldrh	r2, [r3, #8]
 801194a:	89bb      	ldrh	r3, [r7, #12]
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	b29a      	uxth	r2, r3
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	68db      	ldr	r3, [r3, #12]
 8011958:	899b      	ldrh	r3, [r3, #12]
 801195a:	b29c      	uxth	r4, r3
 801195c:	7efb      	ldrb	r3, [r7, #27]
 801195e:	b29b      	uxth	r3, r3
 8011960:	4618      	mov	r0, r3
 8011962:	f7f9 f8fb 	bl	800ab5c <lwip_htons>
 8011966:	4603      	mov	r3, r0
 8011968:	461a      	mov	r2, r3
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	4322      	orrs	r2, r4
 8011970:	b292      	uxth	r2, r2
 8011972:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	4618      	mov	r0, r3
 801197a:	f7fa fe27 	bl	800c5cc <pbuf_clen>
 801197e:	4603      	mov	r3, r0
 8011980:	461a      	mov	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011988:	4413      	add	r3, r2
 801198a:	b29a      	uxth	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	4618      	mov	r0, r3
 8011998:	f7fa fe18 	bl	800c5cc <pbuf_clen>
 801199c:	4603      	mov	r3, r0
 801199e:	461a      	mov	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119a6:	4413      	add	r3, r2
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	69fa      	ldr	r2, [r7, #28]
 80119bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d103      	bne.n	80119ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	e016      	b.n	8011a00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80119d2:	bf00      	nop
 80119d4:	e002      	b.n	80119dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119d6:	bf00      	nop
 80119d8:	e000      	b.n	80119dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d006      	beq.n	80119f0 <tcp_split_unsent_seg+0x25c>
 80119e2:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <tcp_split_unsent_seg+0x274>)
 80119e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80119e8:	490d      	ldr	r1, [pc, #52]	; (8011a20 <tcp_split_unsent_seg+0x28c>)
 80119ea:	4809      	ldr	r0, [pc, #36]	; (8011a10 <tcp_split_unsent_seg+0x27c>)
 80119ec:	f004 fb84 	bl	80160f8 <iprintf>
  if (p != NULL) {
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80119f6:	6938      	ldr	r0, [r7, #16]
 80119f8:	f7fa fd5a 	bl	800c4b0 <pbuf_free>
  }

  return ERR_MEM;
 80119fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3724      	adds	r7, #36	; 0x24
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd90      	pop	{r4, r7, pc}
 8011a08:	080195ac 	.word	0x080195ac
 8011a0c:	08019940 	.word	0x08019940
 8011a10:	08019600 	.word	0x08019600
 8011a14:	08019964 	.word	0x08019964
 8011a18:	08019988 	.word	0x08019988
 8011a1c:	08019998 	.word	0x08019998
 8011a20:	080199a8 	.word	0x080199a8

08011a24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d106      	bne.n	8011a40 <tcp_send_fin+0x1c>
 8011a32:	4b21      	ldr	r3, [pc, #132]	; (8011ab8 <tcp_send_fin+0x94>)
 8011a34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011a38:	4920      	ldr	r1, [pc, #128]	; (8011abc <tcp_send_fin+0x98>)
 8011a3a:	4821      	ldr	r0, [pc, #132]	; (8011ac0 <tcp_send_fin+0x9c>)
 8011a3c:	f004 fb5c 	bl	80160f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d02e      	beq.n	8011aa6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a4c:	60fb      	str	r3, [r7, #12]
 8011a4e:	e002      	b.n	8011a56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1f8      	bne.n	8011a50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	899b      	ldrh	r3, [r3, #12]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7f9 f878 	bl	800ab5c <lwip_htons>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0307 	and.w	r3, r3, #7
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d116      	bne.n	8011aa6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	899b      	ldrh	r3, [r3, #12]
 8011a7e:	b29c      	uxth	r4, r3
 8011a80:	2001      	movs	r0, #1
 8011a82:	f7f9 f86b 	bl	800ab5c <lwip_htons>
 8011a86:	4603      	mov	r3, r0
 8011a88:	461a      	mov	r2, r3
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	4322      	orrs	r2, r4
 8011a90:	b292      	uxth	r2, r2
 8011a92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	8b5b      	ldrh	r3, [r3, #26]
 8011a98:	f043 0320 	orr.w	r3, r3, #32
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	e004      	b.n	8011ab0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011aa6:	2101      	movs	r1, #1
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f000 f80b 	bl	8011ac4 <tcp_enqueue_flags>
 8011aae:	4603      	mov	r3, r0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3714      	adds	r7, #20
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd90      	pop	{r4, r7, pc}
 8011ab8:	080195ac 	.word	0x080195ac
 8011abc:	080199b4 	.word	0x080199b4
 8011ac0:	08019600 	.word	0x08019600

08011ac4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08a      	sub	sp, #40	; 0x28
 8011ac8:	af02      	add	r7, sp, #8
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	460b      	mov	r3, r1
 8011ace:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ad8:	78fb      	ldrb	r3, [r7, #3]
 8011ada:	f003 0303 	and.w	r3, r3, #3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d106      	bne.n	8011af0 <tcp_enqueue_flags+0x2c>
 8011ae2:	4b67      	ldr	r3, [pc, #412]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011ae4:	f240 4211 	movw	r2, #1041	; 0x411
 8011ae8:	4966      	ldr	r1, [pc, #408]	; (8011c84 <tcp_enqueue_flags+0x1c0>)
 8011aea:	4867      	ldr	r0, [pc, #412]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011aec:	f004 fb04 	bl	80160f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d106      	bne.n	8011b04 <tcp_enqueue_flags+0x40>
 8011af6:	4b62      	ldr	r3, [pc, #392]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011af8:	f240 4213 	movw	r2, #1043	; 0x413
 8011afc:	4963      	ldr	r1, [pc, #396]	; (8011c8c <tcp_enqueue_flags+0x1c8>)
 8011afe:	4862      	ldr	r0, [pc, #392]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011b00:	f004 fafa 	bl	80160f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011b04:	78fb      	ldrb	r3, [r7, #3]
 8011b06:	f003 0302 	and.w	r3, r3, #2
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d001      	beq.n	8011b12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b12:	7ffb      	ldrb	r3, [r7, #31]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	f003 0304 	and.w	r3, r3, #4
 8011b1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b26:	4619      	mov	r1, r3
 8011b28:	2036      	movs	r0, #54	; 0x36
 8011b2a:	f7fa f9dd 	bl	800bee8 <pbuf_alloc>
 8011b2e:	6138      	str	r0, [r7, #16]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d109      	bne.n	8011b4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	8b5b      	ldrh	r3, [r3, #26]
 8011b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b44:	f04f 33ff 	mov.w	r3, #4294967295
 8011b48:	e095      	b.n	8011c76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	895a      	ldrh	r2, [r3, #10]
 8011b4e:	7dfb      	ldrb	r3, [r7, #23]
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d206      	bcs.n	8011b64 <tcp_enqueue_flags+0xa0>
 8011b56:	4b4a      	ldr	r3, [pc, #296]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011b58:	f240 4239 	movw	r2, #1081	; 0x439
 8011b5c:	494c      	ldr	r1, [pc, #304]	; (8011c90 <tcp_enqueue_flags+0x1cc>)
 8011b5e:	484a      	ldr	r0, [pc, #296]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011b60:	f004 faca 	bl	80160f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011b68:	78fa      	ldrb	r2, [r7, #3]
 8011b6a:	7ffb      	ldrb	r3, [r7, #31]
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	460b      	mov	r3, r1
 8011b70:	6939      	ldr	r1, [r7, #16]
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7ff f918 	bl	8010da8 <tcp_create_segment>
 8011b78:	60f8      	str	r0, [r7, #12]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d109      	bne.n	8011b94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	8b5b      	ldrh	r3, [r3, #26]
 8011b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b92:	e070      	b.n	8011c76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	f003 0303 	and.w	r3, r3, #3
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d006      	beq.n	8011bae <tcp_enqueue_flags+0xea>
 8011ba0:	4b37      	ldr	r3, [pc, #220]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011ba2:	f240 4242 	movw	r2, #1090	; 0x442
 8011ba6:	493b      	ldr	r1, [pc, #236]	; (8011c94 <tcp_enqueue_flags+0x1d0>)
 8011ba8:	4837      	ldr	r0, [pc, #220]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011baa:	f004 faa5 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	891b      	ldrh	r3, [r3, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d006      	beq.n	8011bc4 <tcp_enqueue_flags+0x100>
 8011bb6:	4b32      	ldr	r3, [pc, #200]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011bb8:	f240 4243 	movw	r2, #1091	; 0x443
 8011bbc:	4936      	ldr	r1, [pc, #216]	; (8011c98 <tcp_enqueue_flags+0x1d4>)
 8011bbe:	4832      	ldr	r0, [pc, #200]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011bc0:	f004 fa9a 	bl	80160f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d103      	bne.n	8011bd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011bd2:	e00d      	b.n	8011bf0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd8:	61bb      	str	r3, [r7, #24]
 8011bda:	e002      	b.n	8011be2 <tcp_enqueue_flags+0x11e>
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	61bb      	str	r3, [r7, #24]
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1f8      	bne.n	8011bdc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011bf8:	78fb      	ldrb	r3, [r7, #3]
 8011bfa:	f003 0302 	and.w	r3, r3, #2
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d104      	bne.n	8011c0c <tcp_enqueue_flags+0x148>
 8011c02:	78fb      	ldrb	r3, [r7, #3]
 8011c04:	f003 0301 	and.w	r3, r3, #1
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011c16:	78fb      	ldrb	r3, [r7, #3]
 8011c18:	f003 0301 	and.w	r3, r3, #1
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d006      	beq.n	8011c2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	8b5b      	ldrh	r3, [r3, #26]
 8011c24:	f043 0320 	orr.w	r3, r3, #32
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fa fcca 	bl	800c5cc <pbuf_clen>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c42:	4413      	add	r3, r2
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00e      	beq.n	8011c74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d10a      	bne.n	8011c74 <tcp_enqueue_flags+0x1b0>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <tcp_enqueue_flags+0x1b0>
 8011c66:	4b06      	ldr	r3, [pc, #24]	; (8011c80 <tcp_enqueue_flags+0x1bc>)
 8011c68:	f240 4265 	movw	r2, #1125	; 0x465
 8011c6c:	490b      	ldr	r1, [pc, #44]	; (8011c9c <tcp_enqueue_flags+0x1d8>)
 8011c6e:	4806      	ldr	r0, [pc, #24]	; (8011c88 <tcp_enqueue_flags+0x1c4>)
 8011c70:	f004 fa42 	bl	80160f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3720      	adds	r7, #32
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	080195ac 	.word	0x080195ac
 8011c84:	080199d0 	.word	0x080199d0
 8011c88:	08019600 	.word	0x08019600
 8011c8c:	08019a28 	.word	0x08019a28
 8011c90:	08019a48 	.word	0x08019a48
 8011c94:	08019a84 	.word	0x08019a84
 8011c98:	08019a9c 	.word	0x08019a9c
 8011c9c:	08019ac8 	.word	0x08019ac8

08011ca0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ca0:	b5b0      	push	{r4, r5, r7, lr}
 8011ca2:	b08a      	sub	sp, #40	; 0x28
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d106      	bne.n	8011cbc <tcp_output+0x1c>
 8011cae:	4b8a      	ldr	r3, [pc, #552]	; (8011ed8 <tcp_output+0x238>)
 8011cb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011cb4:	4989      	ldr	r1, [pc, #548]	; (8011edc <tcp_output+0x23c>)
 8011cb6:	488a      	ldr	r0, [pc, #552]	; (8011ee0 <tcp_output+0x240>)
 8011cb8:	f004 fa1e 	bl	80160f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d106      	bne.n	8011cd2 <tcp_output+0x32>
 8011cc4:	4b84      	ldr	r3, [pc, #528]	; (8011ed8 <tcp_output+0x238>)
 8011cc6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011cca:	4986      	ldr	r1, [pc, #536]	; (8011ee4 <tcp_output+0x244>)
 8011ccc:	4884      	ldr	r0, [pc, #528]	; (8011ee0 <tcp_output+0x240>)
 8011cce:	f004 fa13 	bl	80160f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011cd2:	4b85      	ldr	r3, [pc, #532]	; (8011ee8 <tcp_output+0x248>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d101      	bne.n	8011ce0 <tcp_output+0x40>
    return ERR_OK;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	e1ce      	b.n	801207e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cec:	4293      	cmp	r3, r2
 8011cee:	bf28      	it	cs
 8011cf0:	4613      	movcs	r3, r2
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d10b      	bne.n	8011d1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8b5b      	ldrh	r3, [r3, #26]
 8011d06:	f003 0302 	and.w	r3, r3, #2
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f000 81aa 	beq.w	8012064 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 fdcb 	bl	80128ac <tcp_send_empty_ack>
 8011d16:	4603      	mov	r3, r0
 8011d18:	e1b1      	b.n	801207e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011d1a:	6879      	ldr	r1, [r7, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	3304      	adds	r3, #4
 8011d20:	461a      	mov	r2, r3
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7ff f824 	bl	8010d70 <tcp_route>
 8011d28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d102      	bne.n	8011d36 <tcp_output+0x96>
    return ERR_RTE;
 8011d30:	f06f 0303 	mvn.w	r3, #3
 8011d34:	e1a3      	b.n	801207e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d003      	beq.n	8011d44 <tcp_output+0xa4>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d111      	bne.n	8011d68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <tcp_output+0xb0>
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	e000      	b.n	8011d52 <tcp_output+0xb2>
 8011d50:	2300      	movs	r3, #0
 8011d52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d102      	bne.n	8011d60 <tcp_output+0xc0>
      return ERR_RTE;
 8011d5a:	f06f 0303 	mvn.w	r3, #3
 8011d5e:	e18e      	b.n	801207e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7f8 ff09 	bl	800ab86 <lwip_htonl>
 8011d74:	4602      	mov	r2, r0
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d7a:	1ad3      	subs	r3, r2, r3
 8011d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d7e:	8912      	ldrh	r2, [r2, #8]
 8011d80:	4413      	add	r3, r2
 8011d82:	69ba      	ldr	r2, [r7, #24]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d227      	bcs.n	8011dd8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d8e:	461a      	mov	r2, r3
 8011d90:	69bb      	ldr	r3, [r7, #24]
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d114      	bne.n	8011dc0 <tcp_output+0x120>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d110      	bne.n	8011dc0 <tcp_output+0x120>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d10b      	bne.n	8011dc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2201      	movs	r2, #1
 8011db4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	8b5b      	ldrh	r3, [r3, #26]
 8011dc4:	f003 0302 	and.w	r3, r3, #2
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f000 814d 	beq.w	8012068 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 fd6c 	bl	80128ac <tcp_send_empty_ack>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	e152      	b.n	801207e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011de6:	6a3b      	ldr	r3, [r7, #32]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	f000 811c 	beq.w	8012026 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011dee:	e002      	b.n	8011df6 <tcp_output+0x156>
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	623b      	str	r3, [r7, #32]
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1f8      	bne.n	8011df0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011dfe:	e112      	b.n	8012026 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	899b      	ldrh	r3, [r3, #12]
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7f8 fea7 	bl	800ab5c <lwip_htons>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	f003 0304 	and.w	r3, r3, #4
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d006      	beq.n	8011e28 <tcp_output+0x188>
 8011e1a:	4b2f      	ldr	r3, [pc, #188]	; (8011ed8 <tcp_output+0x238>)
 8011e1c:	f240 5236 	movw	r2, #1334	; 0x536
 8011e20:	4932      	ldr	r1, [pc, #200]	; (8011eec <tcp_output+0x24c>)
 8011e22:	482f      	ldr	r0, [pc, #188]	; (8011ee0 <tcp_output+0x240>)
 8011e24:	f004 f968 	bl	80160f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01f      	beq.n	8011e70 <tcp_output+0x1d0>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	8b5b      	ldrh	r3, [r3, #26]
 8011e34:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d119      	bne.n	8011e70 <tcp_output+0x1d0>
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00b      	beq.n	8011e5c <tcp_output+0x1bc>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d110      	bne.n	8011e70 <tcp_output+0x1d0>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e52:	891a      	ldrh	r2, [r3, #8]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d209      	bcs.n	8011e70 <tcp_output+0x1d0>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d004      	beq.n	8011e70 <tcp_output+0x1d0>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e6c:	2b08      	cmp	r3, #8
 8011e6e:	d901      	bls.n	8011e74 <tcp_output+0x1d4>
 8011e70:	2301      	movs	r3, #1
 8011e72:	e000      	b.n	8011e76 <tcp_output+0x1d6>
 8011e74:	2300      	movs	r3, #0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d106      	bne.n	8011e88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	8b5b      	ldrh	r3, [r3, #26]
 8011e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	f000 80e4 	beq.w	8012050 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	7d1b      	ldrb	r3, [r3, #20]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d00d      	beq.n	8011eac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	899b      	ldrh	r3, [r3, #12]
 8011e96:	b29c      	uxth	r4, r3
 8011e98:	2010      	movs	r0, #16
 8011e9a:	f7f8 fe5f 	bl	800ab5c <lwip_htons>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	4322      	orrs	r2, r4
 8011ea8:	b292      	uxth	r2, r2
 8011eaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011eac:	697a      	ldr	r2, [r7, #20]
 8011eae:	6879      	ldr	r1, [r7, #4]
 8011eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eb2:	f000 f909 	bl	80120c8 <tcp_output_segment>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d016      	beq.n	8011ef0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	8b5b      	ldrh	r3, [r3, #26]
 8011ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	835a      	strh	r2, [r3, #26]
      return err;
 8011ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed4:	e0d3      	b.n	801207e <tcp_output+0x3de>
 8011ed6:	bf00      	nop
 8011ed8:	080195ac 	.word	0x080195ac
 8011edc:	08019af0 	.word	0x08019af0
 8011ee0:	08019600 	.word	0x08019600
 8011ee4:	08019b08 	.word	0x08019b08
 8011ee8:	240074f4 	.word	0x240074f4
 8011eec:	08019b30 	.word	0x08019b30
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	7d1b      	ldrb	r3, [r3, #20]
 8011efc:	2b02      	cmp	r3, #2
 8011efe:	d006      	beq.n	8011f0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8b5b      	ldrh	r3, [r3, #26]
 8011f04:	f023 0303 	bic.w	r3, r3, #3
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f8 fe36 	bl	800ab86 <lwip_htonl>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	891b      	ldrh	r3, [r3, #8]
 8011f20:	461d      	mov	r5, r3
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	899b      	ldrh	r3, [r3, #12]
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f8 fe16 	bl	800ab5c <lwip_htons>
 8011f30:	4603      	mov	r3, r0
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 0303 	and.w	r3, r3, #3
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d001      	beq.n	8011f40 <tcp_output+0x2a0>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e000      	b.n	8011f42 <tcp_output+0x2a2>
 8011f40:	2300      	movs	r3, #0
 8011f42:	442b      	add	r3, r5
 8011f44:	4423      	add	r3, r4
 8011f46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	1ad3      	subs	r3, r2, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	da02      	bge.n	8011f5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	891b      	ldrh	r3, [r3, #8]
 8011f5e:	461c      	mov	r4, r3
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	899b      	ldrh	r3, [r3, #12]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7f8 fdf7 	bl	800ab5c <lwip_htons>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	f003 0303 	and.w	r3, r3, #3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d001      	beq.n	8011f7e <tcp_output+0x2de>
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	e000      	b.n	8011f80 <tcp_output+0x2e0>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4423      	add	r3, r4
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d049      	beq.n	801201a <tcp_output+0x37a>
      seg->next = NULL;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	2200      	movs	r2, #0
 8011f8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d105      	bne.n	8011fa0 <tcp_output+0x300>
        pcb->unacked = seg;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	623b      	str	r3, [r7, #32]
 8011f9e:	e03f      	b.n	8012020 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7f8 fded 	bl	800ab86 <lwip_htonl>
 8011fac:	4604      	mov	r4, r0
 8011fae:	6a3b      	ldr	r3, [r7, #32]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f8 fde6 	bl	800ab86 <lwip_htonl>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	1ae3      	subs	r3, r4, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	da24      	bge.n	801200c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3370      	adds	r3, #112	; 0x70
 8011fc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fc8:	e002      	b.n	8011fd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d011      	beq.n	8011ffc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f8 fdd0 	bl	800ab86 <lwip_htonl>
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f8 fdc9 	bl	800ab86 <lwip_htonl>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	dbe6      	blt.n	8011fca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012002:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012008:	601a      	str	r2, [r3, #0]
 801200a:	e009      	b.n	8012020 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801200c:	6a3b      	ldr	r3, [r7, #32]
 801200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012010:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	623b      	str	r3, [r7, #32]
 8012018:	e002      	b.n	8012020 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801201a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801201c:	f7fb ff19 	bl	800de52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012024:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	2b00      	cmp	r3, #0
 801202a:	d012      	beq.n	8012052 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f8 fda7 	bl	800ab86 <lwip_htonl>
 8012038:	4602      	mov	r2, r0
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012042:	8912      	ldrh	r2, [r2, #8]
 8012044:	4413      	add	r3, r2
  while (seg != NULL &&
 8012046:	69ba      	ldr	r2, [r7, #24]
 8012048:	429a      	cmp	r2, r3
 801204a:	f4bf aed9 	bcs.w	8011e00 <tcp_output+0x160>
 801204e:	e000      	b.n	8012052 <tcp_output+0x3b2>
      break;
 8012050:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d108      	bne.n	801206c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012062:	e004      	b.n	801206e <tcp_output+0x3ce>
    goto output_done;
 8012064:	bf00      	nop
 8012066:	e002      	b.n	801206e <tcp_output+0x3ce>
    goto output_done;
 8012068:	bf00      	nop
 801206a:	e000      	b.n	801206e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801206c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	8b5b      	ldrh	r3, [r3, #26]
 8012072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3728      	adds	r7, #40	; 0x28
 8012082:	46bd      	mov	sp, r7
 8012084:	bdb0      	pop	{r4, r5, r7, pc}
 8012086:	bf00      	nop

08012088 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <tcp_output_segment_busy+0x1c>
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <tcp_output_segment_busy+0x34>)
 8012098:	f240 529a 	movw	r2, #1434	; 0x59a
 801209c:	4908      	ldr	r1, [pc, #32]	; (80120c0 <tcp_output_segment_busy+0x38>)
 801209e:	4809      	ldr	r0, [pc, #36]	; (80120c4 <tcp_output_segment_busy+0x3c>)
 80120a0:	f004 f82a 	bl	80160f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	7b9b      	ldrb	r3, [r3, #14]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d001      	beq.n	80120b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80120ae:	2301      	movs	r3, #1
 80120b0:	e000      	b.n	80120b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	080195ac 	.word	0x080195ac
 80120c0:	08019b48 	.word	0x08019b48
 80120c4:	08019600 	.word	0x08019600

080120c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80120c8:	b5b0      	push	{r4, r5, r7, lr}
 80120ca:	b08c      	sub	sp, #48	; 0x30
 80120cc:	af04      	add	r7, sp, #16
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	60b9      	str	r1, [r7, #8]
 80120d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <tcp_output_segment+0x20>
 80120da:	4b64      	ldr	r3, [pc, #400]	; (801226c <tcp_output_segment+0x1a4>)
 80120dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80120e0:	4963      	ldr	r1, [pc, #396]	; (8012270 <tcp_output_segment+0x1a8>)
 80120e2:	4864      	ldr	r0, [pc, #400]	; (8012274 <tcp_output_segment+0x1ac>)
 80120e4:	f004 f808 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <tcp_output_segment+0x34>
 80120ee:	4b5f      	ldr	r3, [pc, #380]	; (801226c <tcp_output_segment+0x1a4>)
 80120f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80120f4:	4960      	ldr	r1, [pc, #384]	; (8012278 <tcp_output_segment+0x1b0>)
 80120f6:	485f      	ldr	r0, [pc, #380]	; (8012274 <tcp_output_segment+0x1ac>)
 80120f8:	f003 fffe 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <tcp_output_segment+0x48>
 8012102:	4b5a      	ldr	r3, [pc, #360]	; (801226c <tcp_output_segment+0x1a4>)
 8012104:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012108:	495c      	ldr	r1, [pc, #368]	; (801227c <tcp_output_segment+0x1b4>)
 801210a:	485a      	ldr	r0, [pc, #360]	; (8012274 <tcp_output_segment+0x1ac>)
 801210c:	f003 fff4 	bl	80160f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff ffb9 	bl	8012088 <tcp_output_segment_busy>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d001      	beq.n	8012120 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	e0a1      	b.n	8012264 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	68dc      	ldr	r4, [r3, #12]
 8012128:	4610      	mov	r0, r2
 801212a:	f7f8 fd2c 	bl	800ab86 <lwip_htonl>
 801212e:	4603      	mov	r3, r0
 8012130:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	68dc      	ldr	r4, [r3, #12]
 801213a:	4610      	mov	r0, r2
 801213c:	f7f8 fd0e 	bl	800ab5c <lwip_htons>
 8012140:	4603      	mov	r3, r0
 8012142:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801214c:	441a      	add	r2, r3
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	3314      	adds	r3, #20
 8012158:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	7a9b      	ldrb	r3, [r3, #10]
 801215e:	f003 0301 	and.w	r3, r3, #1
 8012162:	2b00      	cmp	r3, #0
 8012164:	d015      	beq.n	8012192 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	3304      	adds	r3, #4
 801216a:	461a      	mov	r2, r3
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012172:	f7fc fa33 	bl	800e5dc <tcp_eff_send_mss_netif>
 8012176:	4603      	mov	r3, r0
 8012178:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801217a:	8b7b      	ldrh	r3, [r7, #26]
 801217c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012180:	4618      	mov	r0, r3
 8012182:	f7f8 fd00 	bl	800ab86 <lwip_htonl>
 8012186:	4602      	mov	r2, r0
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	3304      	adds	r3, #4
 8012190:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012198:	2b00      	cmp	r3, #0
 801219a:	da02      	bge.n	80121a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	2200      	movs	r2, #0
 80121a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10c      	bne.n	80121c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80121aa:	4b35      	ldr	r3, [pc, #212]	; (8012280 <tcp_output_segment+0x1b8>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7f8 fce4 	bl	800ab86 <lwip_htonl>
 80121be:	4602      	mov	r2, r0
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	68da      	ldr	r2, [r3, #12]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	685b      	ldr	r3, [r3, #4]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	8959      	ldrh	r1, [r3, #10]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	8b3a      	ldrh	r2, [r7, #24]
 80121de:	1a8a      	subs	r2, r1, r2
 80121e0:	b292      	uxth	r2, r2
 80121e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	8919      	ldrh	r1, [r3, #8]
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	8b3a      	ldrh	r2, [r7, #24]
 80121f0:	1a8a      	subs	r2, r1, r2
 80121f2:	b292      	uxth	r2, r2
 80121f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	68d2      	ldr	r2, [r2, #12]
 80121fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	741a      	strb	r2, [r3, #16]
 8012208:	2200      	movs	r2, #0
 801220a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	68da      	ldr	r2, [r3, #12]
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	7a9b      	ldrb	r3, [r3, #10]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <tcp_output_segment+0x158>
 801221c:	2318      	movs	r3, #24
 801221e:	e000      	b.n	8012222 <tcp_output_segment+0x15a>
 8012220:	2314      	movs	r3, #20
 8012222:	4413      	add	r3, r2
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	429a      	cmp	r2, r3
 8012228:	d006      	beq.n	8012238 <tcp_output_segment+0x170>
 801222a:	4b10      	ldr	r3, [pc, #64]	; (801226c <tcp_output_segment+0x1a4>)
 801222c:	f240 621c 	movw	r2, #1564	; 0x61c
 8012230:	4914      	ldr	r1, [pc, #80]	; (8012284 <tcp_output_segment+0x1bc>)
 8012232:	4810      	ldr	r0, [pc, #64]	; (8012274 <tcp_output_segment+0x1ac>)
 8012234:	f003 ff60 	bl	80160f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6858      	ldr	r0, [r3, #4]
 801223c:	68b9      	ldr	r1, [r7, #8]
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	1d1c      	adds	r4, r3, #4
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	7add      	ldrb	r5, [r3, #11]
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	7a9b      	ldrb	r3, [r3, #10]
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	9202      	str	r2, [sp, #8]
 801224e:	2206      	movs	r2, #6
 8012250:	9201      	str	r2, [sp, #4]
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	462b      	mov	r3, r5
 8012256:	4622      	mov	r2, r4
 8012258:	f002 fc3e 	bl	8014ad8 <ip4_output_if>
 801225c:	4603      	mov	r3, r0
 801225e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3720      	adds	r7, #32
 8012268:	46bd      	mov	sp, r7
 801226a:	bdb0      	pop	{r4, r5, r7, pc}
 801226c:	080195ac 	.word	0x080195ac
 8012270:	08019b70 	.word	0x08019b70
 8012274:	08019600 	.word	0x08019600
 8012278:	08019b90 	.word	0x08019b90
 801227c:	08019bb0 	.word	0x08019bb0
 8012280:	240074a8 	.word	0x240074a8
 8012284:	08019bd4 	.word	0x08019bd4

08012288 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012288:	b5b0      	push	{r4, r5, r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d106      	bne.n	80122a4 <tcp_rexmit_rto_prepare+0x1c>
 8012296:	4b31      	ldr	r3, [pc, #196]	; (801235c <tcp_rexmit_rto_prepare+0xd4>)
 8012298:	f240 6263 	movw	r2, #1635	; 0x663
 801229c:	4930      	ldr	r1, [pc, #192]	; (8012360 <tcp_rexmit_rto_prepare+0xd8>)
 801229e:	4831      	ldr	r0, [pc, #196]	; (8012364 <tcp_rexmit_rto_prepare+0xdc>)
 80122a0:	f003 ff2a 	bl	80160f8 <iprintf>

  if (pcb->unacked == NULL) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d102      	bne.n	80122b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80122ac:	f06f 0305 	mvn.w	r3, #5
 80122b0:	e050      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b6:	60fb      	str	r3, [r7, #12]
 80122b8:	e00b      	b.n	80122d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f7ff fee4 	bl	8012088 <tcp_output_segment_busy>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80122c6:	f06f 0305 	mvn.w	r3, #5
 80122ca:	e043      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	60fb      	str	r3, [r7, #12]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d1ef      	bne.n	80122ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	f7ff fed4 	bl	8012088 <tcp_output_segment_busy>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d002      	beq.n	80122ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80122e6:	f06f 0305 	mvn.w	r3, #5
 80122ea:	e033      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	8b5b      	ldrh	r3, [r3, #26]
 8012306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801230a:	b29a      	uxth	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	4618      	mov	r0, r3
 8012318:	f7f8 fc35 	bl	800ab86 <lwip_htonl>
 801231c:	4604      	mov	r4, r0
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	891b      	ldrh	r3, [r3, #8]
 8012322:	461d      	mov	r5, r3
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	899b      	ldrh	r3, [r3, #12]
 801232a:	b29b      	uxth	r3, r3
 801232c:	4618      	mov	r0, r3
 801232e:	f7f8 fc15 	bl	800ab5c <lwip_htons>
 8012332:	4603      	mov	r3, r0
 8012334:	b2db      	uxtb	r3, r3
 8012336:	f003 0303 	and.w	r3, r3, #3
 801233a:	2b00      	cmp	r3, #0
 801233c:	d001      	beq.n	8012342 <tcp_rexmit_rto_prepare+0xba>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <tcp_rexmit_rto_prepare+0xbc>
 8012342:	2300      	movs	r3, #0
 8012344:	442b      	add	r3, r5
 8012346:	18e2      	adds	r2, r4, r3
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3710      	adds	r7, #16
 8012358:	46bd      	mov	sp, r7
 801235a:	bdb0      	pop	{r4, r5, r7, pc}
 801235c:	080195ac 	.word	0x080195ac
 8012360:	08019be8 	.word	0x08019be8
 8012364:	08019600 	.word	0x08019600

08012368 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d106      	bne.n	8012384 <tcp_rexmit_rto_commit+0x1c>
 8012376:	4b0d      	ldr	r3, [pc, #52]	; (80123ac <tcp_rexmit_rto_commit+0x44>)
 8012378:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801237c:	490c      	ldr	r1, [pc, #48]	; (80123b0 <tcp_rexmit_rto_commit+0x48>)
 801237e:	480d      	ldr	r0, [pc, #52]	; (80123b4 <tcp_rexmit_rto_commit+0x4c>)
 8012380:	f003 feba 	bl	80160f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801238a:	2bff      	cmp	r3, #255	; 0xff
 801238c:	d007      	beq.n	801239e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012394:	3301      	adds	r3, #1
 8012396:	b2da      	uxtb	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7ff fc7e 	bl	8011ca0 <tcp_output>
}
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	080195ac 	.word	0x080195ac
 80123b0:	08019c0c 	.word	0x08019c0c
 80123b4:	08019600 	.word	0x08019600

080123b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <tcp_rexmit_rto+0x1c>
 80123c6:	4b0a      	ldr	r3, [pc, #40]	; (80123f0 <tcp_rexmit_rto+0x38>)
 80123c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80123cc:	4909      	ldr	r1, [pc, #36]	; (80123f4 <tcp_rexmit_rto+0x3c>)
 80123ce:	480a      	ldr	r0, [pc, #40]	; (80123f8 <tcp_rexmit_rto+0x40>)
 80123d0:	f003 fe92 	bl	80160f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff ff57 	bl	8012288 <tcp_rexmit_rto_prepare>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d102      	bne.n	80123e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff ffc1 	bl	8012368 <tcp_rexmit_rto_commit>
  }
}
 80123e6:	bf00      	nop
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	080195ac 	.word	0x080195ac
 80123f4:	08019c30 	.word	0x08019c30
 80123f8:	08019600 	.word	0x08019600

080123fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80123fc:	b590      	push	{r4, r7, lr}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <tcp_rexmit+0x1c>
 801240a:	4b2f      	ldr	r3, [pc, #188]	; (80124c8 <tcp_rexmit+0xcc>)
 801240c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012410:	492e      	ldr	r1, [pc, #184]	; (80124cc <tcp_rexmit+0xd0>)
 8012412:	482f      	ldr	r0, [pc, #188]	; (80124d0 <tcp_rexmit+0xd4>)
 8012414:	f003 fe70 	bl	80160f8 <iprintf>

  if (pcb->unacked == NULL) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012420:	f06f 0305 	mvn.w	r3, #5
 8012424:	e04c      	b.n	80124c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801242a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801242c:	68b8      	ldr	r0, [r7, #8]
 801242e:	f7ff fe2b 	bl	8012088 <tcp_output_segment_busy>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012438:	f06f 0305 	mvn.w	r3, #5
 801243c:	e040      	b.n	80124c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	336c      	adds	r3, #108	; 0x6c
 801244a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801244c:	e002      	b.n	8012454 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d011      	beq.n	8012480 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	f7f8 fb8e 	bl	800ab86 <lwip_htonl>
 801246a:	4604      	mov	r4, r0
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	4618      	mov	r0, r3
 8012474:	f7f8 fb87 	bl	800ab86 <lwip_htonl>
 8012478:	4603      	mov	r3, r0
 801247a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801247c:	2b00      	cmp	r3, #0
 801247e:	dbe6      	blt.n	801244e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d103      	bne.n	801249e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2200      	movs	r2, #0
 801249a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124a4:	2bff      	cmp	r3, #255	; 0xff
 80124a6:	d007      	beq.n	80124b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124ae:	3301      	adds	r3, #1
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3714      	adds	r7, #20
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd90      	pop	{r4, r7, pc}
 80124c8:	080195ac 	.word	0x080195ac
 80124cc:	08019c4c 	.word	0x08019c4c
 80124d0:	08019600 	.word	0x08019600

080124d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d106      	bne.n	80124f0 <tcp_rexmit_fast+0x1c>
 80124e2:	4b2a      	ldr	r3, [pc, #168]	; (801258c <tcp_rexmit_fast+0xb8>)
 80124e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80124e8:	4929      	ldr	r1, [pc, #164]	; (8012590 <tcp_rexmit_fast+0xbc>)
 80124ea:	482a      	ldr	r0, [pc, #168]	; (8012594 <tcp_rexmit_fast+0xc0>)
 80124ec:	f003 fe04 	bl	80160f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d045      	beq.n	8012584 <tcp_rexmit_fast+0xb0>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	8b5b      	ldrh	r3, [r3, #26]
 80124fc:	f003 0304 	and.w	r3, r3, #4
 8012500:	2b00      	cmp	r3, #0
 8012502:	d13f      	bne.n	8012584 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7ff ff79 	bl	80123fc <tcp_rexmit>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d139      	bne.n	8012584 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801251c:	4293      	cmp	r3, r2
 801251e:	bf28      	it	cs
 8012520:	4613      	movcs	r3, r2
 8012522:	b29b      	uxth	r3, r3
 8012524:	2b00      	cmp	r3, #0
 8012526:	da00      	bge.n	801252a <tcp_rexmit_fast+0x56>
 8012528:	3301      	adds	r3, #1
 801252a:	105b      	asrs	r3, r3, #1
 801252c:	b29a      	uxth	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801253a:	461a      	mov	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	429a      	cmp	r2, r3
 8012544:	d206      	bcs.n	8012554 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	b29a      	uxth	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801255e:	4619      	mov	r1, r3
 8012560:	0049      	lsls	r1, r1, #1
 8012562:	440b      	add	r3, r1
 8012564:	b29b      	uxth	r3, r3
 8012566:	4413      	add	r3, r2
 8012568:	b29a      	uxth	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	8b5b      	ldrh	r3, [r3, #26]
 8012574:	f043 0304 	orr.w	r3, r3, #4
 8012578:	b29a      	uxth	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2200      	movs	r2, #0
 8012582:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012584:	bf00      	nop
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	080195ac 	.word	0x080195ac
 8012590:	08019c64 	.word	0x08019c64
 8012594:	08019600 	.word	0x08019600

08012598 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b086      	sub	sp, #24
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	607b      	str	r3, [r7, #4]
 80125a2:	460b      	mov	r3, r1
 80125a4:	817b      	strh	r3, [r7, #10]
 80125a6:	4613      	mov	r3, r2
 80125a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80125aa:	897a      	ldrh	r2, [r7, #10]
 80125ac:	893b      	ldrh	r3, [r7, #8]
 80125ae:	4413      	add	r3, r2
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	3314      	adds	r3, #20
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125ba:	4619      	mov	r1, r3
 80125bc:	2022      	movs	r0, #34	; 0x22
 80125be:	f7f9 fc93 	bl	800bee8 <pbuf_alloc>
 80125c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d04d      	beq.n	8012666 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80125ca:	897b      	ldrh	r3, [r7, #10]
 80125cc:	3313      	adds	r3, #19
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	8952      	ldrh	r2, [r2, #10]
 80125d2:	4293      	cmp	r3, r2
 80125d4:	db06      	blt.n	80125e4 <tcp_output_alloc_header_common+0x4c>
 80125d6:	4b26      	ldr	r3, [pc, #152]	; (8012670 <tcp_output_alloc_header_common+0xd8>)
 80125d8:	f240 7223 	movw	r2, #1827	; 0x723
 80125dc:	4925      	ldr	r1, [pc, #148]	; (8012674 <tcp_output_alloc_header_common+0xdc>)
 80125de:	4826      	ldr	r0, [pc, #152]	; (8012678 <tcp_output_alloc_header_common+0xe0>)
 80125e0:	f003 fd8a 	bl	80160f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80125ea:	8c3b      	ldrh	r3, [r7, #32]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7f8 fab5 	bl	800ab5c <lwip_htons>
 80125f2:	4603      	mov	r3, r0
 80125f4:	461a      	mov	r2, r3
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80125fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7f8 faad 	bl	800ab5c <lwip_htons>
 8012602:	4603      	mov	r3, r0
 8012604:	461a      	mov	r2, r3
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012610:	68f8      	ldr	r0, [r7, #12]
 8012612:	f7f8 fab8 	bl	800ab86 <lwip_htonl>
 8012616:	4602      	mov	r2, r0
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801261c:	897b      	ldrh	r3, [r7, #10]
 801261e:	089b      	lsrs	r3, r3, #2
 8012620:	b29b      	uxth	r3, r3
 8012622:	3305      	adds	r3, #5
 8012624:	b29b      	uxth	r3, r3
 8012626:	031b      	lsls	r3, r3, #12
 8012628:	b29a      	uxth	r2, r3
 801262a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801262e:	b29b      	uxth	r3, r3
 8012630:	4313      	orrs	r3, r2
 8012632:	b29b      	uxth	r3, r3
 8012634:	4618      	mov	r0, r3
 8012636:	f7f8 fa91 	bl	800ab5c <lwip_htons>
 801263a:	4603      	mov	r3, r0
 801263c:	461a      	mov	r2, r3
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012644:	4618      	mov	r0, r3
 8012646:	f7f8 fa89 	bl	800ab5c <lwip_htons>
 801264a:	4603      	mov	r3, r0
 801264c:	461a      	mov	r2, r3
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	2200      	movs	r2, #0
 8012656:	741a      	strb	r2, [r3, #16]
 8012658:	2200      	movs	r2, #0
 801265a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	2200      	movs	r2, #0
 8012660:	749a      	strb	r2, [r3, #18]
 8012662:	2200      	movs	r2, #0
 8012664:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012666:	697b      	ldr	r3, [r7, #20]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3718      	adds	r7, #24
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	080195ac 	.word	0x080195ac
 8012674:	08019c84 	.word	0x08019c84
 8012678:	08019600 	.word	0x08019600

0801267c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801267c:	b5b0      	push	{r4, r5, r7, lr}
 801267e:	b08a      	sub	sp, #40	; 0x28
 8012680:	af04      	add	r7, sp, #16
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	607b      	str	r3, [r7, #4]
 8012686:	460b      	mov	r3, r1
 8012688:	817b      	strh	r3, [r7, #10]
 801268a:	4613      	mov	r3, r2
 801268c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d106      	bne.n	80126a2 <tcp_output_alloc_header+0x26>
 8012694:	4b15      	ldr	r3, [pc, #84]	; (80126ec <tcp_output_alloc_header+0x70>)
 8012696:	f240 7242 	movw	r2, #1858	; 0x742
 801269a:	4915      	ldr	r1, [pc, #84]	; (80126f0 <tcp_output_alloc_header+0x74>)
 801269c:	4815      	ldr	r0, [pc, #84]	; (80126f4 <tcp_output_alloc_header+0x78>)
 801269e:	f003 fd2b 	bl	80160f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	8adb      	ldrh	r3, [r3, #22]
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	8b12      	ldrh	r2, [r2, #24]
 80126ae:	68f9      	ldr	r1, [r7, #12]
 80126b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80126b2:	893d      	ldrh	r5, [r7, #8]
 80126b4:	897c      	ldrh	r4, [r7, #10]
 80126b6:	9103      	str	r1, [sp, #12]
 80126b8:	2110      	movs	r1, #16
 80126ba:	9102      	str	r1, [sp, #8]
 80126bc:	9201      	str	r2, [sp, #4]
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	462a      	mov	r2, r5
 80126c4:	4621      	mov	r1, r4
 80126c6:	f7ff ff67 	bl	8012598 <tcp_output_alloc_header_common>
 80126ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d006      	beq.n	80126e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d6:	68fa      	ldr	r2, [r7, #12]
 80126d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80126da:	441a      	add	r2, r3
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80126e0:	697b      	ldr	r3, [r7, #20]
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3718      	adds	r7, #24
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bdb0      	pop	{r4, r5, r7, pc}
 80126ea:	bf00      	nop
 80126ec:	080195ac 	.word	0x080195ac
 80126f0:	08019cb4 	.word	0x08019cb4
 80126f4:	08019600 	.word	0x08019600

080126f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b088      	sub	sp, #32
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	4611      	mov	r1, r2
 8012704:	461a      	mov	r2, r3
 8012706:	460b      	mov	r3, r1
 8012708:	71fb      	strb	r3, [r7, #7]
 801270a:	4613      	mov	r3, r2
 801270c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d106      	bne.n	8012726 <tcp_output_fill_options+0x2e>
 8012718:	4b12      	ldr	r3, [pc, #72]	; (8012764 <tcp_output_fill_options+0x6c>)
 801271a:	f240 7256 	movw	r2, #1878	; 0x756
 801271e:	4912      	ldr	r1, [pc, #72]	; (8012768 <tcp_output_fill_options+0x70>)
 8012720:	4812      	ldr	r0, [pc, #72]	; (801276c <tcp_output_fill_options+0x74>)
 8012722:	f003 fce9 	bl	80160f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	3314      	adds	r3, #20
 8012730:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012732:	8bfb      	ldrh	r3, [r7, #30]
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	461a      	mov	r2, r3
 8012738:	79fb      	ldrb	r3, [r7, #7]
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	f003 0304 	and.w	r3, r3, #4
 8012740:	4413      	add	r3, r2
 8012742:	3314      	adds	r3, #20
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	4413      	add	r3, r2
 8012748:	697a      	ldr	r2, [r7, #20]
 801274a:	429a      	cmp	r2, r3
 801274c:	d006      	beq.n	801275c <tcp_output_fill_options+0x64>
 801274e:	4b05      	ldr	r3, [pc, #20]	; (8012764 <tcp_output_fill_options+0x6c>)
 8012750:	f240 7275 	movw	r2, #1909	; 0x775
 8012754:	4906      	ldr	r1, [pc, #24]	; (8012770 <tcp_output_fill_options+0x78>)
 8012756:	4805      	ldr	r0, [pc, #20]	; (801276c <tcp_output_fill_options+0x74>)
 8012758:	f003 fcce 	bl	80160f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801275c:	bf00      	nop
 801275e:	3720      	adds	r7, #32
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	080195ac 	.word	0x080195ac
 8012768:	08019cdc 	.word	0x08019cdc
 801276c:	08019600 	.word	0x08019600
 8012770:	08019bd4 	.word	0x08019bd4

08012774 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b08a      	sub	sp, #40	; 0x28
 8012778:	af04      	add	r7, sp, #16
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d106      	bne.n	8012796 <tcp_output_control_segment+0x22>
 8012788:	4b1c      	ldr	r3, [pc, #112]	; (80127fc <tcp_output_control_segment+0x88>)
 801278a:	f240 7287 	movw	r2, #1927	; 0x787
 801278e:	491c      	ldr	r1, [pc, #112]	; (8012800 <tcp_output_control_segment+0x8c>)
 8012790:	481c      	ldr	r0, [pc, #112]	; (8012804 <tcp_output_control_segment+0x90>)
 8012792:	f003 fcb1 	bl	80160f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	6879      	ldr	r1, [r7, #4]
 801279a:	68f8      	ldr	r0, [r7, #12]
 801279c:	f7fe fae8 	bl	8010d70 <tcp_route>
 80127a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80127a8:	23fc      	movs	r3, #252	; 0xfc
 80127aa:	75fb      	strb	r3, [r7, #23]
 80127ac:	e01c      	b.n	80127e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d006      	beq.n	80127c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	7adb      	ldrb	r3, [r3, #11]
 80127b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7a9b      	ldrb	r3, [r3, #10]
 80127be:	757b      	strb	r3, [r7, #21]
 80127c0:	e003      	b.n	80127ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80127c2:	23ff      	movs	r3, #255	; 0xff
 80127c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80127ca:	7dba      	ldrb	r2, [r7, #22]
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	9302      	str	r3, [sp, #8]
 80127d0:	2306      	movs	r3, #6
 80127d2:	9301      	str	r3, [sp, #4]
 80127d4:	7d7b      	ldrb	r3, [r7, #21]
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	4613      	mov	r3, r2
 80127da:	683a      	ldr	r2, [r7, #0]
 80127dc:	6879      	ldr	r1, [r7, #4]
 80127de:	68b8      	ldr	r0, [r7, #8]
 80127e0:	f002 f97a 	bl	8014ad8 <ip4_output_if>
 80127e4:	4603      	mov	r3, r0
 80127e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80127e8:	68b8      	ldr	r0, [r7, #8]
 80127ea:	f7f9 fe61 	bl	800c4b0 <pbuf_free>
  return err;
 80127ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3718      	adds	r7, #24
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	080195ac 	.word	0x080195ac
 8012800:	08019d04 	.word	0x08019d04
 8012804:	08019600 	.word	0x08019600

08012808 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012808:	b590      	push	{r4, r7, lr}
 801280a:	b08b      	sub	sp, #44	; 0x2c
 801280c:	af04      	add	r7, sp, #16
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d106      	bne.n	801282a <tcp_rst+0x22>
 801281c:	4b1f      	ldr	r3, [pc, #124]	; (801289c <tcp_rst+0x94>)
 801281e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012822:	491f      	ldr	r1, [pc, #124]	; (80128a0 <tcp_rst+0x98>)
 8012824:	481f      	ldr	r0, [pc, #124]	; (80128a4 <tcp_rst+0x9c>)
 8012826:	f003 fc67 	bl	80160f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282c:	2b00      	cmp	r3, #0
 801282e:	d106      	bne.n	801283e <tcp_rst+0x36>
 8012830:	4b1a      	ldr	r3, [pc, #104]	; (801289c <tcp_rst+0x94>)
 8012832:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012836:	491c      	ldr	r1, [pc, #112]	; (80128a8 <tcp_rst+0xa0>)
 8012838:	481a      	ldr	r0, [pc, #104]	; (80128a4 <tcp_rst+0x9c>)
 801283a:	f003 fc5d 	bl	80160f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801283e:	2300      	movs	r3, #0
 8012840:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012842:	f246 0308 	movw	r3, #24584	; 0x6008
 8012846:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012848:	7dfb      	ldrb	r3, [r7, #23]
 801284a:	b29c      	uxth	r4, r3
 801284c:	68b8      	ldr	r0, [r7, #8]
 801284e:	f7f8 f99a 	bl	800ab86 <lwip_htonl>
 8012852:	4602      	mov	r2, r0
 8012854:	8abb      	ldrh	r3, [r7, #20]
 8012856:	9303      	str	r3, [sp, #12]
 8012858:	2314      	movs	r3, #20
 801285a:	9302      	str	r3, [sp, #8]
 801285c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801285e:	9301      	str	r3, [sp, #4]
 8012860:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012862:	9300      	str	r3, [sp, #0]
 8012864:	4613      	mov	r3, r2
 8012866:	2200      	movs	r2, #0
 8012868:	4621      	mov	r1, r4
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7ff fe94 	bl	8012598 <tcp_output_alloc_header_common>
 8012870:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d00c      	beq.n	8012892 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012878:	7dfb      	ldrb	r3, [r7, #23]
 801287a:	2200      	movs	r2, #0
 801287c:	6939      	ldr	r1, [r7, #16]
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7ff ff3a 	bl	80126f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	6939      	ldr	r1, [r7, #16]
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f7ff ff72 	bl	8012774 <tcp_output_control_segment>
 8012890:	e000      	b.n	8012894 <tcp_rst+0x8c>
    return;
 8012892:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012894:	371c      	adds	r7, #28
 8012896:	46bd      	mov	sp, r7
 8012898:	bd90      	pop	{r4, r7, pc}
 801289a:	bf00      	nop
 801289c:	080195ac 	.word	0x080195ac
 80128a0:	08019d30 	.word	0x08019d30
 80128a4:	08019600 	.word	0x08019600
 80128a8:	08019d4c 	.word	0x08019d4c

080128ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80128ac:	b590      	push	{r4, r7, lr}
 80128ae:	b087      	sub	sp, #28
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80128b8:	2300      	movs	r3, #0
 80128ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d106      	bne.n	80128d0 <tcp_send_empty_ack+0x24>
 80128c2:	4b28      	ldr	r3, [pc, #160]	; (8012964 <tcp_send_empty_ack+0xb8>)
 80128c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80128c8:	4927      	ldr	r1, [pc, #156]	; (8012968 <tcp_send_empty_ack+0xbc>)
 80128ca:	4828      	ldr	r0, [pc, #160]	; (801296c <tcp_send_empty_ack+0xc0>)
 80128cc:	f003 fc14 	bl	80160f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128d0:	7dfb      	ldrb	r3, [r7, #23]
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	f003 0304 	and.w	r3, r3, #4
 80128da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80128dc:	7d7b      	ldrb	r3, [r7, #21]
 80128de:	b29c      	uxth	r4, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f8 f94e 	bl	800ab86 <lwip_htonl>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2200      	movs	r2, #0
 80128ee:	4621      	mov	r1, r4
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7ff fec3 	bl	801267c <tcp_output_alloc_header>
 80128f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	8b5b      	ldrh	r3, [r3, #26]
 8012902:	f043 0303 	orr.w	r3, r3, #3
 8012906:	b29a      	uxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801290c:	f06f 0301 	mvn.w	r3, #1
 8012910:	e023      	b.n	801295a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012912:	7dbb      	ldrb	r3, [r7, #22]
 8012914:	7dfa      	ldrb	r2, [r7, #23]
 8012916:	6939      	ldr	r1, [r7, #16]
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f7ff feed 	bl	80126f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	3304      	adds	r3, #4
 8012924:	6939      	ldr	r1, [r7, #16]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff ff24 	bl	8012774 <tcp_output_control_segment>
 801292c:	4603      	mov	r3, r0
 801292e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d007      	beq.n	8012948 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8b5b      	ldrh	r3, [r3, #26]
 801293c:	f043 0303 	orr.w	r3, r3, #3
 8012940:	b29a      	uxth	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	835a      	strh	r2, [r3, #26]
 8012946:	e006      	b.n	8012956 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	8b5b      	ldrh	r3, [r3, #26]
 801294c:	f023 0303 	bic.w	r3, r3, #3
 8012950:	b29a      	uxth	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801295a:	4618      	mov	r0, r3
 801295c:	371c      	adds	r7, #28
 801295e:	46bd      	mov	sp, r7
 8012960:	bd90      	pop	{r4, r7, pc}
 8012962:	bf00      	nop
 8012964:	080195ac 	.word	0x080195ac
 8012968:	08019d68 	.word	0x08019d68
 801296c:	08019600 	.word	0x08019600

08012970 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012970:	b590      	push	{r4, r7, lr}
 8012972:	b087      	sub	sp, #28
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012978:	2300      	movs	r3, #0
 801297a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d106      	bne.n	8012990 <tcp_keepalive+0x20>
 8012982:	4b18      	ldr	r3, [pc, #96]	; (80129e4 <tcp_keepalive+0x74>)
 8012984:	f640 0224 	movw	r2, #2084	; 0x824
 8012988:	4917      	ldr	r1, [pc, #92]	; (80129e8 <tcp_keepalive+0x78>)
 801298a:	4818      	ldr	r0, [pc, #96]	; (80129ec <tcp_keepalive+0x7c>)
 801298c:	f003 fbb4 	bl	80160f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012990:	7dfb      	ldrb	r3, [r7, #23]
 8012992:	b29c      	uxth	r4, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012998:	3b01      	subs	r3, #1
 801299a:	4618      	mov	r0, r3
 801299c:	f7f8 f8f3 	bl	800ab86 <lwip_htonl>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2200      	movs	r2, #0
 80129a4:	4621      	mov	r1, r4
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ff fe68 	bl	801267c <tcp_output_alloc_header>
 80129ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80129b4:	f04f 33ff 	mov.w	r3, #4294967295
 80129b8:	e010      	b.n	80129dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
 80129bc:	2200      	movs	r2, #0
 80129be:	6939      	ldr	r1, [r7, #16]
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f7ff fe99 	bl	80126f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	3304      	adds	r3, #4
 80129cc:	6939      	ldr	r1, [r7, #16]
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7ff fed0 	bl	8012774 <tcp_output_control_segment>
 80129d4:	4603      	mov	r3, r0
 80129d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80129d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	371c      	adds	r7, #28
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd90      	pop	{r4, r7, pc}
 80129e4:	080195ac 	.word	0x080195ac
 80129e8:	08019d88 	.word	0x08019d88
 80129ec:	08019600 	.word	0x08019600

080129f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80129f0:	b590      	push	{r4, r7, lr}
 80129f2:	b08b      	sub	sp, #44	; 0x2c
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129f8:	2300      	movs	r3, #0
 80129fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d106      	bne.n	8012a12 <tcp_zero_window_probe+0x22>
 8012a04:	4b4c      	ldr	r3, [pc, #304]	; (8012b38 <tcp_zero_window_probe+0x148>)
 8012a06:	f640 024f 	movw	r2, #2127	; 0x84f
 8012a0a:	494c      	ldr	r1, [pc, #304]	; (8012b3c <tcp_zero_window_probe+0x14c>)
 8012a0c:	484c      	ldr	r0, [pc, #304]	; (8012b40 <tcp_zero_window_probe+0x150>)
 8012a0e:	f003 fb73 	bl	80160f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012a18:	6a3b      	ldr	r3, [r7, #32]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	e086      	b.n	8012b30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012a28:	2bff      	cmp	r3, #255	; 0xff
 8012a2a:	d007      	beq.n	8012a3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012a32:	3301      	adds	r3, #1
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a3c:	6a3b      	ldr	r3, [r7, #32]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	899b      	ldrh	r3, [r3, #12]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7f8 f889 	bl	800ab5c <lwip_htons>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d005      	beq.n	8012a62 <tcp_zero_window_probe+0x72>
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	891b      	ldrh	r3, [r3, #8]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d101      	bne.n	8012a62 <tcp_zero_window_probe+0x72>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e000      	b.n	8012a64 <tcp_zero_window_probe+0x74>
 8012a62:	2300      	movs	r3, #0
 8012a64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a66:	7ffb      	ldrb	r3, [r7, #31]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	bf0c      	ite	eq
 8012a6c:	2301      	moveq	r3, #1
 8012a6e:	2300      	movne	r3, #0
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a78:	b299      	uxth	r1, r3
 8012a7a:	6a3b      	ldr	r3, [r7, #32]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	8bba      	ldrh	r2, [r7, #28]
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7ff fdfa 	bl	801267c <tcp_output_alloc_header>
 8012a88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d102      	bne.n	8012a96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012a90:	f04f 33ff 	mov.w	r3, #4294967295
 8012a94:	e04c      	b.n	8012b30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012a96:	69bb      	ldr	r3, [r7, #24]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012a9c:	7ffb      	ldrb	r3, [r7, #31]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d011      	beq.n	8012ac6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	899b      	ldrh	r3, [r3, #12]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	b21b      	sxth	r3, r3
 8012aaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012aae:	b21c      	sxth	r4, r3
 8012ab0:	2011      	movs	r0, #17
 8012ab2:	f7f8 f853 	bl	800ab5c <lwip_htons>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	b21b      	sxth	r3, r3
 8012aba:	4323      	orrs	r3, r4
 8012abc:	b21b      	sxth	r3, r3
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	819a      	strh	r2, [r3, #12]
 8012ac4:	e010      	b.n	8012ae8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	3314      	adds	r3, #20
 8012acc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012ace:	6a3b      	ldr	r3, [r7, #32]
 8012ad0:	6858      	ldr	r0, [r3, #4]
 8012ad2:	6a3b      	ldr	r3, [r7, #32]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	891a      	ldrh	r2, [r3, #8]
 8012ad8:	6a3b      	ldr	r3, [r7, #32]
 8012ada:	891b      	ldrh	r3, [r3, #8]
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	6939      	ldr	r1, [r7, #16]
 8012ae4:	f7f9 feda 	bl	800c89c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ae8:	6a3b      	ldr	r3, [r7, #32]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f8 f849 	bl	800ab86 <lwip_htonl>
 8012af4:	4603      	mov	r3, r0
 8012af6:	3301      	adds	r3, #1
 8012af8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	da02      	bge.n	8012b0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b10:	2200      	movs	r2, #0
 8012b12:	69b9      	ldr	r1, [r7, #24]
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff fdef 	bl	80126f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	3304      	adds	r3, #4
 8012b20:	69b9      	ldr	r1, [r7, #24]
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7ff fe26 	bl	8012774 <tcp_output_control_segment>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012b2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	372c      	adds	r7, #44	; 0x2c
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd90      	pop	{r4, r7, pc}
 8012b38:	080195ac 	.word	0x080195ac
 8012b3c:	08019da4 	.word	0x08019da4
 8012b40:	08019600 	.word	0x08019600

08012b44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b4c:	f7f9 ff94 	bl	800ca78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b50:	4b0a      	ldr	r3, [pc, #40]	; (8012b7c <tcpip_tcp_timer+0x38>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d103      	bne.n	8012b60 <tcpip_tcp_timer+0x1c>
 8012b58:	4b09      	ldr	r3, [pc, #36]	; (8012b80 <tcpip_tcp_timer+0x3c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d005      	beq.n	8012b6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b60:	2200      	movs	r2, #0
 8012b62:	4908      	ldr	r1, [pc, #32]	; (8012b84 <tcpip_tcp_timer+0x40>)
 8012b64:	20fa      	movs	r0, #250	; 0xfa
 8012b66:	f000 f8f3 	bl	8012d50 <sys_timeout>
 8012b6a:	e003      	b.n	8012b74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012b6c:	4b06      	ldr	r3, [pc, #24]	; (8012b88 <tcpip_tcp_timer+0x44>)
 8012b6e:	2200      	movs	r2, #0
 8012b70:	601a      	str	r2, [r3, #0]
  }
}
 8012b72:	bf00      	nop
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	240074b4 	.word	0x240074b4
 8012b80:	240074b8 	.word	0x240074b8
 8012b84:	08012b45 	.word	0x08012b45
 8012b88:	24007500 	.word	0x24007500

08012b8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012b90:	4b0a      	ldr	r3, [pc, #40]	; (8012bbc <tcp_timer_needed+0x30>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10f      	bne.n	8012bb8 <tcp_timer_needed+0x2c>
 8012b98:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <tcp_timer_needed+0x34>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d103      	bne.n	8012ba8 <tcp_timer_needed+0x1c>
 8012ba0:	4b08      	ldr	r3, [pc, #32]	; (8012bc4 <tcp_timer_needed+0x38>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d007      	beq.n	8012bb8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012ba8:	4b04      	ldr	r3, [pc, #16]	; (8012bbc <tcp_timer_needed+0x30>)
 8012baa:	2201      	movs	r2, #1
 8012bac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012bae:	2200      	movs	r2, #0
 8012bb0:	4905      	ldr	r1, [pc, #20]	; (8012bc8 <tcp_timer_needed+0x3c>)
 8012bb2:	20fa      	movs	r0, #250	; 0xfa
 8012bb4:	f000 f8cc 	bl	8012d50 <sys_timeout>
  }
}
 8012bb8:	bf00      	nop
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	24007500 	.word	0x24007500
 8012bc0:	240074b4 	.word	0x240074b4
 8012bc4:	240074b8 	.word	0x240074b8
 8012bc8:	08012b45 	.word	0x08012b45

08012bcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b086      	sub	sp, #24
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012bd8:	200a      	movs	r0, #10
 8012bda:	f7f8 fd4f 	bl	800b67c <memp_malloc>
 8012bde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d109      	bne.n	8012bfa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d151      	bne.n	8012c90 <sys_timeout_abs+0xc4>
 8012bec:	4b2a      	ldr	r3, [pc, #168]	; (8012c98 <sys_timeout_abs+0xcc>)
 8012bee:	22be      	movs	r2, #190	; 0xbe
 8012bf0:	492a      	ldr	r1, [pc, #168]	; (8012c9c <sys_timeout_abs+0xd0>)
 8012bf2:	482b      	ldr	r0, [pc, #172]	; (8012ca0 <sys_timeout_abs+0xd4>)
 8012bf4:	f003 fa80 	bl	80160f8 <iprintf>
    return;
 8012bf8:	e04a      	b.n	8012c90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	68fa      	ldr	r2, [r7, #12]
 8012c10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012c12:	4b24      	ldr	r3, [pc, #144]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d103      	bne.n	8012c22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012c1a:	4a22      	ldr	r2, [pc, #136]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	6013      	str	r3, [r2, #0]
    return;
 8012c20:	e037      	b.n	8012c92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	685a      	ldr	r2, [r3, #4]
 8012c26:	4b1f      	ldr	r3, [pc, #124]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	0fdb      	lsrs	r3, r3, #31
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d007      	beq.n	8012c4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012c3a:	4b1a      	ldr	r3, [pc, #104]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012c42:	4a18      	ldr	r2, [pc, #96]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	6013      	str	r3, [r2, #0]
 8012c48:	e023      	b.n	8012c92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c4a:	4b16      	ldr	r3, [pc, #88]	; (8012ca4 <sys_timeout_abs+0xd8>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	e01a      	b.n	8012c88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00b      	beq.n	8012c72 <sys_timeout_abs+0xa6>
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	685a      	ldr	r2, [r3, #4]
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	0fdb      	lsrs	r3, r3, #31
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d007      	beq.n	8012c82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	693a      	ldr	r2, [r7, #16]
 8012c7e:	601a      	str	r2, [r3, #0]
        break;
 8012c80:	e007      	b.n	8012c92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	617b      	str	r3, [r7, #20]
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1e1      	bne.n	8012c52 <sys_timeout_abs+0x86>
 8012c8e:	e000      	b.n	8012c92 <sys_timeout_abs+0xc6>
    return;
 8012c90:	bf00      	nop
      }
    }
  }
}
 8012c92:	3718      	adds	r7, #24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	08019dc8 	.word	0x08019dc8
 8012c9c:	08019dfc 	.word	0x08019dfc
 8012ca0:	08019e3c 	.word	0x08019e3c
 8012ca4:	240074f8 	.word	0x240074f8

08012ca8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	4798      	blx	r3

  now = sys_now();
 8012cba:	f7f2 fac9 	bl	8005250 <sys_now>
 8012cbe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	4b0f      	ldr	r3, [pc, #60]	; (8012d04 <lwip_cyclic_timer+0x5c>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4413      	add	r3, r2
 8012cca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	0fdb      	lsrs	r3, r3, #31
 8012cd4:	f003 0301 	and.w	r3, r3, #1
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d009      	beq.n	8012cf2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	4907      	ldr	r1, [pc, #28]	; (8012d08 <lwip_cyclic_timer+0x60>)
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff ff6e 	bl	8012bcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012cf0:	e004      	b.n	8012cfc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	4904      	ldr	r1, [pc, #16]	; (8012d08 <lwip_cyclic_timer+0x60>)
 8012cf6:	68f8      	ldr	r0, [r7, #12]
 8012cf8:	f7ff ff68 	bl	8012bcc <sys_timeout_abs>
}
 8012cfc:	bf00      	nop
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	240074fc 	.word	0x240074fc
 8012d08:	08012ca9 	.word	0x08012ca9

08012d0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d12:	2301      	movs	r3, #1
 8012d14:	607b      	str	r3, [r7, #4]
 8012d16:	e00e      	b.n	8012d36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012d18:	4a0b      	ldr	r2, [pc, #44]	; (8012d48 <sys_timeouts_init+0x3c>)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	4a08      	ldr	r2, [pc, #32]	; (8012d48 <sys_timeouts_init+0x3c>)
 8012d26:	4413      	add	r3, r2
 8012d28:	461a      	mov	r2, r3
 8012d2a:	4908      	ldr	r1, [pc, #32]	; (8012d4c <sys_timeouts_init+0x40>)
 8012d2c:	f000 f810 	bl	8012d50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	3301      	adds	r3, #1
 8012d34:	607b      	str	r3, [r7, #4]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	d9ed      	bls.n	8012d18 <sys_timeouts_init+0xc>
  }
}
 8012d3c:	bf00      	nop
 8012d3e:	bf00      	nop
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	0801a9f0 	.word	0x0801a9f0
 8012d4c:	08012ca9 	.word	0x08012ca9

08012d50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b086      	sub	sp, #24
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d62:	d306      	bcc.n	8012d72 <sys_timeout+0x22>
 8012d64:	4b0a      	ldr	r3, [pc, #40]	; (8012d90 <sys_timeout+0x40>)
 8012d66:	f240 1229 	movw	r2, #297	; 0x129
 8012d6a:	490a      	ldr	r1, [pc, #40]	; (8012d94 <sys_timeout+0x44>)
 8012d6c:	480a      	ldr	r0, [pc, #40]	; (8012d98 <sys_timeout+0x48>)
 8012d6e:	f003 f9c3 	bl	80160f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012d72:	f7f2 fa6d 	bl	8005250 <sys_now>
 8012d76:	4602      	mov	r2, r0
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	68b9      	ldr	r1, [r7, #8]
 8012d82:	6978      	ldr	r0, [r7, #20]
 8012d84:	f7ff ff22 	bl	8012bcc <sys_timeout_abs>
#endif
}
 8012d88:	bf00      	nop
 8012d8a:	3718      	adds	r7, #24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	08019dc8 	.word	0x08019dc8
 8012d94:	08019e64 	.word	0x08019e64
 8012d98:	08019e3c 	.word	0x08019e3c

08012d9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012da2:	f7f2 fa55 	bl	8005250 <sys_now>
 8012da6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012da8:	4b17      	ldr	r3, [pc, #92]	; (8012e08 <sys_check_timeouts+0x6c>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d022      	beq.n	8012dfa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	68fa      	ldr	r2, [r7, #12]
 8012dba:	1ad3      	subs	r3, r2, r3
 8012dbc:	0fdb      	lsrs	r3, r3, #31
 8012dbe:	f003 0301 	and.w	r3, r3, #1
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d11a      	bne.n	8012dfe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	4a0e      	ldr	r2, [pc, #56]	; (8012e08 <sys_check_timeouts+0x6c>)
 8012dce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	4a0a      	ldr	r2, [pc, #40]	; (8012e0c <sys_check_timeouts+0x70>)
 8012de2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012de4:	68b9      	ldr	r1, [r7, #8]
 8012de6:	200a      	movs	r0, #10
 8012de8:	f7f8 fcbe 	bl	800b768 <memp_free>
    if (handler != NULL) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0da      	beq.n	8012da8 <sys_check_timeouts+0xc>
      handler(arg);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6838      	ldr	r0, [r7, #0]
 8012df6:	4798      	blx	r3
  do {
 8012df8:	e7d6      	b.n	8012da8 <sys_check_timeouts+0xc>
      return;
 8012dfa:	bf00      	nop
 8012dfc:	e000      	b.n	8012e00 <sys_check_timeouts+0x64>
      return;
 8012dfe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	240074f8 	.word	0x240074f8
 8012e0c:	240074fc 	.word	0x240074fc

08012e10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012e16:	4b16      	ldr	r3, [pc, #88]	; (8012e70 <sys_timeouts_sleeptime+0x60>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d102      	bne.n	8012e24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e22:	e020      	b.n	8012e66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012e24:	f7f2 fa14 	bl	8005250 <sys_now>
 8012e28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012e2a:	4b11      	ldr	r3, [pc, #68]	; (8012e70 <sys_timeouts_sleeptime+0x60>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	685a      	ldr	r2, [r3, #4]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	0fdb      	lsrs	r3, r3, #31
 8012e36:	f003 0301 	and.w	r3, r3, #1
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d001      	beq.n	8012e44 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012e40:	2300      	movs	r3, #0
 8012e42:	e010      	b.n	8012e66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012e44:	4b0a      	ldr	r3, [pc, #40]	; (8012e70 <sys_timeouts_sleeptime+0x60>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	685a      	ldr	r2, [r3, #4]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	da06      	bge.n	8012e64 <sys_timeouts_sleeptime+0x54>
 8012e56:	4b07      	ldr	r3, [pc, #28]	; (8012e74 <sys_timeouts_sleeptime+0x64>)
 8012e58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012e5c:	4906      	ldr	r1, [pc, #24]	; (8012e78 <sys_timeouts_sleeptime+0x68>)
 8012e5e:	4807      	ldr	r0, [pc, #28]	; (8012e7c <sys_timeouts_sleeptime+0x6c>)
 8012e60:	f003 f94a 	bl	80160f8 <iprintf>
    return ret;
 8012e64:	683b      	ldr	r3, [r7, #0]
  }
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	240074f8 	.word	0x240074f8
 8012e74:	08019dc8 	.word	0x08019dc8
 8012e78:	08019e9c 	.word	0x08019e9c
 8012e7c:	08019e3c 	.word	0x08019e3c

08012e80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012e84:	f003 f838 	bl	8015ef8 <rand>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	4b01      	ldr	r3, [pc, #4]	; (8012ea0 <udp_init+0x20>)
 8012e9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012e9c:	bf00      	nop
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	24000030 	.word	0x24000030

08012ea4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012eae:	4b17      	ldr	r3, [pc, #92]	; (8012f0c <udp_new_port+0x68>)
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	b291      	uxth	r1, r2
 8012eb6:	4a15      	ldr	r2, [pc, #84]	; (8012f0c <udp_new_port+0x68>)
 8012eb8:	8011      	strh	r1, [r2, #0]
 8012eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d103      	bne.n	8012eca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012ec2:	4b12      	ldr	r3, [pc, #72]	; (8012f0c <udp_new_port+0x68>)
 8012ec4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012ec8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eca:	4b11      	ldr	r3, [pc, #68]	; (8012f10 <udp_new_port+0x6c>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	603b      	str	r3, [r7, #0]
 8012ed0:	e011      	b.n	8012ef6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	8a5a      	ldrh	r2, [r3, #18]
 8012ed6:	4b0d      	ldr	r3, [pc, #52]	; (8012f0c <udp_new_port+0x68>)
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d108      	bne.n	8012ef0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012ede:	88fb      	ldrh	r3, [r7, #6]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	80fb      	strh	r3, [r7, #6]
 8012ee4:	88fb      	ldrh	r3, [r7, #6]
 8012ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012eea:	d3e0      	bcc.n	8012eae <udp_new_port+0xa>
        return 0;
 8012eec:	2300      	movs	r3, #0
 8012eee:	e007      	b.n	8012f00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	603b      	str	r3, [r7, #0]
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1ea      	bne.n	8012ed2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012efc:	4b03      	ldr	r3, [pc, #12]	; (8012f0c <udp_new_port+0x68>)
 8012efe:	881b      	ldrh	r3, [r3, #0]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr
 8012f0c:	24000030 	.word	0x24000030
 8012f10:	24007504 	.word	0x24007504

08012f14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	4613      	mov	r3, r2
 8012f20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d105      	bne.n	8012f34 <udp_input_local_match+0x20>
 8012f28:	4b27      	ldr	r3, [pc, #156]	; (8012fc8 <udp_input_local_match+0xb4>)
 8012f2a:	2287      	movs	r2, #135	; 0x87
 8012f2c:	4927      	ldr	r1, [pc, #156]	; (8012fcc <udp_input_local_match+0xb8>)
 8012f2e:	4828      	ldr	r0, [pc, #160]	; (8012fd0 <udp_input_local_match+0xbc>)
 8012f30:	f003 f8e2 	bl	80160f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d105      	bne.n	8012f46 <udp_input_local_match+0x32>
 8012f3a:	4b23      	ldr	r3, [pc, #140]	; (8012fc8 <udp_input_local_match+0xb4>)
 8012f3c:	2288      	movs	r2, #136	; 0x88
 8012f3e:	4925      	ldr	r1, [pc, #148]	; (8012fd4 <udp_input_local_match+0xc0>)
 8012f40:	4823      	ldr	r0, [pc, #140]	; (8012fd0 <udp_input_local_match+0xbc>)
 8012f42:	f003 f8d9 	bl	80160f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	7a1b      	ldrb	r3, [r3, #8]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00b      	beq.n	8012f66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	7a1a      	ldrb	r2, [r3, #8]
 8012f52:	4b21      	ldr	r3, [pc, #132]	; (8012fd8 <udp_input_local_match+0xc4>)
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d001      	beq.n	8012f66 <udp_input_local_match+0x52>
    return 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	e02b      	b.n	8012fbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012f66:	79fb      	ldrb	r3, [r7, #7]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d018      	beq.n	8012f9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d013      	beq.n	8012f9a <udp_input_local_match+0x86>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00f      	beq.n	8012f9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f7a:	4b17      	ldr	r3, [pc, #92]	; (8012fd8 <udp_input_local_match+0xc4>)
 8012f7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f82:	d00a      	beq.n	8012f9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	4b13      	ldr	r3, [pc, #76]	; (8012fd8 <udp_input_local_match+0xc4>)
 8012f8a:	695b      	ldr	r3, [r3, #20]
 8012f8c:	405a      	eors	r2, r3
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	3308      	adds	r3, #8
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d110      	bne.n	8012fbc <udp_input_local_match+0xa8>
          return 1;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	e00f      	b.n	8012fbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d009      	beq.n	8012fb8 <udp_input_local_match+0xa4>
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d005      	beq.n	8012fb8 <udp_input_local_match+0xa4>
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <udp_input_local_match+0xc4>)
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d101      	bne.n	8012fbc <udp_input_local_match+0xa8>
        return 1;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	e000      	b.n	8012fbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012fbc:	2300      	movs	r3, #0
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	08019eb0 	.word	0x08019eb0
 8012fcc:	08019ee0 	.word	0x08019ee0
 8012fd0:	08019f04 	.word	0x08019f04
 8012fd4:	08019f2c 	.word	0x08019f2c
 8012fd8:	240043a8 	.word	0x240043a8

08012fdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012fdc:	b590      	push	{r4, r7, lr}
 8012fde:	b08d      	sub	sp, #52	; 0x34
 8012fe0:	af02      	add	r7, sp, #8
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d105      	bne.n	8012ffc <udp_input+0x20>
 8012ff0:	4b7c      	ldr	r3, [pc, #496]	; (80131e4 <udp_input+0x208>)
 8012ff2:	22cf      	movs	r2, #207	; 0xcf
 8012ff4:	497c      	ldr	r1, [pc, #496]	; (80131e8 <udp_input+0x20c>)
 8012ff6:	487d      	ldr	r0, [pc, #500]	; (80131ec <udp_input+0x210>)
 8012ff8:	f003 f87e 	bl	80160f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d105      	bne.n	801300e <udp_input+0x32>
 8013002:	4b78      	ldr	r3, [pc, #480]	; (80131e4 <udp_input+0x208>)
 8013004:	22d0      	movs	r2, #208	; 0xd0
 8013006:	497a      	ldr	r1, [pc, #488]	; (80131f0 <udp_input+0x214>)
 8013008:	4878      	ldr	r0, [pc, #480]	; (80131ec <udp_input+0x210>)
 801300a:	f003 f875 	bl	80160f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	895b      	ldrh	r3, [r3, #10]
 8013012:	2b07      	cmp	r3, #7
 8013014:	d803      	bhi.n	801301e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7f9 fa4a 	bl	800c4b0 <pbuf_free>
    goto end;
 801301c:	e0de      	b.n	80131dc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013024:	4b73      	ldr	r3, [pc, #460]	; (80131f4 <udp_input+0x218>)
 8013026:	695b      	ldr	r3, [r3, #20]
 8013028:	4a72      	ldr	r2, [pc, #456]	; (80131f4 <udp_input+0x218>)
 801302a:	6812      	ldr	r2, [r2, #0]
 801302c:	4611      	mov	r1, r2
 801302e:	4618      	mov	r0, r3
 8013030:	f001 fe2a 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8013034:	4603      	mov	r3, r0
 8013036:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	b29b      	uxth	r3, r3
 801303e:	4618      	mov	r0, r3
 8013040:	f7f7 fd8c 	bl	800ab5c <lwip_htons>
 8013044:	4603      	mov	r3, r0
 8013046:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	885b      	ldrh	r3, [r3, #2]
 801304c:	b29b      	uxth	r3, r3
 801304e:	4618      	mov	r0, r3
 8013050:	f7f7 fd84 	bl	800ab5c <lwip_htons>
 8013054:	4603      	mov	r3, r0
 8013056:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013058:	2300      	movs	r3, #0
 801305a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801305c:	2300      	movs	r3, #0
 801305e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013060:	2300      	movs	r3, #0
 8013062:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013064:	4b64      	ldr	r3, [pc, #400]	; (80131f8 <udp_input+0x21c>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	627b      	str	r3, [r7, #36]	; 0x24
 801306a:	e054      	b.n	8013116 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306e:	8a5b      	ldrh	r3, [r3, #18]
 8013070:	89fa      	ldrh	r2, [r7, #14]
 8013072:	429a      	cmp	r2, r3
 8013074:	d14a      	bne.n	801310c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013076:	7cfb      	ldrb	r3, [r7, #19]
 8013078:	461a      	mov	r2, r3
 801307a:	6839      	ldr	r1, [r7, #0]
 801307c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307e:	f7ff ff49 	bl	8012f14 <udp_input_local_match>
 8013082:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013084:	2b00      	cmp	r3, #0
 8013086:	d041      	beq.n	801310c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308a:	7c1b      	ldrb	r3, [r3, #16]
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	2b00      	cmp	r3, #0
 8013092:	d11d      	bne.n	80130d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d102      	bne.n	80130a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	61fb      	str	r3, [r7, #28]
 801309e:	e017      	b.n	80130d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80130a0:	7cfb      	ldrb	r3, [r7, #19]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d014      	beq.n	80130d0 <udp_input+0xf4>
 80130a6:	4b53      	ldr	r3, [pc, #332]	; (80131f4 <udp_input+0x218>)
 80130a8:	695b      	ldr	r3, [r3, #20]
 80130aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ae:	d10f      	bne.n	80130d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	3304      	adds	r3, #4
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d008      	beq.n	80130d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	3304      	adds	r3, #4
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d101      	bne.n	80130d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80130d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d2:	8a9b      	ldrh	r3, [r3, #20]
 80130d4:	8a3a      	ldrh	r2, [r7, #16]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d118      	bne.n	801310c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d005      	beq.n	80130ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	685a      	ldr	r2, [r3, #4]
 80130e6:	4b43      	ldr	r3, [pc, #268]	; (80131f4 <udp_input+0x218>)
 80130e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d10e      	bne.n	801310c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80130ee:	6a3b      	ldr	r3, [r7, #32]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d014      	beq.n	801311e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80130f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f6:	68da      	ldr	r2, [r3, #12]
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80130fc:	4b3e      	ldr	r3, [pc, #248]	; (80131f8 <udp_input+0x21c>)
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013102:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013104:	4a3c      	ldr	r2, [pc, #240]	; (80131f8 <udp_input+0x21c>)
 8013106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013108:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801310a:	e008      	b.n	801311e <udp_input+0x142>
      }
    }

    prev = pcb;
 801310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	627b      	str	r3, [r7, #36]	; 0x24
 8013116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1a7      	bne.n	801306c <udp_input+0x90>
 801311c:	e000      	b.n	8013120 <udp_input+0x144>
        break;
 801311e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	2b00      	cmp	r3, #0
 8013124:	d101      	bne.n	801312a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	2b00      	cmp	r3, #0
 801312e:	d002      	beq.n	8013136 <udp_input+0x15a>
    for_us = 1;
 8013130:	2301      	movs	r3, #1
 8013132:	76fb      	strb	r3, [r7, #27]
 8013134:	e00a      	b.n	801314c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	3304      	adds	r3, #4
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	4b2d      	ldr	r3, [pc, #180]	; (80131f4 <udp_input+0x218>)
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	429a      	cmp	r2, r3
 8013142:	bf0c      	ite	eq
 8013144:	2301      	moveq	r3, #1
 8013146:	2300      	movne	r3, #0
 8013148:	b2db      	uxtb	r3, r3
 801314a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801314c:	7efb      	ldrb	r3, [r7, #27]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d041      	beq.n	80131d6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013152:	2108      	movs	r1, #8
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7f9 f925 	bl	800c3a4 <pbuf_remove_header>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d00a      	beq.n	8013176 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013160:	4b20      	ldr	r3, [pc, #128]	; (80131e4 <udp_input+0x208>)
 8013162:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013166:	4925      	ldr	r1, [pc, #148]	; (80131fc <udp_input+0x220>)
 8013168:	4820      	ldr	r0, [pc, #128]	; (80131ec <udp_input+0x210>)
 801316a:	f002 ffc5 	bl	80160f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f7f9 f99e 	bl	800c4b0 <pbuf_free>
      goto end;
 8013174:	e032      	b.n	80131dc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013178:	2b00      	cmp	r3, #0
 801317a:	d012      	beq.n	80131a2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317e:	699b      	ldr	r3, [r3, #24]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00a      	beq.n	801319a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	699c      	ldr	r4, [r3, #24]
 8013188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318a:	69d8      	ldr	r0, [r3, #28]
 801318c:	8a3b      	ldrh	r3, [r7, #16]
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	4b1b      	ldr	r3, [pc, #108]	; (8013200 <udp_input+0x224>)
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013196:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013198:	e021      	b.n	80131de <udp_input+0x202>
        pbuf_free(p);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7f9 f988 	bl	800c4b0 <pbuf_free>
        goto end;
 80131a0:	e01c      	b.n	80131dc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80131a2:	7cfb      	ldrb	r3, [r7, #19]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d112      	bne.n	80131ce <udp_input+0x1f2>
 80131a8:	4b12      	ldr	r3, [pc, #72]	; (80131f4 <udp_input+0x218>)
 80131aa:	695b      	ldr	r3, [r3, #20]
 80131ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131b0:	2be0      	cmp	r3, #224	; 0xe0
 80131b2:	d00c      	beq.n	80131ce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80131b4:	4b0f      	ldr	r3, [pc, #60]	; (80131f4 <udp_input+0x218>)
 80131b6:	899b      	ldrh	r3, [r3, #12]
 80131b8:	3308      	adds	r3, #8
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	b21b      	sxth	r3, r3
 80131be:	4619      	mov	r1, r3
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7f9 f962 	bl	800c48a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80131c6:	2103      	movs	r1, #3
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f001 fa33 	bl	8014634 <icmp_dest_unreach>
      pbuf_free(p);
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7f9 f96e 	bl	800c4b0 <pbuf_free>
  return;
 80131d4:	e003      	b.n	80131de <udp_input+0x202>
    pbuf_free(p);
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7f9 f96a 	bl	800c4b0 <pbuf_free>
  return;
 80131dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80131de:	372c      	adds	r7, #44	; 0x2c
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd90      	pop	{r4, r7, pc}
 80131e4:	08019eb0 	.word	0x08019eb0
 80131e8:	08019f54 	.word	0x08019f54
 80131ec:	08019f04 	.word	0x08019f04
 80131f0:	08019f6c 	.word	0x08019f6c
 80131f4:	240043a8 	.word	0x240043a8
 80131f8:	24007504 	.word	0x24007504
 80131fc:	08019f88 	.word	0x08019f88
 8013200:	240043b8 	.word	0x240043b8

08013204 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b086      	sub	sp, #24
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	60b9      	str	r1, [r7, #8]
 801320e:	4613      	mov	r3, r2
 8013210:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d101      	bne.n	801321c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013218:	4b39      	ldr	r3, [pc, #228]	; (8013300 <udp_bind+0xfc>)
 801321a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d109      	bne.n	8013236 <udp_bind+0x32>
 8013222:	4b38      	ldr	r3, [pc, #224]	; (8013304 <udp_bind+0x100>)
 8013224:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013228:	4937      	ldr	r1, [pc, #220]	; (8013308 <udp_bind+0x104>)
 801322a:	4838      	ldr	r0, [pc, #224]	; (801330c <udp_bind+0x108>)
 801322c:	f002 ff64 	bl	80160f8 <iprintf>
 8013230:	f06f 030f 	mvn.w	r3, #15
 8013234:	e060      	b.n	80132f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013236:	2300      	movs	r3, #0
 8013238:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801323a:	4b35      	ldr	r3, [pc, #212]	; (8013310 <udp_bind+0x10c>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	617b      	str	r3, [r7, #20]
 8013240:	e009      	b.n	8013256 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013242:	68fa      	ldr	r2, [r7, #12]
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	429a      	cmp	r2, r3
 8013248:	d102      	bne.n	8013250 <udp_bind+0x4c>
      rebind = 1;
 801324a:	2301      	movs	r3, #1
 801324c:	74fb      	strb	r3, [r7, #19]
      break;
 801324e:	e005      	b.n	801325c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	617b      	str	r3, [r7, #20]
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1f2      	bne.n	8013242 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801325c:	88fb      	ldrh	r3, [r7, #6]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <udp_bind+0x72>
    port = udp_new_port();
 8013262:	f7ff fe1f 	bl	8012ea4 <udp_new_port>
 8013266:	4603      	mov	r3, r0
 8013268:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801326a:	88fb      	ldrh	r3, [r7, #6]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d12c      	bne.n	80132ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013270:	f06f 0307 	mvn.w	r3, #7
 8013274:	e040      	b.n	80132f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013276:	4b26      	ldr	r3, [pc, #152]	; (8013310 <udp_bind+0x10c>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	617b      	str	r3, [r7, #20]
 801327c:	e022      	b.n	80132c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	429a      	cmp	r2, r3
 8013284:	d01b      	beq.n	80132be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	8a5b      	ldrh	r3, [r3, #18]
 801328a:	88fa      	ldrh	r2, [r7, #6]
 801328c:	429a      	cmp	r2, r3
 801328e:	d116      	bne.n	80132be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013298:	429a      	cmp	r2, r3
 801329a:	d00d      	beq.n	80132b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00a      	beq.n	80132b8 <udp_bind+0xb4>
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d006      	beq.n	80132b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80132b8:	f06f 0307 	mvn.w	r3, #7
 80132bc:	e01c      	b.n	80132f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1d9      	bne.n	801327e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <udp_bind+0xd2>
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	e000      	b.n	80132d8 <udp_bind+0xd4>
 80132d6:	2300      	movs	r3, #0
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	88fa      	ldrh	r2, [r7, #6]
 80132e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80132e2:	7cfb      	ldrb	r3, [r7, #19]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d106      	bne.n	80132f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80132e8:	4b09      	ldr	r3, [pc, #36]	; (8013310 <udp_bind+0x10c>)
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80132f0:	4a07      	ldr	r2, [pc, #28]	; (8013310 <udp_bind+0x10c>)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3718      	adds	r7, #24
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	0801aa08 	.word	0x0801aa08
 8013304:	08019eb0 	.word	0x08019eb0
 8013308:	0801a178 	.word	0x0801a178
 801330c:	08019f04 	.word	0x08019f04
 8013310:	24007504 	.word	0x24007504

08013314 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b086      	sub	sp, #24
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	4613      	mov	r3, r2
 8013320:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d109      	bne.n	801333c <udp_connect+0x28>
 8013328:	4b2c      	ldr	r3, [pc, #176]	; (80133dc <udp_connect+0xc8>)
 801332a:	f240 4235 	movw	r2, #1077	; 0x435
 801332e:	492c      	ldr	r1, [pc, #176]	; (80133e0 <udp_connect+0xcc>)
 8013330:	482c      	ldr	r0, [pc, #176]	; (80133e4 <udp_connect+0xd0>)
 8013332:	f002 fee1 	bl	80160f8 <iprintf>
 8013336:	f06f 030f 	mvn.w	r3, #15
 801333a:	e04b      	b.n	80133d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d109      	bne.n	8013356 <udp_connect+0x42>
 8013342:	4b26      	ldr	r3, [pc, #152]	; (80133dc <udp_connect+0xc8>)
 8013344:	f240 4236 	movw	r2, #1078	; 0x436
 8013348:	4927      	ldr	r1, [pc, #156]	; (80133e8 <udp_connect+0xd4>)
 801334a:	4826      	ldr	r0, [pc, #152]	; (80133e4 <udp_connect+0xd0>)
 801334c:	f002 fed4 	bl	80160f8 <iprintf>
 8013350:	f06f 030f 	mvn.w	r3, #15
 8013354:	e03e      	b.n	80133d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	8a5b      	ldrh	r3, [r3, #18]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d10f      	bne.n	801337e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	8a5b      	ldrh	r3, [r3, #18]
 8013364:	461a      	mov	r2, r3
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	f7ff ff4c 	bl	8013204 <udp_bind>
 801336c:	4603      	mov	r3, r0
 801336e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <udp_connect+0x6a>
      return err;
 8013378:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801337c:	e02a      	b.n	80133d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <udp_connect+0x76>
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	e000      	b.n	801338c <udp_connect+0x78>
 801338a:	2300      	movs	r3, #0
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	88fa      	ldrh	r2, [r7, #6]
 8013394:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	7c1b      	ldrb	r3, [r3, #16]
 801339a:	f043 0304 	orr.w	r3, r3, #4
 801339e:	b2da      	uxtb	r2, r3
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133a4:	4b11      	ldr	r3, [pc, #68]	; (80133ec <udp_connect+0xd8>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	617b      	str	r3, [r7, #20]
 80133aa:	e008      	b.n	80133be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80133ac:	68fa      	ldr	r2, [r7, #12]
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d101      	bne.n	80133b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80133b4:	2300      	movs	r3, #0
 80133b6:	e00d      	b.n	80133d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d1f3      	bne.n	80133ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80133c4:	4b09      	ldr	r3, [pc, #36]	; (80133ec <udp_connect+0xd8>)
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80133cc:	4a07      	ldr	r2, [pc, #28]	; (80133ec <udp_connect+0xd8>)
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3718      	adds	r7, #24
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	08019eb0 	.word	0x08019eb0
 80133e0:	0801a190 	.word	0x0801a190
 80133e4:	08019f04 	.word	0x08019f04
 80133e8:	0801a1ac 	.word	0x0801a1ac
 80133ec:	24007504 	.word	0x24007504

080133f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d107      	bne.n	8013412 <udp_recv+0x22>
 8013402:	4b08      	ldr	r3, [pc, #32]	; (8013424 <udp_recv+0x34>)
 8013404:	f240 428a 	movw	r2, #1162	; 0x48a
 8013408:	4907      	ldr	r1, [pc, #28]	; (8013428 <udp_recv+0x38>)
 801340a:	4808      	ldr	r0, [pc, #32]	; (801342c <udp_recv+0x3c>)
 801340c:	f002 fe74 	bl	80160f8 <iprintf>
 8013410:	e005      	b.n	801341e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	68ba      	ldr	r2, [r7, #8]
 8013416:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	61da      	str	r2, [r3, #28]
}
 801341e:	3710      	adds	r7, #16
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	08019eb0 	.word	0x08019eb0
 8013428:	0801a1e4 	.word	0x0801a1e4
 801342c:	08019f04 	.word	0x08019f04

08013430 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d107      	bne.n	801344e <udp_remove+0x1e>
 801343e:	4b19      	ldr	r3, [pc, #100]	; (80134a4 <udp_remove+0x74>)
 8013440:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013444:	4918      	ldr	r1, [pc, #96]	; (80134a8 <udp_remove+0x78>)
 8013446:	4819      	ldr	r0, [pc, #100]	; (80134ac <udp_remove+0x7c>)
 8013448:	f002 fe56 	bl	80160f8 <iprintf>
 801344c:	e026      	b.n	801349c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801344e:	4b18      	ldr	r3, [pc, #96]	; (80134b0 <udp_remove+0x80>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	429a      	cmp	r2, r3
 8013456:	d105      	bne.n	8013464 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013458:	4b15      	ldr	r3, [pc, #84]	; (80134b0 <udp_remove+0x80>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	4a14      	ldr	r2, [pc, #80]	; (80134b0 <udp_remove+0x80>)
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	e017      	b.n	8013494 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013464:	4b12      	ldr	r3, [pc, #72]	; (80134b0 <udp_remove+0x80>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	60fb      	str	r3, [r7, #12]
 801346a:	e010      	b.n	801348e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d009      	beq.n	8013488 <udp_remove+0x58>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	429a      	cmp	r2, r3
 801347c:	d104      	bne.n	8013488 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	68da      	ldr	r2, [r3, #12]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	60da      	str	r2, [r3, #12]
        break;
 8013486:	e005      	b.n	8013494 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	60fb      	str	r3, [r7, #12]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d1eb      	bne.n	801346c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013494:	6879      	ldr	r1, [r7, #4]
 8013496:	2000      	movs	r0, #0
 8013498:	f7f8 f966 	bl	800b768 <memp_free>
}
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	08019eb0 	.word	0x08019eb0
 80134a8:	0801a1fc 	.word	0x0801a1fc
 80134ac:	08019f04 	.word	0x08019f04
 80134b0:	24007504 	.word	0x24007504

080134b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80134ba:	2000      	movs	r0, #0
 80134bc:	f7f8 f8de 	bl	800b67c <memp_malloc>
 80134c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d007      	beq.n	80134d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80134c8:	2220      	movs	r2, #32
 80134ca:	2100      	movs	r1, #0
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f002 feb2 	bl	8016236 <memset>
    pcb->ttl = UDP_TTL;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	22ff      	movs	r2, #255	; 0xff
 80134d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80134d8:	687b      	ldr	r3, [r7, #4]
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}

080134e2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b084      	sub	sp, #16
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	4603      	mov	r3, r0
 80134ea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80134ec:	f7ff ffe2 	bl	80134b4 <udp_new>
 80134f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80134f2:	68fb      	ldr	r3, [r7, #12]
}
 80134f4:	4618      	mov	r0, r3
 80134f6:	3710      	adds	r7, #16
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d01e      	beq.n	801354a <udp_netif_ip_addr_changed+0x4e>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d01a      	beq.n	801354a <udp_netif_ip_addr_changed+0x4e>
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d017      	beq.n	801354a <udp_netif_ip_addr_changed+0x4e>
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d013      	beq.n	801354a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013522:	4b0d      	ldr	r3, [pc, #52]	; (8013558 <udp_netif_ip_addr_changed+0x5c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	e00c      	b.n	8013544 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	429a      	cmp	r2, r3
 8013534:	d103      	bne.n	801353e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	60fb      	str	r3, [r7, #12]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1ef      	bne.n	801352a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801354a:	bf00      	nop
 801354c:	3714      	adds	r7, #20
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop
 8013558:	24007504 	.word	0x24007504

0801355c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013564:	4915      	ldr	r1, [pc, #84]	; (80135bc <etharp_free_entry+0x60>)
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	4613      	mov	r3, r2
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	4413      	add	r3, r2
 801356e:	00db      	lsls	r3, r3, #3
 8013570:	440b      	add	r3, r1
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d013      	beq.n	80135a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013578:	4910      	ldr	r1, [pc, #64]	; (80135bc <etharp_free_entry+0x60>)
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	4613      	mov	r3, r2
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	4413      	add	r3, r2
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	440b      	add	r3, r1
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4618      	mov	r0, r3
 801358a:	f7f8 ff91 	bl	800c4b0 <pbuf_free>
    arp_table[i].q = NULL;
 801358e:	490b      	ldr	r1, [pc, #44]	; (80135bc <etharp_free_entry+0x60>)
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	4613      	mov	r3, r2
 8013594:	005b      	lsls	r3, r3, #1
 8013596:	4413      	add	r3, r2
 8013598:	00db      	lsls	r3, r3, #3
 801359a:	440b      	add	r3, r1
 801359c:	2200      	movs	r2, #0
 801359e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80135a0:	4906      	ldr	r1, [pc, #24]	; (80135bc <etharp_free_entry+0x60>)
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	4613      	mov	r3, r2
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	4413      	add	r3, r2
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	440b      	add	r3, r1
 80135ae:	3314      	adds	r3, #20
 80135b0:	2200      	movs	r2, #0
 80135b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80135b4:	bf00      	nop
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	24007508 	.word	0x24007508

080135c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80135c6:	2300      	movs	r3, #0
 80135c8:	607b      	str	r3, [r7, #4]
 80135ca:	e096      	b.n	80136fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80135cc:	494f      	ldr	r1, [pc, #316]	; (801370c <etharp_tmr+0x14c>)
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	4613      	mov	r3, r2
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	440b      	add	r3, r1
 80135da:	3314      	adds	r3, #20
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80135e0:	78fb      	ldrb	r3, [r7, #3]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f000 8086 	beq.w	80136f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80135e8:	4948      	ldr	r1, [pc, #288]	; (801370c <etharp_tmr+0x14c>)
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	4613      	mov	r3, r2
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	4413      	add	r3, r2
 80135f2:	00db      	lsls	r3, r3, #3
 80135f4:	440b      	add	r3, r1
 80135f6:	3312      	adds	r3, #18
 80135f8:	881b      	ldrh	r3, [r3, #0]
 80135fa:	3301      	adds	r3, #1
 80135fc:	b298      	uxth	r0, r3
 80135fe:	4943      	ldr	r1, [pc, #268]	; (801370c <etharp_tmr+0x14c>)
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	4613      	mov	r3, r2
 8013604:	005b      	lsls	r3, r3, #1
 8013606:	4413      	add	r3, r2
 8013608:	00db      	lsls	r3, r3, #3
 801360a:	440b      	add	r3, r1
 801360c:	3312      	adds	r3, #18
 801360e:	4602      	mov	r2, r0
 8013610:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013612:	493e      	ldr	r1, [pc, #248]	; (801370c <etharp_tmr+0x14c>)
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	4613      	mov	r3, r2
 8013618:	005b      	lsls	r3, r3, #1
 801361a:	4413      	add	r3, r2
 801361c:	00db      	lsls	r3, r3, #3
 801361e:	440b      	add	r3, r1
 8013620:	3312      	adds	r3, #18
 8013622:	881b      	ldrh	r3, [r3, #0]
 8013624:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013628:	d215      	bcs.n	8013656 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801362a:	4938      	ldr	r1, [pc, #224]	; (801370c <etharp_tmr+0x14c>)
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	3314      	adds	r3, #20
 801363a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801363c:	2b01      	cmp	r3, #1
 801363e:	d10e      	bne.n	801365e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013640:	4932      	ldr	r1, [pc, #200]	; (801370c <etharp_tmr+0x14c>)
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	4613      	mov	r3, r2
 8013646:	005b      	lsls	r3, r3, #1
 8013648:	4413      	add	r3, r2
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	440b      	add	r3, r1
 801364e:	3312      	adds	r3, #18
 8013650:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013652:	2b04      	cmp	r3, #4
 8013654:	d903      	bls.n	801365e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff ff80 	bl	801355c <etharp_free_entry>
 801365c:	e04a      	b.n	80136f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801365e:	492b      	ldr	r1, [pc, #172]	; (801370c <etharp_tmr+0x14c>)
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	4613      	mov	r3, r2
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	4413      	add	r3, r2
 8013668:	00db      	lsls	r3, r3, #3
 801366a:	440b      	add	r3, r1
 801366c:	3314      	adds	r3, #20
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	2b03      	cmp	r3, #3
 8013672:	d10a      	bne.n	801368a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013674:	4925      	ldr	r1, [pc, #148]	; (801370c <etharp_tmr+0x14c>)
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	4613      	mov	r3, r2
 801367a:	005b      	lsls	r3, r3, #1
 801367c:	4413      	add	r3, r2
 801367e:	00db      	lsls	r3, r3, #3
 8013680:	440b      	add	r3, r1
 8013682:	3314      	adds	r3, #20
 8013684:	2204      	movs	r2, #4
 8013686:	701a      	strb	r2, [r3, #0]
 8013688:	e034      	b.n	80136f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801368a:	4920      	ldr	r1, [pc, #128]	; (801370c <etharp_tmr+0x14c>)
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	4613      	mov	r3, r2
 8013690:	005b      	lsls	r3, r3, #1
 8013692:	4413      	add	r3, r2
 8013694:	00db      	lsls	r3, r3, #3
 8013696:	440b      	add	r3, r1
 8013698:	3314      	adds	r3, #20
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	2b04      	cmp	r3, #4
 801369e:	d10a      	bne.n	80136b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80136a0:	491a      	ldr	r1, [pc, #104]	; (801370c <etharp_tmr+0x14c>)
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4613      	mov	r3, r2
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	4413      	add	r3, r2
 80136aa:	00db      	lsls	r3, r3, #3
 80136ac:	440b      	add	r3, r1
 80136ae:	3314      	adds	r3, #20
 80136b0:	2202      	movs	r2, #2
 80136b2:	701a      	strb	r2, [r3, #0]
 80136b4:	e01e      	b.n	80136f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80136b6:	4915      	ldr	r1, [pc, #84]	; (801370c <etharp_tmr+0x14c>)
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	4613      	mov	r3, r2
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	4413      	add	r3, r2
 80136c0:	00db      	lsls	r3, r3, #3
 80136c2:	440b      	add	r3, r1
 80136c4:	3314      	adds	r3, #20
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d113      	bne.n	80136f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80136cc:	490f      	ldr	r1, [pc, #60]	; (801370c <etharp_tmr+0x14c>)
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	4613      	mov	r3, r2
 80136d2:	005b      	lsls	r3, r3, #1
 80136d4:	4413      	add	r3, r2
 80136d6:	00db      	lsls	r3, r3, #3
 80136d8:	440b      	add	r3, r1
 80136da:	3308      	adds	r3, #8
 80136dc:	6818      	ldr	r0, [r3, #0]
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	4613      	mov	r3, r2
 80136e2:	005b      	lsls	r3, r3, #1
 80136e4:	4413      	add	r3, r2
 80136e6:	00db      	lsls	r3, r3, #3
 80136e8:	4a08      	ldr	r2, [pc, #32]	; (801370c <etharp_tmr+0x14c>)
 80136ea:	4413      	add	r3, r2
 80136ec:	3304      	adds	r3, #4
 80136ee:	4619      	mov	r1, r3
 80136f0:	f000 fe6e 	bl	80143d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	3301      	adds	r3, #1
 80136f8:	607b      	str	r3, [r7, #4]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2b09      	cmp	r3, #9
 80136fe:	f77f af65 	ble.w	80135cc <etharp_tmr+0xc>
      }
    }
  }
}
 8013702:	bf00      	nop
 8013704:	bf00      	nop
 8013706:	3708      	adds	r7, #8
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	24007508 	.word	0x24007508

08013710 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b08a      	sub	sp, #40	; 0x28
 8013714:	af00      	add	r7, sp, #0
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	460b      	mov	r3, r1
 801371a:	607a      	str	r2, [r7, #4]
 801371c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801371e:	230a      	movs	r3, #10
 8013720:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013722:	230a      	movs	r3, #10
 8013724:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013726:	230a      	movs	r3, #10
 8013728:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801372a:	2300      	movs	r3, #0
 801372c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801372e:	230a      	movs	r3, #10
 8013730:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013732:	2300      	movs	r3, #0
 8013734:	83bb      	strh	r3, [r7, #28]
 8013736:	2300      	movs	r3, #0
 8013738:	837b      	strh	r3, [r7, #26]
 801373a:	2300      	movs	r3, #0
 801373c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801373e:	2300      	movs	r3, #0
 8013740:	843b      	strh	r3, [r7, #32]
 8013742:	e0ae      	b.n	80138a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013744:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013748:	49a6      	ldr	r1, [pc, #664]	; (80139e4 <etharp_find_entry+0x2d4>)
 801374a:	4613      	mov	r3, r2
 801374c:	005b      	lsls	r3, r3, #1
 801374e:	4413      	add	r3, r2
 8013750:	00db      	lsls	r3, r3, #3
 8013752:	440b      	add	r3, r1
 8013754:	3314      	adds	r3, #20
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801375a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801375e:	2b0a      	cmp	r3, #10
 8013760:	d105      	bne.n	801376e <etharp_find_entry+0x5e>
 8013762:	7dfb      	ldrb	r3, [r7, #23]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013768:	8c3b      	ldrh	r3, [r7, #32]
 801376a:	847b      	strh	r3, [r7, #34]	; 0x22
 801376c:	e095      	b.n	801389a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801376e:	7dfb      	ldrb	r3, [r7, #23]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 8092 	beq.w	801389a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013776:	7dfb      	ldrb	r3, [r7, #23]
 8013778:	2b01      	cmp	r3, #1
 801377a:	d009      	beq.n	8013790 <etharp_find_entry+0x80>
 801377c:	7dfb      	ldrb	r3, [r7, #23]
 801377e:	2b01      	cmp	r3, #1
 8013780:	d806      	bhi.n	8013790 <etharp_find_entry+0x80>
 8013782:	4b99      	ldr	r3, [pc, #612]	; (80139e8 <etharp_find_entry+0x2d8>)
 8013784:	f240 1223 	movw	r2, #291	; 0x123
 8013788:	4998      	ldr	r1, [pc, #608]	; (80139ec <etharp_find_entry+0x2dc>)
 801378a:	4899      	ldr	r0, [pc, #612]	; (80139f0 <etharp_find_entry+0x2e0>)
 801378c:	f002 fcb4 	bl	80160f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d020      	beq.n	80137d8 <etharp_find_entry+0xc8>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6819      	ldr	r1, [r3, #0]
 801379a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801379e:	4891      	ldr	r0, [pc, #580]	; (80139e4 <etharp_find_entry+0x2d4>)
 80137a0:	4613      	mov	r3, r2
 80137a2:	005b      	lsls	r3, r3, #1
 80137a4:	4413      	add	r3, r2
 80137a6:	00db      	lsls	r3, r3, #3
 80137a8:	4403      	add	r3, r0
 80137aa:	3304      	adds	r3, #4
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	4299      	cmp	r1, r3
 80137b0:	d112      	bne.n	80137d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d00c      	beq.n	80137d2 <etharp_find_entry+0xc2>
 80137b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137bc:	4989      	ldr	r1, [pc, #548]	; (80139e4 <etharp_find_entry+0x2d4>)
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	440b      	add	r3, r1
 80137c8:	3308      	adds	r3, #8
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d102      	bne.n	80137d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80137d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137d6:	e100      	b.n	80139da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80137d8:	7dfb      	ldrb	r3, [r7, #23]
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d140      	bne.n	8013860 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80137de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137e2:	4980      	ldr	r1, [pc, #512]	; (80139e4 <etharp_find_entry+0x2d4>)
 80137e4:	4613      	mov	r3, r2
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	00db      	lsls	r3, r3, #3
 80137ec:	440b      	add	r3, r1
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d01a      	beq.n	801382a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80137f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137f8:	497a      	ldr	r1, [pc, #488]	; (80139e4 <etharp_find_entry+0x2d4>)
 80137fa:	4613      	mov	r3, r2
 80137fc:	005b      	lsls	r3, r3, #1
 80137fe:	4413      	add	r3, r2
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	440b      	add	r3, r1
 8013804:	3312      	adds	r3, #18
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	8bba      	ldrh	r2, [r7, #28]
 801380a:	429a      	cmp	r2, r3
 801380c:	d845      	bhi.n	801389a <etharp_find_entry+0x18a>
            old_queue = i;
 801380e:	8c3b      	ldrh	r3, [r7, #32]
 8013810:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013816:	4973      	ldr	r1, [pc, #460]	; (80139e4 <etharp_find_entry+0x2d4>)
 8013818:	4613      	mov	r3, r2
 801381a:	005b      	lsls	r3, r3, #1
 801381c:	4413      	add	r3, r2
 801381e:	00db      	lsls	r3, r3, #3
 8013820:	440b      	add	r3, r1
 8013822:	3312      	adds	r3, #18
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	83bb      	strh	r3, [r7, #28]
 8013828:	e037      	b.n	801389a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801382a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801382e:	496d      	ldr	r1, [pc, #436]	; (80139e4 <etharp_find_entry+0x2d4>)
 8013830:	4613      	mov	r3, r2
 8013832:	005b      	lsls	r3, r3, #1
 8013834:	4413      	add	r3, r2
 8013836:	00db      	lsls	r3, r3, #3
 8013838:	440b      	add	r3, r1
 801383a:	3312      	adds	r3, #18
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	8b7a      	ldrh	r2, [r7, #26]
 8013840:	429a      	cmp	r2, r3
 8013842:	d82a      	bhi.n	801389a <etharp_find_entry+0x18a>
            old_pending = i;
 8013844:	8c3b      	ldrh	r3, [r7, #32]
 8013846:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013848:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801384c:	4965      	ldr	r1, [pc, #404]	; (80139e4 <etharp_find_entry+0x2d4>)
 801384e:	4613      	mov	r3, r2
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	440b      	add	r3, r1
 8013858:	3312      	adds	r3, #18
 801385a:	881b      	ldrh	r3, [r3, #0]
 801385c:	837b      	strh	r3, [r7, #26]
 801385e:	e01c      	b.n	801389a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	2b01      	cmp	r3, #1
 8013864:	d919      	bls.n	801389a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013866:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801386a:	495e      	ldr	r1, [pc, #376]	; (80139e4 <etharp_find_entry+0x2d4>)
 801386c:	4613      	mov	r3, r2
 801386e:	005b      	lsls	r3, r3, #1
 8013870:	4413      	add	r3, r2
 8013872:	00db      	lsls	r3, r3, #3
 8013874:	440b      	add	r3, r1
 8013876:	3312      	adds	r3, #18
 8013878:	881b      	ldrh	r3, [r3, #0]
 801387a:	8b3a      	ldrh	r2, [r7, #24]
 801387c:	429a      	cmp	r2, r3
 801387e:	d80c      	bhi.n	801389a <etharp_find_entry+0x18a>
            old_stable = i;
 8013880:	8c3b      	ldrh	r3, [r7, #32]
 8013882:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013884:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013888:	4956      	ldr	r1, [pc, #344]	; (80139e4 <etharp_find_entry+0x2d4>)
 801388a:	4613      	mov	r3, r2
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	4413      	add	r3, r2
 8013890:	00db      	lsls	r3, r3, #3
 8013892:	440b      	add	r3, r1
 8013894:	3312      	adds	r3, #18
 8013896:	881b      	ldrh	r3, [r3, #0]
 8013898:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801389a:	8c3b      	ldrh	r3, [r7, #32]
 801389c:	3301      	adds	r3, #1
 801389e:	b29b      	uxth	r3, r3
 80138a0:	843b      	strh	r3, [r7, #32]
 80138a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80138a6:	2b09      	cmp	r3, #9
 80138a8:	f77f af4c 	ble.w	8013744 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80138ac:	7afb      	ldrb	r3, [r7, #11]
 80138ae:	f003 0302 	and.w	r3, r3, #2
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d108      	bne.n	80138c8 <etharp_find_entry+0x1b8>
 80138b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80138ba:	2b0a      	cmp	r3, #10
 80138bc:	d107      	bne.n	80138ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80138be:	7afb      	ldrb	r3, [r7, #11]
 80138c0:	f003 0301 	and.w	r3, r3, #1
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d102      	bne.n	80138ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295
 80138cc:	e085      	b.n	80139da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80138ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80138d2:	2b09      	cmp	r3, #9
 80138d4:	dc02      	bgt.n	80138dc <etharp_find_entry+0x1cc>
    i = empty;
 80138d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80138d8:	843b      	strh	r3, [r7, #32]
 80138da:	e039      	b.n	8013950 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80138dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80138e0:	2b09      	cmp	r3, #9
 80138e2:	dc14      	bgt.n	801390e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80138e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80138e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80138e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ec:	493d      	ldr	r1, [pc, #244]	; (80139e4 <etharp_find_entry+0x2d4>)
 80138ee:	4613      	mov	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	4413      	add	r3, r2
 80138f4:	00db      	lsls	r3, r3, #3
 80138f6:	440b      	add	r3, r1
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d018      	beq.n	8013930 <etharp_find_entry+0x220>
 80138fe:	4b3a      	ldr	r3, [pc, #232]	; (80139e8 <etharp_find_entry+0x2d8>)
 8013900:	f240 126d 	movw	r2, #365	; 0x16d
 8013904:	493b      	ldr	r1, [pc, #236]	; (80139f4 <etharp_find_entry+0x2e4>)
 8013906:	483a      	ldr	r0, [pc, #232]	; (80139f0 <etharp_find_entry+0x2e0>)
 8013908:	f002 fbf6 	bl	80160f8 <iprintf>
 801390c:	e010      	b.n	8013930 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801390e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013912:	2b09      	cmp	r3, #9
 8013914:	dc02      	bgt.n	801391c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013916:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013918:	843b      	strh	r3, [r7, #32]
 801391a:	e009      	b.n	8013930 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801391c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013920:	2b09      	cmp	r3, #9
 8013922:	dc02      	bgt.n	801392a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013924:	8bfb      	ldrh	r3, [r7, #30]
 8013926:	843b      	strh	r3, [r7, #32]
 8013928:	e002      	b.n	8013930 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801392a:	f04f 33ff 	mov.w	r3, #4294967295
 801392e:	e054      	b.n	80139da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013930:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013934:	2b09      	cmp	r3, #9
 8013936:	dd06      	ble.n	8013946 <etharp_find_entry+0x236>
 8013938:	4b2b      	ldr	r3, [pc, #172]	; (80139e8 <etharp_find_entry+0x2d8>)
 801393a:	f240 127f 	movw	r2, #383	; 0x17f
 801393e:	492e      	ldr	r1, [pc, #184]	; (80139f8 <etharp_find_entry+0x2e8>)
 8013940:	482b      	ldr	r0, [pc, #172]	; (80139f0 <etharp_find_entry+0x2e0>)
 8013942:	f002 fbd9 	bl	80160f8 <iprintf>
    etharp_free_entry(i);
 8013946:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff fe06 	bl	801355c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013950:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013954:	2b09      	cmp	r3, #9
 8013956:	dd06      	ble.n	8013966 <etharp_find_entry+0x256>
 8013958:	4b23      	ldr	r3, [pc, #140]	; (80139e8 <etharp_find_entry+0x2d8>)
 801395a:	f240 1283 	movw	r2, #387	; 0x183
 801395e:	4926      	ldr	r1, [pc, #152]	; (80139f8 <etharp_find_entry+0x2e8>)
 8013960:	4823      	ldr	r0, [pc, #140]	; (80139f0 <etharp_find_entry+0x2e0>)
 8013962:	f002 fbc9 	bl	80160f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013966:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801396a:	491e      	ldr	r1, [pc, #120]	; (80139e4 <etharp_find_entry+0x2d4>)
 801396c:	4613      	mov	r3, r2
 801396e:	005b      	lsls	r3, r3, #1
 8013970:	4413      	add	r3, r2
 8013972:	00db      	lsls	r3, r3, #3
 8013974:	440b      	add	r3, r1
 8013976:	3314      	adds	r3, #20
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d006      	beq.n	801398c <etharp_find_entry+0x27c>
 801397e:	4b1a      	ldr	r3, [pc, #104]	; (80139e8 <etharp_find_entry+0x2d8>)
 8013980:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013984:	491d      	ldr	r1, [pc, #116]	; (80139fc <etharp_find_entry+0x2ec>)
 8013986:	481a      	ldr	r0, [pc, #104]	; (80139f0 <etharp_find_entry+0x2e0>)
 8013988:	f002 fbb6 	bl	80160f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00b      	beq.n	80139aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6819      	ldr	r1, [r3, #0]
 801399a:	4812      	ldr	r0, [pc, #72]	; (80139e4 <etharp_find_entry+0x2d4>)
 801399c:	4613      	mov	r3, r2
 801399e:	005b      	lsls	r3, r3, #1
 80139a0:	4413      	add	r3, r2
 80139a2:	00db      	lsls	r3, r3, #3
 80139a4:	4403      	add	r3, r0
 80139a6:	3304      	adds	r3, #4
 80139a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80139aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ae:	490d      	ldr	r1, [pc, #52]	; (80139e4 <etharp_find_entry+0x2d4>)
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	00db      	lsls	r3, r3, #3
 80139b8:	440b      	add	r3, r1
 80139ba:	3312      	adds	r3, #18
 80139bc:	2200      	movs	r2, #0
 80139be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80139c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139c4:	4907      	ldr	r1, [pc, #28]	; (80139e4 <etharp_find_entry+0x2d4>)
 80139c6:	4613      	mov	r3, r2
 80139c8:	005b      	lsls	r3, r3, #1
 80139ca:	4413      	add	r3, r2
 80139cc:	00db      	lsls	r3, r3, #3
 80139ce:	440b      	add	r3, r1
 80139d0:	3308      	adds	r3, #8
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80139d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3728      	adds	r7, #40	; 0x28
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	24007508 	.word	0x24007508
 80139e8:	0801a214 	.word	0x0801a214
 80139ec:	0801a24c 	.word	0x0801a24c
 80139f0:	0801a28c 	.word	0x0801a28c
 80139f4:	0801a2b4 	.word	0x0801a2b4
 80139f8:	0801a2cc 	.word	0x0801a2cc
 80139fc:	0801a2e0 	.word	0x0801a2e0

08013a00 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b088      	sub	sp, #32
 8013a04:	af02      	add	r7, sp, #8
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a14:	2b06      	cmp	r3, #6
 8013a16:	d006      	beq.n	8013a26 <etharp_update_arp_entry+0x26>
 8013a18:	4b48      	ldr	r3, [pc, #288]	; (8013b3c <etharp_update_arp_entry+0x13c>)
 8013a1a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013a1e:	4948      	ldr	r1, [pc, #288]	; (8013b40 <etharp_update_arp_entry+0x140>)
 8013a20:	4848      	ldr	r0, [pc, #288]	; (8013b44 <etharp_update_arp_entry+0x144>)
 8013a22:	f002 fb69 	bl	80160f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d012      	beq.n	8013a52 <etharp_update_arp_entry+0x52>
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d00e      	beq.n	8013a52 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	68f9      	ldr	r1, [r7, #12]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f001 f924 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8013a40:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d105      	bne.n	8013a52 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a4e:	2be0      	cmp	r3, #224	; 0xe0
 8013a50:	d102      	bne.n	8013a58 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013a52:	f06f 030f 	mvn.w	r3, #15
 8013a56:	e06c      	b.n	8013b32 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013a58:	78fb      	ldrb	r3, [r7, #3]
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	68b8      	ldr	r0, [r7, #8]
 8013a60:	f7ff fe56 	bl	8013710 <etharp_find_entry>
 8013a64:	4603      	mov	r3, r0
 8013a66:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013a68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	da02      	bge.n	8013a76 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013a70:	8afb      	ldrh	r3, [r7, #22]
 8013a72:	b25b      	sxtb	r3, r3
 8013a74:	e05d      	b.n	8013b32 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013a76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a7a:	4933      	ldr	r1, [pc, #204]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	005b      	lsls	r3, r3, #1
 8013a80:	4413      	add	r3, r2
 8013a82:	00db      	lsls	r3, r3, #3
 8013a84:	440b      	add	r3, r1
 8013a86:	3314      	adds	r3, #20
 8013a88:	2202      	movs	r2, #2
 8013a8a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a90:	492d      	ldr	r1, [pc, #180]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013a92:	4613      	mov	r3, r2
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	4413      	add	r3, r2
 8013a98:	00db      	lsls	r3, r3, #3
 8013a9a:	440b      	add	r3, r1
 8013a9c:	3308      	adds	r3, #8
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013aa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	005b      	lsls	r3, r3, #1
 8013aaa:	4413      	add	r3, r2
 8013aac:	00db      	lsls	r3, r3, #3
 8013aae:	3308      	adds	r3, #8
 8013ab0:	4a25      	ldr	r2, [pc, #148]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013ab2:	4413      	add	r3, r2
 8013ab4:	3304      	adds	r3, #4
 8013ab6:	2206      	movs	r2, #6
 8013ab8:	6879      	ldr	r1, [r7, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f002 fc43 	bl	8016346 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013ac0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ac4:	4920      	ldr	r1, [pc, #128]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	4413      	add	r3, r2
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	440b      	add	r3, r1
 8013ad0:	3312      	adds	r3, #18
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013ad6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ada:	491b      	ldr	r1, [pc, #108]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013adc:	4613      	mov	r3, r2
 8013ade:	005b      	lsls	r3, r3, #1
 8013ae0:	4413      	add	r3, r2
 8013ae2:	00db      	lsls	r3, r3, #3
 8013ae4:	440b      	add	r3, r1
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d021      	beq.n	8013b30 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013aec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013af0:	4915      	ldr	r1, [pc, #84]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013af2:	4613      	mov	r3, r2
 8013af4:	005b      	lsls	r3, r3, #1
 8013af6:	4413      	add	r3, r2
 8013af8:	00db      	lsls	r3, r3, #3
 8013afa:	440b      	add	r3, r1
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013b00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b04:	4910      	ldr	r1, [pc, #64]	; (8013b48 <etharp_update_arp_entry+0x148>)
 8013b06:	4613      	mov	r3, r2
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	4413      	add	r3, r2
 8013b0c:	00db      	lsls	r3, r3, #3
 8013b0e:	440b      	add	r3, r1
 8013b10:	2200      	movs	r2, #0
 8013b12:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6939      	ldr	r1, [r7, #16]
 8013b24:	68f8      	ldr	r0, [r7, #12]
 8013b26:	f001 ffbd 	bl	8015aa4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013b2a:	6938      	ldr	r0, [r7, #16]
 8013b2c:	f7f8 fcc0 	bl	800c4b0 <pbuf_free>
  }
  return ERR_OK;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3718      	adds	r7, #24
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	0801a214 	.word	0x0801a214
 8013b40:	0801a30c 	.word	0x0801a30c
 8013b44:	0801a28c 	.word	0x0801a28c
 8013b48:	24007508 	.word	0x24007508

08013b4c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b54:	2300      	movs	r3, #0
 8013b56:	60fb      	str	r3, [r7, #12]
 8013b58:	e01e      	b.n	8013b98 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013b5a:	4913      	ldr	r1, [pc, #76]	; (8013ba8 <etharp_cleanup_netif+0x5c>)
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	3314      	adds	r3, #20
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013b6e:	7afb      	ldrb	r3, [r7, #11]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d00e      	beq.n	8013b92 <etharp_cleanup_netif+0x46>
 8013b74:	490c      	ldr	r1, [pc, #48]	; (8013ba8 <etharp_cleanup_netif+0x5c>)
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	4613      	mov	r3, r2
 8013b7a:	005b      	lsls	r3, r3, #1
 8013b7c:	4413      	add	r3, r2
 8013b7e:	00db      	lsls	r3, r3, #3
 8013b80:	440b      	add	r3, r1
 8013b82:	3308      	adds	r3, #8
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d102      	bne.n	8013b92 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f7ff fce5 	bl	801355c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3301      	adds	r3, #1
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b09      	cmp	r3, #9
 8013b9c:	dddd      	ble.n	8013b5a <etharp_cleanup_netif+0xe>
    }
  }
}
 8013b9e:	bf00      	nop
 8013ba0:	bf00      	nop
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	24007508 	.word	0x24007508

08013bac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013bac:	b5b0      	push	{r4, r5, r7, lr}
 8013bae:	b08a      	sub	sp, #40	; 0x28
 8013bb0:	af04      	add	r7, sp, #16
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d107      	bne.n	8013bcc <etharp_input+0x20>
 8013bbc:	4b3d      	ldr	r3, [pc, #244]	; (8013cb4 <etharp_input+0x108>)
 8013bbe:	f240 228a 	movw	r2, #650	; 0x28a
 8013bc2:	493d      	ldr	r1, [pc, #244]	; (8013cb8 <etharp_input+0x10c>)
 8013bc4:	483d      	ldr	r0, [pc, #244]	; (8013cbc <etharp_input+0x110>)
 8013bc6:	f002 fa97 	bl	80160f8 <iprintf>
 8013bca:	e06f      	b.n	8013cac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bdc:	d10c      	bne.n	8013bf8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013be2:	2b06      	cmp	r3, #6
 8013be4:	d108      	bne.n	8013bf8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013bea:	2b04      	cmp	r3, #4
 8013bec:	d104      	bne.n	8013bf8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	885b      	ldrh	r3, [r3, #2]
 8013bf2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013bf4:	2b08      	cmp	r3, #8
 8013bf6:	d003      	beq.n	8013c00 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7f8 fc59 	bl	800c4b0 <pbuf_free>
    return;
 8013bfe:	e055      	b.n	8013cac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	330e      	adds	r3, #14
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	3318      	adds	r3, #24
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d102      	bne.n	8013c20 <etharp_input+0x74>
    for_us = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	75fb      	strb	r3, [r7, #23]
 8013c1e:	e009      	b.n	8013c34 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	3304      	adds	r3, #4
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	bf0c      	ite	eq
 8013c2c:	2301      	moveq	r3, #1
 8013c2e:	2300      	movne	r3, #0
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	f103 0208 	add.w	r2, r3, #8
 8013c3a:	7dfb      	ldrb	r3, [r7, #23]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d001      	beq.n	8013c44 <etharp_input+0x98>
 8013c40:	2301      	movs	r3, #1
 8013c42:	e000      	b.n	8013c46 <etharp_input+0x9a>
 8013c44:	2302      	movs	r3, #2
 8013c46:	f107 010c 	add.w	r1, r7, #12
 8013c4a:	6838      	ldr	r0, [r7, #0]
 8013c4c:	f7ff fed8 	bl	8013a00 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	88db      	ldrh	r3, [r3, #6]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c5a:	d003      	beq.n	8013c64 <etharp_input+0xb8>
 8013c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c60:	d01e      	beq.n	8013ca0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013c62:	e020      	b.n	8013ca6 <etharp_input+0xfa>
      if (for_us) {
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d01c      	beq.n	8013ca4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013c80:	693a      	ldr	r2, [r7, #16]
 8013c82:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013c84:	2102      	movs	r1, #2
 8013c86:	9103      	str	r1, [sp, #12]
 8013c88:	f107 010c 	add.w	r1, r7, #12
 8013c8c:	9102      	str	r1, [sp, #8]
 8013c8e:	9201      	str	r2, [sp, #4]
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	462b      	mov	r3, r5
 8013c94:	4622      	mov	r2, r4
 8013c96:	4601      	mov	r1, r0
 8013c98:	6838      	ldr	r0, [r7, #0]
 8013c9a:	f000 faeb 	bl	8014274 <etharp_raw>
      break;
 8013c9e:	e001      	b.n	8013ca4 <etharp_input+0xf8>
      break;
 8013ca0:	bf00      	nop
 8013ca2:	e000      	b.n	8013ca6 <etharp_input+0xfa>
      break;
 8013ca4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7f8 fc02 	bl	800c4b0 <pbuf_free>
}
 8013cac:	3718      	adds	r7, #24
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	0801a214 	.word	0x0801a214
 8013cb8:	0801a364 	.word	0x0801a364
 8013cbc:	0801a28c 	.word	0x0801a28c

08013cc0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013cce:	79fa      	ldrb	r2, [r7, #7]
 8013cd0:	4944      	ldr	r1, [pc, #272]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4413      	add	r3, r2
 8013cd8:	00db      	lsls	r3, r3, #3
 8013cda:	440b      	add	r3, r1
 8013cdc:	3314      	adds	r3, #20
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d806      	bhi.n	8013cf2 <etharp_output_to_arp_index+0x32>
 8013ce4:	4b40      	ldr	r3, [pc, #256]	; (8013de8 <etharp_output_to_arp_index+0x128>)
 8013ce6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013cea:	4940      	ldr	r1, [pc, #256]	; (8013dec <etharp_output_to_arp_index+0x12c>)
 8013cec:	4840      	ldr	r0, [pc, #256]	; (8013df0 <etharp_output_to_arp_index+0x130>)
 8013cee:	f002 fa03 	bl	80160f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013cf2:	79fa      	ldrb	r2, [r7, #7]
 8013cf4:	493b      	ldr	r1, [pc, #236]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	4413      	add	r3, r2
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	440b      	add	r3, r1
 8013d00:	3314      	adds	r3, #20
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	2b02      	cmp	r3, #2
 8013d06:	d153      	bne.n	8013db0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013d08:	79fa      	ldrb	r2, [r7, #7]
 8013d0a:	4936      	ldr	r1, [pc, #216]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	4413      	add	r3, r2
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	440b      	add	r3, r1
 8013d16:	3312      	adds	r3, #18
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013d1e:	d919      	bls.n	8013d54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013d20:	79fa      	ldrb	r2, [r7, #7]
 8013d22:	4613      	mov	r3, r2
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	4413      	add	r3, r2
 8013d28:	00db      	lsls	r3, r3, #3
 8013d2a:	4a2e      	ldr	r2, [pc, #184]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d2c:	4413      	add	r3, r2
 8013d2e:	3304      	adds	r3, #4
 8013d30:	4619      	mov	r1, r3
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f000 fb4c 	bl	80143d0 <etharp_request>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d138      	bne.n	8013db0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013d3e:	79fa      	ldrb	r2, [r7, #7]
 8013d40:	4928      	ldr	r1, [pc, #160]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d42:	4613      	mov	r3, r2
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	4413      	add	r3, r2
 8013d48:	00db      	lsls	r3, r3, #3
 8013d4a:	440b      	add	r3, r1
 8013d4c:	3314      	adds	r3, #20
 8013d4e:	2203      	movs	r2, #3
 8013d50:	701a      	strb	r2, [r3, #0]
 8013d52:	e02d      	b.n	8013db0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013d54:	79fa      	ldrb	r2, [r7, #7]
 8013d56:	4923      	ldr	r1, [pc, #140]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d58:	4613      	mov	r3, r2
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	4413      	add	r3, r2
 8013d5e:	00db      	lsls	r3, r3, #3
 8013d60:	440b      	add	r3, r1
 8013d62:	3312      	adds	r3, #18
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013d6a:	d321      	bcc.n	8013db0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013d6c:	79fa      	ldrb	r2, [r7, #7]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	005b      	lsls	r3, r3, #1
 8013d72:	4413      	add	r3, r2
 8013d74:	00db      	lsls	r3, r3, #3
 8013d76:	4a1b      	ldr	r2, [pc, #108]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d78:	4413      	add	r3, r2
 8013d7a:	1d19      	adds	r1, r3, #4
 8013d7c:	79fa      	ldrb	r2, [r7, #7]
 8013d7e:	4613      	mov	r3, r2
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	4413      	add	r3, r2
 8013d84:	00db      	lsls	r3, r3, #3
 8013d86:	3308      	adds	r3, #8
 8013d88:	4a16      	ldr	r2, [pc, #88]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013d8a:	4413      	add	r3, r2
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	461a      	mov	r2, r3
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f000 fafb 	bl	801438c <etharp_request_dst>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d109      	bne.n	8013db0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013d9c:	79fa      	ldrb	r2, [r7, #7]
 8013d9e:	4911      	ldr	r1, [pc, #68]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013da0:	4613      	mov	r3, r2
 8013da2:	005b      	lsls	r3, r3, #1
 8013da4:	4413      	add	r3, r2
 8013da6:	00db      	lsls	r3, r3, #3
 8013da8:	440b      	add	r3, r1
 8013daa:	3314      	adds	r3, #20
 8013dac:	2203      	movs	r2, #3
 8013dae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013db6:	79fa      	ldrb	r2, [r7, #7]
 8013db8:	4613      	mov	r3, r2
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	3308      	adds	r3, #8
 8013dc2:	4a08      	ldr	r2, [pc, #32]	; (8013de4 <etharp_output_to_arp_index+0x124>)
 8013dc4:	4413      	add	r3, r2
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013dcc:	9200      	str	r2, [sp, #0]
 8013dce:	460a      	mov	r2, r1
 8013dd0:	68b9      	ldr	r1, [r7, #8]
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f001 fe66 	bl	8015aa4 <ethernet_output>
 8013dd8:	4603      	mov	r3, r0
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3710      	adds	r7, #16
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	24007508 	.word	0x24007508
 8013de8:	0801a214 	.word	0x0801a214
 8013dec:	0801a384 	.word	0x0801a384
 8013df0:	0801a28c 	.word	0x0801a28c

08013df4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b08a      	sub	sp, #40	; 0x28
 8013df8:	af02      	add	r7, sp, #8
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <etharp_output+0x24>
 8013e0a:	4b73      	ldr	r3, [pc, #460]	; (8013fd8 <etharp_output+0x1e4>)
 8013e0c:	f240 321e 	movw	r2, #798	; 0x31e
 8013e10:	4972      	ldr	r1, [pc, #456]	; (8013fdc <etharp_output+0x1e8>)
 8013e12:	4873      	ldr	r0, [pc, #460]	; (8013fe0 <etharp_output+0x1ec>)
 8013e14:	f002 f970 	bl	80160f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <etharp_output+0x38>
 8013e1e:	4b6e      	ldr	r3, [pc, #440]	; (8013fd8 <etharp_output+0x1e4>)
 8013e20:	f240 321f 	movw	r2, #799	; 0x31f
 8013e24:	496f      	ldr	r1, [pc, #444]	; (8013fe4 <etharp_output+0x1f0>)
 8013e26:	486e      	ldr	r0, [pc, #440]	; (8013fe0 <etharp_output+0x1ec>)
 8013e28:	f002 f966 	bl	80160f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <etharp_output+0x4c>
 8013e32:	4b69      	ldr	r3, [pc, #420]	; (8013fd8 <etharp_output+0x1e4>)
 8013e34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013e38:	496b      	ldr	r1, [pc, #428]	; (8013fe8 <etharp_output+0x1f4>)
 8013e3a:	4869      	ldr	r0, [pc, #420]	; (8013fe0 <etharp_output+0x1ec>)
 8013e3c:	f002 f95c 	bl	80160f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	68f9      	ldr	r1, [r7, #12]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f000 ff1e 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d002      	beq.n	8013e58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013e52:	4b66      	ldr	r3, [pc, #408]	; (8013fec <etharp_output+0x1f8>)
 8013e54:	61fb      	str	r3, [r7, #28]
 8013e56:	e0af      	b.n	8013fb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e60:	2be0      	cmp	r3, #224	; 0xe0
 8013e62:	d118      	bne.n	8013e96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013e64:	2301      	movs	r3, #1
 8013e66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013e6c:	235e      	movs	r3, #94	; 0x5e
 8013e6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	3301      	adds	r3, #1
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	3302      	adds	r3, #2
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3303      	adds	r3, #3
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013e8e:	f107 0310 	add.w	r3, r7, #16
 8013e92:	61fb      	str	r3, [r7, #28]
 8013e94:	e090      	b.n	8013fb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	3304      	adds	r3, #4
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	405a      	eors	r2, r3
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3308      	adds	r3, #8
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4013      	ands	r3, r2
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d012      	beq.n	8013ed4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013eb4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d00b      	beq.n	8013ed4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	330c      	adds	r3, #12
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d003      	beq.n	8013ece <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	330c      	adds	r3, #12
 8013eca:	61bb      	str	r3, [r7, #24]
 8013ecc:	e002      	b.n	8013ed4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013ece:	f06f 0303 	mvn.w	r3, #3
 8013ed2:	e07d      	b.n	8013fd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013ed4:	4b46      	ldr	r3, [pc, #280]	; (8013ff0 <etharp_output+0x1fc>)
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4a46      	ldr	r2, [pc, #280]	; (8013ff4 <etharp_output+0x200>)
 8013edc:	460b      	mov	r3, r1
 8013ede:	005b      	lsls	r3, r3, #1
 8013ee0:	440b      	add	r3, r1
 8013ee2:	00db      	lsls	r3, r3, #3
 8013ee4:	4413      	add	r3, r2
 8013ee6:	3314      	adds	r3, #20
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d925      	bls.n	8013f3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013eee:	4b40      	ldr	r3, [pc, #256]	; (8013ff0 <etharp_output+0x1fc>)
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	4a3f      	ldr	r2, [pc, #252]	; (8013ff4 <etharp_output+0x200>)
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	005b      	lsls	r3, r3, #1
 8013efa:	440b      	add	r3, r1
 8013efc:	00db      	lsls	r3, r3, #3
 8013efe:	4413      	add	r3, r2
 8013f00:	3308      	adds	r3, #8
 8013f02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013f04:	68fa      	ldr	r2, [r7, #12]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d117      	bne.n	8013f3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	4b38      	ldr	r3, [pc, #224]	; (8013ff0 <etharp_output+0x1fc>)
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	4618      	mov	r0, r3
 8013f14:	4937      	ldr	r1, [pc, #220]	; (8013ff4 <etharp_output+0x200>)
 8013f16:	4603      	mov	r3, r0
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4403      	add	r3, r0
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3304      	adds	r3, #4
 8013f22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d108      	bne.n	8013f3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013f28:	4b31      	ldr	r3, [pc, #196]	; (8013ff0 <etharp_output+0x1fc>)
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	68b9      	ldr	r1, [r7, #8]
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f7ff fec5 	bl	8013cc0 <etharp_output_to_arp_index>
 8013f36:	4603      	mov	r3, r0
 8013f38:	e04a      	b.n	8013fd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	75fb      	strb	r3, [r7, #23]
 8013f3e:	e031      	b.n	8013fa4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013f40:	7dfa      	ldrb	r2, [r7, #23]
 8013f42:	492c      	ldr	r1, [pc, #176]	; (8013ff4 <etharp_output+0x200>)
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	3314      	adds	r3, #20
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b01      	cmp	r3, #1
 8013f54:	d923      	bls.n	8013f9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013f56:	7dfa      	ldrb	r2, [r7, #23]
 8013f58:	4926      	ldr	r1, [pc, #152]	; (8013ff4 <etharp_output+0x200>)
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	3308      	adds	r3, #8
 8013f66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d117      	bne.n	8013f9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	6819      	ldr	r1, [r3, #0]
 8013f72:	7dfa      	ldrb	r2, [r7, #23]
 8013f74:	481f      	ldr	r0, [pc, #124]	; (8013ff4 <etharp_output+0x200>)
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	4403      	add	r3, r0
 8013f80:	3304      	adds	r3, #4
 8013f82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013f84:	4299      	cmp	r1, r3
 8013f86:	d10a      	bne.n	8013f9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013f88:	4a19      	ldr	r2, [pc, #100]	; (8013ff0 <etharp_output+0x1fc>)
 8013f8a:	7dfb      	ldrb	r3, [r7, #23]
 8013f8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013f8e:	7dfb      	ldrb	r3, [r7, #23]
 8013f90:	461a      	mov	r2, r3
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	68f8      	ldr	r0, [r7, #12]
 8013f96:	f7ff fe93 	bl	8013cc0 <etharp_output_to_arp_index>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	e018      	b.n	8013fd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013f9e:	7dfb      	ldrb	r3, [r7, #23]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	75fb      	strb	r3, [r7, #23]
 8013fa4:	7dfb      	ldrb	r3, [r7, #23]
 8013fa6:	2b09      	cmp	r3, #9
 8013fa8:	d9ca      	bls.n	8013f40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013faa:	68ba      	ldr	r2, [r7, #8]
 8013fac:	69b9      	ldr	r1, [r7, #24]
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f000 f822 	bl	8013ff8 <etharp_query>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	e00b      	b.n	8013fd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	68b9      	ldr	r1, [r7, #8]
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f001 fd6b 	bl	8015aa4 <ethernet_output>
 8013fce:	4603      	mov	r3, r0
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3720      	adds	r7, #32
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	0801a214 	.word	0x0801a214
 8013fdc:	0801a364 	.word	0x0801a364
 8013fe0:	0801a28c 	.word	0x0801a28c
 8013fe4:	0801a3b4 	.word	0x0801a3b4
 8013fe8:	0801a354 	.word	0x0801a354
 8013fec:	0801aa0c 	.word	0x0801aa0c
 8013ff0:	240075f8 	.word	0x240075f8
 8013ff4:	24007508 	.word	0x24007508

08013ff8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08c      	sub	sp, #48	; 0x30
 8013ffc:	af02      	add	r7, sp, #8
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	3326      	adds	r3, #38	; 0x26
 8014008:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801400a:	23ff      	movs	r3, #255	; 0xff
 801400c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014010:	2300      	movs	r3, #0
 8014012:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	68f9      	ldr	r1, [r7, #12]
 801401a:	4618      	mov	r0, r3
 801401c:	f000 fe34 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8014020:	4603      	mov	r3, r0
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10c      	bne.n	8014040 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801402e:	2be0      	cmp	r3, #224	; 0xe0
 8014030:	d006      	beq.n	8014040 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d003      	beq.n	8014040 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d102      	bne.n	8014046 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014040:	f06f 030f 	mvn.w	r3, #15
 8014044:	e101      	b.n	801424a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	2101      	movs	r1, #1
 801404a:	68b8      	ldr	r0, [r7, #8]
 801404c:	f7ff fb60 	bl	8013710 <etharp_find_entry>
 8014050:	4603      	mov	r3, r0
 8014052:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014058:	2b00      	cmp	r3, #0
 801405a:	da02      	bge.n	8014062 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801405c:	8a7b      	ldrh	r3, [r7, #18]
 801405e:	b25b      	sxtb	r3, r3
 8014060:	e0f3      	b.n	801424a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014062:	8a7b      	ldrh	r3, [r7, #18]
 8014064:	2b7e      	cmp	r3, #126	; 0x7e
 8014066:	d906      	bls.n	8014076 <etharp_query+0x7e>
 8014068:	4b7a      	ldr	r3, [pc, #488]	; (8014254 <etharp_query+0x25c>)
 801406a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801406e:	497a      	ldr	r1, [pc, #488]	; (8014258 <etharp_query+0x260>)
 8014070:	487a      	ldr	r0, [pc, #488]	; (801425c <etharp_query+0x264>)
 8014072:	f002 f841 	bl	80160f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014076:	8a7b      	ldrh	r3, [r7, #18]
 8014078:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801407a:	7c7a      	ldrb	r2, [r7, #17]
 801407c:	4978      	ldr	r1, [pc, #480]	; (8014260 <etharp_query+0x268>)
 801407e:	4613      	mov	r3, r2
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	00db      	lsls	r3, r3, #3
 8014086:	440b      	add	r3, r1
 8014088:	3314      	adds	r3, #20
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d115      	bne.n	80140bc <etharp_query+0xc4>
    is_new_entry = 1;
 8014090:	2301      	movs	r3, #1
 8014092:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014094:	7c7a      	ldrb	r2, [r7, #17]
 8014096:	4972      	ldr	r1, [pc, #456]	; (8014260 <etharp_query+0x268>)
 8014098:	4613      	mov	r3, r2
 801409a:	005b      	lsls	r3, r3, #1
 801409c:	4413      	add	r3, r2
 801409e:	00db      	lsls	r3, r3, #3
 80140a0:	440b      	add	r3, r1
 80140a2:	3314      	adds	r3, #20
 80140a4:	2201      	movs	r2, #1
 80140a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80140a8:	7c7a      	ldrb	r2, [r7, #17]
 80140aa:	496d      	ldr	r1, [pc, #436]	; (8014260 <etharp_query+0x268>)
 80140ac:	4613      	mov	r3, r2
 80140ae:	005b      	lsls	r3, r3, #1
 80140b0:	4413      	add	r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	440b      	add	r3, r1
 80140b6:	3308      	adds	r3, #8
 80140b8:	68fa      	ldr	r2, [r7, #12]
 80140ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80140bc:	7c7a      	ldrb	r2, [r7, #17]
 80140be:	4968      	ldr	r1, [pc, #416]	; (8014260 <etharp_query+0x268>)
 80140c0:	4613      	mov	r3, r2
 80140c2:	005b      	lsls	r3, r3, #1
 80140c4:	4413      	add	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	440b      	add	r3, r1
 80140ca:	3314      	adds	r3, #20
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d011      	beq.n	80140f6 <etharp_query+0xfe>
 80140d2:	7c7a      	ldrb	r2, [r7, #17]
 80140d4:	4962      	ldr	r1, [pc, #392]	; (8014260 <etharp_query+0x268>)
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	440b      	add	r3, r1
 80140e0:	3314      	adds	r3, #20
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d806      	bhi.n	80140f6 <etharp_query+0xfe>
 80140e8:	4b5a      	ldr	r3, [pc, #360]	; (8014254 <etharp_query+0x25c>)
 80140ea:	f240 32cd 	movw	r2, #973	; 0x3cd
 80140ee:	495d      	ldr	r1, [pc, #372]	; (8014264 <etharp_query+0x26c>)
 80140f0:	485a      	ldr	r0, [pc, #360]	; (801425c <etharp_query+0x264>)
 80140f2:	f002 f801 	bl	80160f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80140f6:	6a3b      	ldr	r3, [r7, #32]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d102      	bne.n	8014102 <etharp_query+0x10a>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d10c      	bne.n	801411c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014102:	68b9      	ldr	r1, [r7, #8]
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f000 f963 	bl	80143d0 <etharp_request>
 801410a:	4603      	mov	r3, r0
 801410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d102      	bne.n	801411c <etharp_query+0x124>
      return result;
 8014116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801411a:	e096      	b.n	801424a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d106      	bne.n	8014130 <etharp_query+0x138>
 8014122:	4b4c      	ldr	r3, [pc, #304]	; (8014254 <etharp_query+0x25c>)
 8014124:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014128:	494f      	ldr	r1, [pc, #316]	; (8014268 <etharp_query+0x270>)
 801412a:	484c      	ldr	r0, [pc, #304]	; (801425c <etharp_query+0x264>)
 801412c:	f001 ffe4 	bl	80160f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014130:	7c7a      	ldrb	r2, [r7, #17]
 8014132:	494b      	ldr	r1, [pc, #300]	; (8014260 <etharp_query+0x268>)
 8014134:	4613      	mov	r3, r2
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	4413      	add	r3, r2
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	440b      	add	r3, r1
 801413e:	3314      	adds	r3, #20
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	2b01      	cmp	r3, #1
 8014144:	d917      	bls.n	8014176 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014146:	4a49      	ldr	r2, [pc, #292]	; (801426c <etharp_query+0x274>)
 8014148:	7c7b      	ldrb	r3, [r7, #17]
 801414a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801414c:	7c7a      	ldrb	r2, [r7, #17]
 801414e:	4613      	mov	r3, r2
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4413      	add	r3, r2
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	3308      	adds	r3, #8
 8014158:	4a41      	ldr	r2, [pc, #260]	; (8014260 <etharp_query+0x268>)
 801415a:	4413      	add	r3, r2
 801415c:	3304      	adds	r3, #4
 801415e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014162:	9200      	str	r2, [sp, #0]
 8014164:	697a      	ldr	r2, [r7, #20]
 8014166:	6879      	ldr	r1, [r7, #4]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f001 fc9b 	bl	8015aa4 <ethernet_output>
 801416e:	4603      	mov	r3, r0
 8014170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014174:	e067      	b.n	8014246 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014176:	7c7a      	ldrb	r2, [r7, #17]
 8014178:	4939      	ldr	r1, [pc, #228]	; (8014260 <etharp_query+0x268>)
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	440b      	add	r3, r1
 8014184:	3314      	adds	r3, #20
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d15c      	bne.n	8014246 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801418c:	2300      	movs	r3, #0
 801418e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014194:	e01c      	b.n	80141d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	895a      	ldrh	r2, [r3, #10]
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	891b      	ldrh	r3, [r3, #8]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d10a      	bne.n	80141b8 <etharp_query+0x1c0>
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d006      	beq.n	80141b8 <etharp_query+0x1c0>
 80141aa:	4b2a      	ldr	r3, [pc, #168]	; (8014254 <etharp_query+0x25c>)
 80141ac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80141b0:	492f      	ldr	r1, [pc, #188]	; (8014270 <etharp_query+0x278>)
 80141b2:	482a      	ldr	r0, [pc, #168]	; (801425c <etharp_query+0x264>)
 80141b4:	f001 ffa0 	bl	80160f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	7b1b      	ldrb	r3, [r3, #12]
 80141bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <etharp_query+0x1d2>
        copy_needed = 1;
 80141c4:	2301      	movs	r3, #1
 80141c6:	61bb      	str	r3, [r7, #24]
        break;
 80141c8:	e005      	b.n	80141d6 <etharp_query+0x1de>
      }
      p = p->next;
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80141d0:	69fb      	ldr	r3, [r7, #28]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d1df      	bne.n	8014196 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d007      	beq.n	80141ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80141e2:	200e      	movs	r0, #14
 80141e4:	f7f8 fbcc 	bl	800c980 <pbuf_clone>
 80141e8:	61f8      	str	r0, [r7, #28]
 80141ea:	e004      	b.n	80141f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80141f0:	69f8      	ldr	r0, [r7, #28]
 80141f2:	f7f8 fa03 	bl	800c5fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d021      	beq.n	8014240 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80141fc:	7c7a      	ldrb	r2, [r7, #17]
 80141fe:	4918      	ldr	r1, [pc, #96]	; (8014260 <etharp_query+0x268>)
 8014200:	4613      	mov	r3, r2
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	440b      	add	r3, r1
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00a      	beq.n	8014226 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014210:	7c7a      	ldrb	r2, [r7, #17]
 8014212:	4913      	ldr	r1, [pc, #76]	; (8014260 <etharp_query+0x268>)
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	00db      	lsls	r3, r3, #3
 801421c:	440b      	add	r3, r1
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4618      	mov	r0, r3
 8014222:	f7f8 f945 	bl	800c4b0 <pbuf_free>
      }
      arp_table[i].q = p;
 8014226:	7c7a      	ldrb	r2, [r7, #17]
 8014228:	490d      	ldr	r1, [pc, #52]	; (8014260 <etharp_query+0x268>)
 801422a:	4613      	mov	r3, r2
 801422c:	005b      	lsls	r3, r3, #1
 801422e:	4413      	add	r3, r2
 8014230:	00db      	lsls	r3, r3, #3
 8014232:	440b      	add	r3, r1
 8014234:	69fa      	ldr	r2, [r7, #28]
 8014236:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014238:	2300      	movs	r3, #0
 801423a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801423e:	e002      	b.n	8014246 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014240:	23ff      	movs	r3, #255	; 0xff
 8014242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014246:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801424a:	4618      	mov	r0, r3
 801424c:	3728      	adds	r7, #40	; 0x28
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	0801a214 	.word	0x0801a214
 8014258:	0801a3c0 	.word	0x0801a3c0
 801425c:	0801a28c 	.word	0x0801a28c
 8014260:	24007508 	.word	0x24007508
 8014264:	0801a3d0 	.word	0x0801a3d0
 8014268:	0801a3b4 	.word	0x0801a3b4
 801426c:	240075f8 	.word	0x240075f8
 8014270:	0801a3f8 	.word	0x0801a3f8

08014274 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b08a      	sub	sp, #40	; 0x28
 8014278:	af02      	add	r7, sp, #8
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	60b9      	str	r1, [r7, #8]
 801427e:	607a      	str	r2, [r7, #4]
 8014280:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014282:	2300      	movs	r3, #0
 8014284:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d106      	bne.n	801429a <etharp_raw+0x26>
 801428c:	4b3a      	ldr	r3, [pc, #232]	; (8014378 <etharp_raw+0x104>)
 801428e:	f240 4257 	movw	r2, #1111	; 0x457
 8014292:	493a      	ldr	r1, [pc, #232]	; (801437c <etharp_raw+0x108>)
 8014294:	483a      	ldr	r0, [pc, #232]	; (8014380 <etharp_raw+0x10c>)
 8014296:	f001 ff2f 	bl	80160f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801429a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801429e:	211c      	movs	r1, #28
 80142a0:	200e      	movs	r0, #14
 80142a2:	f7f7 fe21 	bl	800bee8 <pbuf_alloc>
 80142a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d102      	bne.n	80142b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80142ae:	f04f 33ff 	mov.w	r3, #4294967295
 80142b2:	e05d      	b.n	8014370 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	895b      	ldrh	r3, [r3, #10]
 80142b8:	2b1b      	cmp	r3, #27
 80142ba:	d806      	bhi.n	80142ca <etharp_raw+0x56>
 80142bc:	4b2e      	ldr	r3, [pc, #184]	; (8014378 <etharp_raw+0x104>)
 80142be:	f240 4262 	movw	r2, #1122	; 0x462
 80142c2:	4930      	ldr	r1, [pc, #192]	; (8014384 <etharp_raw+0x110>)
 80142c4:	482e      	ldr	r0, [pc, #184]	; (8014380 <etharp_raw+0x10c>)
 80142c6:	f001 ff17 	bl	80160f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80142d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f6 fc42 	bl	800ab5c <lwip_htons>
 80142d8:	4603      	mov	r3, r0
 80142da:	461a      	mov	r2, r3
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80142e6:	2b06      	cmp	r3, #6
 80142e8:	d006      	beq.n	80142f8 <etharp_raw+0x84>
 80142ea:	4b23      	ldr	r3, [pc, #140]	; (8014378 <etharp_raw+0x104>)
 80142ec:	f240 4269 	movw	r2, #1129	; 0x469
 80142f0:	4925      	ldr	r1, [pc, #148]	; (8014388 <etharp_raw+0x114>)
 80142f2:	4823      	ldr	r0, [pc, #140]	; (8014380 <etharp_raw+0x10c>)
 80142f4:	f001 ff00 	bl	80160f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	3308      	adds	r3, #8
 80142fc:	2206      	movs	r2, #6
 80142fe:	6839      	ldr	r1, [r7, #0]
 8014300:	4618      	mov	r0, r3
 8014302:	f002 f820 	bl	8016346 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	3312      	adds	r3, #18
 801430a:	2206      	movs	r2, #6
 801430c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801430e:	4618      	mov	r0, r3
 8014310:	f002 f819 	bl	8016346 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	330e      	adds	r3, #14
 8014318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801431a:	6812      	ldr	r2, [r2, #0]
 801431c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	3318      	adds	r3, #24
 8014322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	2200      	movs	r2, #0
 801432c:	701a      	strb	r2, [r3, #0]
 801432e:	2200      	movs	r2, #0
 8014330:	f042 0201 	orr.w	r2, r2, #1
 8014334:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	2200      	movs	r2, #0
 801433a:	f042 0208 	orr.w	r2, r2, #8
 801433e:	709a      	strb	r2, [r3, #2]
 8014340:	2200      	movs	r2, #0
 8014342:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	2206      	movs	r2, #6
 8014348:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	2204      	movs	r2, #4
 801434e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014350:	f640 0306 	movw	r3, #2054	; 0x806
 8014354:	9300      	str	r3, [sp, #0]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	68ba      	ldr	r2, [r7, #8]
 801435a:	69b9      	ldr	r1, [r7, #24]
 801435c:	68f8      	ldr	r0, [r7, #12]
 801435e:	f001 fba1 	bl	8015aa4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014362:	69b8      	ldr	r0, [r7, #24]
 8014364:	f7f8 f8a4 	bl	800c4b0 <pbuf_free>
  p = NULL;
 8014368:	2300      	movs	r3, #0
 801436a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801436c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3720      	adds	r7, #32
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}
 8014378:	0801a214 	.word	0x0801a214
 801437c:	0801a364 	.word	0x0801a364
 8014380:	0801a28c 	.word	0x0801a28c
 8014384:	0801a414 	.word	0x0801a414
 8014388:	0801a448 	.word	0x0801a448

0801438c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b088      	sub	sp, #32
 8014390:	af04      	add	r7, sp, #16
 8014392:	60f8      	str	r0, [r7, #12]
 8014394:	60b9      	str	r1, [r7, #8]
 8014396:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80143a8:	2201      	movs	r2, #1
 80143aa:	9203      	str	r2, [sp, #12]
 80143ac:	68ba      	ldr	r2, [r7, #8]
 80143ae:	9202      	str	r2, [sp, #8]
 80143b0:	4a06      	ldr	r2, [pc, #24]	; (80143cc <etharp_request_dst+0x40>)
 80143b2:	9201      	str	r2, [sp, #4]
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4603      	mov	r3, r0
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	68f8      	ldr	r0, [r7, #12]
 80143bc:	f7ff ff5a 	bl	8014274 <etharp_raw>
 80143c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3710      	adds	r7, #16
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	0801aa14 	.word	0x0801aa14

080143d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80143da:	4a05      	ldr	r2, [pc, #20]	; (80143f0 <etharp_request+0x20>)
 80143dc:	6839      	ldr	r1, [r7, #0]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7ff ffd4 	bl	801438c <etharp_request_dst>
 80143e4:	4603      	mov	r3, r0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	0801aa0c 	.word	0x0801aa0c

080143f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b08e      	sub	sp, #56	; 0x38
 80143f8:	af04      	add	r7, sp, #16
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80143fe:	4b87      	ldr	r3, [pc, #540]	; (801461c <icmp_input+0x228>)
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	f003 030f 	and.w	r3, r3, #15
 801440c:	b2db      	uxtb	r3, r3
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	b2db      	uxtb	r3, r3
 8014412:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014416:	2b13      	cmp	r3, #19
 8014418:	f240 80e8 	bls.w	80145ec <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	895b      	ldrh	r3, [r3, #10]
 8014420:	2b03      	cmp	r3, #3
 8014422:	f240 80e5 	bls.w	80145f0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014430:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014434:	2b00      	cmp	r3, #0
 8014436:	f000 80d2 	beq.w	80145de <icmp_input+0x1ea>
 801443a:	2b08      	cmp	r3, #8
 801443c:	f040 80d2 	bne.w	80145e4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014440:	4b77      	ldr	r3, [pc, #476]	; (8014620 <icmp_input+0x22c>)
 8014442:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014444:	4b75      	ldr	r3, [pc, #468]	; (801461c <icmp_input+0x228>)
 8014446:	695b      	ldr	r3, [r3, #20]
 8014448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801444c:	2be0      	cmp	r3, #224	; 0xe0
 801444e:	f000 80d6 	beq.w	80145fe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014452:	4b72      	ldr	r3, [pc, #456]	; (801461c <icmp_input+0x228>)
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	4a71      	ldr	r2, [pc, #452]	; (801461c <icmp_input+0x228>)
 8014458:	6812      	ldr	r2, [r2, #0]
 801445a:	4611      	mov	r1, r2
 801445c:	4618      	mov	r0, r3
 801445e:	f000 fc13 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	f040 80cc 	bne.w	8014602 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	891b      	ldrh	r3, [r3, #8]
 801446e:	2b07      	cmp	r3, #7
 8014470:	f240 80c0 	bls.w	80145f4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7f6 fc0e 	bl	800ac96 <inet_chksum_pbuf>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d003      	beq.n	8014488 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7f8 f815 	bl	800c4b0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014486:	e0c5      	b.n	8014614 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801448a:	330e      	adds	r3, #14
 801448c:	4619      	mov	r1, r3
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7f7 ff78 	bl	800c384 <pbuf_add_header>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d04b      	beq.n	8014532 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	891a      	ldrh	r2, [r3, #8]
 801449e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144a0:	4413      	add	r3, r2
 80144a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	891b      	ldrh	r3, [r3, #8]
 80144a8:	8b7a      	ldrh	r2, [r7, #26]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	f0c0 80ab 	bcc.w	8014606 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80144b0:	8b7b      	ldrh	r3, [r7, #26]
 80144b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144b6:	4619      	mov	r1, r3
 80144b8:	200e      	movs	r0, #14
 80144ba:	f7f7 fd15 	bl	800bee8 <pbuf_alloc>
 80144be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 80a1 	beq.w	801460a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	895b      	ldrh	r3, [r3, #10]
 80144cc:	461a      	mov	r2, r3
 80144ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144d0:	3308      	adds	r3, #8
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d203      	bcs.n	80144de <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80144d6:	6978      	ldr	r0, [r7, #20]
 80144d8:	f7f7 ffea 	bl	800c4b0 <pbuf_free>
          goto icmperr;
 80144dc:	e096      	b.n	801460c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80144e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144e6:	4618      	mov	r0, r3
 80144e8:	f001 ff2d 	bl	8016346 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80144ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144ee:	4619      	mov	r1, r3
 80144f0:	6978      	ldr	r0, [r7, #20]
 80144f2:	f7f7 ff57 	bl	800c3a4 <pbuf_remove_header>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d009      	beq.n	8014510 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80144fc:	4b49      	ldr	r3, [pc, #292]	; (8014624 <icmp_input+0x230>)
 80144fe:	22b6      	movs	r2, #182	; 0xb6
 8014500:	4949      	ldr	r1, [pc, #292]	; (8014628 <icmp_input+0x234>)
 8014502:	484a      	ldr	r0, [pc, #296]	; (801462c <icmp_input+0x238>)
 8014504:	f001 fdf8 	bl	80160f8 <iprintf>
          pbuf_free(r);
 8014508:	6978      	ldr	r0, [r7, #20]
 801450a:	f7f7 ffd1 	bl	800c4b0 <pbuf_free>
          goto icmperr;
 801450e:	e07d      	b.n	801460c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014510:	6879      	ldr	r1, [r7, #4]
 8014512:	6978      	ldr	r0, [r7, #20]
 8014514:	f7f8 f8f0 	bl	800c6f8 <pbuf_copy>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d003      	beq.n	8014526 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801451e:	6978      	ldr	r0, [r7, #20]
 8014520:	f7f7 ffc6 	bl	800c4b0 <pbuf_free>
          goto icmperr;
 8014524:	e072      	b.n	801460c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f7f7 ffc2 	bl	800c4b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	607b      	str	r3, [r7, #4]
 8014530:	e00f      	b.n	8014552 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014534:	330e      	adds	r3, #14
 8014536:	4619      	mov	r1, r3
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7f7 ff33 	bl	800c3a4 <pbuf_remove_header>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d006      	beq.n	8014552 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014544:	4b37      	ldr	r3, [pc, #220]	; (8014624 <icmp_input+0x230>)
 8014546:	22c7      	movs	r2, #199	; 0xc7
 8014548:	4939      	ldr	r1, [pc, #228]	; (8014630 <icmp_input+0x23c>)
 801454a:	4838      	ldr	r0, [pc, #224]	; (801462c <icmp_input+0x238>)
 801454c:	f001 fdd4 	bl	80160f8 <iprintf>
          goto icmperr;
 8014550:	e05c      	b.n	801460c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801455a:	4619      	mov	r1, r3
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7f7 ff11 	bl	800c384 <pbuf_add_header>
 8014562:	4603      	mov	r3, r0
 8014564:	2b00      	cmp	r3, #0
 8014566:	d13c      	bne.n	80145e2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801456e:	69fb      	ldr	r3, [r7, #28]
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014576:	4b29      	ldr	r3, [pc, #164]	; (801461c <icmp_input+0x228>)
 8014578:	691a      	ldr	r2, [r3, #16]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	2200      	movs	r2, #0
 8014582:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	885b      	ldrh	r3, [r3, #2]
 8014588:	b29b      	uxth	r3, r3
 801458a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801458e:	4293      	cmp	r3, r2
 8014590:	d907      	bls.n	80145a2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	885b      	ldrh	r3, [r3, #2]
 8014596:	b29b      	uxth	r3, r3
 8014598:	3309      	adds	r3, #9
 801459a:	b29a      	uxth	r2, r3
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	805a      	strh	r2, [r3, #2]
 80145a0:	e006      	b.n	80145b0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	885b      	ldrh	r3, [r3, #2]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	3308      	adds	r3, #8
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	22ff      	movs	r2, #255	; 0xff
 80145b4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2200      	movs	r2, #0
 80145ba:	729a      	strb	r2, [r3, #10]
 80145bc:	2200      	movs	r2, #0
 80145be:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	9302      	str	r3, [sp, #8]
 80145c4:	2301      	movs	r3, #1
 80145c6:	9301      	str	r3, [sp, #4]
 80145c8:	2300      	movs	r3, #0
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	23ff      	movs	r3, #255	; 0xff
 80145ce:	2200      	movs	r2, #0
 80145d0:	69f9      	ldr	r1, [r7, #28]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fa80 	bl	8014ad8 <ip4_output_if>
 80145d8:	4603      	mov	r3, r0
 80145da:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80145dc:	e001      	b.n	80145e2 <icmp_input+0x1ee>
      break;
 80145de:	bf00      	nop
 80145e0:	e000      	b.n	80145e4 <icmp_input+0x1f0>
      break;
 80145e2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7f7 ff63 	bl	800c4b0 <pbuf_free>
  return;
 80145ea:	e013      	b.n	8014614 <icmp_input+0x220>
    goto lenerr;
 80145ec:	bf00      	nop
 80145ee:	e002      	b.n	80145f6 <icmp_input+0x202>
    goto lenerr;
 80145f0:	bf00      	nop
 80145f2:	e000      	b.n	80145f6 <icmp_input+0x202>
        goto lenerr;
 80145f4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7f7 ff5a 	bl	800c4b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80145fc:	e00a      	b.n	8014614 <icmp_input+0x220>
        goto icmperr;
 80145fe:	bf00      	nop
 8014600:	e004      	b.n	801460c <icmp_input+0x218>
        goto icmperr;
 8014602:	bf00      	nop
 8014604:	e002      	b.n	801460c <icmp_input+0x218>
          goto icmperr;
 8014606:	bf00      	nop
 8014608:	e000      	b.n	801460c <icmp_input+0x218>
          goto icmperr;
 801460a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f7f7 ff4f 	bl	800c4b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014612:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014614:	3728      	adds	r7, #40	; 0x28
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	240043a8 	.word	0x240043a8
 8014620:	240043bc 	.word	0x240043bc
 8014624:	0801a48c 	.word	0x0801a48c
 8014628:	0801a4c4 	.word	0x0801a4c4
 801462c:	0801a4fc 	.word	0x0801a4fc
 8014630:	0801a524 	.word	0x0801a524

08014634 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	460b      	mov	r3, r1
 801463e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014640:	78fb      	ldrb	r3, [r7, #3]
 8014642:	461a      	mov	r2, r3
 8014644:	2103      	movs	r1, #3
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 f814 	bl	8014674 <icmp_send_response>
}
 801464c:	bf00      	nop
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	460b      	mov	r3, r1
 801465e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014660:	78fb      	ldrb	r3, [r7, #3]
 8014662:	461a      	mov	r2, r3
 8014664:	210b      	movs	r1, #11
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f000 f804 	bl	8014674 <icmp_send_response>
}
 801466c:	bf00      	nop
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b08c      	sub	sp, #48	; 0x30
 8014678:	af04      	add	r7, sp, #16
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	460b      	mov	r3, r1
 801467e:	70fb      	strb	r3, [r7, #3]
 8014680:	4613      	mov	r3, r2
 8014682:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014684:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014688:	2124      	movs	r1, #36	; 0x24
 801468a:	2022      	movs	r0, #34	; 0x22
 801468c:	f7f7 fc2c 	bl	800bee8 <pbuf_alloc>
 8014690:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d056      	beq.n	8014746 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	895b      	ldrh	r3, [r3, #10]
 801469c:	2b23      	cmp	r3, #35	; 0x23
 801469e:	d806      	bhi.n	80146ae <icmp_send_response+0x3a>
 80146a0:	4b2b      	ldr	r3, [pc, #172]	; (8014750 <icmp_send_response+0xdc>)
 80146a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80146a6:	492b      	ldr	r1, [pc, #172]	; (8014754 <icmp_send_response+0xe0>)
 80146a8:	482b      	ldr	r0, [pc, #172]	; (8014758 <icmp_send_response+0xe4>)
 80146aa:	f001 fd25 	bl	80160f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	78fa      	ldrb	r2, [r7, #3]
 80146be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	78ba      	ldrb	r2, [r7, #2]
 80146c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	2200      	movs	r2, #0
 80146ca:	711a      	strb	r2, [r3, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	2200      	movs	r2, #0
 80146d4:	719a      	strb	r2, [r3, #6]
 80146d6:	2200      	movs	r2, #0
 80146d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	f103 0008 	add.w	r0, r3, #8
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	221c      	movs	r2, #28
 80146e8:	4619      	mov	r1, r3
 80146ea:	f001 fe2c 	bl	8016346 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	68db      	ldr	r3, [r3, #12]
 80146f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80146f4:	f107 030c 	add.w	r3, r7, #12
 80146f8:	4618      	mov	r0, r3
 80146fa:	f000 f82f 	bl	801475c <ip4_route>
 80146fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d01b      	beq.n	801473e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	2200      	movs	r2, #0
 801470a:	709a      	strb	r2, [r3, #2]
 801470c:	2200      	movs	r2, #0
 801470e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	895b      	ldrh	r3, [r3, #10]
 8014714:	4619      	mov	r1, r3
 8014716:	6978      	ldr	r0, [r7, #20]
 8014718:	f7f6 faab 	bl	800ac72 <inet_chksum>
 801471c:	4603      	mov	r3, r0
 801471e:	461a      	mov	r2, r3
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014724:	f107 020c 	add.w	r2, r7, #12
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	9302      	str	r3, [sp, #8]
 801472c:	2301      	movs	r3, #1
 801472e:	9301      	str	r3, [sp, #4]
 8014730:	2300      	movs	r3, #0
 8014732:	9300      	str	r3, [sp, #0]
 8014734:	23ff      	movs	r3, #255	; 0xff
 8014736:	2100      	movs	r1, #0
 8014738:	69f8      	ldr	r0, [r7, #28]
 801473a:	f000 f9cd 	bl	8014ad8 <ip4_output_if>
  }
  pbuf_free(q);
 801473e:	69f8      	ldr	r0, [r7, #28]
 8014740:	f7f7 feb6 	bl	800c4b0 <pbuf_free>
 8014744:	e000      	b.n	8014748 <icmp_send_response+0xd4>
    return;
 8014746:	bf00      	nop
}
 8014748:	3720      	adds	r7, #32
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	0801a48c 	.word	0x0801a48c
 8014754:	0801a558 	.word	0x0801a558
 8014758:	0801a4fc 	.word	0x0801a4fc

0801475c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801475c:	b480      	push	{r7}
 801475e:	b085      	sub	sp, #20
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014764:	4b33      	ldr	r3, [pc, #204]	; (8014834 <ip4_route+0xd8>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	60fb      	str	r3, [r7, #12]
 801476a:	e036      	b.n	80147da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014772:	f003 0301 	and.w	r3, r3, #1
 8014776:	b2db      	uxtb	r3, r3
 8014778:	2b00      	cmp	r3, #0
 801477a:	d02b      	beq.n	80147d4 <ip4_route+0x78>
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014782:	089b      	lsrs	r3, r3, #2
 8014784:	f003 0301 	and.w	r3, r3, #1
 8014788:	b2db      	uxtb	r3, r3
 801478a:	2b00      	cmp	r3, #0
 801478c:	d022      	beq.n	80147d4 <ip4_route+0x78>
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	3304      	adds	r3, #4
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d01d      	beq.n	80147d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	3304      	adds	r3, #4
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	405a      	eors	r2, r3
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	3308      	adds	r3, #8
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4013      	ands	r3, r2
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d101      	bne.n	80147b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	e038      	b.n	8014826 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147ba:	f003 0302 	and.w	r3, r3, #2
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d108      	bne.n	80147d4 <ip4_route+0x78>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	330c      	adds	r3, #12
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d101      	bne.n	80147d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	e028      	b.n	8014826 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	60fb      	str	r3, [r7, #12]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d1c5      	bne.n	801476c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80147e0:	4b15      	ldr	r3, [pc, #84]	; (8014838 <ip4_route+0xdc>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d01a      	beq.n	801481e <ip4_route+0xc2>
 80147e8:	4b13      	ldr	r3, [pc, #76]	; (8014838 <ip4_route+0xdc>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147f0:	f003 0301 	and.w	r3, r3, #1
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d012      	beq.n	801481e <ip4_route+0xc2>
 80147f8:	4b0f      	ldr	r3, [pc, #60]	; (8014838 <ip4_route+0xdc>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	2b00      	cmp	r3, #0
 8014806:	d00a      	beq.n	801481e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014808:	4b0b      	ldr	r3, [pc, #44]	; (8014838 <ip4_route+0xdc>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	3304      	adds	r3, #4
 801480e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014810:	2b00      	cmp	r3, #0
 8014812:	d004      	beq.n	801481e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	b2db      	uxtb	r3, r3
 801481a:	2b7f      	cmp	r3, #127	; 0x7f
 801481c:	d101      	bne.n	8014822 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801481e:	2300      	movs	r3, #0
 8014820:	e001      	b.n	8014826 <ip4_route+0xca>
  }

  return netif_default;
 8014822:	4b05      	ldr	r3, [pc, #20]	; (8014838 <ip4_route+0xdc>)
 8014824:	681b      	ldr	r3, [r3, #0]
}
 8014826:	4618      	mov	r0, r3
 8014828:	3714      	adds	r7, #20
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr
 8014832:	bf00      	nop
 8014834:	2400749c 	.word	0x2400749c
 8014838:	240074a0 	.word	0x240074a0

0801483c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801484a:	f003 0301 	and.w	r3, r3, #1
 801484e:	b2db      	uxtb	r3, r3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d016      	beq.n	8014882 <ip4_input_accept+0x46>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	3304      	adds	r3, #4
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d011      	beq.n	8014882 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801485e:	4b0b      	ldr	r3, [pc, #44]	; (801488c <ip4_input_accept+0x50>)
 8014860:	695a      	ldr	r2, [r3, #20]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	3304      	adds	r3, #4
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	429a      	cmp	r2, r3
 801486a:	d008      	beq.n	801487e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801486c:	4b07      	ldr	r3, [pc, #28]	; (801488c <ip4_input_accept+0x50>)
 801486e:	695b      	ldr	r3, [r3, #20]
 8014870:	6879      	ldr	r1, [r7, #4]
 8014872:	4618      	mov	r0, r3
 8014874:	f000 fa08 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8014878:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801487a:	2b00      	cmp	r3, #0
 801487c:	d001      	beq.n	8014882 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801487e:	2301      	movs	r3, #1
 8014880:	e000      	b.n	8014884 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014882:	2300      	movs	r3, #0
}
 8014884:	4618      	mov	r0, r3
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	240043a8 	.word	0x240043a8

08014890 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	091b      	lsrs	r3, r3, #4
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	2b04      	cmp	r3, #4
 80148aa:	d004      	beq.n	80148b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7f7 fdff 	bl	800c4b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80148b2:	2300      	movs	r3, #0
 80148b4:	e107      	b.n	8014ac6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	f003 030f 	and.w	r3, r3, #15
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	885b      	ldrh	r3, [r3, #2]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7f6 f945 	bl	800ab5c <lwip_htons>
 80148d2:	4603      	mov	r3, r0
 80148d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	891b      	ldrh	r3, [r3, #8]
 80148da:	89ba      	ldrh	r2, [r7, #12]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d204      	bcs.n	80148ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80148e0:	89bb      	ldrh	r3, [r7, #12]
 80148e2:	4619      	mov	r1, r3
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7f7 fc5d 	bl	800c1a4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	895b      	ldrh	r3, [r3, #10]
 80148ee:	89fa      	ldrh	r2, [r7, #14]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d807      	bhi.n	8014904 <ip4_input+0x74>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	891b      	ldrh	r3, [r3, #8]
 80148f8:	89ba      	ldrh	r2, [r7, #12]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d802      	bhi.n	8014904 <ip4_input+0x74>
 80148fe:	89fb      	ldrh	r3, [r7, #14]
 8014900:	2b13      	cmp	r3, #19
 8014902:	d804      	bhi.n	801490e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7f7 fdd3 	bl	800c4b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801490a:	2300      	movs	r3, #0
 801490c:	e0db      	b.n	8014ac6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	691b      	ldr	r3, [r3, #16]
 8014912:	4a6f      	ldr	r2, [pc, #444]	; (8014ad0 <ip4_input+0x240>)
 8014914:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	4a6d      	ldr	r2, [pc, #436]	; (8014ad0 <ip4_input+0x240>)
 801491c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801491e:	4b6c      	ldr	r3, [pc, #432]	; (8014ad0 <ip4_input+0x240>)
 8014920:	695b      	ldr	r3, [r3, #20]
 8014922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014926:	2be0      	cmp	r3, #224	; 0xe0
 8014928:	d112      	bne.n	8014950 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014930:	f003 0301 	and.w	r3, r3, #1
 8014934:	b2db      	uxtb	r3, r3
 8014936:	2b00      	cmp	r3, #0
 8014938:	d007      	beq.n	801494a <ip4_input+0xba>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	3304      	adds	r3, #4
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d002      	beq.n	801494a <ip4_input+0xba>
      netif = inp;
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	613b      	str	r3, [r7, #16]
 8014948:	e02a      	b.n	80149a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801494a:	2300      	movs	r3, #0
 801494c:	613b      	str	r3, [r7, #16]
 801494e:	e027      	b.n	80149a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014950:	6838      	ldr	r0, [r7, #0]
 8014952:	f7ff ff73 	bl	801483c <ip4_input_accept>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d002      	beq.n	8014962 <ip4_input+0xd2>
      netif = inp;
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	613b      	str	r3, [r7, #16]
 8014960:	e01e      	b.n	80149a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014962:	2300      	movs	r3, #0
 8014964:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014966:	4b5a      	ldr	r3, [pc, #360]	; (8014ad0 <ip4_input+0x240>)
 8014968:	695b      	ldr	r3, [r3, #20]
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b7f      	cmp	r3, #127	; 0x7f
 801496e:	d017      	beq.n	80149a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014970:	4b58      	ldr	r3, [pc, #352]	; (8014ad4 <ip4_input+0x244>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	613b      	str	r3, [r7, #16]
 8014976:	e00e      	b.n	8014996 <ip4_input+0x106>
          if (netif == inp) {
 8014978:	693a      	ldr	r2, [r7, #16]
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	429a      	cmp	r2, r3
 801497e:	d006      	beq.n	801498e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014980:	6938      	ldr	r0, [r7, #16]
 8014982:	f7ff ff5b 	bl	801483c <ip4_input_accept>
 8014986:	4603      	mov	r3, r0
 8014988:	2b00      	cmp	r3, #0
 801498a:	d108      	bne.n	801499e <ip4_input+0x10e>
 801498c:	e000      	b.n	8014990 <ip4_input+0x100>
            continue;
 801498e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	613b      	str	r3, [r7, #16]
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d1ed      	bne.n	8014978 <ip4_input+0xe8>
 801499c:	e000      	b.n	80149a0 <ip4_input+0x110>
            break;
 801499e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80149a0:	4b4b      	ldr	r3, [pc, #300]	; (8014ad0 <ip4_input+0x240>)
 80149a2:	691b      	ldr	r3, [r3, #16]
 80149a4:	6839      	ldr	r1, [r7, #0]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f000 f96e 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d105      	bne.n	80149be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80149b2:	4b47      	ldr	r3, [pc, #284]	; (8014ad0 <ip4_input+0x240>)
 80149b4:	691b      	ldr	r3, [r3, #16]
 80149b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80149ba:	2be0      	cmp	r3, #224	; 0xe0
 80149bc:	d104      	bne.n	80149c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f7f7 fd76 	bl	800c4b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80149c4:	2300      	movs	r3, #0
 80149c6:	e07e      	b.n	8014ac6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d104      	bne.n	80149d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f7f7 fd6e 	bl	800c4b0 <pbuf_free>
    return ERR_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	e076      	b.n	8014ac6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	88db      	ldrh	r3, [r3, #6]
 80149dc:	b29b      	uxth	r3, r3
 80149de:	461a      	mov	r2, r3
 80149e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80149e4:	4013      	ands	r3, r2
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d00b      	beq.n	8014a02 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f000 fc92 	bl	8015314 <ip4_reass>
 80149f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d101      	bne.n	80149fc <ip4_input+0x16c>
      return ERR_OK;
 80149f8:	2300      	movs	r3, #0
 80149fa:	e064      	b.n	8014ac6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014a02:	4a33      	ldr	r2, [pc, #204]	; (8014ad0 <ip4_input+0x240>)
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014a08:	4a31      	ldr	r2, [pc, #196]	; (8014ad0 <ip4_input+0x240>)
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014a0e:	4a30      	ldr	r2, [pc, #192]	; (8014ad0 <ip4_input+0x240>)
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	f003 030f 	and.w	r3, r3, #15
 8014a1c:	b2db      	uxtb	r3, r3
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	4b2a      	ldr	r3, [pc, #168]	; (8014ad0 <ip4_input+0x240>)
 8014a26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014a28:	89fb      	ldrh	r3, [r7, #14]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7f7 fcb9 	bl	800c3a4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	7a5b      	ldrb	r3, [r3, #9]
 8014a36:	2b11      	cmp	r3, #17
 8014a38:	d006      	beq.n	8014a48 <ip4_input+0x1b8>
 8014a3a:	2b11      	cmp	r3, #17
 8014a3c:	dc13      	bgt.n	8014a66 <ip4_input+0x1d6>
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	d00c      	beq.n	8014a5c <ip4_input+0x1cc>
 8014a42:	2b06      	cmp	r3, #6
 8014a44:	d005      	beq.n	8014a52 <ip4_input+0x1c2>
 8014a46:	e00e      	b.n	8014a66 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014a48:	6839      	ldr	r1, [r7, #0]
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f7fe fac6 	bl	8012fdc <udp_input>
        break;
 8014a50:	e026      	b.n	8014aa0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7f9 fe7f 	bl	800e758 <tcp_input>
        break;
 8014a5a:	e021      	b.n	8014aa0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014a5c:	6839      	ldr	r1, [r7, #0]
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff fcc8 	bl	80143f4 <icmp_input>
        break;
 8014a64:	e01c      	b.n	8014aa0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a66:	4b1a      	ldr	r3, [pc, #104]	; (8014ad0 <ip4_input+0x240>)
 8014a68:	695b      	ldr	r3, [r3, #20]
 8014a6a:	6939      	ldr	r1, [r7, #16]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f000 f90b 	bl	8014c88 <ip4_addr_isbroadcast_u32>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10f      	bne.n	8014a98 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a78:	4b15      	ldr	r3, [pc, #84]	; (8014ad0 <ip4_input+0x240>)
 8014a7a:	695b      	ldr	r3, [r3, #20]
 8014a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a80:	2be0      	cmp	r3, #224	; 0xe0
 8014a82:	d009      	beq.n	8014a98 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a88:	4619      	mov	r1, r3
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f7f7 fcfd 	bl	800c48a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014a90:	2102      	movs	r1, #2
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff fdce 	bl	8014634 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7f7 fd09 	bl	800c4b0 <pbuf_free>
        break;
 8014a9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014aa0:	4b0b      	ldr	r3, [pc, #44]	; (8014ad0 <ip4_input+0x240>)
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014aa6:	4b0a      	ldr	r3, [pc, #40]	; (8014ad0 <ip4_input+0x240>)
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014aac:	4b08      	ldr	r3, [pc, #32]	; (8014ad0 <ip4_input+0x240>)
 8014aae:	2200      	movs	r2, #0
 8014ab0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014ab2:	4b07      	ldr	r3, [pc, #28]	; (8014ad0 <ip4_input+0x240>)
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014ab8:	4b05      	ldr	r3, [pc, #20]	; (8014ad0 <ip4_input+0x240>)
 8014aba:	2200      	movs	r2, #0
 8014abc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014abe:	4b04      	ldr	r3, [pc, #16]	; (8014ad0 <ip4_input+0x240>)
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3718      	adds	r7, #24
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	240043a8 	.word	0x240043a8
 8014ad4:	2400749c 	.word	0x2400749c

08014ad8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b08a      	sub	sp, #40	; 0x28
 8014adc:	af04      	add	r7, sp, #16
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
 8014ae4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d009      	beq.n	8014b04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d003      	beq.n	8014afe <ip4_output_if+0x26>
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d102      	bne.n	8014b04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b00:	3304      	adds	r3, #4
 8014b02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014b04:	78fa      	ldrb	r2, [r7, #3]
 8014b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b08:	9302      	str	r3, [sp, #8]
 8014b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	4613      	mov	r3, r2
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	6979      	ldr	r1, [r7, #20]
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 f805 	bl	8014b2c <ip4_output_if_src>
 8014b22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3718      	adds	r7, #24
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b088      	sub	sp, #32
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
 8014b38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	7b9b      	ldrb	r3, [r3, #14]
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	d006      	beq.n	8014b50 <ip4_output_if_src+0x24>
 8014b42:	4b4b      	ldr	r3, [pc, #300]	; (8014c70 <ip4_output_if_src+0x144>)
 8014b44:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014b48:	494a      	ldr	r1, [pc, #296]	; (8014c74 <ip4_output_if_src+0x148>)
 8014b4a:	484b      	ldr	r0, [pc, #300]	; (8014c78 <ip4_output_if_src+0x14c>)
 8014b4c:	f001 fad4 	bl	80160f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d060      	beq.n	8014c18 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014b56:	2314      	movs	r3, #20
 8014b58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014b5a:	2114      	movs	r1, #20
 8014b5c:	68f8      	ldr	r0, [r7, #12]
 8014b5e:	f7f7 fc11 	bl	800c384 <pbuf_add_header>
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b68:	f06f 0301 	mvn.w	r3, #1
 8014b6c:	e07c      	b.n	8014c68 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	685b      	ldr	r3, [r3, #4]
 8014b72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	895b      	ldrh	r3, [r3, #10]
 8014b78:	2b13      	cmp	r3, #19
 8014b7a:	d806      	bhi.n	8014b8a <ip4_output_if_src+0x5e>
 8014b7c:	4b3c      	ldr	r3, [pc, #240]	; (8014c70 <ip4_output_if_src+0x144>)
 8014b7e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014b82:	493e      	ldr	r1, [pc, #248]	; (8014c7c <ip4_output_if_src+0x150>)
 8014b84:	483c      	ldr	r0, [pc, #240]	; (8014c78 <ip4_output_if_src+0x14c>)
 8014b86:	f001 fab7 	bl	80160f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	78fa      	ldrb	r2, [r7, #3]
 8014b8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014b96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014ba0:	8b7b      	ldrh	r3, [r7, #26]
 8014ba2:	089b      	lsrs	r3, r3, #2
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bac:	b2da      	uxtb	r2, r3
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014bb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	891b      	ldrh	r3, [r3, #8]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f5 ffcc 	bl	800ab5c <lwip_htons>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	719a      	strb	r2, [r3, #6]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014bd6:	4b2a      	ldr	r3, [pc, #168]	; (8014c80 <ip4_output_if_src+0x154>)
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7f5 ffbe 	bl	800ab5c <lwip_htons>
 8014be0:	4603      	mov	r3, r0
 8014be2:	461a      	mov	r2, r3
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014be8:	4b25      	ldr	r3, [pc, #148]	; (8014c80 <ip4_output_if_src+0x154>)
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	3301      	adds	r3, #1
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	4b23      	ldr	r3, [pc, #140]	; (8014c80 <ip4_output_if_src+0x154>)
 8014bf2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d104      	bne.n	8014c04 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014bfa:	4b22      	ldr	r3, [pc, #136]	; (8014c84 <ip4_output_if_src+0x158>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	60da      	str	r2, [r3, #12]
 8014c02:	e003      	b.n	8014c0c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	729a      	strb	r2, [r3, #10]
 8014c12:	2200      	movs	r2, #0
 8014c14:	72da      	strb	r2, [r3, #11]
 8014c16:	e00f      	b.n	8014c38 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	895b      	ldrh	r3, [r3, #10]
 8014c1c:	2b13      	cmp	r3, #19
 8014c1e:	d802      	bhi.n	8014c26 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014c20:	f06f 0301 	mvn.w	r3, #1
 8014c24:	e020      	b.n	8014c68 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	691b      	ldr	r3, [r3, #16]
 8014c30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014c32:	f107 0314 	add.w	r3, r7, #20
 8014c36:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d00c      	beq.n	8014c5a <ip4_output_if_src+0x12e>
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	891a      	ldrh	r2, [r3, #8]
 8014c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d906      	bls.n	8014c5a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c50:	68f8      	ldr	r0, [r7, #12]
 8014c52:	f000 fd53 	bl	80156fc <ip4_frag>
 8014c56:	4603      	mov	r3, r0
 8014c58:	e006      	b.n	8014c68 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5c:	695b      	ldr	r3, [r3, #20]
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	68f9      	ldr	r1, [r7, #12]
 8014c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c64:	4798      	blx	r3
 8014c66:	4603      	mov	r3, r0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3720      	adds	r7, #32
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	0801a584 	.word	0x0801a584
 8014c74:	0801a5b8 	.word	0x0801a5b8
 8014c78:	0801a5c4 	.word	0x0801a5c4
 8014c7c:	0801a5ec 	.word	0x0801a5ec
 8014c80:	240075fa 	.word	0x240075fa
 8014c84:	0801aa08 	.word	0x0801aa08

08014c88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b085      	sub	sp, #20
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c9c:	d002      	beq.n	8014ca4 <ip4_addr_isbroadcast_u32+0x1c>
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e02a      	b.n	8014cfe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cae:	f003 0302 	and.w	r3, r3, #2
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d101      	bne.n	8014cba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e021      	b.n	8014cfe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	3304      	adds	r3, #4
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	687a      	ldr	r2, [r7, #4]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d101      	bne.n	8014cca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	e019      	b.n	8014cfe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	3304      	adds	r3, #4
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	405a      	eors	r2, r3
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	3308      	adds	r3, #8
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	4013      	ands	r3, r2
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d10d      	bne.n	8014cfc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	3308      	adds	r3, #8
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	43da      	mvns	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	3308      	adds	r3, #8
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d101      	bne.n	8014cfc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e000      	b.n	8014cfe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014cfc:	2300      	movs	r3, #0
  }
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3714      	adds	r7, #20
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr
	...

08014d0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014d12:	2300      	movs	r3, #0
 8014d14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014d16:	4b12      	ldr	r3, [pc, #72]	; (8014d60 <ip_reass_tmr+0x54>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014d1c:	e018      	b.n	8014d50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	7fdb      	ldrb	r3, [r3, #31]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00b      	beq.n	8014d3e <ip_reass_tmr+0x32>
      r->timer--;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	7fdb      	ldrb	r3, [r3, #31]
 8014d2a:	3b01      	subs	r3, #1
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	60fb      	str	r3, [r7, #12]
 8014d3c:	e008      	b.n	8014d50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014d48:	68b9      	ldr	r1, [r7, #8]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f000 f80a 	bl	8014d64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d1e3      	bne.n	8014d1e <ip_reass_tmr+0x12>
    }
  }
}
 8014d56:	bf00      	nop
 8014d58:	bf00      	nop
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	240075fc 	.word	0x240075fc

08014d64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b088      	sub	sp, #32
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d105      	bne.n	8014d86 <ip_reass_free_complete_datagram+0x22>
 8014d7a:	4b45      	ldr	r3, [pc, #276]	; (8014e90 <ip_reass_free_complete_datagram+0x12c>)
 8014d7c:	22ab      	movs	r2, #171	; 0xab
 8014d7e:	4945      	ldr	r1, [pc, #276]	; (8014e94 <ip_reass_free_complete_datagram+0x130>)
 8014d80:	4845      	ldr	r0, [pc, #276]	; (8014e98 <ip_reass_free_complete_datagram+0x134>)
 8014d82:	f001 f9b9 	bl	80160f8 <iprintf>
  if (prev != NULL) {
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d00a      	beq.n	8014da2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d005      	beq.n	8014da2 <ip_reass_free_complete_datagram+0x3e>
 8014d96:	4b3e      	ldr	r3, [pc, #248]	; (8014e90 <ip_reass_free_complete_datagram+0x12c>)
 8014d98:	22ad      	movs	r2, #173	; 0xad
 8014d9a:	4940      	ldr	r1, [pc, #256]	; (8014e9c <ip_reass_free_complete_datagram+0x138>)
 8014d9c:	483e      	ldr	r0, [pc, #248]	; (8014e98 <ip_reass_free_complete_datagram+0x134>)
 8014d9e:	f001 f9ab 	bl	80160f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	685b      	ldr	r3, [r3, #4]
 8014da8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	889b      	ldrh	r3, [r3, #4]
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d12a      	bne.n	8014e0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014dc2:	69bb      	ldr	r3, [r7, #24]
 8014dc4:	6858      	ldr	r0, [r3, #4]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	3308      	adds	r3, #8
 8014dca:	2214      	movs	r2, #20
 8014dcc:	4619      	mov	r1, r3
 8014dce:	f001 faba 	bl	8016346 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014dd2:	2101      	movs	r1, #1
 8014dd4:	69b8      	ldr	r0, [r7, #24]
 8014dd6:	f7ff fc3d 	bl	8014654 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014dda:	69b8      	ldr	r0, [r7, #24]
 8014ddc:	f7f7 fbf6 	bl	800c5cc <pbuf_clen>
 8014de0:	4603      	mov	r3, r0
 8014de2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014de4:	8bfa      	ldrh	r2, [r7, #30]
 8014de6:	8a7b      	ldrh	r3, [r7, #18]
 8014de8:	4413      	add	r3, r2
 8014dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dee:	db05      	blt.n	8014dfc <ip_reass_free_complete_datagram+0x98>
 8014df0:	4b27      	ldr	r3, [pc, #156]	; (8014e90 <ip_reass_free_complete_datagram+0x12c>)
 8014df2:	22bc      	movs	r2, #188	; 0xbc
 8014df4:	492a      	ldr	r1, [pc, #168]	; (8014ea0 <ip_reass_free_complete_datagram+0x13c>)
 8014df6:	4828      	ldr	r0, [pc, #160]	; (8014e98 <ip_reass_free_complete_datagram+0x134>)
 8014df8:	f001 f97e 	bl	80160f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014dfc:	8bfa      	ldrh	r2, [r7, #30]
 8014dfe:	8a7b      	ldrh	r3, [r7, #18]
 8014e00:	4413      	add	r3, r2
 8014e02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014e04:	69b8      	ldr	r0, [r7, #24]
 8014e06:	f7f7 fb53 	bl	800c4b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014e10:	e01f      	b.n	8014e52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014e18:	69bb      	ldr	r3, [r7, #24]
 8014e1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f7f7 fbd2 	bl	800c5cc <pbuf_clen>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e2c:	8bfa      	ldrh	r2, [r7, #30]
 8014e2e:	8a7b      	ldrh	r3, [r7, #18]
 8014e30:	4413      	add	r3, r2
 8014e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e36:	db05      	blt.n	8014e44 <ip_reass_free_complete_datagram+0xe0>
 8014e38:	4b15      	ldr	r3, [pc, #84]	; (8014e90 <ip_reass_free_complete_datagram+0x12c>)
 8014e3a:	22cc      	movs	r2, #204	; 0xcc
 8014e3c:	4918      	ldr	r1, [pc, #96]	; (8014ea0 <ip_reass_free_complete_datagram+0x13c>)
 8014e3e:	4816      	ldr	r0, [pc, #88]	; (8014e98 <ip_reass_free_complete_datagram+0x134>)
 8014e40:	f001 f95a 	bl	80160f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e44:	8bfa      	ldrh	r2, [r7, #30]
 8014e46:	8a7b      	ldrh	r3, [r7, #18]
 8014e48:	4413      	add	r3, r2
 8014e4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f7f7 fb2f 	bl	800c4b0 <pbuf_free>
  while (p != NULL) {
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d1dc      	bne.n	8014e12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014e58:	6839      	ldr	r1, [r7, #0]
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f000 f8c2 	bl	8014fe4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014e60:	4b10      	ldr	r3, [pc, #64]	; (8014ea4 <ip_reass_free_complete_datagram+0x140>)
 8014e62:	881b      	ldrh	r3, [r3, #0]
 8014e64:	8bfa      	ldrh	r2, [r7, #30]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d905      	bls.n	8014e76 <ip_reass_free_complete_datagram+0x112>
 8014e6a:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <ip_reass_free_complete_datagram+0x12c>)
 8014e6c:	22d2      	movs	r2, #210	; 0xd2
 8014e6e:	490e      	ldr	r1, [pc, #56]	; (8014ea8 <ip_reass_free_complete_datagram+0x144>)
 8014e70:	4809      	ldr	r0, [pc, #36]	; (8014e98 <ip_reass_free_complete_datagram+0x134>)
 8014e72:	f001 f941 	bl	80160f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014e76:	4b0b      	ldr	r3, [pc, #44]	; (8014ea4 <ip_reass_free_complete_datagram+0x140>)
 8014e78:	881a      	ldrh	r2, [r3, #0]
 8014e7a:	8bfb      	ldrh	r3, [r7, #30]
 8014e7c:	1ad3      	subs	r3, r2, r3
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	4b08      	ldr	r3, [pc, #32]	; (8014ea4 <ip_reass_free_complete_datagram+0x140>)
 8014e82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014e84:	8bfb      	ldrh	r3, [r7, #30]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3720      	adds	r7, #32
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	0801a61c 	.word	0x0801a61c
 8014e94:	0801a658 	.word	0x0801a658
 8014e98:	0801a664 	.word	0x0801a664
 8014e9c:	0801a68c 	.word	0x0801a68c
 8014ea0:	0801a6a0 	.word	0x0801a6a0
 8014ea4:	24007600 	.word	0x24007600
 8014ea8:	0801a6c0 	.word	0x0801a6c0

08014eac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b08a      	sub	sp, #40	; 0x28
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014eca:	4b28      	ldr	r3, [pc, #160]	; (8014f6c <ip_reass_remove_oldest_datagram+0xc0>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014ed0:	e030      	b.n	8014f34 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed4:	695a      	ldr	r2, [r3, #20]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d10c      	bne.n	8014ef8 <ip_reass_remove_oldest_datagram+0x4c>
 8014ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee0:	699a      	ldr	r2, [r3, #24]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d106      	bne.n	8014ef8 <ip_reass_remove_oldest_datagram+0x4c>
 8014eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eec:	899a      	ldrh	r2, [r3, #12]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	889b      	ldrh	r3, [r3, #4]
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d014      	beq.n	8014f22 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	3301      	adds	r3, #1
 8014efc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014efe:	6a3b      	ldr	r3, [r7, #32]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d104      	bne.n	8014f0e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f06:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	61bb      	str	r3, [r7, #24]
 8014f0c:	e009      	b.n	8014f22 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f10:	7fda      	ldrb	r2, [r3, #31]
 8014f12:	6a3b      	ldr	r3, [r7, #32]
 8014f14:	7fdb      	ldrb	r3, [r3, #31]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d803      	bhi.n	8014f22 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d1cb      	bne.n	8014ed2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d008      	beq.n	8014f52 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014f40:	69b9      	ldr	r1, [r7, #24]
 8014f42:	6a38      	ldr	r0, [r7, #32]
 8014f44:	f7ff ff0e 	bl	8014d64 <ip_reass_free_complete_datagram>
 8014f48:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	4413      	add	r3, r2
 8014f50:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014f52:	697a      	ldr	r2, [r7, #20]
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	da02      	bge.n	8014f60 <ip_reass_remove_oldest_datagram+0xb4>
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	dcac      	bgt.n	8014eba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014f60:	697b      	ldr	r3, [r7, #20]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3728      	adds	r7, #40	; 0x28
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	240075fc 	.word	0x240075fc

08014f70 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014f7a:	2004      	movs	r0, #4
 8014f7c:	f7f6 fb7e 	bl	800b67c <memp_malloc>
 8014f80:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d110      	bne.n	8014faa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014f88:	6839      	ldr	r1, [r7, #0]
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f7ff ff8e 	bl	8014eac <ip_reass_remove_oldest_datagram>
 8014f90:	4602      	mov	r2, r0
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	4293      	cmp	r3, r2
 8014f96:	dc03      	bgt.n	8014fa0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014f98:	2004      	movs	r0, #4
 8014f9a:	f7f6 fb6f 	bl	800b67c <memp_malloc>
 8014f9e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d101      	bne.n	8014faa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	e016      	b.n	8014fd8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014faa:	2220      	movs	r2, #32
 8014fac:	2100      	movs	r1, #0
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f001 f941 	bl	8016236 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	220f      	movs	r2, #15
 8014fb8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014fba:	4b09      	ldr	r3, [pc, #36]	; (8014fe0 <ip_reass_enqueue_new_datagram+0x70>)
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014fc2:	4a07      	ldr	r2, [pc, #28]	; (8014fe0 <ip_reass_enqueue_new_datagram+0x70>)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3308      	adds	r3, #8
 8014fcc:	2214      	movs	r2, #20
 8014fce:	6879      	ldr	r1, [r7, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f001 f9b8 	bl	8016346 <memcpy>
  return ipr;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3710      	adds	r7, #16
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	240075fc 	.word	0x240075fc

08014fe4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014fee:	4b10      	ldr	r3, [pc, #64]	; (8015030 <ip_reass_dequeue_datagram+0x4c>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d104      	bne.n	8015002 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a0c      	ldr	r2, [pc, #48]	; (8015030 <ip_reass_dequeue_datagram+0x4c>)
 8014ffe:	6013      	str	r3, [r2, #0]
 8015000:	e00d      	b.n	801501e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d106      	bne.n	8015016 <ip_reass_dequeue_datagram+0x32>
 8015008:	4b0a      	ldr	r3, [pc, #40]	; (8015034 <ip_reass_dequeue_datagram+0x50>)
 801500a:	f240 1245 	movw	r2, #325	; 0x145
 801500e:	490a      	ldr	r1, [pc, #40]	; (8015038 <ip_reass_dequeue_datagram+0x54>)
 8015010:	480a      	ldr	r0, [pc, #40]	; (801503c <ip_reass_dequeue_datagram+0x58>)
 8015012:	f001 f871 	bl	80160f8 <iprintf>
    prev->next = ipr->next;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801501e:	6879      	ldr	r1, [r7, #4]
 8015020:	2004      	movs	r0, #4
 8015022:	f7f6 fba1 	bl	800b768 <memp_free>
}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	240075fc 	.word	0x240075fc
 8015034:	0801a61c 	.word	0x0801a61c
 8015038:	0801a6e4 	.word	0x0801a6e4
 801503c:	0801a664 	.word	0x0801a664

08015040 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b08c      	sub	sp, #48	; 0x30
 8015044:	af00      	add	r7, sp, #0
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	60b9      	str	r1, [r7, #8]
 801504a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801504c:	2300      	movs	r3, #0
 801504e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015050:	2301      	movs	r3, #1
 8015052:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	885b      	ldrh	r3, [r3, #2]
 801505e:	b29b      	uxth	r3, r3
 8015060:	4618      	mov	r0, r3
 8015062:	f7f5 fd7b 	bl	800ab5c <lwip_htons>
 8015066:	4603      	mov	r3, r0
 8015068:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801506a:	69fb      	ldr	r3, [r7, #28]
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	f003 030f 	and.w	r3, r3, #15
 8015072:	b2db      	uxtb	r3, r3
 8015074:	009b      	lsls	r3, r3, #2
 8015076:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015078:	7e7b      	ldrb	r3, [r7, #25]
 801507a:	b29b      	uxth	r3, r3
 801507c:	8b7a      	ldrh	r2, [r7, #26]
 801507e:	429a      	cmp	r2, r3
 8015080:	d202      	bcs.n	8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015082:	f04f 33ff 	mov.w	r3, #4294967295
 8015086:	e135      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015088:	7e7b      	ldrb	r3, [r7, #25]
 801508a:	b29b      	uxth	r3, r3
 801508c:	8b7a      	ldrh	r2, [r7, #26]
 801508e:	1ad3      	subs	r3, r2, r3
 8015090:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015092:	69fb      	ldr	r3, [r7, #28]
 8015094:	88db      	ldrh	r3, [r3, #6]
 8015096:	b29b      	uxth	r3, r3
 8015098:	4618      	mov	r0, r3
 801509a:	f7f5 fd5f 	bl	800ab5c <lwip_htons>
 801509e:	4603      	mov	r3, r0
 80150a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	00db      	lsls	r3, r3, #3
 80150a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80150b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b2:	2200      	movs	r2, #0
 80150b4:	701a      	strb	r2, [r3, #0]
 80150b6:	2200      	movs	r2, #0
 80150b8:	705a      	strb	r2, [r3, #1]
 80150ba:	2200      	movs	r2, #0
 80150bc:	709a      	strb	r2, [r3, #2]
 80150be:	2200      	movs	r2, #0
 80150c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80150c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c4:	8afa      	ldrh	r2, [r7, #22]
 80150c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80150c8:	8afa      	ldrh	r2, [r7, #22]
 80150ca:	8b7b      	ldrh	r3, [r7, #26]
 80150cc:	4413      	add	r3, r2
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80150d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d6:	88db      	ldrh	r3, [r3, #6]
 80150d8:	b29b      	uxth	r3, r3
 80150da:	8afa      	ldrh	r2, [r7, #22]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d902      	bls.n	80150e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150e0:	f04f 33ff 	mov.w	r3, #4294967295
 80150e4:	e106      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	627b      	str	r3, [r7, #36]	; 0x24
 80150ec:	e068      	b.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80150ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80150f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f6:	889b      	ldrh	r3, [r3, #4]
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	889b      	ldrh	r3, [r3, #4]
 80150fe:	b29b      	uxth	r3, r3
 8015100:	429a      	cmp	r2, r3
 8015102:	d235      	bcs.n	8015170 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015108:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	2b00      	cmp	r3, #0
 801510e:	d020      	beq.n	8015152 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015112:	889b      	ldrh	r3, [r3, #4]
 8015114:	b29a      	uxth	r2, r3
 8015116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015118:	88db      	ldrh	r3, [r3, #6]
 801511a:	b29b      	uxth	r3, r3
 801511c:	429a      	cmp	r2, r3
 801511e:	d307      	bcc.n	8015130 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015122:	88db      	ldrh	r3, [r3, #6]
 8015124:	b29a      	uxth	r2, r3
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	889b      	ldrh	r3, [r3, #4]
 801512a:	b29b      	uxth	r3, r3
 801512c:	429a      	cmp	r2, r3
 801512e:	d902      	bls.n	8015136 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015130:	f04f 33ff 	mov.w	r3, #4294967295
 8015134:	e0de      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	68ba      	ldr	r2, [r7, #8]
 801513a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513e:	88db      	ldrh	r3, [r3, #6]
 8015140:	b29a      	uxth	r2, r3
 8015142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015144:	889b      	ldrh	r3, [r3, #4]
 8015146:	b29b      	uxth	r3, r3
 8015148:	429a      	cmp	r2, r3
 801514a:	d03d      	beq.n	80151c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801514c:	2300      	movs	r3, #0
 801514e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015150:	e03a      	b.n	80151c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015154:	88db      	ldrh	r3, [r3, #6]
 8015156:	b29a      	uxth	r2, r3
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	889b      	ldrh	r3, [r3, #4]
 801515c:	b29b      	uxth	r3, r3
 801515e:	429a      	cmp	r2, r3
 8015160:	d902      	bls.n	8015168 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015162:	f04f 33ff 	mov.w	r3, #4294967295
 8015166:	e0c5      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	68ba      	ldr	r2, [r7, #8]
 801516c:	605a      	str	r2, [r3, #4]
      break;
 801516e:	e02b      	b.n	80151c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015172:	889b      	ldrh	r3, [r3, #4]
 8015174:	b29a      	uxth	r2, r3
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	889b      	ldrh	r3, [r3, #4]
 801517a:	b29b      	uxth	r3, r3
 801517c:	429a      	cmp	r2, r3
 801517e:	d102      	bne.n	8015186 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015180:	f04f 33ff 	mov.w	r3, #4294967295
 8015184:	e0b6      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015188:	889b      	ldrh	r3, [r3, #4]
 801518a:	b29a      	uxth	r2, r3
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	88db      	ldrh	r3, [r3, #6]
 8015190:	b29b      	uxth	r3, r3
 8015192:	429a      	cmp	r2, r3
 8015194:	d202      	bcs.n	801519c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015196:	f04f 33ff 	mov.w	r3, #4294967295
 801519a:	e0ab      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d009      	beq.n	80151b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80151a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a4:	88db      	ldrh	r3, [r3, #6]
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	889b      	ldrh	r3, [r3, #4]
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d001      	beq.n	80151b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80151c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d193      	bne.n	80150ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80151c6:	e000      	b.n	80151ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80151c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d12d      	bne.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80151d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d01c      	beq.n	8015210 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80151d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d8:	88db      	ldrh	r3, [r3, #6]
 80151da:	b29a      	uxth	r2, r3
 80151dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151de:	889b      	ldrh	r3, [r3, #4]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d906      	bls.n	80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80151e6:	4b45      	ldr	r3, [pc, #276]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80151ec:	4944      	ldr	r1, [pc, #272]	; (8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80151ee:	4845      	ldr	r0, [pc, #276]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151f0:	f000 ff82 	bl	80160f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80151f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f6:	68ba      	ldr	r2, [r7, #8]
 80151f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80151fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fc:	88db      	ldrh	r3, [r3, #6]
 80151fe:	b29a      	uxth	r2, r3
 8015200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015202:	889b      	ldrh	r3, [r3, #4]
 8015204:	b29b      	uxth	r3, r3
 8015206:	429a      	cmp	r2, r3
 8015208:	d010      	beq.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	623b      	str	r3, [r7, #32]
 801520e:	e00d      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d006      	beq.n	8015226 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015218:	4b38      	ldr	r3, [pc, #224]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801521a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801521e:	493a      	ldr	r1, [pc, #232]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015220:	4838      	ldr	r0, [pc, #224]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015222:	f000 ff69 	bl	80160f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d105      	bne.n	801523e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	7f9b      	ldrb	r3, [r3, #30]
 8015236:	f003 0301 	and.w	r3, r3, #1
 801523a:	2b00      	cmp	r3, #0
 801523c:	d059      	beq.n	80152f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d04f      	beq.n	80152e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d006      	beq.n	801525a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	889b      	ldrh	r3, [r3, #4]
 8015254:	b29b      	uxth	r3, r3
 8015256:	2b00      	cmp	r3, #0
 8015258:	d002      	beq.n	8015260 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801525a:	2300      	movs	r3, #0
 801525c:	623b      	str	r3, [r7, #32]
 801525e:	e041      	b.n	80152e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015262:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801526a:	e012      	b.n	8015292 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015274:	88db      	ldrh	r3, [r3, #6]
 8015276:	b29a      	uxth	r2, r3
 8015278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801527a:	889b      	ldrh	r3, [r3, #4]
 801527c:	b29b      	uxth	r3, r3
 801527e:	429a      	cmp	r2, r3
 8015280:	d002      	beq.n	8015288 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015282:	2300      	movs	r3, #0
 8015284:	623b      	str	r3, [r7, #32]
            break;
 8015286:	e007      	b.n	8015298 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1e9      	bne.n	801526c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015298:	6a3b      	ldr	r3, [r7, #32]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d022      	beq.n	80152e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d106      	bne.n	80152b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80152a6:	4b15      	ldr	r3, [pc, #84]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152a8:	f240 12df 	movw	r2, #479	; 0x1df
 80152ac:	4917      	ldr	r1, [pc, #92]	; (801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152ae:	4815      	ldr	r0, [pc, #84]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152b0:	f000 ff22 	bl	80160f8 <iprintf>
          LWIP_ASSERT("sanity check",
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152bc:	429a      	cmp	r2, r3
 80152be:	d106      	bne.n	80152ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80152c0:	4b0e      	ldr	r3, [pc, #56]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80152c6:	4911      	ldr	r1, [pc, #68]	; (801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152c8:	480e      	ldr	r0, [pc, #56]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152ca:	f000 ff15 	bl	80160f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80152ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d006      	beq.n	80152e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80152d6:	4b09      	ldr	r3, [pc, #36]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80152dc:	490c      	ldr	r1, [pc, #48]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80152de:	4809      	ldr	r0, [pc, #36]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152e0:	f000 ff0a 	bl	80160f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80152e4:	6a3b      	ldr	r3, [r7, #32]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	bf14      	ite	ne
 80152ea:	2301      	movne	r3, #1
 80152ec:	2300      	moveq	r3, #0
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	e000      	b.n	80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3730      	adds	r7, #48	; 0x30
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	0801a61c 	.word	0x0801a61c
 8015300:	0801a700 	.word	0x0801a700
 8015304:	0801a664 	.word	0x0801a664
 8015308:	0801a720 	.word	0x0801a720
 801530c:	0801a758 	.word	0x0801a758
 8015310:	0801a768 	.word	0x0801a768

08015314 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b08e      	sub	sp, #56	; 0x38
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	f003 030f 	and.w	r3, r3, #15
 801532a:	b2db      	uxtb	r3, r3
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	b2db      	uxtb	r3, r3
 8015330:	2b14      	cmp	r3, #20
 8015332:	f040 8171 	bne.w	8015618 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015338:	88db      	ldrh	r3, [r3, #6]
 801533a:	b29b      	uxth	r3, r3
 801533c:	4618      	mov	r0, r3
 801533e:	f7f5 fc0d 	bl	800ab5c <lwip_htons>
 8015342:	4603      	mov	r3, r0
 8015344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015348:	b29b      	uxth	r3, r3
 801534a:	00db      	lsls	r3, r3, #3
 801534c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015350:	885b      	ldrh	r3, [r3, #2]
 8015352:	b29b      	uxth	r3, r3
 8015354:	4618      	mov	r0, r3
 8015356:	f7f5 fc01 	bl	800ab5c <lwip_htons>
 801535a:	4603      	mov	r3, r0
 801535c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015360:	781b      	ldrb	r3, [r3, #0]
 8015362:	f003 030f 	and.w	r3, r3, #15
 8015366:	b2db      	uxtb	r3, r3
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801536e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015372:	b29b      	uxth	r3, r3
 8015374:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015376:	429a      	cmp	r2, r3
 8015378:	f0c0 8150 	bcc.w	801561c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801537c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015380:	b29b      	uxth	r3, r3
 8015382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015384:	1ad3      	subs	r3, r2, r3
 8015386:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f7f7 f91f 	bl	800c5cc <pbuf_clen>
 801538e:	4603      	mov	r3, r0
 8015390:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015392:	4b8c      	ldr	r3, [pc, #560]	; (80155c4 <ip4_reass+0x2b0>)
 8015394:	881b      	ldrh	r3, [r3, #0]
 8015396:	461a      	mov	r2, r3
 8015398:	8c3b      	ldrh	r3, [r7, #32]
 801539a:	4413      	add	r3, r2
 801539c:	2b0a      	cmp	r3, #10
 801539e:	dd10      	ble.n	80153c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153a0:	8c3b      	ldrh	r3, [r7, #32]
 80153a2:	4619      	mov	r1, r3
 80153a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153a6:	f7ff fd81 	bl	8014eac <ip_reass_remove_oldest_datagram>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	f000 8137 	beq.w	8015620 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80153b2:	4b84      	ldr	r3, [pc, #528]	; (80155c4 <ip4_reass+0x2b0>)
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	8c3b      	ldrh	r3, [r7, #32]
 80153ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153bc:	2b0a      	cmp	r3, #10
 80153be:	f300 812f 	bgt.w	8015620 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153c2:	4b81      	ldr	r3, [pc, #516]	; (80155c8 <ip4_reass+0x2b4>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	633b      	str	r3, [r7, #48]	; 0x30
 80153c8:	e015      	b.n	80153f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80153ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153cc:	695a      	ldr	r2, [r3, #20]
 80153ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d0:	68db      	ldr	r3, [r3, #12]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d10c      	bne.n	80153f0 <ip4_reass+0xdc>
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	699a      	ldr	r2, [r3, #24]
 80153da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153dc:	691b      	ldr	r3, [r3, #16]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d106      	bne.n	80153f0 <ip4_reass+0xdc>
 80153e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e4:	899a      	ldrh	r2, [r3, #12]
 80153e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e8:	889b      	ldrh	r3, [r3, #4]
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d006      	beq.n	80153fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	633b      	str	r3, [r7, #48]	; 0x30
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d1e6      	bne.n	80153ca <ip4_reass+0xb6>
 80153fc:	e000      	b.n	8015400 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80153fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015402:	2b00      	cmp	r3, #0
 8015404:	d109      	bne.n	801541a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015406:	8c3b      	ldrh	r3, [r7, #32]
 8015408:	4619      	mov	r1, r3
 801540a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801540c:	f7ff fdb0 	bl	8014f70 <ip_reass_enqueue_new_datagram>
 8015410:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015414:	2b00      	cmp	r3, #0
 8015416:	d11c      	bne.n	8015452 <ip4_reass+0x13e>
      goto nullreturn;
 8015418:	e105      	b.n	8015626 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541c:	88db      	ldrh	r3, [r3, #6]
 801541e:	b29b      	uxth	r3, r3
 8015420:	4618      	mov	r0, r3
 8015422:	f7f5 fb9b 	bl	800ab5c <lwip_htons>
 8015426:	4603      	mov	r3, r0
 8015428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801542c:	2b00      	cmp	r3, #0
 801542e:	d110      	bne.n	8015452 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015432:	89db      	ldrh	r3, [r3, #14]
 8015434:	4618      	mov	r0, r3
 8015436:	f7f5 fb91 	bl	800ab5c <lwip_htons>
 801543a:	4603      	mov	r3, r0
 801543c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015440:	2b00      	cmp	r3, #0
 8015442:	d006      	beq.n	8015452 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015446:	3308      	adds	r3, #8
 8015448:	2214      	movs	r2, #20
 801544a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801544c:	4618      	mov	r0, r3
 801544e:	f000 ff7a 	bl	8016346 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015454:	88db      	ldrh	r3, [r3, #6]
 8015456:	b29b      	uxth	r3, r3
 8015458:	f003 0320 	and.w	r3, r3, #32
 801545c:	2b00      	cmp	r3, #0
 801545e:	bf0c      	ite	eq
 8015460:	2301      	moveq	r3, #1
 8015462:	2300      	movne	r3, #0
 8015464:	b2db      	uxtb	r3, r3
 8015466:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00e      	beq.n	801548c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801546e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015472:	4413      	add	r3, r2
 8015474:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015476:	8b7a      	ldrh	r2, [r7, #26]
 8015478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801547a:	429a      	cmp	r2, r3
 801547c:	f0c0 80a0 	bcc.w	80155c0 <ip4_reass+0x2ac>
 8015480:	8b7b      	ldrh	r3, [r7, #26]
 8015482:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015486:	4293      	cmp	r3, r2
 8015488:	f200 809a 	bhi.w	80155c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801548c:	69fa      	ldr	r2, [r7, #28]
 801548e:	6879      	ldr	r1, [r7, #4]
 8015490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015492:	f7ff fdd5 	bl	8015040 <ip_reass_chain_frag_into_datagram_and_validate>
 8015496:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801549e:	f000 809b 	beq.w	80155d8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80154a2:	4b48      	ldr	r3, [pc, #288]	; (80155c4 <ip4_reass+0x2b0>)
 80154a4:	881a      	ldrh	r2, [r3, #0]
 80154a6:	8c3b      	ldrh	r3, [r7, #32]
 80154a8:	4413      	add	r3, r2
 80154aa:	b29a      	uxth	r2, r3
 80154ac:	4b45      	ldr	r3, [pc, #276]	; (80155c4 <ip4_reass+0x2b0>)
 80154ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d00d      	beq.n	80154d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80154b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80154b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154ba:	4413      	add	r3, r2
 80154bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80154be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c0:	8a7a      	ldrh	r2, [r7, #18]
 80154c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80154c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c6:	7f9b      	ldrb	r3, [r3, #30]
 80154c8:	f043 0301 	orr.w	r3, r3, #1
 80154cc:	b2da      	uxtb	r2, r3
 80154ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d171      	bne.n	80155bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80154d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154da:	8b9b      	ldrh	r3, [r3, #28]
 80154dc:	3314      	adds	r3, #20
 80154de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80154e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80154ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80154f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f4:	3308      	adds	r3, #8
 80154f6:	2214      	movs	r2, #20
 80154f8:	4619      	mov	r1, r3
 80154fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154fc:	f000 ff23 	bl	8016346 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015500:	8a3b      	ldrh	r3, [r7, #16]
 8015502:	4618      	mov	r0, r3
 8015504:	f7f5 fb2a 	bl	800ab5c <lwip_htons>
 8015508:	4603      	mov	r3, r0
 801550a:	461a      	mov	r2, r3
 801550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015512:	2200      	movs	r2, #0
 8015514:	719a      	strb	r2, [r3, #6]
 8015516:	2200      	movs	r2, #0
 8015518:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551c:	2200      	movs	r2, #0
 801551e:	729a      	strb	r2, [r3, #10]
 8015520:	2200      	movs	r2, #0
 8015522:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801552a:	e00d      	b.n	8015548 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015532:	2114      	movs	r1, #20
 8015534:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015536:	f7f6 ff35 	bl	800c3a4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801553a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7f7 f885 	bl	800c64c <pbuf_cat>
      r = iprh->next_pbuf;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1ee      	bne.n	801552c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801554e:	4b1e      	ldr	r3, [pc, #120]	; (80155c8 <ip4_reass+0x2b4>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015554:	429a      	cmp	r2, r3
 8015556:	d102      	bne.n	801555e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015558:	2300      	movs	r3, #0
 801555a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801555c:	e010      	b.n	8015580 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801555e:	4b1a      	ldr	r3, [pc, #104]	; (80155c8 <ip4_reass+0x2b4>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015564:	e007      	b.n	8015576 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801556c:	429a      	cmp	r2, r3
 801556e:	d006      	beq.n	801557e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015578:	2b00      	cmp	r3, #0
 801557a:	d1f4      	bne.n	8015566 <ip4_reass+0x252>
 801557c:	e000      	b.n	8015580 <ip4_reass+0x26c>
          break;
 801557e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015584:	f7ff fd2e 	bl	8014fe4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7f7 f81f 	bl	800c5cc <pbuf_clen>
 801558e:	4603      	mov	r3, r0
 8015590:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015592:	4b0c      	ldr	r3, [pc, #48]	; (80155c4 <ip4_reass+0x2b0>)
 8015594:	881b      	ldrh	r3, [r3, #0]
 8015596:	8c3a      	ldrh	r2, [r7, #32]
 8015598:	429a      	cmp	r2, r3
 801559a:	d906      	bls.n	80155aa <ip4_reass+0x296>
 801559c:	4b0b      	ldr	r3, [pc, #44]	; (80155cc <ip4_reass+0x2b8>)
 801559e:	f240 229b 	movw	r2, #667	; 0x29b
 80155a2:	490b      	ldr	r1, [pc, #44]	; (80155d0 <ip4_reass+0x2bc>)
 80155a4:	480b      	ldr	r0, [pc, #44]	; (80155d4 <ip4_reass+0x2c0>)
 80155a6:	f000 fda7 	bl	80160f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80155aa:	4b06      	ldr	r3, [pc, #24]	; (80155c4 <ip4_reass+0x2b0>)
 80155ac:	881a      	ldrh	r2, [r3, #0]
 80155ae:	8c3b      	ldrh	r3, [r7, #32]
 80155b0:	1ad3      	subs	r3, r2, r3
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	4b03      	ldr	r3, [pc, #12]	; (80155c4 <ip4_reass+0x2b0>)
 80155b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	e038      	b.n	801562e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80155bc:	2300      	movs	r3, #0
 80155be:	e036      	b.n	801562e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80155c0:	bf00      	nop
 80155c2:	e00a      	b.n	80155da <ip4_reass+0x2c6>
 80155c4:	24007600 	.word	0x24007600
 80155c8:	240075fc 	.word	0x240075fc
 80155cc:	0801a61c 	.word	0x0801a61c
 80155d0:	0801a78c 	.word	0x0801a78c
 80155d4:	0801a664 	.word	0x0801a664
    goto nullreturn_ipr;
 80155d8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80155da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d106      	bne.n	80155ee <ip4_reass+0x2da>
 80155e0:	4b15      	ldr	r3, [pc, #84]	; (8015638 <ip4_reass+0x324>)
 80155e2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80155e6:	4915      	ldr	r1, [pc, #84]	; (801563c <ip4_reass+0x328>)
 80155e8:	4815      	ldr	r0, [pc, #84]	; (8015640 <ip4_reass+0x32c>)
 80155ea:	f000 fd85 	bl	80160f8 <iprintf>
  if (ipr->p == NULL) {
 80155ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d116      	bne.n	8015624 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80155f6:	4b13      	ldr	r3, [pc, #76]	; (8015644 <ip4_reass+0x330>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d006      	beq.n	801560e <ip4_reass+0x2fa>
 8015600:	4b0d      	ldr	r3, [pc, #52]	; (8015638 <ip4_reass+0x324>)
 8015602:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015606:	4910      	ldr	r1, [pc, #64]	; (8015648 <ip4_reass+0x334>)
 8015608:	480d      	ldr	r0, [pc, #52]	; (8015640 <ip4_reass+0x32c>)
 801560a:	f000 fd75 	bl	80160f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801560e:	2100      	movs	r1, #0
 8015610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015612:	f7ff fce7 	bl	8014fe4 <ip_reass_dequeue_datagram>
 8015616:	e006      	b.n	8015626 <ip4_reass+0x312>
    goto nullreturn;
 8015618:	bf00      	nop
 801561a:	e004      	b.n	8015626 <ip4_reass+0x312>
    goto nullreturn;
 801561c:	bf00      	nop
 801561e:	e002      	b.n	8015626 <ip4_reass+0x312>
      goto nullreturn;
 8015620:	bf00      	nop
 8015622:	e000      	b.n	8015626 <ip4_reass+0x312>
  }

nullreturn:
 8015624:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f7f6 ff42 	bl	800c4b0 <pbuf_free>
  return NULL;
 801562c:	2300      	movs	r3, #0
}
 801562e:	4618      	mov	r0, r3
 8015630:	3738      	adds	r7, #56	; 0x38
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
 8015636:	bf00      	nop
 8015638:	0801a61c 	.word	0x0801a61c
 801563c:	0801a7a8 	.word	0x0801a7a8
 8015640:	0801a664 	.word	0x0801a664
 8015644:	240075fc 	.word	0x240075fc
 8015648:	0801a7b4 	.word	0x0801a7b4

0801564c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015650:	2005      	movs	r0, #5
 8015652:	f7f6 f813 	bl	800b67c <memp_malloc>
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	bd80      	pop	{r7, pc}

0801565c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d106      	bne.n	8015678 <ip_frag_free_pbuf_custom_ref+0x1c>
 801566a:	4b07      	ldr	r3, [pc, #28]	; (8015688 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801566c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015670:	4906      	ldr	r1, [pc, #24]	; (801568c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015672:	4807      	ldr	r0, [pc, #28]	; (8015690 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015674:	f000 fd40 	bl	80160f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015678:	6879      	ldr	r1, [r7, #4]
 801567a:	2005      	movs	r0, #5
 801567c:	f7f6 f874 	bl	800b768 <memp_free>
}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	0801a61c 	.word	0x0801a61c
 801568c:	0801a7d4 	.word	0x0801a7d4
 8015690:	0801a664 	.word	0x0801a664

08015694 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d106      	bne.n	80156b4 <ipfrag_free_pbuf_custom+0x20>
 80156a6:	4b11      	ldr	r3, [pc, #68]	; (80156ec <ipfrag_free_pbuf_custom+0x58>)
 80156a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80156ac:	4910      	ldr	r1, [pc, #64]	; (80156f0 <ipfrag_free_pbuf_custom+0x5c>)
 80156ae:	4811      	ldr	r0, [pc, #68]	; (80156f4 <ipfrag_free_pbuf_custom+0x60>)
 80156b0:	f000 fd22 	bl	80160f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80156b4:	68fa      	ldr	r2, [r7, #12]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d006      	beq.n	80156ca <ipfrag_free_pbuf_custom+0x36>
 80156bc:	4b0b      	ldr	r3, [pc, #44]	; (80156ec <ipfrag_free_pbuf_custom+0x58>)
 80156be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80156c2:	490d      	ldr	r1, [pc, #52]	; (80156f8 <ipfrag_free_pbuf_custom+0x64>)
 80156c4:	480b      	ldr	r0, [pc, #44]	; (80156f4 <ipfrag_free_pbuf_custom+0x60>)
 80156c6:	f000 fd17 	bl	80160f8 <iprintf>
  if (pcr->original != NULL) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d004      	beq.n	80156dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	695b      	ldr	r3, [r3, #20]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7f6 feea 	bl	800c4b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7ff ffbd 	bl	801565c <ip_frag_free_pbuf_custom_ref>
}
 80156e2:	bf00      	nop
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	0801a61c 	.word	0x0801a61c
 80156f0:	0801a7e0 	.word	0x0801a7e0
 80156f4:	0801a664 	.word	0x0801a664
 80156f8:	0801a7ec 	.word	0x0801a7ec

080156fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b094      	sub	sp, #80	; 0x50
 8015700:	af02      	add	r7, sp, #8
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015712:	3b14      	subs	r3, #20
 8015714:	2b00      	cmp	r3, #0
 8015716:	da00      	bge.n	801571a <ip4_frag+0x1e>
 8015718:	3307      	adds	r3, #7
 801571a:	10db      	asrs	r3, r3, #3
 801571c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801571e:	2314      	movs	r3, #20
 8015720:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801572a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	f003 030f 	and.w	r3, r3, #15
 8015734:	b2db      	uxtb	r3, r3
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b14      	cmp	r3, #20
 801573c:	d002      	beq.n	8015744 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801573e:	f06f 0305 	mvn.w	r3, #5
 8015742:	e110      	b.n	8015966 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	895b      	ldrh	r3, [r3, #10]
 8015748:	2b13      	cmp	r3, #19
 801574a:	d809      	bhi.n	8015760 <ip4_frag+0x64>
 801574c:	4b88      	ldr	r3, [pc, #544]	; (8015970 <ip4_frag+0x274>)
 801574e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015752:	4988      	ldr	r1, [pc, #544]	; (8015974 <ip4_frag+0x278>)
 8015754:	4888      	ldr	r0, [pc, #544]	; (8015978 <ip4_frag+0x27c>)
 8015756:	f000 fccf 	bl	80160f8 <iprintf>
 801575a:	f06f 0305 	mvn.w	r3, #5
 801575e:	e102      	b.n	8015966 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015762:	88db      	ldrh	r3, [r3, #6]
 8015764:	b29b      	uxth	r3, r3
 8015766:	4618      	mov	r0, r3
 8015768:	f7f5 f9f8 	bl	800ab5c <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015770:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801577a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015780:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	891b      	ldrh	r3, [r3, #8]
 8015786:	3b14      	subs	r3, #20
 8015788:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801578c:	e0e1      	b.n	8015952 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801578e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015790:	00db      	lsls	r3, r3, #3
 8015792:	b29b      	uxth	r3, r3
 8015794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015798:	4293      	cmp	r3, r2
 801579a:	bf28      	it	cs
 801579c:	4613      	movcs	r3, r2
 801579e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80157a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157a4:	2114      	movs	r1, #20
 80157a6:	200e      	movs	r0, #14
 80157a8:	f7f6 fb9e 	bl	800bee8 <pbuf_alloc>
 80157ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80157ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 80d5 	beq.w	8015960 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80157b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b8:	895b      	ldrh	r3, [r3, #10]
 80157ba:	2b13      	cmp	r3, #19
 80157bc:	d806      	bhi.n	80157cc <ip4_frag+0xd0>
 80157be:	4b6c      	ldr	r3, [pc, #432]	; (8015970 <ip4_frag+0x274>)
 80157c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80157c4:	496d      	ldr	r1, [pc, #436]	; (801597c <ip4_frag+0x280>)
 80157c6:	486c      	ldr	r0, [pc, #432]	; (8015978 <ip4_frag+0x27c>)
 80157c8:	f000 fc96 	bl	80160f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80157cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	2214      	movs	r2, #20
 80157d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80157d4:	4618      	mov	r0, r3
 80157d6:	f000 fdb6 	bl	8016346 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	685b      	ldr	r3, [r3, #4]
 80157de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80157e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80157e6:	e064      	b.n	80158b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	895a      	ldrh	r2, [r3, #10]
 80157ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157ee:	1ad3      	subs	r3, r2, r3
 80157f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	895b      	ldrh	r3, [r3, #10]
 80157f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d906      	bls.n	801580a <ip4_frag+0x10e>
 80157fc:	4b5c      	ldr	r3, [pc, #368]	; (8015970 <ip4_frag+0x274>)
 80157fe:	f240 322d 	movw	r2, #813	; 0x32d
 8015802:	495f      	ldr	r1, [pc, #380]	; (8015980 <ip4_frag+0x284>)
 8015804:	485c      	ldr	r0, [pc, #368]	; (8015978 <ip4_frag+0x27c>)
 8015806:	f000 fc77 	bl	80160f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801580a:	8bfa      	ldrh	r2, [r7, #30]
 801580c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015810:	4293      	cmp	r3, r2
 8015812:	bf28      	it	cs
 8015814:	4613      	movcs	r3, r2
 8015816:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801581a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801581e:	2b00      	cmp	r3, #0
 8015820:	d105      	bne.n	801582e <ip4_frag+0x132>
        poff = 0;
 8015822:	2300      	movs	r3, #0
 8015824:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	60fb      	str	r3, [r7, #12]
        continue;
 801582c:	e041      	b.n	80158b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801582e:	f7ff ff0d 	bl	801564c <ip_frag_alloc_pbuf_custom_ref>
 8015832:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015834:	69bb      	ldr	r3, [r7, #24]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d103      	bne.n	8015842 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801583a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801583c:	f7f6 fe38 	bl	800c4b0 <pbuf_free>
        goto memerr;
 8015840:	e08f      	b.n	8015962 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015842:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801584a:	4413      	add	r3, r2
 801584c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015850:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015854:	9201      	str	r2, [sp, #4]
 8015856:	9300      	str	r3, [sp, #0]
 8015858:	4603      	mov	r3, r0
 801585a:	2241      	movs	r2, #65	; 0x41
 801585c:	2000      	movs	r0, #0
 801585e:	f7f6 fc6d 	bl	800c13c <pbuf_alloced_custom>
 8015862:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d106      	bne.n	8015878 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801586a:	69b8      	ldr	r0, [r7, #24]
 801586c:	f7ff fef6 	bl	801565c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015872:	f7f6 fe1d 	bl	800c4b0 <pbuf_free>
        goto memerr;
 8015876:	e074      	b.n	8015962 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015878:	68f8      	ldr	r0, [r7, #12]
 801587a:	f7f6 febf 	bl	800c5fc <pbuf_ref>
      pcr->original = p;
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	68fa      	ldr	r2, [r7, #12]
 8015882:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	4a3f      	ldr	r2, [pc, #252]	; (8015984 <ip4_frag+0x288>)
 8015888:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801588a:	6979      	ldr	r1, [r7, #20]
 801588c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801588e:	f7f6 fedd 	bl	800c64c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015892:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80158a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d004      	beq.n	80158b2 <ip4_frag+0x1b6>
        poff = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80158b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d196      	bne.n	80157e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80158ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80158bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80158c0:	4413      	add	r3, r2
 80158c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158c8:	f1a3 0213 	sub.w	r2, r3, #19
 80158cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158d0:	429a      	cmp	r2, r3
 80158d2:	bfcc      	ite	gt
 80158d4:	2301      	movgt	r3, #1
 80158d6:	2300      	movle	r3, #0
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80158dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80158e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80158e6:	6a3b      	ldr	r3, [r7, #32]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d002      	beq.n	80158f2 <ip4_frag+0x1f6>
 80158ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d003      	beq.n	80158fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80158f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80158f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80158fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f5 f92d 	bl	800ab5c <lwip_htons>
 8015902:	4603      	mov	r3, r0
 8015904:	461a      	mov	r2, r3
 8015906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015908:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801590a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801590c:	3314      	adds	r3, #20
 801590e:	b29b      	uxth	r3, r3
 8015910:	4618      	mov	r0, r3
 8015912:	f7f5 f923 	bl	800ab5c <lwip_htons>
 8015916:	4603      	mov	r3, r0
 8015918:	461a      	mov	r2, r3
 801591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015920:	2200      	movs	r2, #0
 8015922:	729a      	strb	r2, [r3, #10]
 8015924:	2200      	movs	r2, #0
 8015926:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	695b      	ldr	r3, [r3, #20]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015930:	68b8      	ldr	r0, [r7, #8]
 8015932:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015936:	f7f6 fdbb 	bl	800c4b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801593a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801593e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015946:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801594a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801594c:	4413      	add	r3, r2
 801594e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015952:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015956:	2b00      	cmp	r3, #0
 8015958:	f47f af19 	bne.w	801578e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801595c:	2300      	movs	r3, #0
 801595e:	e002      	b.n	8015966 <ip4_frag+0x26a>
      goto memerr;
 8015960:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015966:	4618      	mov	r0, r3
 8015968:	3748      	adds	r7, #72	; 0x48
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	0801a61c 	.word	0x0801a61c
 8015974:	0801a7f8 	.word	0x0801a7f8
 8015978:	0801a664 	.word	0x0801a664
 801597c:	0801a814 	.word	0x0801a814
 8015980:	0801a834 	.word	0x0801a834
 8015984:	08015695 	.word	0x08015695

08015988 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b086      	sub	sp, #24
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015992:	230e      	movs	r3, #14
 8015994:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	895b      	ldrh	r3, [r3, #10]
 801599a:	2b0e      	cmp	r3, #14
 801599c:	d96e      	bls.n	8015a7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	7bdb      	ldrb	r3, [r3, #15]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d106      	bne.n	80159b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80159ac:	3301      	adds	r3, #1
 80159ae:	b2da      	uxtb	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	7b1a      	ldrb	r2, [r3, #12]
 80159be:	7b5b      	ldrb	r3, [r3, #13]
 80159c0:	021b      	lsls	r3, r3, #8
 80159c2:	4313      	orrs	r3, r2
 80159c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	f003 0301 	and.w	r3, r3, #1
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d023      	beq.n	8015a1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d10f      	bne.n	80159fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	785b      	ldrb	r3, [r3, #1]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d11b      	bne.n	8015a1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159e6:	2b5e      	cmp	r3, #94	; 0x5e
 80159e8:	d117      	bne.n	8015a1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	7b5b      	ldrb	r3, [r3, #13]
 80159ee:	f043 0310 	orr.w	r3, r3, #16
 80159f2:	b2da      	uxtb	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	735a      	strb	r2, [r3, #13]
 80159f8:	e00f      	b.n	8015a1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	2206      	movs	r2, #6
 80159fe:	4928      	ldr	r1, [pc, #160]	; (8015aa0 <ethernet_input+0x118>)
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 fbee 	bl	80161e2 <memcmp>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d106      	bne.n	8015a1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	7b5b      	ldrb	r3, [r3, #13]
 8015a10:	f043 0308 	orr.w	r3, r3, #8
 8015a14:	b2da      	uxtb	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015a1a:	89fb      	ldrh	r3, [r7, #14]
 8015a1c:	2b08      	cmp	r3, #8
 8015a1e:	d003      	beq.n	8015a28 <ethernet_input+0xa0>
 8015a20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015a24:	d014      	beq.n	8015a50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015a26:	e032      	b.n	8015a8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a2e:	f003 0308 	and.w	r3, r3, #8
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d024      	beq.n	8015a80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a36:	8afb      	ldrh	r3, [r7, #22]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7f6 fcb2 	bl	800c3a4 <pbuf_remove_header>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d11e      	bne.n	8015a84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7fe ff21 	bl	8014890 <ip4_input>
      break;
 8015a4e:	e013      	b.n	8015a78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a56:	f003 0308 	and.w	r3, r3, #8
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d014      	beq.n	8015a88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a5e:	8afb      	ldrh	r3, [r7, #22]
 8015a60:	4619      	mov	r1, r3
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7f6 fc9e 	bl	800c3a4 <pbuf_remove_header>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d10e      	bne.n	8015a8c <ethernet_input+0x104>
        etharp_input(p, netif);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7fe f89b 	bl	8013bac <etharp_input>
      break;
 8015a76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e00c      	b.n	8015a96 <ethernet_input+0x10e>
    goto free_and_return;
 8015a7c:	bf00      	nop
 8015a7e:	e006      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a80:	bf00      	nop
 8015a82:	e004      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a84:	bf00      	nop
 8015a86:	e002      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a88:	bf00      	nop
 8015a8a:	e000      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7f6 fd0e 	bl	800c4b0 <pbuf_free>
  return ERR_OK;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3718      	adds	r7, #24
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	0801aa0c 	.word	0x0801aa0c

08015aa4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b086      	sub	sp, #24
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
 8015ab0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ab2:	8c3b      	ldrh	r3, [r7, #32]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f5 f851 	bl	800ab5c <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015abe:	210e      	movs	r1, #14
 8015ac0:	68b8      	ldr	r0, [r7, #8]
 8015ac2:	f7f6 fc5f 	bl	800c384 <pbuf_add_header>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d125      	bne.n	8015b18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	8afa      	ldrh	r2, [r7, #22]
 8015ad6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	2206      	movs	r2, #6
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 fc31 	bl	8016346 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	3306      	adds	r3, #6
 8015ae8:	2206      	movs	r2, #6
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f000 fc2a 	bl	8016346 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015af8:	2b06      	cmp	r3, #6
 8015afa:	d006      	beq.n	8015b0a <ethernet_output+0x66>
 8015afc:	4b0a      	ldr	r3, [pc, #40]	; (8015b28 <ethernet_output+0x84>)
 8015afe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015b02:	490a      	ldr	r1, [pc, #40]	; (8015b2c <ethernet_output+0x88>)
 8015b04:	480a      	ldr	r0, [pc, #40]	; (8015b30 <ethernet_output+0x8c>)
 8015b06:	f000 faf7 	bl	80160f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	699b      	ldr	r3, [r3, #24]
 8015b0e:	68b9      	ldr	r1, [r7, #8]
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	4798      	blx	r3
 8015b14:	4603      	mov	r3, r0
 8015b16:	e002      	b.n	8015b1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015b18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015b1a:	f06f 0301 	mvn.w	r3, #1
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3718      	adds	r7, #24
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	0801a844 	.word	0x0801a844
 8015b2c:	0801a87c 	.word	0x0801a87c
 8015b30:	0801a8b0 	.word	0x0801a8b0

08015b34 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	60bb      	str	r3, [r7, #8]
 8015b42:	2304      	movs	r3, #4
 8015b44:	60fb      	str	r3, [r7, #12]
 8015b46:	2300      	movs	r3, #0
 8015b48:	613b      	str	r3, [r7, #16]
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015b4e:	f107 0308 	add.w	r3, r7, #8
 8015b52:	2100      	movs	r1, #0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7ef fff6 	bl	8005b46 <osMessageCreate>
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d102      	bne.n	8015b6e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015b68:	f04f 33ff 	mov.w	r3, #4294967295
 8015b6c:	e000      	b.n	8015b70 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015b6e:	2300      	movs	r3, #0
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3718      	adds	r7, #24
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f0 f8bb 	bl	8005d00 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7f0 f8cc 	bl	8005d2c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015b94:	bf00      	nop
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	6839      	ldr	r1, [r7, #0]
 8015bac:	2200      	movs	r2, #0
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7ef fff2 	bl	8005b98 <osMessagePut>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d102      	bne.n	8015bc0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	73fb      	strb	r3, [r7, #15]
 8015bbe:	e001      	b.n	8015bc4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015bc0:	23ff      	movs	r3, #255	; 0xff
 8015bc2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b08c      	sub	sp, #48	; 0x30
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	61f8      	str	r0, [r7, #28]
 8015bd8:	61b9      	str	r1, [r7, #24]
 8015bda:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015bdc:	f7ef fdde 	bl	800579c <osKernelSysTick>
 8015be0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d017      	beq.n	8015c18 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015be8:	69fb      	ldr	r3, [r7, #28]
 8015bea:	6819      	ldr	r1, [r3, #0]
 8015bec:	f107 0320 	add.w	r3, r7, #32
 8015bf0:	697a      	ldr	r2, [r7, #20]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7f0 f810 	bl	8005c18 <osMessageGet>

    if(event.status == osEventMessage)
 8015bf8:	6a3b      	ldr	r3, [r7, #32]
 8015bfa:	2b10      	cmp	r3, #16
 8015bfc:	d109      	bne.n	8015c12 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c00:	461a      	mov	r2, r3
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015c06:	f7ef fdc9 	bl	800579c <osKernelSysTick>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	e019      	b.n	8015c46 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015c12:	f04f 33ff 	mov.w	r3, #4294967295
 8015c16:	e016      	b.n	8015c46 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015c18:	69fb      	ldr	r3, [r7, #28]
 8015c1a:	6819      	ldr	r1, [r3, #0]
 8015c1c:	463b      	mov	r3, r7
 8015c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7ef fff8 	bl	8005c18 <osMessageGet>
 8015c28:	f107 0320 	add.w	r3, r7, #32
 8015c2c:	463a      	mov	r2, r7
 8015c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c36:	461a      	mov	r2, r3
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015c3c:	f7ef fdae 	bl	800579c <osKernelSysTick>
 8015c40:	4602      	mov	r2, r0
 8015c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c44:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3730      	adds	r7, #48	; 0x30
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015c4e:	b580      	push	{r7, lr}
 8015c50:	b086      	sub	sp, #24
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
 8015c56:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6819      	ldr	r1, [r3, #0]
 8015c5c:	f107 030c 	add.w	r3, r7, #12
 8015c60:	2200      	movs	r2, #0
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7ef ffd8 	bl	8005c18 <osMessageGet>

  if(event.status == osEventMessage)
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	2b10      	cmp	r3, #16
 8015c6c:	d105      	bne.n	8015c7a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	461a      	mov	r2, r3
 8015c72:	683b      	ldr	r3, [r7, #0]
 8015c74:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015c76:	2300      	movs	r3, #0
 8015c78:	e001      	b.n	8015c7e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015c7a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3718      	adds	r7, #24
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015c86:	b480      	push	{r7}
 8015c88:	b083      	sub	sp, #12
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d101      	bne.n	8015c9a <sys_mbox_valid+0x14>
    return 0;
 8015c96:	2300      	movs	r3, #0
 8015c98:	e000      	b.n	8015c9c <sys_mbox_valid+0x16>
  else
    return 1;
 8015c9a:	2301      	movs	r3, #1
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	601a      	str	r2, [r3, #0]
}
 8015cb6:	bf00      	nop
 8015cb8:	370c      	adds	r7, #12
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr

08015cc2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b084      	sub	sp, #16
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
 8015cca:	460b      	mov	r3, r1
 8015ccc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015cce:	2300      	movs	r3, #0
 8015cd0:	60bb      	str	r3, [r7, #8]
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015cd6:	f107 0308 	add.w	r3, r7, #8
 8015cda:	2101      	movs	r1, #1
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7ef fe69 	bl	80059b4 <osSemaphoreCreate>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d102      	bne.n	8015cf6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	e009      	b.n	8015d0a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015cf6:	78fb      	ldrb	r3, [r7, #3]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d105      	bne.n	8015d08 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2100      	movs	r1, #0
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7ef fe88 	bl	8005a18 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015d08:	2300      	movs	r3, #0
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3710      	adds	r7, #16
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}

08015d12 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015d12:	b580      	push	{r7, lr}
 8015d14:	b084      	sub	sp, #16
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	6078      	str	r0, [r7, #4]
 8015d1a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015d1c:	f7ef fd3e 	bl	800579c <osKernelSysTick>
 8015d20:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d011      	beq.n	8015d4c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ef fe72 	bl	8005a18 <osSemaphoreWait>
 8015d34:	4603      	mov	r3, r0
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d105      	bne.n	8015d46 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015d3a:	f7ef fd2f 	bl	800579c <osKernelSysTick>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	e012      	b.n	8015d6c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d46:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4a:	e00f      	b.n	8015d6c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015d4c:	bf00      	nop
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f04f 31ff 	mov.w	r1, #4294967295
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7ef fe5e 	bl	8005a18 <osSemaphoreWait>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1f5      	bne.n	8015d4e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015d62:	f7ef fd1b 	bl	800579c <osKernelSysTick>
 8015d66:	4602      	mov	r2, r0
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3710      	adds	r7, #16
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7ef fe97 	bl	8005ab4 <osSemaphoreRelease>
}
 8015d86:	bf00      	nop
 8015d88:	3708      	adds	r7, #8
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b082      	sub	sp, #8
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7ef fec0 	bl	8005b20 <osSemaphoreDelete>
}
 8015da0:	bf00      	nop
 8015da2:	3708      	adds	r7, #8
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015da8:	b480      	push	{r7}
 8015daa:	b083      	sub	sp, #12
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <sys_sem_valid+0x14>
    return 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	e000      	b.n	8015dbe <sys_sem_valid+0x16>
  else
    return 1;
 8015dbc:	2301      	movs	r3, #1
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	370c      	adds	r7, #12
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr

08015dca <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015dca:	b480      	push	{r7}
 8015dcc:	b083      	sub	sp, #12
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	601a      	str	r2, [r3, #0]
}
 8015dd8:	bf00      	nop
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr

08015de4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015de8:	4803      	ldr	r0, [pc, #12]	; (8015df8 <sys_init+0x14>)
 8015dea:	f7ef fd47 	bl	800587c <osMutexCreate>
 8015dee:	4603      	mov	r3, r0
 8015df0:	4a02      	ldr	r2, [pc, #8]	; (8015dfc <sys_init+0x18>)
 8015df2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015df4:	bf00      	nop
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	0801aa1c 	.word	0x0801aa1c
 8015dfc:	24007604 	.word	0x24007604

08015e00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b084      	sub	sp, #16
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015e08:	2300      	movs	r3, #0
 8015e0a:	60bb      	str	r3, [r7, #8]
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015e10:	f107 0308 	add.w	r3, r7, #8
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7ef fd31 	bl	800587c <osMutexCreate>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d102      	bne.n	8015e2e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015e28:	f04f 33ff 	mov.w	r3, #4294967295
 8015e2c:	e000      	b.n	8015e30 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015e2e:	2300      	movs	r3, #0
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3710      	adds	r7, #16
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b082      	sub	sp, #8
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	f04f 31ff 	mov.w	r1, #4294967295
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7ef fd2f 	bl	80058ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015e4e:	bf00      	nop
 8015e50:	3708      	adds	r7, #8
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}

08015e56 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015e56:	b580      	push	{r7, lr}
 8015e58:	b082      	sub	sp, #8
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7ef fd70 	bl	8005948 <osMutexRelease>
}
 8015e68:	bf00      	nop
 8015e6a:	3708      	adds	r7, #8
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}

08015e70 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b08c      	sub	sp, #48	; 0x30
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	607a      	str	r2, [r7, #4]
 8015e7c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015e7e:	f107 0314 	add.w	r3, r7, #20
 8015e82:	2200      	movs	r2, #0
 8015e84:	601a      	str	r2, [r3, #0]
 8015e86:	605a      	str	r2, [r3, #4]
 8015e88:	609a      	str	r2, [r3, #8]
 8015e8a:	60da      	str	r2, [r3, #12]
 8015e8c:	611a      	str	r2, [r3, #16]
 8015e8e:	615a      	str	r2, [r3, #20]
 8015e90:	619a      	str	r2, [r3, #24]
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	617b      	str	r3, [r7, #20]
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	61bb      	str	r3, [r7, #24]
 8015e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e9c:	b21b      	sxth	r3, r3
 8015e9e:	83bb      	strh	r3, [r7, #28]
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015ea4:	f107 0314 	add.w	r3, r7, #20
 8015ea8:	6879      	ldr	r1, [r7, #4]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f7ef fc86 	bl	80057bc <osThreadCreate>
 8015eb0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3730      	adds	r7, #48	; 0x30
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
	...

08015ebc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015ec0:	4b04      	ldr	r3, [pc, #16]	; (8015ed4 <sys_arch_protect+0x18>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7ef fcef 	bl	80058ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015ece:	2301      	movs	r3, #1
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	bd80      	pop	{r7, pc}
 8015ed4:	24007604 	.word	0x24007604

08015ed8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015ee0:	4b04      	ldr	r3, [pc, #16]	; (8015ef4 <sys_arch_unprotect+0x1c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7ef fd2f 	bl	8005948 <osMutexRelease>
}
 8015eea:	bf00      	nop
 8015eec:	3708      	adds	r7, #8
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	24007604 	.word	0x24007604

08015ef8 <rand>:
 8015ef8:	4b16      	ldr	r3, [pc, #88]	; (8015f54 <rand+0x5c>)
 8015efa:	b510      	push	{r4, lr}
 8015efc:	681c      	ldr	r4, [r3, #0]
 8015efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f00:	b9b3      	cbnz	r3, 8015f30 <rand+0x38>
 8015f02:	2018      	movs	r0, #24
 8015f04:	f000 fa98 	bl	8016438 <malloc>
 8015f08:	4602      	mov	r2, r0
 8015f0a:	6320      	str	r0, [r4, #48]	; 0x30
 8015f0c:	b920      	cbnz	r0, 8015f18 <rand+0x20>
 8015f0e:	4b12      	ldr	r3, [pc, #72]	; (8015f58 <rand+0x60>)
 8015f10:	4812      	ldr	r0, [pc, #72]	; (8015f5c <rand+0x64>)
 8015f12:	2152      	movs	r1, #82	; 0x52
 8015f14:	f000 fa26 	bl	8016364 <__assert_func>
 8015f18:	4911      	ldr	r1, [pc, #68]	; (8015f60 <rand+0x68>)
 8015f1a:	4b12      	ldr	r3, [pc, #72]	; (8015f64 <rand+0x6c>)
 8015f1c:	e9c0 1300 	strd	r1, r3, [r0]
 8015f20:	4b11      	ldr	r3, [pc, #68]	; (8015f68 <rand+0x70>)
 8015f22:	6083      	str	r3, [r0, #8]
 8015f24:	230b      	movs	r3, #11
 8015f26:	8183      	strh	r3, [r0, #12]
 8015f28:	2100      	movs	r1, #0
 8015f2a:	2001      	movs	r0, #1
 8015f2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015f30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015f32:	480e      	ldr	r0, [pc, #56]	; (8015f6c <rand+0x74>)
 8015f34:	690b      	ldr	r3, [r1, #16]
 8015f36:	694c      	ldr	r4, [r1, #20]
 8015f38:	4a0d      	ldr	r2, [pc, #52]	; (8015f70 <rand+0x78>)
 8015f3a:	4358      	muls	r0, r3
 8015f3c:	fb02 0004 	mla	r0, r2, r4, r0
 8015f40:	fba3 3202 	umull	r3, r2, r3, r2
 8015f44:	3301      	adds	r3, #1
 8015f46:	eb40 0002 	adc.w	r0, r0, r2
 8015f4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015f4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015f52:	bd10      	pop	{r4, pc}
 8015f54:	2400008c 	.word	0x2400008c
 8015f58:	0801aa24 	.word	0x0801aa24
 8015f5c:	0801aa3b 	.word	0x0801aa3b
 8015f60:	abcd330e 	.word	0xabcd330e
 8015f64:	e66d1234 	.word	0xe66d1234
 8015f68:	0005deec 	.word	0x0005deec
 8015f6c:	5851f42d 	.word	0x5851f42d
 8015f70:	4c957f2d 	.word	0x4c957f2d

08015f74 <std>:
 8015f74:	2300      	movs	r3, #0
 8015f76:	b510      	push	{r4, lr}
 8015f78:	4604      	mov	r4, r0
 8015f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8015f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f82:	6083      	str	r3, [r0, #8]
 8015f84:	8181      	strh	r1, [r0, #12]
 8015f86:	6643      	str	r3, [r0, #100]	; 0x64
 8015f88:	81c2      	strh	r2, [r0, #14]
 8015f8a:	6183      	str	r3, [r0, #24]
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	2208      	movs	r2, #8
 8015f90:	305c      	adds	r0, #92	; 0x5c
 8015f92:	f000 f950 	bl	8016236 <memset>
 8015f96:	4b0d      	ldr	r3, [pc, #52]	; (8015fcc <std+0x58>)
 8015f98:	6263      	str	r3, [r4, #36]	; 0x24
 8015f9a:	4b0d      	ldr	r3, [pc, #52]	; (8015fd0 <std+0x5c>)
 8015f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f9e:	4b0d      	ldr	r3, [pc, #52]	; (8015fd4 <std+0x60>)
 8015fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015fa2:	4b0d      	ldr	r3, [pc, #52]	; (8015fd8 <std+0x64>)
 8015fa4:	6323      	str	r3, [r4, #48]	; 0x30
 8015fa6:	4b0d      	ldr	r3, [pc, #52]	; (8015fdc <std+0x68>)
 8015fa8:	6224      	str	r4, [r4, #32]
 8015faa:	429c      	cmp	r4, r3
 8015fac:	d006      	beq.n	8015fbc <std+0x48>
 8015fae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015fb2:	4294      	cmp	r4, r2
 8015fb4:	d002      	beq.n	8015fbc <std+0x48>
 8015fb6:	33d0      	adds	r3, #208	; 0xd0
 8015fb8:	429c      	cmp	r4, r3
 8015fba:	d105      	bne.n	8015fc8 <std+0x54>
 8015fbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fc4:	f000 b9bc 	b.w	8016340 <__retarget_lock_init_recursive>
 8015fc8:	bd10      	pop	{r4, pc}
 8015fca:	bf00      	nop
 8015fcc:	0801615d 	.word	0x0801615d
 8015fd0:	0801617f 	.word	0x0801617f
 8015fd4:	080161b7 	.word	0x080161b7
 8015fd8:	080161db 	.word	0x080161db
 8015fdc:	24007608 	.word	0x24007608

08015fe0 <stdio_exit_handler>:
 8015fe0:	4a02      	ldr	r2, [pc, #8]	; (8015fec <stdio_exit_handler+0xc>)
 8015fe2:	4903      	ldr	r1, [pc, #12]	; (8015ff0 <stdio_exit_handler+0x10>)
 8015fe4:	4803      	ldr	r0, [pc, #12]	; (8015ff4 <stdio_exit_handler+0x14>)
 8015fe6:	f000 b869 	b.w	80160bc <_fwalk_sglue>
 8015fea:	bf00      	nop
 8015fec:	24000034 	.word	0x24000034
 8015ff0:	08016f05 	.word	0x08016f05
 8015ff4:	24000040 	.word	0x24000040

08015ff8 <cleanup_stdio>:
 8015ff8:	6841      	ldr	r1, [r0, #4]
 8015ffa:	4b0c      	ldr	r3, [pc, #48]	; (801602c <cleanup_stdio+0x34>)
 8015ffc:	4299      	cmp	r1, r3
 8015ffe:	b510      	push	{r4, lr}
 8016000:	4604      	mov	r4, r0
 8016002:	d001      	beq.n	8016008 <cleanup_stdio+0x10>
 8016004:	f000 ff7e 	bl	8016f04 <_fflush_r>
 8016008:	68a1      	ldr	r1, [r4, #8]
 801600a:	4b09      	ldr	r3, [pc, #36]	; (8016030 <cleanup_stdio+0x38>)
 801600c:	4299      	cmp	r1, r3
 801600e:	d002      	beq.n	8016016 <cleanup_stdio+0x1e>
 8016010:	4620      	mov	r0, r4
 8016012:	f000 ff77 	bl	8016f04 <_fflush_r>
 8016016:	68e1      	ldr	r1, [r4, #12]
 8016018:	4b06      	ldr	r3, [pc, #24]	; (8016034 <cleanup_stdio+0x3c>)
 801601a:	4299      	cmp	r1, r3
 801601c:	d004      	beq.n	8016028 <cleanup_stdio+0x30>
 801601e:	4620      	mov	r0, r4
 8016020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016024:	f000 bf6e 	b.w	8016f04 <_fflush_r>
 8016028:	bd10      	pop	{r4, pc}
 801602a:	bf00      	nop
 801602c:	24007608 	.word	0x24007608
 8016030:	24007670 	.word	0x24007670
 8016034:	240076d8 	.word	0x240076d8

08016038 <global_stdio_init.part.0>:
 8016038:	b510      	push	{r4, lr}
 801603a:	4b0b      	ldr	r3, [pc, #44]	; (8016068 <global_stdio_init.part.0+0x30>)
 801603c:	4c0b      	ldr	r4, [pc, #44]	; (801606c <global_stdio_init.part.0+0x34>)
 801603e:	4a0c      	ldr	r2, [pc, #48]	; (8016070 <global_stdio_init.part.0+0x38>)
 8016040:	601a      	str	r2, [r3, #0]
 8016042:	4620      	mov	r0, r4
 8016044:	2200      	movs	r2, #0
 8016046:	2104      	movs	r1, #4
 8016048:	f7ff ff94 	bl	8015f74 <std>
 801604c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016050:	2201      	movs	r2, #1
 8016052:	2109      	movs	r1, #9
 8016054:	f7ff ff8e 	bl	8015f74 <std>
 8016058:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801605c:	2202      	movs	r2, #2
 801605e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016062:	2112      	movs	r1, #18
 8016064:	f7ff bf86 	b.w	8015f74 <std>
 8016068:	24007740 	.word	0x24007740
 801606c:	24007608 	.word	0x24007608
 8016070:	08015fe1 	.word	0x08015fe1

08016074 <__sfp_lock_acquire>:
 8016074:	4801      	ldr	r0, [pc, #4]	; (801607c <__sfp_lock_acquire+0x8>)
 8016076:	f000 b964 	b.w	8016342 <__retarget_lock_acquire_recursive>
 801607a:	bf00      	nop
 801607c:	24007749 	.word	0x24007749

08016080 <__sfp_lock_release>:
 8016080:	4801      	ldr	r0, [pc, #4]	; (8016088 <__sfp_lock_release+0x8>)
 8016082:	f000 b95f 	b.w	8016344 <__retarget_lock_release_recursive>
 8016086:	bf00      	nop
 8016088:	24007749 	.word	0x24007749

0801608c <__sinit>:
 801608c:	b510      	push	{r4, lr}
 801608e:	4604      	mov	r4, r0
 8016090:	f7ff fff0 	bl	8016074 <__sfp_lock_acquire>
 8016094:	6a23      	ldr	r3, [r4, #32]
 8016096:	b11b      	cbz	r3, 80160a0 <__sinit+0x14>
 8016098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801609c:	f7ff bff0 	b.w	8016080 <__sfp_lock_release>
 80160a0:	4b04      	ldr	r3, [pc, #16]	; (80160b4 <__sinit+0x28>)
 80160a2:	6223      	str	r3, [r4, #32]
 80160a4:	4b04      	ldr	r3, [pc, #16]	; (80160b8 <__sinit+0x2c>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d1f5      	bne.n	8016098 <__sinit+0xc>
 80160ac:	f7ff ffc4 	bl	8016038 <global_stdio_init.part.0>
 80160b0:	e7f2      	b.n	8016098 <__sinit+0xc>
 80160b2:	bf00      	nop
 80160b4:	08015ff9 	.word	0x08015ff9
 80160b8:	24007740 	.word	0x24007740

080160bc <_fwalk_sglue>:
 80160bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c0:	4607      	mov	r7, r0
 80160c2:	4688      	mov	r8, r1
 80160c4:	4614      	mov	r4, r2
 80160c6:	2600      	movs	r6, #0
 80160c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160cc:	f1b9 0901 	subs.w	r9, r9, #1
 80160d0:	d505      	bpl.n	80160de <_fwalk_sglue+0x22>
 80160d2:	6824      	ldr	r4, [r4, #0]
 80160d4:	2c00      	cmp	r4, #0
 80160d6:	d1f7      	bne.n	80160c8 <_fwalk_sglue+0xc>
 80160d8:	4630      	mov	r0, r6
 80160da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160de:	89ab      	ldrh	r3, [r5, #12]
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d907      	bls.n	80160f4 <_fwalk_sglue+0x38>
 80160e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160e8:	3301      	adds	r3, #1
 80160ea:	d003      	beq.n	80160f4 <_fwalk_sglue+0x38>
 80160ec:	4629      	mov	r1, r5
 80160ee:	4638      	mov	r0, r7
 80160f0:	47c0      	blx	r8
 80160f2:	4306      	orrs	r6, r0
 80160f4:	3568      	adds	r5, #104	; 0x68
 80160f6:	e7e9      	b.n	80160cc <_fwalk_sglue+0x10>

080160f8 <iprintf>:
 80160f8:	b40f      	push	{r0, r1, r2, r3}
 80160fa:	b507      	push	{r0, r1, r2, lr}
 80160fc:	4906      	ldr	r1, [pc, #24]	; (8016118 <iprintf+0x20>)
 80160fe:	ab04      	add	r3, sp, #16
 8016100:	6808      	ldr	r0, [r1, #0]
 8016102:	f853 2b04 	ldr.w	r2, [r3], #4
 8016106:	6881      	ldr	r1, [r0, #8]
 8016108:	9301      	str	r3, [sp, #4]
 801610a:	f000 fbcb 	bl	80168a4 <_vfiprintf_r>
 801610e:	b003      	add	sp, #12
 8016110:	f85d eb04 	ldr.w	lr, [sp], #4
 8016114:	b004      	add	sp, #16
 8016116:	4770      	bx	lr
 8016118:	2400008c 	.word	0x2400008c

0801611c <siprintf>:
 801611c:	b40e      	push	{r1, r2, r3}
 801611e:	b500      	push	{lr}
 8016120:	b09c      	sub	sp, #112	; 0x70
 8016122:	ab1d      	add	r3, sp, #116	; 0x74
 8016124:	9002      	str	r0, [sp, #8]
 8016126:	9006      	str	r0, [sp, #24]
 8016128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801612c:	4809      	ldr	r0, [pc, #36]	; (8016154 <siprintf+0x38>)
 801612e:	9107      	str	r1, [sp, #28]
 8016130:	9104      	str	r1, [sp, #16]
 8016132:	4909      	ldr	r1, [pc, #36]	; (8016158 <siprintf+0x3c>)
 8016134:	f853 2b04 	ldr.w	r2, [r3], #4
 8016138:	9105      	str	r1, [sp, #20]
 801613a:	6800      	ldr	r0, [r0, #0]
 801613c:	9301      	str	r3, [sp, #4]
 801613e:	a902      	add	r1, sp, #8
 8016140:	f000 fa88 	bl	8016654 <_svfiprintf_r>
 8016144:	9b02      	ldr	r3, [sp, #8]
 8016146:	2200      	movs	r2, #0
 8016148:	701a      	strb	r2, [r3, #0]
 801614a:	b01c      	add	sp, #112	; 0x70
 801614c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016150:	b003      	add	sp, #12
 8016152:	4770      	bx	lr
 8016154:	2400008c 	.word	0x2400008c
 8016158:	ffff0208 	.word	0xffff0208

0801615c <__sread>:
 801615c:	b510      	push	{r4, lr}
 801615e:	460c      	mov	r4, r1
 8016160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016164:	f000 f8a4 	bl	80162b0 <_read_r>
 8016168:	2800      	cmp	r0, #0
 801616a:	bfab      	itete	ge
 801616c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801616e:	89a3      	ldrhlt	r3, [r4, #12]
 8016170:	181b      	addge	r3, r3, r0
 8016172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016176:	bfac      	ite	ge
 8016178:	6563      	strge	r3, [r4, #84]	; 0x54
 801617a:	81a3      	strhlt	r3, [r4, #12]
 801617c:	bd10      	pop	{r4, pc}

0801617e <__swrite>:
 801617e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016182:	461f      	mov	r7, r3
 8016184:	898b      	ldrh	r3, [r1, #12]
 8016186:	05db      	lsls	r3, r3, #23
 8016188:	4605      	mov	r5, r0
 801618a:	460c      	mov	r4, r1
 801618c:	4616      	mov	r6, r2
 801618e:	d505      	bpl.n	801619c <__swrite+0x1e>
 8016190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016194:	2302      	movs	r3, #2
 8016196:	2200      	movs	r2, #0
 8016198:	f000 f878 	bl	801628c <_lseek_r>
 801619c:	89a3      	ldrh	r3, [r4, #12]
 801619e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80161a6:	81a3      	strh	r3, [r4, #12]
 80161a8:	4632      	mov	r2, r6
 80161aa:	463b      	mov	r3, r7
 80161ac:	4628      	mov	r0, r5
 80161ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161b2:	f000 b88f 	b.w	80162d4 <_write_r>

080161b6 <__sseek>:
 80161b6:	b510      	push	{r4, lr}
 80161b8:	460c      	mov	r4, r1
 80161ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161be:	f000 f865 	bl	801628c <_lseek_r>
 80161c2:	1c43      	adds	r3, r0, #1
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	bf15      	itete	ne
 80161c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80161ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80161ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80161d2:	81a3      	strheq	r3, [r4, #12]
 80161d4:	bf18      	it	ne
 80161d6:	81a3      	strhne	r3, [r4, #12]
 80161d8:	bd10      	pop	{r4, pc}

080161da <__sclose>:
 80161da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161de:	f000 b845 	b.w	801626c <_close_r>

080161e2 <memcmp>:
 80161e2:	b510      	push	{r4, lr}
 80161e4:	3901      	subs	r1, #1
 80161e6:	4402      	add	r2, r0
 80161e8:	4290      	cmp	r0, r2
 80161ea:	d101      	bne.n	80161f0 <memcmp+0xe>
 80161ec:	2000      	movs	r0, #0
 80161ee:	e005      	b.n	80161fc <memcmp+0x1a>
 80161f0:	7803      	ldrb	r3, [r0, #0]
 80161f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80161f6:	42a3      	cmp	r3, r4
 80161f8:	d001      	beq.n	80161fe <memcmp+0x1c>
 80161fa:	1b18      	subs	r0, r3, r4
 80161fc:	bd10      	pop	{r4, pc}
 80161fe:	3001      	adds	r0, #1
 8016200:	e7f2      	b.n	80161e8 <memcmp+0x6>

08016202 <memmove>:
 8016202:	4288      	cmp	r0, r1
 8016204:	b510      	push	{r4, lr}
 8016206:	eb01 0402 	add.w	r4, r1, r2
 801620a:	d902      	bls.n	8016212 <memmove+0x10>
 801620c:	4284      	cmp	r4, r0
 801620e:	4623      	mov	r3, r4
 8016210:	d807      	bhi.n	8016222 <memmove+0x20>
 8016212:	1e43      	subs	r3, r0, #1
 8016214:	42a1      	cmp	r1, r4
 8016216:	d008      	beq.n	801622a <memmove+0x28>
 8016218:	f811 2b01 	ldrb.w	r2, [r1], #1
 801621c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016220:	e7f8      	b.n	8016214 <memmove+0x12>
 8016222:	4402      	add	r2, r0
 8016224:	4601      	mov	r1, r0
 8016226:	428a      	cmp	r2, r1
 8016228:	d100      	bne.n	801622c <memmove+0x2a>
 801622a:	bd10      	pop	{r4, pc}
 801622c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016230:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016234:	e7f7      	b.n	8016226 <memmove+0x24>

08016236 <memset>:
 8016236:	4402      	add	r2, r0
 8016238:	4603      	mov	r3, r0
 801623a:	4293      	cmp	r3, r2
 801623c:	d100      	bne.n	8016240 <memset+0xa>
 801623e:	4770      	bx	lr
 8016240:	f803 1b01 	strb.w	r1, [r3], #1
 8016244:	e7f9      	b.n	801623a <memset+0x4>

08016246 <strncpy>:
 8016246:	b510      	push	{r4, lr}
 8016248:	3901      	subs	r1, #1
 801624a:	4603      	mov	r3, r0
 801624c:	b132      	cbz	r2, 801625c <strncpy+0x16>
 801624e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016252:	f803 4b01 	strb.w	r4, [r3], #1
 8016256:	3a01      	subs	r2, #1
 8016258:	2c00      	cmp	r4, #0
 801625a:	d1f7      	bne.n	801624c <strncpy+0x6>
 801625c:	441a      	add	r2, r3
 801625e:	2100      	movs	r1, #0
 8016260:	4293      	cmp	r3, r2
 8016262:	d100      	bne.n	8016266 <strncpy+0x20>
 8016264:	bd10      	pop	{r4, pc}
 8016266:	f803 1b01 	strb.w	r1, [r3], #1
 801626a:	e7f9      	b.n	8016260 <strncpy+0x1a>

0801626c <_close_r>:
 801626c:	b538      	push	{r3, r4, r5, lr}
 801626e:	4d06      	ldr	r5, [pc, #24]	; (8016288 <_close_r+0x1c>)
 8016270:	2300      	movs	r3, #0
 8016272:	4604      	mov	r4, r0
 8016274:	4608      	mov	r0, r1
 8016276:	602b      	str	r3, [r5, #0]
 8016278:	f7ea fc3b 	bl	8000af2 <_close>
 801627c:	1c43      	adds	r3, r0, #1
 801627e:	d102      	bne.n	8016286 <_close_r+0x1a>
 8016280:	682b      	ldr	r3, [r5, #0]
 8016282:	b103      	cbz	r3, 8016286 <_close_r+0x1a>
 8016284:	6023      	str	r3, [r4, #0]
 8016286:	bd38      	pop	{r3, r4, r5, pc}
 8016288:	24007744 	.word	0x24007744

0801628c <_lseek_r>:
 801628c:	b538      	push	{r3, r4, r5, lr}
 801628e:	4d07      	ldr	r5, [pc, #28]	; (80162ac <_lseek_r+0x20>)
 8016290:	4604      	mov	r4, r0
 8016292:	4608      	mov	r0, r1
 8016294:	4611      	mov	r1, r2
 8016296:	2200      	movs	r2, #0
 8016298:	602a      	str	r2, [r5, #0]
 801629a:	461a      	mov	r2, r3
 801629c:	f7ea fc50 	bl	8000b40 <_lseek>
 80162a0:	1c43      	adds	r3, r0, #1
 80162a2:	d102      	bne.n	80162aa <_lseek_r+0x1e>
 80162a4:	682b      	ldr	r3, [r5, #0]
 80162a6:	b103      	cbz	r3, 80162aa <_lseek_r+0x1e>
 80162a8:	6023      	str	r3, [r4, #0]
 80162aa:	bd38      	pop	{r3, r4, r5, pc}
 80162ac:	24007744 	.word	0x24007744

080162b0 <_read_r>:
 80162b0:	b538      	push	{r3, r4, r5, lr}
 80162b2:	4d07      	ldr	r5, [pc, #28]	; (80162d0 <_read_r+0x20>)
 80162b4:	4604      	mov	r4, r0
 80162b6:	4608      	mov	r0, r1
 80162b8:	4611      	mov	r1, r2
 80162ba:	2200      	movs	r2, #0
 80162bc:	602a      	str	r2, [r5, #0]
 80162be:	461a      	mov	r2, r3
 80162c0:	f7ea fbde 	bl	8000a80 <_read>
 80162c4:	1c43      	adds	r3, r0, #1
 80162c6:	d102      	bne.n	80162ce <_read_r+0x1e>
 80162c8:	682b      	ldr	r3, [r5, #0]
 80162ca:	b103      	cbz	r3, 80162ce <_read_r+0x1e>
 80162cc:	6023      	str	r3, [r4, #0]
 80162ce:	bd38      	pop	{r3, r4, r5, pc}
 80162d0:	24007744 	.word	0x24007744

080162d4 <_write_r>:
 80162d4:	b538      	push	{r3, r4, r5, lr}
 80162d6:	4d07      	ldr	r5, [pc, #28]	; (80162f4 <_write_r+0x20>)
 80162d8:	4604      	mov	r4, r0
 80162da:	4608      	mov	r0, r1
 80162dc:	4611      	mov	r1, r2
 80162de:	2200      	movs	r2, #0
 80162e0:	602a      	str	r2, [r5, #0]
 80162e2:	461a      	mov	r2, r3
 80162e4:	f7ea fbe9 	bl	8000aba <_write>
 80162e8:	1c43      	adds	r3, r0, #1
 80162ea:	d102      	bne.n	80162f2 <_write_r+0x1e>
 80162ec:	682b      	ldr	r3, [r5, #0]
 80162ee:	b103      	cbz	r3, 80162f2 <_write_r+0x1e>
 80162f0:	6023      	str	r3, [r4, #0]
 80162f2:	bd38      	pop	{r3, r4, r5, pc}
 80162f4:	24007744 	.word	0x24007744

080162f8 <__libc_init_array>:
 80162f8:	b570      	push	{r4, r5, r6, lr}
 80162fa:	4d0d      	ldr	r5, [pc, #52]	; (8016330 <__libc_init_array+0x38>)
 80162fc:	4c0d      	ldr	r4, [pc, #52]	; (8016334 <__libc_init_array+0x3c>)
 80162fe:	1b64      	subs	r4, r4, r5
 8016300:	10a4      	asrs	r4, r4, #2
 8016302:	2600      	movs	r6, #0
 8016304:	42a6      	cmp	r6, r4
 8016306:	d109      	bne.n	801631c <__libc_init_array+0x24>
 8016308:	4d0b      	ldr	r5, [pc, #44]	; (8016338 <__libc_init_array+0x40>)
 801630a:	4c0c      	ldr	r4, [pc, #48]	; (801633c <__libc_init_array+0x44>)
 801630c:	f000 ffe0 	bl	80172d0 <_init>
 8016310:	1b64      	subs	r4, r4, r5
 8016312:	10a4      	asrs	r4, r4, #2
 8016314:	2600      	movs	r6, #0
 8016316:	42a6      	cmp	r6, r4
 8016318:	d105      	bne.n	8016326 <__libc_init_array+0x2e>
 801631a:	bd70      	pop	{r4, r5, r6, pc}
 801631c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016320:	4798      	blx	r3
 8016322:	3601      	adds	r6, #1
 8016324:	e7ee      	b.n	8016304 <__libc_init_array+0xc>
 8016326:	f855 3b04 	ldr.w	r3, [r5], #4
 801632a:	4798      	blx	r3
 801632c:	3601      	adds	r6, #1
 801632e:	e7f2      	b.n	8016316 <__libc_init_array+0x1e>
 8016330:	0801ab04 	.word	0x0801ab04
 8016334:	0801ab04 	.word	0x0801ab04
 8016338:	0801ab04 	.word	0x0801ab04
 801633c:	0801ab08 	.word	0x0801ab08

08016340 <__retarget_lock_init_recursive>:
 8016340:	4770      	bx	lr

08016342 <__retarget_lock_acquire_recursive>:
 8016342:	4770      	bx	lr

08016344 <__retarget_lock_release_recursive>:
 8016344:	4770      	bx	lr

08016346 <memcpy>:
 8016346:	440a      	add	r2, r1
 8016348:	4291      	cmp	r1, r2
 801634a:	f100 33ff 	add.w	r3, r0, #4294967295
 801634e:	d100      	bne.n	8016352 <memcpy+0xc>
 8016350:	4770      	bx	lr
 8016352:	b510      	push	{r4, lr}
 8016354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016358:	f803 4f01 	strb.w	r4, [r3, #1]!
 801635c:	4291      	cmp	r1, r2
 801635e:	d1f9      	bne.n	8016354 <memcpy+0xe>
 8016360:	bd10      	pop	{r4, pc}
	...

08016364 <__assert_func>:
 8016364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016366:	4614      	mov	r4, r2
 8016368:	461a      	mov	r2, r3
 801636a:	4b09      	ldr	r3, [pc, #36]	; (8016390 <__assert_func+0x2c>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	4605      	mov	r5, r0
 8016370:	68d8      	ldr	r0, [r3, #12]
 8016372:	b14c      	cbz	r4, 8016388 <__assert_func+0x24>
 8016374:	4b07      	ldr	r3, [pc, #28]	; (8016394 <__assert_func+0x30>)
 8016376:	9100      	str	r1, [sp, #0]
 8016378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801637c:	4906      	ldr	r1, [pc, #24]	; (8016398 <__assert_func+0x34>)
 801637e:	462b      	mov	r3, r5
 8016380:	f000 fde8 	bl	8016f54 <fiprintf>
 8016384:	f000 fe9e 	bl	80170c4 <abort>
 8016388:	4b04      	ldr	r3, [pc, #16]	; (801639c <__assert_func+0x38>)
 801638a:	461c      	mov	r4, r3
 801638c:	e7f3      	b.n	8016376 <__assert_func+0x12>
 801638e:	bf00      	nop
 8016390:	2400008c 	.word	0x2400008c
 8016394:	0801aa93 	.word	0x0801aa93
 8016398:	0801aaa0 	.word	0x0801aaa0
 801639c:	0801aace 	.word	0x0801aace

080163a0 <_free_r>:
 80163a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163a2:	2900      	cmp	r1, #0
 80163a4:	d044      	beq.n	8016430 <_free_r+0x90>
 80163a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163aa:	9001      	str	r0, [sp, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	f1a1 0404 	sub.w	r4, r1, #4
 80163b2:	bfb8      	it	lt
 80163b4:	18e4      	addlt	r4, r4, r3
 80163b6:	f000 f8e7 	bl	8016588 <__malloc_lock>
 80163ba:	4a1e      	ldr	r2, [pc, #120]	; (8016434 <_free_r+0x94>)
 80163bc:	9801      	ldr	r0, [sp, #4]
 80163be:	6813      	ldr	r3, [r2, #0]
 80163c0:	b933      	cbnz	r3, 80163d0 <_free_r+0x30>
 80163c2:	6063      	str	r3, [r4, #4]
 80163c4:	6014      	str	r4, [r2, #0]
 80163c6:	b003      	add	sp, #12
 80163c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163cc:	f000 b8e2 	b.w	8016594 <__malloc_unlock>
 80163d0:	42a3      	cmp	r3, r4
 80163d2:	d908      	bls.n	80163e6 <_free_r+0x46>
 80163d4:	6825      	ldr	r5, [r4, #0]
 80163d6:	1961      	adds	r1, r4, r5
 80163d8:	428b      	cmp	r3, r1
 80163da:	bf01      	itttt	eq
 80163dc:	6819      	ldreq	r1, [r3, #0]
 80163de:	685b      	ldreq	r3, [r3, #4]
 80163e0:	1949      	addeq	r1, r1, r5
 80163e2:	6021      	streq	r1, [r4, #0]
 80163e4:	e7ed      	b.n	80163c2 <_free_r+0x22>
 80163e6:	461a      	mov	r2, r3
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	b10b      	cbz	r3, 80163f0 <_free_r+0x50>
 80163ec:	42a3      	cmp	r3, r4
 80163ee:	d9fa      	bls.n	80163e6 <_free_r+0x46>
 80163f0:	6811      	ldr	r1, [r2, #0]
 80163f2:	1855      	adds	r5, r2, r1
 80163f4:	42a5      	cmp	r5, r4
 80163f6:	d10b      	bne.n	8016410 <_free_r+0x70>
 80163f8:	6824      	ldr	r4, [r4, #0]
 80163fa:	4421      	add	r1, r4
 80163fc:	1854      	adds	r4, r2, r1
 80163fe:	42a3      	cmp	r3, r4
 8016400:	6011      	str	r1, [r2, #0]
 8016402:	d1e0      	bne.n	80163c6 <_free_r+0x26>
 8016404:	681c      	ldr	r4, [r3, #0]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	6053      	str	r3, [r2, #4]
 801640a:	440c      	add	r4, r1
 801640c:	6014      	str	r4, [r2, #0]
 801640e:	e7da      	b.n	80163c6 <_free_r+0x26>
 8016410:	d902      	bls.n	8016418 <_free_r+0x78>
 8016412:	230c      	movs	r3, #12
 8016414:	6003      	str	r3, [r0, #0]
 8016416:	e7d6      	b.n	80163c6 <_free_r+0x26>
 8016418:	6825      	ldr	r5, [r4, #0]
 801641a:	1961      	adds	r1, r4, r5
 801641c:	428b      	cmp	r3, r1
 801641e:	bf04      	itt	eq
 8016420:	6819      	ldreq	r1, [r3, #0]
 8016422:	685b      	ldreq	r3, [r3, #4]
 8016424:	6063      	str	r3, [r4, #4]
 8016426:	bf04      	itt	eq
 8016428:	1949      	addeq	r1, r1, r5
 801642a:	6021      	streq	r1, [r4, #0]
 801642c:	6054      	str	r4, [r2, #4]
 801642e:	e7ca      	b.n	80163c6 <_free_r+0x26>
 8016430:	b003      	add	sp, #12
 8016432:	bd30      	pop	{r4, r5, pc}
 8016434:	2400774c 	.word	0x2400774c

08016438 <malloc>:
 8016438:	4b02      	ldr	r3, [pc, #8]	; (8016444 <malloc+0xc>)
 801643a:	4601      	mov	r1, r0
 801643c:	6818      	ldr	r0, [r3, #0]
 801643e:	f000 b823 	b.w	8016488 <_malloc_r>
 8016442:	bf00      	nop
 8016444:	2400008c 	.word	0x2400008c

08016448 <sbrk_aligned>:
 8016448:	b570      	push	{r4, r5, r6, lr}
 801644a:	4e0e      	ldr	r6, [pc, #56]	; (8016484 <sbrk_aligned+0x3c>)
 801644c:	460c      	mov	r4, r1
 801644e:	6831      	ldr	r1, [r6, #0]
 8016450:	4605      	mov	r5, r0
 8016452:	b911      	cbnz	r1, 801645a <sbrk_aligned+0x12>
 8016454:	f000 fe26 	bl	80170a4 <_sbrk_r>
 8016458:	6030      	str	r0, [r6, #0]
 801645a:	4621      	mov	r1, r4
 801645c:	4628      	mov	r0, r5
 801645e:	f000 fe21 	bl	80170a4 <_sbrk_r>
 8016462:	1c43      	adds	r3, r0, #1
 8016464:	d00a      	beq.n	801647c <sbrk_aligned+0x34>
 8016466:	1cc4      	adds	r4, r0, #3
 8016468:	f024 0403 	bic.w	r4, r4, #3
 801646c:	42a0      	cmp	r0, r4
 801646e:	d007      	beq.n	8016480 <sbrk_aligned+0x38>
 8016470:	1a21      	subs	r1, r4, r0
 8016472:	4628      	mov	r0, r5
 8016474:	f000 fe16 	bl	80170a4 <_sbrk_r>
 8016478:	3001      	adds	r0, #1
 801647a:	d101      	bne.n	8016480 <sbrk_aligned+0x38>
 801647c:	f04f 34ff 	mov.w	r4, #4294967295
 8016480:	4620      	mov	r0, r4
 8016482:	bd70      	pop	{r4, r5, r6, pc}
 8016484:	24007750 	.word	0x24007750

08016488 <_malloc_r>:
 8016488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801648c:	1ccd      	adds	r5, r1, #3
 801648e:	f025 0503 	bic.w	r5, r5, #3
 8016492:	3508      	adds	r5, #8
 8016494:	2d0c      	cmp	r5, #12
 8016496:	bf38      	it	cc
 8016498:	250c      	movcc	r5, #12
 801649a:	2d00      	cmp	r5, #0
 801649c:	4607      	mov	r7, r0
 801649e:	db01      	blt.n	80164a4 <_malloc_r+0x1c>
 80164a0:	42a9      	cmp	r1, r5
 80164a2:	d905      	bls.n	80164b0 <_malloc_r+0x28>
 80164a4:	230c      	movs	r3, #12
 80164a6:	603b      	str	r3, [r7, #0]
 80164a8:	2600      	movs	r6, #0
 80164aa:	4630      	mov	r0, r6
 80164ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016584 <_malloc_r+0xfc>
 80164b4:	f000 f868 	bl	8016588 <__malloc_lock>
 80164b8:	f8d8 3000 	ldr.w	r3, [r8]
 80164bc:	461c      	mov	r4, r3
 80164be:	bb5c      	cbnz	r4, 8016518 <_malloc_r+0x90>
 80164c0:	4629      	mov	r1, r5
 80164c2:	4638      	mov	r0, r7
 80164c4:	f7ff ffc0 	bl	8016448 <sbrk_aligned>
 80164c8:	1c43      	adds	r3, r0, #1
 80164ca:	4604      	mov	r4, r0
 80164cc:	d155      	bne.n	801657a <_malloc_r+0xf2>
 80164ce:	f8d8 4000 	ldr.w	r4, [r8]
 80164d2:	4626      	mov	r6, r4
 80164d4:	2e00      	cmp	r6, #0
 80164d6:	d145      	bne.n	8016564 <_malloc_r+0xdc>
 80164d8:	2c00      	cmp	r4, #0
 80164da:	d048      	beq.n	801656e <_malloc_r+0xe6>
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	4631      	mov	r1, r6
 80164e0:	4638      	mov	r0, r7
 80164e2:	eb04 0903 	add.w	r9, r4, r3
 80164e6:	f000 fddd 	bl	80170a4 <_sbrk_r>
 80164ea:	4581      	cmp	r9, r0
 80164ec:	d13f      	bne.n	801656e <_malloc_r+0xe6>
 80164ee:	6821      	ldr	r1, [r4, #0]
 80164f0:	1a6d      	subs	r5, r5, r1
 80164f2:	4629      	mov	r1, r5
 80164f4:	4638      	mov	r0, r7
 80164f6:	f7ff ffa7 	bl	8016448 <sbrk_aligned>
 80164fa:	3001      	adds	r0, #1
 80164fc:	d037      	beq.n	801656e <_malloc_r+0xe6>
 80164fe:	6823      	ldr	r3, [r4, #0]
 8016500:	442b      	add	r3, r5
 8016502:	6023      	str	r3, [r4, #0]
 8016504:	f8d8 3000 	ldr.w	r3, [r8]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d038      	beq.n	801657e <_malloc_r+0xf6>
 801650c:	685a      	ldr	r2, [r3, #4]
 801650e:	42a2      	cmp	r2, r4
 8016510:	d12b      	bne.n	801656a <_malloc_r+0xe2>
 8016512:	2200      	movs	r2, #0
 8016514:	605a      	str	r2, [r3, #4]
 8016516:	e00f      	b.n	8016538 <_malloc_r+0xb0>
 8016518:	6822      	ldr	r2, [r4, #0]
 801651a:	1b52      	subs	r2, r2, r5
 801651c:	d41f      	bmi.n	801655e <_malloc_r+0xd6>
 801651e:	2a0b      	cmp	r2, #11
 8016520:	d917      	bls.n	8016552 <_malloc_r+0xca>
 8016522:	1961      	adds	r1, r4, r5
 8016524:	42a3      	cmp	r3, r4
 8016526:	6025      	str	r5, [r4, #0]
 8016528:	bf18      	it	ne
 801652a:	6059      	strne	r1, [r3, #4]
 801652c:	6863      	ldr	r3, [r4, #4]
 801652e:	bf08      	it	eq
 8016530:	f8c8 1000 	streq.w	r1, [r8]
 8016534:	5162      	str	r2, [r4, r5]
 8016536:	604b      	str	r3, [r1, #4]
 8016538:	4638      	mov	r0, r7
 801653a:	f104 060b 	add.w	r6, r4, #11
 801653e:	f000 f829 	bl	8016594 <__malloc_unlock>
 8016542:	f026 0607 	bic.w	r6, r6, #7
 8016546:	1d23      	adds	r3, r4, #4
 8016548:	1af2      	subs	r2, r6, r3
 801654a:	d0ae      	beq.n	80164aa <_malloc_r+0x22>
 801654c:	1b9b      	subs	r3, r3, r6
 801654e:	50a3      	str	r3, [r4, r2]
 8016550:	e7ab      	b.n	80164aa <_malloc_r+0x22>
 8016552:	42a3      	cmp	r3, r4
 8016554:	6862      	ldr	r2, [r4, #4]
 8016556:	d1dd      	bne.n	8016514 <_malloc_r+0x8c>
 8016558:	f8c8 2000 	str.w	r2, [r8]
 801655c:	e7ec      	b.n	8016538 <_malloc_r+0xb0>
 801655e:	4623      	mov	r3, r4
 8016560:	6864      	ldr	r4, [r4, #4]
 8016562:	e7ac      	b.n	80164be <_malloc_r+0x36>
 8016564:	4634      	mov	r4, r6
 8016566:	6876      	ldr	r6, [r6, #4]
 8016568:	e7b4      	b.n	80164d4 <_malloc_r+0x4c>
 801656a:	4613      	mov	r3, r2
 801656c:	e7cc      	b.n	8016508 <_malloc_r+0x80>
 801656e:	230c      	movs	r3, #12
 8016570:	603b      	str	r3, [r7, #0]
 8016572:	4638      	mov	r0, r7
 8016574:	f000 f80e 	bl	8016594 <__malloc_unlock>
 8016578:	e797      	b.n	80164aa <_malloc_r+0x22>
 801657a:	6025      	str	r5, [r4, #0]
 801657c:	e7dc      	b.n	8016538 <_malloc_r+0xb0>
 801657e:	605b      	str	r3, [r3, #4]
 8016580:	deff      	udf	#255	; 0xff
 8016582:	bf00      	nop
 8016584:	2400774c 	.word	0x2400774c

08016588 <__malloc_lock>:
 8016588:	4801      	ldr	r0, [pc, #4]	; (8016590 <__malloc_lock+0x8>)
 801658a:	f7ff beda 	b.w	8016342 <__retarget_lock_acquire_recursive>
 801658e:	bf00      	nop
 8016590:	24007748 	.word	0x24007748

08016594 <__malloc_unlock>:
 8016594:	4801      	ldr	r0, [pc, #4]	; (801659c <__malloc_unlock+0x8>)
 8016596:	f7ff bed5 	b.w	8016344 <__retarget_lock_release_recursive>
 801659a:	bf00      	nop
 801659c:	24007748 	.word	0x24007748

080165a0 <__ssputs_r>:
 80165a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165a4:	688e      	ldr	r6, [r1, #8]
 80165a6:	461f      	mov	r7, r3
 80165a8:	42be      	cmp	r6, r7
 80165aa:	680b      	ldr	r3, [r1, #0]
 80165ac:	4682      	mov	sl, r0
 80165ae:	460c      	mov	r4, r1
 80165b0:	4690      	mov	r8, r2
 80165b2:	d82c      	bhi.n	801660e <__ssputs_r+0x6e>
 80165b4:	898a      	ldrh	r2, [r1, #12]
 80165b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80165ba:	d026      	beq.n	801660a <__ssputs_r+0x6a>
 80165bc:	6965      	ldr	r5, [r4, #20]
 80165be:	6909      	ldr	r1, [r1, #16]
 80165c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165c4:	eba3 0901 	sub.w	r9, r3, r1
 80165c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80165cc:	1c7b      	adds	r3, r7, #1
 80165ce:	444b      	add	r3, r9
 80165d0:	106d      	asrs	r5, r5, #1
 80165d2:	429d      	cmp	r5, r3
 80165d4:	bf38      	it	cc
 80165d6:	461d      	movcc	r5, r3
 80165d8:	0553      	lsls	r3, r2, #21
 80165da:	d527      	bpl.n	801662c <__ssputs_r+0x8c>
 80165dc:	4629      	mov	r1, r5
 80165de:	f7ff ff53 	bl	8016488 <_malloc_r>
 80165e2:	4606      	mov	r6, r0
 80165e4:	b360      	cbz	r0, 8016640 <__ssputs_r+0xa0>
 80165e6:	6921      	ldr	r1, [r4, #16]
 80165e8:	464a      	mov	r2, r9
 80165ea:	f7ff feac 	bl	8016346 <memcpy>
 80165ee:	89a3      	ldrh	r3, [r4, #12]
 80165f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80165f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165f8:	81a3      	strh	r3, [r4, #12]
 80165fa:	6126      	str	r6, [r4, #16]
 80165fc:	6165      	str	r5, [r4, #20]
 80165fe:	444e      	add	r6, r9
 8016600:	eba5 0509 	sub.w	r5, r5, r9
 8016604:	6026      	str	r6, [r4, #0]
 8016606:	60a5      	str	r5, [r4, #8]
 8016608:	463e      	mov	r6, r7
 801660a:	42be      	cmp	r6, r7
 801660c:	d900      	bls.n	8016610 <__ssputs_r+0x70>
 801660e:	463e      	mov	r6, r7
 8016610:	6820      	ldr	r0, [r4, #0]
 8016612:	4632      	mov	r2, r6
 8016614:	4641      	mov	r1, r8
 8016616:	f7ff fdf4 	bl	8016202 <memmove>
 801661a:	68a3      	ldr	r3, [r4, #8]
 801661c:	1b9b      	subs	r3, r3, r6
 801661e:	60a3      	str	r3, [r4, #8]
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	4433      	add	r3, r6
 8016624:	6023      	str	r3, [r4, #0]
 8016626:	2000      	movs	r0, #0
 8016628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801662c:	462a      	mov	r2, r5
 801662e:	f000 fd50 	bl	80170d2 <_realloc_r>
 8016632:	4606      	mov	r6, r0
 8016634:	2800      	cmp	r0, #0
 8016636:	d1e0      	bne.n	80165fa <__ssputs_r+0x5a>
 8016638:	6921      	ldr	r1, [r4, #16]
 801663a:	4650      	mov	r0, sl
 801663c:	f7ff feb0 	bl	80163a0 <_free_r>
 8016640:	230c      	movs	r3, #12
 8016642:	f8ca 3000 	str.w	r3, [sl]
 8016646:	89a3      	ldrh	r3, [r4, #12]
 8016648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801664c:	81a3      	strh	r3, [r4, #12]
 801664e:	f04f 30ff 	mov.w	r0, #4294967295
 8016652:	e7e9      	b.n	8016628 <__ssputs_r+0x88>

08016654 <_svfiprintf_r>:
 8016654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016658:	4698      	mov	r8, r3
 801665a:	898b      	ldrh	r3, [r1, #12]
 801665c:	061b      	lsls	r3, r3, #24
 801665e:	b09d      	sub	sp, #116	; 0x74
 8016660:	4607      	mov	r7, r0
 8016662:	460d      	mov	r5, r1
 8016664:	4614      	mov	r4, r2
 8016666:	d50e      	bpl.n	8016686 <_svfiprintf_r+0x32>
 8016668:	690b      	ldr	r3, [r1, #16]
 801666a:	b963      	cbnz	r3, 8016686 <_svfiprintf_r+0x32>
 801666c:	2140      	movs	r1, #64	; 0x40
 801666e:	f7ff ff0b 	bl	8016488 <_malloc_r>
 8016672:	6028      	str	r0, [r5, #0]
 8016674:	6128      	str	r0, [r5, #16]
 8016676:	b920      	cbnz	r0, 8016682 <_svfiprintf_r+0x2e>
 8016678:	230c      	movs	r3, #12
 801667a:	603b      	str	r3, [r7, #0]
 801667c:	f04f 30ff 	mov.w	r0, #4294967295
 8016680:	e0d0      	b.n	8016824 <_svfiprintf_r+0x1d0>
 8016682:	2340      	movs	r3, #64	; 0x40
 8016684:	616b      	str	r3, [r5, #20]
 8016686:	2300      	movs	r3, #0
 8016688:	9309      	str	r3, [sp, #36]	; 0x24
 801668a:	2320      	movs	r3, #32
 801668c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016690:	f8cd 800c 	str.w	r8, [sp, #12]
 8016694:	2330      	movs	r3, #48	; 0x30
 8016696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801683c <_svfiprintf_r+0x1e8>
 801669a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801669e:	f04f 0901 	mov.w	r9, #1
 80166a2:	4623      	mov	r3, r4
 80166a4:	469a      	mov	sl, r3
 80166a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166aa:	b10a      	cbz	r2, 80166b0 <_svfiprintf_r+0x5c>
 80166ac:	2a25      	cmp	r2, #37	; 0x25
 80166ae:	d1f9      	bne.n	80166a4 <_svfiprintf_r+0x50>
 80166b0:	ebba 0b04 	subs.w	fp, sl, r4
 80166b4:	d00b      	beq.n	80166ce <_svfiprintf_r+0x7a>
 80166b6:	465b      	mov	r3, fp
 80166b8:	4622      	mov	r2, r4
 80166ba:	4629      	mov	r1, r5
 80166bc:	4638      	mov	r0, r7
 80166be:	f7ff ff6f 	bl	80165a0 <__ssputs_r>
 80166c2:	3001      	adds	r0, #1
 80166c4:	f000 80a9 	beq.w	801681a <_svfiprintf_r+0x1c6>
 80166c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166ca:	445a      	add	r2, fp
 80166cc:	9209      	str	r2, [sp, #36]	; 0x24
 80166ce:	f89a 3000 	ldrb.w	r3, [sl]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	f000 80a1 	beq.w	801681a <_svfiprintf_r+0x1c6>
 80166d8:	2300      	movs	r3, #0
 80166da:	f04f 32ff 	mov.w	r2, #4294967295
 80166de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166e2:	f10a 0a01 	add.w	sl, sl, #1
 80166e6:	9304      	str	r3, [sp, #16]
 80166e8:	9307      	str	r3, [sp, #28]
 80166ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166ee:	931a      	str	r3, [sp, #104]	; 0x68
 80166f0:	4654      	mov	r4, sl
 80166f2:	2205      	movs	r2, #5
 80166f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166f8:	4850      	ldr	r0, [pc, #320]	; (801683c <_svfiprintf_r+0x1e8>)
 80166fa:	f7e9 fdf9 	bl	80002f0 <memchr>
 80166fe:	9a04      	ldr	r2, [sp, #16]
 8016700:	b9d8      	cbnz	r0, 801673a <_svfiprintf_r+0xe6>
 8016702:	06d0      	lsls	r0, r2, #27
 8016704:	bf44      	itt	mi
 8016706:	2320      	movmi	r3, #32
 8016708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801670c:	0711      	lsls	r1, r2, #28
 801670e:	bf44      	itt	mi
 8016710:	232b      	movmi	r3, #43	; 0x2b
 8016712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016716:	f89a 3000 	ldrb.w	r3, [sl]
 801671a:	2b2a      	cmp	r3, #42	; 0x2a
 801671c:	d015      	beq.n	801674a <_svfiprintf_r+0xf6>
 801671e:	9a07      	ldr	r2, [sp, #28]
 8016720:	4654      	mov	r4, sl
 8016722:	2000      	movs	r0, #0
 8016724:	f04f 0c0a 	mov.w	ip, #10
 8016728:	4621      	mov	r1, r4
 801672a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801672e:	3b30      	subs	r3, #48	; 0x30
 8016730:	2b09      	cmp	r3, #9
 8016732:	d94d      	bls.n	80167d0 <_svfiprintf_r+0x17c>
 8016734:	b1b0      	cbz	r0, 8016764 <_svfiprintf_r+0x110>
 8016736:	9207      	str	r2, [sp, #28]
 8016738:	e014      	b.n	8016764 <_svfiprintf_r+0x110>
 801673a:	eba0 0308 	sub.w	r3, r0, r8
 801673e:	fa09 f303 	lsl.w	r3, r9, r3
 8016742:	4313      	orrs	r3, r2
 8016744:	9304      	str	r3, [sp, #16]
 8016746:	46a2      	mov	sl, r4
 8016748:	e7d2      	b.n	80166f0 <_svfiprintf_r+0x9c>
 801674a:	9b03      	ldr	r3, [sp, #12]
 801674c:	1d19      	adds	r1, r3, #4
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	9103      	str	r1, [sp, #12]
 8016752:	2b00      	cmp	r3, #0
 8016754:	bfbb      	ittet	lt
 8016756:	425b      	neglt	r3, r3
 8016758:	f042 0202 	orrlt.w	r2, r2, #2
 801675c:	9307      	strge	r3, [sp, #28]
 801675e:	9307      	strlt	r3, [sp, #28]
 8016760:	bfb8      	it	lt
 8016762:	9204      	strlt	r2, [sp, #16]
 8016764:	7823      	ldrb	r3, [r4, #0]
 8016766:	2b2e      	cmp	r3, #46	; 0x2e
 8016768:	d10c      	bne.n	8016784 <_svfiprintf_r+0x130>
 801676a:	7863      	ldrb	r3, [r4, #1]
 801676c:	2b2a      	cmp	r3, #42	; 0x2a
 801676e:	d134      	bne.n	80167da <_svfiprintf_r+0x186>
 8016770:	9b03      	ldr	r3, [sp, #12]
 8016772:	1d1a      	adds	r2, r3, #4
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	9203      	str	r2, [sp, #12]
 8016778:	2b00      	cmp	r3, #0
 801677a:	bfb8      	it	lt
 801677c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016780:	3402      	adds	r4, #2
 8016782:	9305      	str	r3, [sp, #20]
 8016784:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801684c <_svfiprintf_r+0x1f8>
 8016788:	7821      	ldrb	r1, [r4, #0]
 801678a:	2203      	movs	r2, #3
 801678c:	4650      	mov	r0, sl
 801678e:	f7e9 fdaf 	bl	80002f0 <memchr>
 8016792:	b138      	cbz	r0, 80167a4 <_svfiprintf_r+0x150>
 8016794:	9b04      	ldr	r3, [sp, #16]
 8016796:	eba0 000a 	sub.w	r0, r0, sl
 801679a:	2240      	movs	r2, #64	; 0x40
 801679c:	4082      	lsls	r2, r0
 801679e:	4313      	orrs	r3, r2
 80167a0:	3401      	adds	r4, #1
 80167a2:	9304      	str	r3, [sp, #16]
 80167a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167a8:	4825      	ldr	r0, [pc, #148]	; (8016840 <_svfiprintf_r+0x1ec>)
 80167aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167ae:	2206      	movs	r2, #6
 80167b0:	f7e9 fd9e 	bl	80002f0 <memchr>
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d038      	beq.n	801682a <_svfiprintf_r+0x1d6>
 80167b8:	4b22      	ldr	r3, [pc, #136]	; (8016844 <_svfiprintf_r+0x1f0>)
 80167ba:	bb1b      	cbnz	r3, 8016804 <_svfiprintf_r+0x1b0>
 80167bc:	9b03      	ldr	r3, [sp, #12]
 80167be:	3307      	adds	r3, #7
 80167c0:	f023 0307 	bic.w	r3, r3, #7
 80167c4:	3308      	adds	r3, #8
 80167c6:	9303      	str	r3, [sp, #12]
 80167c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ca:	4433      	add	r3, r6
 80167cc:	9309      	str	r3, [sp, #36]	; 0x24
 80167ce:	e768      	b.n	80166a2 <_svfiprintf_r+0x4e>
 80167d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80167d4:	460c      	mov	r4, r1
 80167d6:	2001      	movs	r0, #1
 80167d8:	e7a6      	b.n	8016728 <_svfiprintf_r+0xd4>
 80167da:	2300      	movs	r3, #0
 80167dc:	3401      	adds	r4, #1
 80167de:	9305      	str	r3, [sp, #20]
 80167e0:	4619      	mov	r1, r3
 80167e2:	f04f 0c0a 	mov.w	ip, #10
 80167e6:	4620      	mov	r0, r4
 80167e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167ec:	3a30      	subs	r2, #48	; 0x30
 80167ee:	2a09      	cmp	r2, #9
 80167f0:	d903      	bls.n	80167fa <_svfiprintf_r+0x1a6>
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d0c6      	beq.n	8016784 <_svfiprintf_r+0x130>
 80167f6:	9105      	str	r1, [sp, #20]
 80167f8:	e7c4      	b.n	8016784 <_svfiprintf_r+0x130>
 80167fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80167fe:	4604      	mov	r4, r0
 8016800:	2301      	movs	r3, #1
 8016802:	e7f0      	b.n	80167e6 <_svfiprintf_r+0x192>
 8016804:	ab03      	add	r3, sp, #12
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	462a      	mov	r2, r5
 801680a:	4b0f      	ldr	r3, [pc, #60]	; (8016848 <_svfiprintf_r+0x1f4>)
 801680c:	a904      	add	r1, sp, #16
 801680e:	4638      	mov	r0, r7
 8016810:	f3af 8000 	nop.w
 8016814:	1c42      	adds	r2, r0, #1
 8016816:	4606      	mov	r6, r0
 8016818:	d1d6      	bne.n	80167c8 <_svfiprintf_r+0x174>
 801681a:	89ab      	ldrh	r3, [r5, #12]
 801681c:	065b      	lsls	r3, r3, #25
 801681e:	f53f af2d 	bmi.w	801667c <_svfiprintf_r+0x28>
 8016822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016824:	b01d      	add	sp, #116	; 0x74
 8016826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801682a:	ab03      	add	r3, sp, #12
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	462a      	mov	r2, r5
 8016830:	4b05      	ldr	r3, [pc, #20]	; (8016848 <_svfiprintf_r+0x1f4>)
 8016832:	a904      	add	r1, sp, #16
 8016834:	4638      	mov	r0, r7
 8016836:	f000 f9bd 	bl	8016bb4 <_printf_i>
 801683a:	e7eb      	b.n	8016814 <_svfiprintf_r+0x1c0>
 801683c:	0801aacf 	.word	0x0801aacf
 8016840:	0801aad9 	.word	0x0801aad9
 8016844:	00000000 	.word	0x00000000
 8016848:	080165a1 	.word	0x080165a1
 801684c:	0801aad5 	.word	0x0801aad5

08016850 <__sfputc_r>:
 8016850:	6893      	ldr	r3, [r2, #8]
 8016852:	3b01      	subs	r3, #1
 8016854:	2b00      	cmp	r3, #0
 8016856:	b410      	push	{r4}
 8016858:	6093      	str	r3, [r2, #8]
 801685a:	da08      	bge.n	801686e <__sfputc_r+0x1e>
 801685c:	6994      	ldr	r4, [r2, #24]
 801685e:	42a3      	cmp	r3, r4
 8016860:	db01      	blt.n	8016866 <__sfputc_r+0x16>
 8016862:	290a      	cmp	r1, #10
 8016864:	d103      	bne.n	801686e <__sfputc_r+0x1e>
 8016866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801686a:	f000 bb85 	b.w	8016f78 <__swbuf_r>
 801686e:	6813      	ldr	r3, [r2, #0]
 8016870:	1c58      	adds	r0, r3, #1
 8016872:	6010      	str	r0, [r2, #0]
 8016874:	7019      	strb	r1, [r3, #0]
 8016876:	4608      	mov	r0, r1
 8016878:	f85d 4b04 	ldr.w	r4, [sp], #4
 801687c:	4770      	bx	lr

0801687e <__sfputs_r>:
 801687e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016880:	4606      	mov	r6, r0
 8016882:	460f      	mov	r7, r1
 8016884:	4614      	mov	r4, r2
 8016886:	18d5      	adds	r5, r2, r3
 8016888:	42ac      	cmp	r4, r5
 801688a:	d101      	bne.n	8016890 <__sfputs_r+0x12>
 801688c:	2000      	movs	r0, #0
 801688e:	e007      	b.n	80168a0 <__sfputs_r+0x22>
 8016890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016894:	463a      	mov	r2, r7
 8016896:	4630      	mov	r0, r6
 8016898:	f7ff ffda 	bl	8016850 <__sfputc_r>
 801689c:	1c43      	adds	r3, r0, #1
 801689e:	d1f3      	bne.n	8016888 <__sfputs_r+0xa>
 80168a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080168a4 <_vfiprintf_r>:
 80168a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a8:	460d      	mov	r5, r1
 80168aa:	b09d      	sub	sp, #116	; 0x74
 80168ac:	4614      	mov	r4, r2
 80168ae:	4698      	mov	r8, r3
 80168b0:	4606      	mov	r6, r0
 80168b2:	b118      	cbz	r0, 80168bc <_vfiprintf_r+0x18>
 80168b4:	6a03      	ldr	r3, [r0, #32]
 80168b6:	b90b      	cbnz	r3, 80168bc <_vfiprintf_r+0x18>
 80168b8:	f7ff fbe8 	bl	801608c <__sinit>
 80168bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168be:	07d9      	lsls	r1, r3, #31
 80168c0:	d405      	bmi.n	80168ce <_vfiprintf_r+0x2a>
 80168c2:	89ab      	ldrh	r3, [r5, #12]
 80168c4:	059a      	lsls	r2, r3, #22
 80168c6:	d402      	bmi.n	80168ce <_vfiprintf_r+0x2a>
 80168c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168ca:	f7ff fd3a 	bl	8016342 <__retarget_lock_acquire_recursive>
 80168ce:	89ab      	ldrh	r3, [r5, #12]
 80168d0:	071b      	lsls	r3, r3, #28
 80168d2:	d501      	bpl.n	80168d8 <_vfiprintf_r+0x34>
 80168d4:	692b      	ldr	r3, [r5, #16]
 80168d6:	b99b      	cbnz	r3, 8016900 <_vfiprintf_r+0x5c>
 80168d8:	4629      	mov	r1, r5
 80168da:	4630      	mov	r0, r6
 80168dc:	f000 fb8a 	bl	8016ff4 <__swsetup_r>
 80168e0:	b170      	cbz	r0, 8016900 <_vfiprintf_r+0x5c>
 80168e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168e4:	07dc      	lsls	r4, r3, #31
 80168e6:	d504      	bpl.n	80168f2 <_vfiprintf_r+0x4e>
 80168e8:	f04f 30ff 	mov.w	r0, #4294967295
 80168ec:	b01d      	add	sp, #116	; 0x74
 80168ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168f2:	89ab      	ldrh	r3, [r5, #12]
 80168f4:	0598      	lsls	r0, r3, #22
 80168f6:	d4f7      	bmi.n	80168e8 <_vfiprintf_r+0x44>
 80168f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168fa:	f7ff fd23 	bl	8016344 <__retarget_lock_release_recursive>
 80168fe:	e7f3      	b.n	80168e8 <_vfiprintf_r+0x44>
 8016900:	2300      	movs	r3, #0
 8016902:	9309      	str	r3, [sp, #36]	; 0x24
 8016904:	2320      	movs	r3, #32
 8016906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801690a:	f8cd 800c 	str.w	r8, [sp, #12]
 801690e:	2330      	movs	r3, #48	; 0x30
 8016910:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016ac4 <_vfiprintf_r+0x220>
 8016914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016918:	f04f 0901 	mov.w	r9, #1
 801691c:	4623      	mov	r3, r4
 801691e:	469a      	mov	sl, r3
 8016920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016924:	b10a      	cbz	r2, 801692a <_vfiprintf_r+0x86>
 8016926:	2a25      	cmp	r2, #37	; 0x25
 8016928:	d1f9      	bne.n	801691e <_vfiprintf_r+0x7a>
 801692a:	ebba 0b04 	subs.w	fp, sl, r4
 801692e:	d00b      	beq.n	8016948 <_vfiprintf_r+0xa4>
 8016930:	465b      	mov	r3, fp
 8016932:	4622      	mov	r2, r4
 8016934:	4629      	mov	r1, r5
 8016936:	4630      	mov	r0, r6
 8016938:	f7ff ffa1 	bl	801687e <__sfputs_r>
 801693c:	3001      	adds	r0, #1
 801693e:	f000 80a9 	beq.w	8016a94 <_vfiprintf_r+0x1f0>
 8016942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016944:	445a      	add	r2, fp
 8016946:	9209      	str	r2, [sp, #36]	; 0x24
 8016948:	f89a 3000 	ldrb.w	r3, [sl]
 801694c:	2b00      	cmp	r3, #0
 801694e:	f000 80a1 	beq.w	8016a94 <_vfiprintf_r+0x1f0>
 8016952:	2300      	movs	r3, #0
 8016954:	f04f 32ff 	mov.w	r2, #4294967295
 8016958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801695c:	f10a 0a01 	add.w	sl, sl, #1
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	9307      	str	r3, [sp, #28]
 8016964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016968:	931a      	str	r3, [sp, #104]	; 0x68
 801696a:	4654      	mov	r4, sl
 801696c:	2205      	movs	r2, #5
 801696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016972:	4854      	ldr	r0, [pc, #336]	; (8016ac4 <_vfiprintf_r+0x220>)
 8016974:	f7e9 fcbc 	bl	80002f0 <memchr>
 8016978:	9a04      	ldr	r2, [sp, #16]
 801697a:	b9d8      	cbnz	r0, 80169b4 <_vfiprintf_r+0x110>
 801697c:	06d1      	lsls	r1, r2, #27
 801697e:	bf44      	itt	mi
 8016980:	2320      	movmi	r3, #32
 8016982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016986:	0713      	lsls	r3, r2, #28
 8016988:	bf44      	itt	mi
 801698a:	232b      	movmi	r3, #43	; 0x2b
 801698c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016990:	f89a 3000 	ldrb.w	r3, [sl]
 8016994:	2b2a      	cmp	r3, #42	; 0x2a
 8016996:	d015      	beq.n	80169c4 <_vfiprintf_r+0x120>
 8016998:	9a07      	ldr	r2, [sp, #28]
 801699a:	4654      	mov	r4, sl
 801699c:	2000      	movs	r0, #0
 801699e:	f04f 0c0a 	mov.w	ip, #10
 80169a2:	4621      	mov	r1, r4
 80169a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169a8:	3b30      	subs	r3, #48	; 0x30
 80169aa:	2b09      	cmp	r3, #9
 80169ac:	d94d      	bls.n	8016a4a <_vfiprintf_r+0x1a6>
 80169ae:	b1b0      	cbz	r0, 80169de <_vfiprintf_r+0x13a>
 80169b0:	9207      	str	r2, [sp, #28]
 80169b2:	e014      	b.n	80169de <_vfiprintf_r+0x13a>
 80169b4:	eba0 0308 	sub.w	r3, r0, r8
 80169b8:	fa09 f303 	lsl.w	r3, r9, r3
 80169bc:	4313      	orrs	r3, r2
 80169be:	9304      	str	r3, [sp, #16]
 80169c0:	46a2      	mov	sl, r4
 80169c2:	e7d2      	b.n	801696a <_vfiprintf_r+0xc6>
 80169c4:	9b03      	ldr	r3, [sp, #12]
 80169c6:	1d19      	adds	r1, r3, #4
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	9103      	str	r1, [sp, #12]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	bfbb      	ittet	lt
 80169d0:	425b      	neglt	r3, r3
 80169d2:	f042 0202 	orrlt.w	r2, r2, #2
 80169d6:	9307      	strge	r3, [sp, #28]
 80169d8:	9307      	strlt	r3, [sp, #28]
 80169da:	bfb8      	it	lt
 80169dc:	9204      	strlt	r2, [sp, #16]
 80169de:	7823      	ldrb	r3, [r4, #0]
 80169e0:	2b2e      	cmp	r3, #46	; 0x2e
 80169e2:	d10c      	bne.n	80169fe <_vfiprintf_r+0x15a>
 80169e4:	7863      	ldrb	r3, [r4, #1]
 80169e6:	2b2a      	cmp	r3, #42	; 0x2a
 80169e8:	d134      	bne.n	8016a54 <_vfiprintf_r+0x1b0>
 80169ea:	9b03      	ldr	r3, [sp, #12]
 80169ec:	1d1a      	adds	r2, r3, #4
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	9203      	str	r2, [sp, #12]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	bfb8      	it	lt
 80169f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80169fa:	3402      	adds	r4, #2
 80169fc:	9305      	str	r3, [sp, #20]
 80169fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016ad4 <_vfiprintf_r+0x230>
 8016a02:	7821      	ldrb	r1, [r4, #0]
 8016a04:	2203      	movs	r2, #3
 8016a06:	4650      	mov	r0, sl
 8016a08:	f7e9 fc72 	bl	80002f0 <memchr>
 8016a0c:	b138      	cbz	r0, 8016a1e <_vfiprintf_r+0x17a>
 8016a0e:	9b04      	ldr	r3, [sp, #16]
 8016a10:	eba0 000a 	sub.w	r0, r0, sl
 8016a14:	2240      	movs	r2, #64	; 0x40
 8016a16:	4082      	lsls	r2, r0
 8016a18:	4313      	orrs	r3, r2
 8016a1a:	3401      	adds	r4, #1
 8016a1c:	9304      	str	r3, [sp, #16]
 8016a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a22:	4829      	ldr	r0, [pc, #164]	; (8016ac8 <_vfiprintf_r+0x224>)
 8016a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a28:	2206      	movs	r2, #6
 8016a2a:	f7e9 fc61 	bl	80002f0 <memchr>
 8016a2e:	2800      	cmp	r0, #0
 8016a30:	d03f      	beq.n	8016ab2 <_vfiprintf_r+0x20e>
 8016a32:	4b26      	ldr	r3, [pc, #152]	; (8016acc <_vfiprintf_r+0x228>)
 8016a34:	bb1b      	cbnz	r3, 8016a7e <_vfiprintf_r+0x1da>
 8016a36:	9b03      	ldr	r3, [sp, #12]
 8016a38:	3307      	adds	r3, #7
 8016a3a:	f023 0307 	bic.w	r3, r3, #7
 8016a3e:	3308      	adds	r3, #8
 8016a40:	9303      	str	r3, [sp, #12]
 8016a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a44:	443b      	add	r3, r7
 8016a46:	9309      	str	r3, [sp, #36]	; 0x24
 8016a48:	e768      	b.n	801691c <_vfiprintf_r+0x78>
 8016a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a4e:	460c      	mov	r4, r1
 8016a50:	2001      	movs	r0, #1
 8016a52:	e7a6      	b.n	80169a2 <_vfiprintf_r+0xfe>
 8016a54:	2300      	movs	r3, #0
 8016a56:	3401      	adds	r4, #1
 8016a58:	9305      	str	r3, [sp, #20]
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	f04f 0c0a 	mov.w	ip, #10
 8016a60:	4620      	mov	r0, r4
 8016a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a66:	3a30      	subs	r2, #48	; 0x30
 8016a68:	2a09      	cmp	r2, #9
 8016a6a:	d903      	bls.n	8016a74 <_vfiprintf_r+0x1d0>
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d0c6      	beq.n	80169fe <_vfiprintf_r+0x15a>
 8016a70:	9105      	str	r1, [sp, #20]
 8016a72:	e7c4      	b.n	80169fe <_vfiprintf_r+0x15a>
 8016a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a78:	4604      	mov	r4, r0
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e7f0      	b.n	8016a60 <_vfiprintf_r+0x1bc>
 8016a7e:	ab03      	add	r3, sp, #12
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	462a      	mov	r2, r5
 8016a84:	4b12      	ldr	r3, [pc, #72]	; (8016ad0 <_vfiprintf_r+0x22c>)
 8016a86:	a904      	add	r1, sp, #16
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f3af 8000 	nop.w
 8016a8e:	4607      	mov	r7, r0
 8016a90:	1c78      	adds	r0, r7, #1
 8016a92:	d1d6      	bne.n	8016a42 <_vfiprintf_r+0x19e>
 8016a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a96:	07d9      	lsls	r1, r3, #31
 8016a98:	d405      	bmi.n	8016aa6 <_vfiprintf_r+0x202>
 8016a9a:	89ab      	ldrh	r3, [r5, #12]
 8016a9c:	059a      	lsls	r2, r3, #22
 8016a9e:	d402      	bmi.n	8016aa6 <_vfiprintf_r+0x202>
 8016aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016aa2:	f7ff fc4f 	bl	8016344 <__retarget_lock_release_recursive>
 8016aa6:	89ab      	ldrh	r3, [r5, #12]
 8016aa8:	065b      	lsls	r3, r3, #25
 8016aaa:	f53f af1d 	bmi.w	80168e8 <_vfiprintf_r+0x44>
 8016aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ab0:	e71c      	b.n	80168ec <_vfiprintf_r+0x48>
 8016ab2:	ab03      	add	r3, sp, #12
 8016ab4:	9300      	str	r3, [sp, #0]
 8016ab6:	462a      	mov	r2, r5
 8016ab8:	4b05      	ldr	r3, [pc, #20]	; (8016ad0 <_vfiprintf_r+0x22c>)
 8016aba:	a904      	add	r1, sp, #16
 8016abc:	4630      	mov	r0, r6
 8016abe:	f000 f879 	bl	8016bb4 <_printf_i>
 8016ac2:	e7e4      	b.n	8016a8e <_vfiprintf_r+0x1ea>
 8016ac4:	0801aacf 	.word	0x0801aacf
 8016ac8:	0801aad9 	.word	0x0801aad9
 8016acc:	00000000 	.word	0x00000000
 8016ad0:	0801687f 	.word	0x0801687f
 8016ad4:	0801aad5 	.word	0x0801aad5

08016ad8 <_printf_common>:
 8016ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016adc:	4616      	mov	r6, r2
 8016ade:	4699      	mov	r9, r3
 8016ae0:	688a      	ldr	r2, [r1, #8]
 8016ae2:	690b      	ldr	r3, [r1, #16]
 8016ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016ae8:	4293      	cmp	r3, r2
 8016aea:	bfb8      	it	lt
 8016aec:	4613      	movlt	r3, r2
 8016aee:	6033      	str	r3, [r6, #0]
 8016af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016af4:	4607      	mov	r7, r0
 8016af6:	460c      	mov	r4, r1
 8016af8:	b10a      	cbz	r2, 8016afe <_printf_common+0x26>
 8016afa:	3301      	adds	r3, #1
 8016afc:	6033      	str	r3, [r6, #0]
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	0699      	lsls	r1, r3, #26
 8016b02:	bf42      	ittt	mi
 8016b04:	6833      	ldrmi	r3, [r6, #0]
 8016b06:	3302      	addmi	r3, #2
 8016b08:	6033      	strmi	r3, [r6, #0]
 8016b0a:	6825      	ldr	r5, [r4, #0]
 8016b0c:	f015 0506 	ands.w	r5, r5, #6
 8016b10:	d106      	bne.n	8016b20 <_printf_common+0x48>
 8016b12:	f104 0a19 	add.w	sl, r4, #25
 8016b16:	68e3      	ldr	r3, [r4, #12]
 8016b18:	6832      	ldr	r2, [r6, #0]
 8016b1a:	1a9b      	subs	r3, r3, r2
 8016b1c:	42ab      	cmp	r3, r5
 8016b1e:	dc26      	bgt.n	8016b6e <_printf_common+0x96>
 8016b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016b24:	1e13      	subs	r3, r2, #0
 8016b26:	6822      	ldr	r2, [r4, #0]
 8016b28:	bf18      	it	ne
 8016b2a:	2301      	movne	r3, #1
 8016b2c:	0692      	lsls	r2, r2, #26
 8016b2e:	d42b      	bmi.n	8016b88 <_printf_common+0xb0>
 8016b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b34:	4649      	mov	r1, r9
 8016b36:	4638      	mov	r0, r7
 8016b38:	47c0      	blx	r8
 8016b3a:	3001      	adds	r0, #1
 8016b3c:	d01e      	beq.n	8016b7c <_printf_common+0xa4>
 8016b3e:	6823      	ldr	r3, [r4, #0]
 8016b40:	6922      	ldr	r2, [r4, #16]
 8016b42:	f003 0306 	and.w	r3, r3, #6
 8016b46:	2b04      	cmp	r3, #4
 8016b48:	bf02      	ittt	eq
 8016b4a:	68e5      	ldreq	r5, [r4, #12]
 8016b4c:	6833      	ldreq	r3, [r6, #0]
 8016b4e:	1aed      	subeq	r5, r5, r3
 8016b50:	68a3      	ldr	r3, [r4, #8]
 8016b52:	bf0c      	ite	eq
 8016b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b58:	2500      	movne	r5, #0
 8016b5a:	4293      	cmp	r3, r2
 8016b5c:	bfc4      	itt	gt
 8016b5e:	1a9b      	subgt	r3, r3, r2
 8016b60:	18ed      	addgt	r5, r5, r3
 8016b62:	2600      	movs	r6, #0
 8016b64:	341a      	adds	r4, #26
 8016b66:	42b5      	cmp	r5, r6
 8016b68:	d11a      	bne.n	8016ba0 <_printf_common+0xc8>
 8016b6a:	2000      	movs	r0, #0
 8016b6c:	e008      	b.n	8016b80 <_printf_common+0xa8>
 8016b6e:	2301      	movs	r3, #1
 8016b70:	4652      	mov	r2, sl
 8016b72:	4649      	mov	r1, r9
 8016b74:	4638      	mov	r0, r7
 8016b76:	47c0      	blx	r8
 8016b78:	3001      	adds	r0, #1
 8016b7a:	d103      	bne.n	8016b84 <_printf_common+0xac>
 8016b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b84:	3501      	adds	r5, #1
 8016b86:	e7c6      	b.n	8016b16 <_printf_common+0x3e>
 8016b88:	18e1      	adds	r1, r4, r3
 8016b8a:	1c5a      	adds	r2, r3, #1
 8016b8c:	2030      	movs	r0, #48	; 0x30
 8016b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b92:	4422      	add	r2, r4
 8016b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016b9c:	3302      	adds	r3, #2
 8016b9e:	e7c7      	b.n	8016b30 <_printf_common+0x58>
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	4622      	mov	r2, r4
 8016ba4:	4649      	mov	r1, r9
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	47c0      	blx	r8
 8016baa:	3001      	adds	r0, #1
 8016bac:	d0e6      	beq.n	8016b7c <_printf_common+0xa4>
 8016bae:	3601      	adds	r6, #1
 8016bb0:	e7d9      	b.n	8016b66 <_printf_common+0x8e>
	...

08016bb4 <_printf_i>:
 8016bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bb8:	7e0f      	ldrb	r7, [r1, #24]
 8016bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016bbc:	2f78      	cmp	r7, #120	; 0x78
 8016bbe:	4691      	mov	r9, r2
 8016bc0:	4680      	mov	r8, r0
 8016bc2:	460c      	mov	r4, r1
 8016bc4:	469a      	mov	sl, r3
 8016bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016bca:	d807      	bhi.n	8016bdc <_printf_i+0x28>
 8016bcc:	2f62      	cmp	r7, #98	; 0x62
 8016bce:	d80a      	bhi.n	8016be6 <_printf_i+0x32>
 8016bd0:	2f00      	cmp	r7, #0
 8016bd2:	f000 80d4 	beq.w	8016d7e <_printf_i+0x1ca>
 8016bd6:	2f58      	cmp	r7, #88	; 0x58
 8016bd8:	f000 80c0 	beq.w	8016d5c <_printf_i+0x1a8>
 8016bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016be4:	e03a      	b.n	8016c5c <_printf_i+0xa8>
 8016be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016bea:	2b15      	cmp	r3, #21
 8016bec:	d8f6      	bhi.n	8016bdc <_printf_i+0x28>
 8016bee:	a101      	add	r1, pc, #4	; (adr r1, 8016bf4 <_printf_i+0x40>)
 8016bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016bf4:	08016c4d 	.word	0x08016c4d
 8016bf8:	08016c61 	.word	0x08016c61
 8016bfc:	08016bdd 	.word	0x08016bdd
 8016c00:	08016bdd 	.word	0x08016bdd
 8016c04:	08016bdd 	.word	0x08016bdd
 8016c08:	08016bdd 	.word	0x08016bdd
 8016c0c:	08016c61 	.word	0x08016c61
 8016c10:	08016bdd 	.word	0x08016bdd
 8016c14:	08016bdd 	.word	0x08016bdd
 8016c18:	08016bdd 	.word	0x08016bdd
 8016c1c:	08016bdd 	.word	0x08016bdd
 8016c20:	08016d65 	.word	0x08016d65
 8016c24:	08016c8d 	.word	0x08016c8d
 8016c28:	08016d1f 	.word	0x08016d1f
 8016c2c:	08016bdd 	.word	0x08016bdd
 8016c30:	08016bdd 	.word	0x08016bdd
 8016c34:	08016d87 	.word	0x08016d87
 8016c38:	08016bdd 	.word	0x08016bdd
 8016c3c:	08016c8d 	.word	0x08016c8d
 8016c40:	08016bdd 	.word	0x08016bdd
 8016c44:	08016bdd 	.word	0x08016bdd
 8016c48:	08016d27 	.word	0x08016d27
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	1d1a      	adds	r2, r3, #4
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	602a      	str	r2, [r5, #0]
 8016c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	e09f      	b.n	8016da0 <_printf_i+0x1ec>
 8016c60:	6820      	ldr	r0, [r4, #0]
 8016c62:	682b      	ldr	r3, [r5, #0]
 8016c64:	0607      	lsls	r7, r0, #24
 8016c66:	f103 0104 	add.w	r1, r3, #4
 8016c6a:	6029      	str	r1, [r5, #0]
 8016c6c:	d501      	bpl.n	8016c72 <_printf_i+0xbe>
 8016c6e:	681e      	ldr	r6, [r3, #0]
 8016c70:	e003      	b.n	8016c7a <_printf_i+0xc6>
 8016c72:	0646      	lsls	r6, r0, #25
 8016c74:	d5fb      	bpl.n	8016c6e <_printf_i+0xba>
 8016c76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016c7a:	2e00      	cmp	r6, #0
 8016c7c:	da03      	bge.n	8016c86 <_printf_i+0xd2>
 8016c7e:	232d      	movs	r3, #45	; 0x2d
 8016c80:	4276      	negs	r6, r6
 8016c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c86:	485a      	ldr	r0, [pc, #360]	; (8016df0 <_printf_i+0x23c>)
 8016c88:	230a      	movs	r3, #10
 8016c8a:	e012      	b.n	8016cb2 <_printf_i+0xfe>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	6820      	ldr	r0, [r4, #0]
 8016c90:	1d19      	adds	r1, r3, #4
 8016c92:	6029      	str	r1, [r5, #0]
 8016c94:	0605      	lsls	r5, r0, #24
 8016c96:	d501      	bpl.n	8016c9c <_printf_i+0xe8>
 8016c98:	681e      	ldr	r6, [r3, #0]
 8016c9a:	e002      	b.n	8016ca2 <_printf_i+0xee>
 8016c9c:	0641      	lsls	r1, r0, #25
 8016c9e:	d5fb      	bpl.n	8016c98 <_printf_i+0xe4>
 8016ca0:	881e      	ldrh	r6, [r3, #0]
 8016ca2:	4853      	ldr	r0, [pc, #332]	; (8016df0 <_printf_i+0x23c>)
 8016ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8016ca6:	bf0c      	ite	eq
 8016ca8:	2308      	moveq	r3, #8
 8016caa:	230a      	movne	r3, #10
 8016cac:	2100      	movs	r1, #0
 8016cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016cb2:	6865      	ldr	r5, [r4, #4]
 8016cb4:	60a5      	str	r5, [r4, #8]
 8016cb6:	2d00      	cmp	r5, #0
 8016cb8:	bfa2      	ittt	ge
 8016cba:	6821      	ldrge	r1, [r4, #0]
 8016cbc:	f021 0104 	bicge.w	r1, r1, #4
 8016cc0:	6021      	strge	r1, [r4, #0]
 8016cc2:	b90e      	cbnz	r6, 8016cc8 <_printf_i+0x114>
 8016cc4:	2d00      	cmp	r5, #0
 8016cc6:	d04b      	beq.n	8016d60 <_printf_i+0x1ac>
 8016cc8:	4615      	mov	r5, r2
 8016cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8016cce:	fb03 6711 	mls	r7, r3, r1, r6
 8016cd2:	5dc7      	ldrb	r7, [r0, r7]
 8016cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016cd8:	4637      	mov	r7, r6
 8016cda:	42bb      	cmp	r3, r7
 8016cdc:	460e      	mov	r6, r1
 8016cde:	d9f4      	bls.n	8016cca <_printf_i+0x116>
 8016ce0:	2b08      	cmp	r3, #8
 8016ce2:	d10b      	bne.n	8016cfc <_printf_i+0x148>
 8016ce4:	6823      	ldr	r3, [r4, #0]
 8016ce6:	07de      	lsls	r6, r3, #31
 8016ce8:	d508      	bpl.n	8016cfc <_printf_i+0x148>
 8016cea:	6923      	ldr	r3, [r4, #16]
 8016cec:	6861      	ldr	r1, [r4, #4]
 8016cee:	4299      	cmp	r1, r3
 8016cf0:	bfde      	ittt	le
 8016cf2:	2330      	movle	r3, #48	; 0x30
 8016cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016cfc:	1b52      	subs	r2, r2, r5
 8016cfe:	6122      	str	r2, [r4, #16]
 8016d00:	f8cd a000 	str.w	sl, [sp]
 8016d04:	464b      	mov	r3, r9
 8016d06:	aa03      	add	r2, sp, #12
 8016d08:	4621      	mov	r1, r4
 8016d0a:	4640      	mov	r0, r8
 8016d0c:	f7ff fee4 	bl	8016ad8 <_printf_common>
 8016d10:	3001      	adds	r0, #1
 8016d12:	d14a      	bne.n	8016daa <_printf_i+0x1f6>
 8016d14:	f04f 30ff 	mov.w	r0, #4294967295
 8016d18:	b004      	add	sp, #16
 8016d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	f043 0320 	orr.w	r3, r3, #32
 8016d24:	6023      	str	r3, [r4, #0]
 8016d26:	4833      	ldr	r0, [pc, #204]	; (8016df4 <_printf_i+0x240>)
 8016d28:	2778      	movs	r7, #120	; 0x78
 8016d2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016d2e:	6823      	ldr	r3, [r4, #0]
 8016d30:	6829      	ldr	r1, [r5, #0]
 8016d32:	061f      	lsls	r7, r3, #24
 8016d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8016d38:	d402      	bmi.n	8016d40 <_printf_i+0x18c>
 8016d3a:	065f      	lsls	r7, r3, #25
 8016d3c:	bf48      	it	mi
 8016d3e:	b2b6      	uxthmi	r6, r6
 8016d40:	07df      	lsls	r7, r3, #31
 8016d42:	bf48      	it	mi
 8016d44:	f043 0320 	orrmi.w	r3, r3, #32
 8016d48:	6029      	str	r1, [r5, #0]
 8016d4a:	bf48      	it	mi
 8016d4c:	6023      	strmi	r3, [r4, #0]
 8016d4e:	b91e      	cbnz	r6, 8016d58 <_printf_i+0x1a4>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	f023 0320 	bic.w	r3, r3, #32
 8016d56:	6023      	str	r3, [r4, #0]
 8016d58:	2310      	movs	r3, #16
 8016d5a:	e7a7      	b.n	8016cac <_printf_i+0xf8>
 8016d5c:	4824      	ldr	r0, [pc, #144]	; (8016df0 <_printf_i+0x23c>)
 8016d5e:	e7e4      	b.n	8016d2a <_printf_i+0x176>
 8016d60:	4615      	mov	r5, r2
 8016d62:	e7bd      	b.n	8016ce0 <_printf_i+0x12c>
 8016d64:	682b      	ldr	r3, [r5, #0]
 8016d66:	6826      	ldr	r6, [r4, #0]
 8016d68:	6961      	ldr	r1, [r4, #20]
 8016d6a:	1d18      	adds	r0, r3, #4
 8016d6c:	6028      	str	r0, [r5, #0]
 8016d6e:	0635      	lsls	r5, r6, #24
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	d501      	bpl.n	8016d78 <_printf_i+0x1c4>
 8016d74:	6019      	str	r1, [r3, #0]
 8016d76:	e002      	b.n	8016d7e <_printf_i+0x1ca>
 8016d78:	0670      	lsls	r0, r6, #25
 8016d7a:	d5fb      	bpl.n	8016d74 <_printf_i+0x1c0>
 8016d7c:	8019      	strh	r1, [r3, #0]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	6123      	str	r3, [r4, #16]
 8016d82:	4615      	mov	r5, r2
 8016d84:	e7bc      	b.n	8016d00 <_printf_i+0x14c>
 8016d86:	682b      	ldr	r3, [r5, #0]
 8016d88:	1d1a      	adds	r2, r3, #4
 8016d8a:	602a      	str	r2, [r5, #0]
 8016d8c:	681d      	ldr	r5, [r3, #0]
 8016d8e:	6862      	ldr	r2, [r4, #4]
 8016d90:	2100      	movs	r1, #0
 8016d92:	4628      	mov	r0, r5
 8016d94:	f7e9 faac 	bl	80002f0 <memchr>
 8016d98:	b108      	cbz	r0, 8016d9e <_printf_i+0x1ea>
 8016d9a:	1b40      	subs	r0, r0, r5
 8016d9c:	6060      	str	r0, [r4, #4]
 8016d9e:	6863      	ldr	r3, [r4, #4]
 8016da0:	6123      	str	r3, [r4, #16]
 8016da2:	2300      	movs	r3, #0
 8016da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016da8:	e7aa      	b.n	8016d00 <_printf_i+0x14c>
 8016daa:	6923      	ldr	r3, [r4, #16]
 8016dac:	462a      	mov	r2, r5
 8016dae:	4649      	mov	r1, r9
 8016db0:	4640      	mov	r0, r8
 8016db2:	47d0      	blx	sl
 8016db4:	3001      	adds	r0, #1
 8016db6:	d0ad      	beq.n	8016d14 <_printf_i+0x160>
 8016db8:	6823      	ldr	r3, [r4, #0]
 8016dba:	079b      	lsls	r3, r3, #30
 8016dbc:	d413      	bmi.n	8016de6 <_printf_i+0x232>
 8016dbe:	68e0      	ldr	r0, [r4, #12]
 8016dc0:	9b03      	ldr	r3, [sp, #12]
 8016dc2:	4298      	cmp	r0, r3
 8016dc4:	bfb8      	it	lt
 8016dc6:	4618      	movlt	r0, r3
 8016dc8:	e7a6      	b.n	8016d18 <_printf_i+0x164>
 8016dca:	2301      	movs	r3, #1
 8016dcc:	4632      	mov	r2, r6
 8016dce:	4649      	mov	r1, r9
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	47d0      	blx	sl
 8016dd4:	3001      	adds	r0, #1
 8016dd6:	d09d      	beq.n	8016d14 <_printf_i+0x160>
 8016dd8:	3501      	adds	r5, #1
 8016dda:	68e3      	ldr	r3, [r4, #12]
 8016ddc:	9903      	ldr	r1, [sp, #12]
 8016dde:	1a5b      	subs	r3, r3, r1
 8016de0:	42ab      	cmp	r3, r5
 8016de2:	dcf2      	bgt.n	8016dca <_printf_i+0x216>
 8016de4:	e7eb      	b.n	8016dbe <_printf_i+0x20a>
 8016de6:	2500      	movs	r5, #0
 8016de8:	f104 0619 	add.w	r6, r4, #25
 8016dec:	e7f5      	b.n	8016dda <_printf_i+0x226>
 8016dee:	bf00      	nop
 8016df0:	0801aae0 	.word	0x0801aae0
 8016df4:	0801aaf1 	.word	0x0801aaf1

08016df8 <__sflush_r>:
 8016df8:	898a      	ldrh	r2, [r1, #12]
 8016dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfe:	4605      	mov	r5, r0
 8016e00:	0710      	lsls	r0, r2, #28
 8016e02:	460c      	mov	r4, r1
 8016e04:	d458      	bmi.n	8016eb8 <__sflush_r+0xc0>
 8016e06:	684b      	ldr	r3, [r1, #4]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	dc05      	bgt.n	8016e18 <__sflush_r+0x20>
 8016e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	dc02      	bgt.n	8016e18 <__sflush_r+0x20>
 8016e12:	2000      	movs	r0, #0
 8016e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e1a:	2e00      	cmp	r6, #0
 8016e1c:	d0f9      	beq.n	8016e12 <__sflush_r+0x1a>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e24:	682f      	ldr	r7, [r5, #0]
 8016e26:	6a21      	ldr	r1, [r4, #32]
 8016e28:	602b      	str	r3, [r5, #0]
 8016e2a:	d032      	beq.n	8016e92 <__sflush_r+0x9a>
 8016e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e2e:	89a3      	ldrh	r3, [r4, #12]
 8016e30:	075a      	lsls	r2, r3, #29
 8016e32:	d505      	bpl.n	8016e40 <__sflush_r+0x48>
 8016e34:	6863      	ldr	r3, [r4, #4]
 8016e36:	1ac0      	subs	r0, r0, r3
 8016e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e3a:	b10b      	cbz	r3, 8016e40 <__sflush_r+0x48>
 8016e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e3e:	1ac0      	subs	r0, r0, r3
 8016e40:	2300      	movs	r3, #0
 8016e42:	4602      	mov	r2, r0
 8016e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e46:	6a21      	ldr	r1, [r4, #32]
 8016e48:	4628      	mov	r0, r5
 8016e4a:	47b0      	blx	r6
 8016e4c:	1c43      	adds	r3, r0, #1
 8016e4e:	89a3      	ldrh	r3, [r4, #12]
 8016e50:	d106      	bne.n	8016e60 <__sflush_r+0x68>
 8016e52:	6829      	ldr	r1, [r5, #0]
 8016e54:	291d      	cmp	r1, #29
 8016e56:	d82b      	bhi.n	8016eb0 <__sflush_r+0xb8>
 8016e58:	4a29      	ldr	r2, [pc, #164]	; (8016f00 <__sflush_r+0x108>)
 8016e5a:	410a      	asrs	r2, r1
 8016e5c:	07d6      	lsls	r6, r2, #31
 8016e5e:	d427      	bmi.n	8016eb0 <__sflush_r+0xb8>
 8016e60:	2200      	movs	r2, #0
 8016e62:	6062      	str	r2, [r4, #4]
 8016e64:	04d9      	lsls	r1, r3, #19
 8016e66:	6922      	ldr	r2, [r4, #16]
 8016e68:	6022      	str	r2, [r4, #0]
 8016e6a:	d504      	bpl.n	8016e76 <__sflush_r+0x7e>
 8016e6c:	1c42      	adds	r2, r0, #1
 8016e6e:	d101      	bne.n	8016e74 <__sflush_r+0x7c>
 8016e70:	682b      	ldr	r3, [r5, #0]
 8016e72:	b903      	cbnz	r3, 8016e76 <__sflush_r+0x7e>
 8016e74:	6560      	str	r0, [r4, #84]	; 0x54
 8016e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e78:	602f      	str	r7, [r5, #0]
 8016e7a:	2900      	cmp	r1, #0
 8016e7c:	d0c9      	beq.n	8016e12 <__sflush_r+0x1a>
 8016e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e82:	4299      	cmp	r1, r3
 8016e84:	d002      	beq.n	8016e8c <__sflush_r+0x94>
 8016e86:	4628      	mov	r0, r5
 8016e88:	f7ff fa8a 	bl	80163a0 <_free_r>
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8016e90:	e7c0      	b.n	8016e14 <__sflush_r+0x1c>
 8016e92:	2301      	movs	r3, #1
 8016e94:	4628      	mov	r0, r5
 8016e96:	47b0      	blx	r6
 8016e98:	1c41      	adds	r1, r0, #1
 8016e9a:	d1c8      	bne.n	8016e2e <__sflush_r+0x36>
 8016e9c:	682b      	ldr	r3, [r5, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d0c5      	beq.n	8016e2e <__sflush_r+0x36>
 8016ea2:	2b1d      	cmp	r3, #29
 8016ea4:	d001      	beq.n	8016eaa <__sflush_r+0xb2>
 8016ea6:	2b16      	cmp	r3, #22
 8016ea8:	d101      	bne.n	8016eae <__sflush_r+0xb6>
 8016eaa:	602f      	str	r7, [r5, #0]
 8016eac:	e7b1      	b.n	8016e12 <__sflush_r+0x1a>
 8016eae:	89a3      	ldrh	r3, [r4, #12]
 8016eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eb4:	81a3      	strh	r3, [r4, #12]
 8016eb6:	e7ad      	b.n	8016e14 <__sflush_r+0x1c>
 8016eb8:	690f      	ldr	r7, [r1, #16]
 8016eba:	2f00      	cmp	r7, #0
 8016ebc:	d0a9      	beq.n	8016e12 <__sflush_r+0x1a>
 8016ebe:	0793      	lsls	r3, r2, #30
 8016ec0:	680e      	ldr	r6, [r1, #0]
 8016ec2:	bf08      	it	eq
 8016ec4:	694b      	ldreq	r3, [r1, #20]
 8016ec6:	600f      	str	r7, [r1, #0]
 8016ec8:	bf18      	it	ne
 8016eca:	2300      	movne	r3, #0
 8016ecc:	eba6 0807 	sub.w	r8, r6, r7
 8016ed0:	608b      	str	r3, [r1, #8]
 8016ed2:	f1b8 0f00 	cmp.w	r8, #0
 8016ed6:	dd9c      	ble.n	8016e12 <__sflush_r+0x1a>
 8016ed8:	6a21      	ldr	r1, [r4, #32]
 8016eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016edc:	4643      	mov	r3, r8
 8016ede:	463a      	mov	r2, r7
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	47b0      	blx	r6
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	dc06      	bgt.n	8016ef6 <__sflush_r+0xfe>
 8016ee8:	89a3      	ldrh	r3, [r4, #12]
 8016eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eee:	81a3      	strh	r3, [r4, #12]
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef4:	e78e      	b.n	8016e14 <__sflush_r+0x1c>
 8016ef6:	4407      	add	r7, r0
 8016ef8:	eba8 0800 	sub.w	r8, r8, r0
 8016efc:	e7e9      	b.n	8016ed2 <__sflush_r+0xda>
 8016efe:	bf00      	nop
 8016f00:	dfbffffe 	.word	0xdfbffffe

08016f04 <_fflush_r>:
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	690b      	ldr	r3, [r1, #16]
 8016f08:	4605      	mov	r5, r0
 8016f0a:	460c      	mov	r4, r1
 8016f0c:	b913      	cbnz	r3, 8016f14 <_fflush_r+0x10>
 8016f0e:	2500      	movs	r5, #0
 8016f10:	4628      	mov	r0, r5
 8016f12:	bd38      	pop	{r3, r4, r5, pc}
 8016f14:	b118      	cbz	r0, 8016f1e <_fflush_r+0x1a>
 8016f16:	6a03      	ldr	r3, [r0, #32]
 8016f18:	b90b      	cbnz	r3, 8016f1e <_fflush_r+0x1a>
 8016f1a:	f7ff f8b7 	bl	801608c <__sinit>
 8016f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d0f3      	beq.n	8016f0e <_fflush_r+0xa>
 8016f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f28:	07d0      	lsls	r0, r2, #31
 8016f2a:	d404      	bmi.n	8016f36 <_fflush_r+0x32>
 8016f2c:	0599      	lsls	r1, r3, #22
 8016f2e:	d402      	bmi.n	8016f36 <_fflush_r+0x32>
 8016f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f32:	f7ff fa06 	bl	8016342 <__retarget_lock_acquire_recursive>
 8016f36:	4628      	mov	r0, r5
 8016f38:	4621      	mov	r1, r4
 8016f3a:	f7ff ff5d 	bl	8016df8 <__sflush_r>
 8016f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f40:	07da      	lsls	r2, r3, #31
 8016f42:	4605      	mov	r5, r0
 8016f44:	d4e4      	bmi.n	8016f10 <_fflush_r+0xc>
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	059b      	lsls	r3, r3, #22
 8016f4a:	d4e1      	bmi.n	8016f10 <_fflush_r+0xc>
 8016f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f4e:	f7ff f9f9 	bl	8016344 <__retarget_lock_release_recursive>
 8016f52:	e7dd      	b.n	8016f10 <_fflush_r+0xc>

08016f54 <fiprintf>:
 8016f54:	b40e      	push	{r1, r2, r3}
 8016f56:	b503      	push	{r0, r1, lr}
 8016f58:	4601      	mov	r1, r0
 8016f5a:	ab03      	add	r3, sp, #12
 8016f5c:	4805      	ldr	r0, [pc, #20]	; (8016f74 <fiprintf+0x20>)
 8016f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f62:	6800      	ldr	r0, [r0, #0]
 8016f64:	9301      	str	r3, [sp, #4]
 8016f66:	f7ff fc9d 	bl	80168a4 <_vfiprintf_r>
 8016f6a:	b002      	add	sp, #8
 8016f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f70:	b003      	add	sp, #12
 8016f72:	4770      	bx	lr
 8016f74:	2400008c 	.word	0x2400008c

08016f78 <__swbuf_r>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	460e      	mov	r6, r1
 8016f7c:	4614      	mov	r4, r2
 8016f7e:	4605      	mov	r5, r0
 8016f80:	b118      	cbz	r0, 8016f8a <__swbuf_r+0x12>
 8016f82:	6a03      	ldr	r3, [r0, #32]
 8016f84:	b90b      	cbnz	r3, 8016f8a <__swbuf_r+0x12>
 8016f86:	f7ff f881 	bl	801608c <__sinit>
 8016f8a:	69a3      	ldr	r3, [r4, #24]
 8016f8c:	60a3      	str	r3, [r4, #8]
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	071a      	lsls	r2, r3, #28
 8016f92:	d525      	bpl.n	8016fe0 <__swbuf_r+0x68>
 8016f94:	6923      	ldr	r3, [r4, #16]
 8016f96:	b31b      	cbz	r3, 8016fe0 <__swbuf_r+0x68>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	6922      	ldr	r2, [r4, #16]
 8016f9c:	1a98      	subs	r0, r3, r2
 8016f9e:	6963      	ldr	r3, [r4, #20]
 8016fa0:	b2f6      	uxtb	r6, r6
 8016fa2:	4283      	cmp	r3, r0
 8016fa4:	4637      	mov	r7, r6
 8016fa6:	dc04      	bgt.n	8016fb2 <__swbuf_r+0x3a>
 8016fa8:	4621      	mov	r1, r4
 8016faa:	4628      	mov	r0, r5
 8016fac:	f7ff ffaa 	bl	8016f04 <_fflush_r>
 8016fb0:	b9e0      	cbnz	r0, 8016fec <__swbuf_r+0x74>
 8016fb2:	68a3      	ldr	r3, [r4, #8]
 8016fb4:	3b01      	subs	r3, #1
 8016fb6:	60a3      	str	r3, [r4, #8]
 8016fb8:	6823      	ldr	r3, [r4, #0]
 8016fba:	1c5a      	adds	r2, r3, #1
 8016fbc:	6022      	str	r2, [r4, #0]
 8016fbe:	701e      	strb	r6, [r3, #0]
 8016fc0:	6962      	ldr	r2, [r4, #20]
 8016fc2:	1c43      	adds	r3, r0, #1
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d004      	beq.n	8016fd2 <__swbuf_r+0x5a>
 8016fc8:	89a3      	ldrh	r3, [r4, #12]
 8016fca:	07db      	lsls	r3, r3, #31
 8016fcc:	d506      	bpl.n	8016fdc <__swbuf_r+0x64>
 8016fce:	2e0a      	cmp	r6, #10
 8016fd0:	d104      	bne.n	8016fdc <__swbuf_r+0x64>
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f7ff ff95 	bl	8016f04 <_fflush_r>
 8016fda:	b938      	cbnz	r0, 8016fec <__swbuf_r+0x74>
 8016fdc:	4638      	mov	r0, r7
 8016fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe0:	4621      	mov	r1, r4
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	f000 f806 	bl	8016ff4 <__swsetup_r>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d0d5      	beq.n	8016f98 <__swbuf_r+0x20>
 8016fec:	f04f 37ff 	mov.w	r7, #4294967295
 8016ff0:	e7f4      	b.n	8016fdc <__swbuf_r+0x64>
	...

08016ff4 <__swsetup_r>:
 8016ff4:	b538      	push	{r3, r4, r5, lr}
 8016ff6:	4b2a      	ldr	r3, [pc, #168]	; (80170a0 <__swsetup_r+0xac>)
 8016ff8:	4605      	mov	r5, r0
 8016ffa:	6818      	ldr	r0, [r3, #0]
 8016ffc:	460c      	mov	r4, r1
 8016ffe:	b118      	cbz	r0, 8017008 <__swsetup_r+0x14>
 8017000:	6a03      	ldr	r3, [r0, #32]
 8017002:	b90b      	cbnz	r3, 8017008 <__swsetup_r+0x14>
 8017004:	f7ff f842 	bl	801608c <__sinit>
 8017008:	89a3      	ldrh	r3, [r4, #12]
 801700a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801700e:	0718      	lsls	r0, r3, #28
 8017010:	d422      	bmi.n	8017058 <__swsetup_r+0x64>
 8017012:	06d9      	lsls	r1, r3, #27
 8017014:	d407      	bmi.n	8017026 <__swsetup_r+0x32>
 8017016:	2309      	movs	r3, #9
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	f04f 30ff 	mov.w	r0, #4294967295
 8017024:	e034      	b.n	8017090 <__swsetup_r+0x9c>
 8017026:	0758      	lsls	r0, r3, #29
 8017028:	d512      	bpl.n	8017050 <__swsetup_r+0x5c>
 801702a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801702c:	b141      	cbz	r1, 8017040 <__swsetup_r+0x4c>
 801702e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017032:	4299      	cmp	r1, r3
 8017034:	d002      	beq.n	801703c <__swsetup_r+0x48>
 8017036:	4628      	mov	r0, r5
 8017038:	f7ff f9b2 	bl	80163a0 <_free_r>
 801703c:	2300      	movs	r3, #0
 801703e:	6363      	str	r3, [r4, #52]	; 0x34
 8017040:	89a3      	ldrh	r3, [r4, #12]
 8017042:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017046:	81a3      	strh	r3, [r4, #12]
 8017048:	2300      	movs	r3, #0
 801704a:	6063      	str	r3, [r4, #4]
 801704c:	6923      	ldr	r3, [r4, #16]
 801704e:	6023      	str	r3, [r4, #0]
 8017050:	89a3      	ldrh	r3, [r4, #12]
 8017052:	f043 0308 	orr.w	r3, r3, #8
 8017056:	81a3      	strh	r3, [r4, #12]
 8017058:	6923      	ldr	r3, [r4, #16]
 801705a:	b94b      	cbnz	r3, 8017070 <__swsetup_r+0x7c>
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017066:	d003      	beq.n	8017070 <__swsetup_r+0x7c>
 8017068:	4621      	mov	r1, r4
 801706a:	4628      	mov	r0, r5
 801706c:	f000 f886 	bl	801717c <__smakebuf_r>
 8017070:	89a0      	ldrh	r0, [r4, #12]
 8017072:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017076:	f010 0301 	ands.w	r3, r0, #1
 801707a:	d00a      	beq.n	8017092 <__swsetup_r+0x9e>
 801707c:	2300      	movs	r3, #0
 801707e:	60a3      	str	r3, [r4, #8]
 8017080:	6963      	ldr	r3, [r4, #20]
 8017082:	425b      	negs	r3, r3
 8017084:	61a3      	str	r3, [r4, #24]
 8017086:	6923      	ldr	r3, [r4, #16]
 8017088:	b943      	cbnz	r3, 801709c <__swsetup_r+0xa8>
 801708a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801708e:	d1c4      	bne.n	801701a <__swsetup_r+0x26>
 8017090:	bd38      	pop	{r3, r4, r5, pc}
 8017092:	0781      	lsls	r1, r0, #30
 8017094:	bf58      	it	pl
 8017096:	6963      	ldrpl	r3, [r4, #20]
 8017098:	60a3      	str	r3, [r4, #8]
 801709a:	e7f4      	b.n	8017086 <__swsetup_r+0x92>
 801709c:	2000      	movs	r0, #0
 801709e:	e7f7      	b.n	8017090 <__swsetup_r+0x9c>
 80170a0:	2400008c 	.word	0x2400008c

080170a4 <_sbrk_r>:
 80170a4:	b538      	push	{r3, r4, r5, lr}
 80170a6:	4d06      	ldr	r5, [pc, #24]	; (80170c0 <_sbrk_r+0x1c>)
 80170a8:	2300      	movs	r3, #0
 80170aa:	4604      	mov	r4, r0
 80170ac:	4608      	mov	r0, r1
 80170ae:	602b      	str	r3, [r5, #0]
 80170b0:	f7e9 fd54 	bl	8000b5c <_sbrk>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_sbrk_r+0x1a>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_sbrk_r+0x1a>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	24007744 	.word	0x24007744

080170c4 <abort>:
 80170c4:	b508      	push	{r3, lr}
 80170c6:	2006      	movs	r0, #6
 80170c8:	f000 f8bc 	bl	8017244 <raise>
 80170cc:	2001      	movs	r0, #1
 80170ce:	f7e9 fccd 	bl	8000a6c <_exit>

080170d2 <_realloc_r>:
 80170d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d6:	4680      	mov	r8, r0
 80170d8:	4614      	mov	r4, r2
 80170da:	460e      	mov	r6, r1
 80170dc:	b921      	cbnz	r1, 80170e8 <_realloc_r+0x16>
 80170de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170e2:	4611      	mov	r1, r2
 80170e4:	f7ff b9d0 	b.w	8016488 <_malloc_r>
 80170e8:	b92a      	cbnz	r2, 80170f6 <_realloc_r+0x24>
 80170ea:	f7ff f959 	bl	80163a0 <_free_r>
 80170ee:	4625      	mov	r5, r4
 80170f0:	4628      	mov	r0, r5
 80170f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f6:	f000 f8e3 	bl	80172c0 <_malloc_usable_size_r>
 80170fa:	4284      	cmp	r4, r0
 80170fc:	4607      	mov	r7, r0
 80170fe:	d802      	bhi.n	8017106 <_realloc_r+0x34>
 8017100:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017104:	d812      	bhi.n	801712c <_realloc_r+0x5a>
 8017106:	4621      	mov	r1, r4
 8017108:	4640      	mov	r0, r8
 801710a:	f7ff f9bd 	bl	8016488 <_malloc_r>
 801710e:	4605      	mov	r5, r0
 8017110:	2800      	cmp	r0, #0
 8017112:	d0ed      	beq.n	80170f0 <_realloc_r+0x1e>
 8017114:	42bc      	cmp	r4, r7
 8017116:	4622      	mov	r2, r4
 8017118:	4631      	mov	r1, r6
 801711a:	bf28      	it	cs
 801711c:	463a      	movcs	r2, r7
 801711e:	f7ff f912 	bl	8016346 <memcpy>
 8017122:	4631      	mov	r1, r6
 8017124:	4640      	mov	r0, r8
 8017126:	f7ff f93b 	bl	80163a0 <_free_r>
 801712a:	e7e1      	b.n	80170f0 <_realloc_r+0x1e>
 801712c:	4635      	mov	r5, r6
 801712e:	e7df      	b.n	80170f0 <_realloc_r+0x1e>

08017130 <__swhatbuf_r>:
 8017130:	b570      	push	{r4, r5, r6, lr}
 8017132:	460c      	mov	r4, r1
 8017134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017138:	2900      	cmp	r1, #0
 801713a:	b096      	sub	sp, #88	; 0x58
 801713c:	4615      	mov	r5, r2
 801713e:	461e      	mov	r6, r3
 8017140:	da0d      	bge.n	801715e <__swhatbuf_r+0x2e>
 8017142:	89a3      	ldrh	r3, [r4, #12]
 8017144:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017148:	f04f 0100 	mov.w	r1, #0
 801714c:	bf0c      	ite	eq
 801714e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017152:	2340      	movne	r3, #64	; 0x40
 8017154:	2000      	movs	r0, #0
 8017156:	6031      	str	r1, [r6, #0]
 8017158:	602b      	str	r3, [r5, #0]
 801715a:	b016      	add	sp, #88	; 0x58
 801715c:	bd70      	pop	{r4, r5, r6, pc}
 801715e:	466a      	mov	r2, sp
 8017160:	f000 f878 	bl	8017254 <_fstat_r>
 8017164:	2800      	cmp	r0, #0
 8017166:	dbec      	blt.n	8017142 <__swhatbuf_r+0x12>
 8017168:	9901      	ldr	r1, [sp, #4]
 801716a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801716e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017172:	4259      	negs	r1, r3
 8017174:	4159      	adcs	r1, r3
 8017176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801717a:	e7eb      	b.n	8017154 <__swhatbuf_r+0x24>

0801717c <__smakebuf_r>:
 801717c:	898b      	ldrh	r3, [r1, #12]
 801717e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017180:	079d      	lsls	r5, r3, #30
 8017182:	4606      	mov	r6, r0
 8017184:	460c      	mov	r4, r1
 8017186:	d507      	bpl.n	8017198 <__smakebuf_r+0x1c>
 8017188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801718c:	6023      	str	r3, [r4, #0]
 801718e:	6123      	str	r3, [r4, #16]
 8017190:	2301      	movs	r3, #1
 8017192:	6163      	str	r3, [r4, #20]
 8017194:	b002      	add	sp, #8
 8017196:	bd70      	pop	{r4, r5, r6, pc}
 8017198:	ab01      	add	r3, sp, #4
 801719a:	466a      	mov	r2, sp
 801719c:	f7ff ffc8 	bl	8017130 <__swhatbuf_r>
 80171a0:	9900      	ldr	r1, [sp, #0]
 80171a2:	4605      	mov	r5, r0
 80171a4:	4630      	mov	r0, r6
 80171a6:	f7ff f96f 	bl	8016488 <_malloc_r>
 80171aa:	b948      	cbnz	r0, 80171c0 <__smakebuf_r+0x44>
 80171ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171b0:	059a      	lsls	r2, r3, #22
 80171b2:	d4ef      	bmi.n	8017194 <__smakebuf_r+0x18>
 80171b4:	f023 0303 	bic.w	r3, r3, #3
 80171b8:	f043 0302 	orr.w	r3, r3, #2
 80171bc:	81a3      	strh	r3, [r4, #12]
 80171be:	e7e3      	b.n	8017188 <__smakebuf_r+0xc>
 80171c0:	89a3      	ldrh	r3, [r4, #12]
 80171c2:	6020      	str	r0, [r4, #0]
 80171c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171c8:	81a3      	strh	r3, [r4, #12]
 80171ca:	9b00      	ldr	r3, [sp, #0]
 80171cc:	6163      	str	r3, [r4, #20]
 80171ce:	9b01      	ldr	r3, [sp, #4]
 80171d0:	6120      	str	r0, [r4, #16]
 80171d2:	b15b      	cbz	r3, 80171ec <__smakebuf_r+0x70>
 80171d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171d8:	4630      	mov	r0, r6
 80171da:	f000 f84d 	bl	8017278 <_isatty_r>
 80171de:	b128      	cbz	r0, 80171ec <__smakebuf_r+0x70>
 80171e0:	89a3      	ldrh	r3, [r4, #12]
 80171e2:	f023 0303 	bic.w	r3, r3, #3
 80171e6:	f043 0301 	orr.w	r3, r3, #1
 80171ea:	81a3      	strh	r3, [r4, #12]
 80171ec:	89a3      	ldrh	r3, [r4, #12]
 80171ee:	431d      	orrs	r5, r3
 80171f0:	81a5      	strh	r5, [r4, #12]
 80171f2:	e7cf      	b.n	8017194 <__smakebuf_r+0x18>

080171f4 <_raise_r>:
 80171f4:	291f      	cmp	r1, #31
 80171f6:	b538      	push	{r3, r4, r5, lr}
 80171f8:	4604      	mov	r4, r0
 80171fa:	460d      	mov	r5, r1
 80171fc:	d904      	bls.n	8017208 <_raise_r+0x14>
 80171fe:	2316      	movs	r3, #22
 8017200:	6003      	str	r3, [r0, #0]
 8017202:	f04f 30ff 	mov.w	r0, #4294967295
 8017206:	bd38      	pop	{r3, r4, r5, pc}
 8017208:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801720a:	b112      	cbz	r2, 8017212 <_raise_r+0x1e>
 801720c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017210:	b94b      	cbnz	r3, 8017226 <_raise_r+0x32>
 8017212:	4620      	mov	r0, r4
 8017214:	f000 f852 	bl	80172bc <_getpid_r>
 8017218:	462a      	mov	r2, r5
 801721a:	4601      	mov	r1, r0
 801721c:	4620      	mov	r0, r4
 801721e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017222:	f000 b839 	b.w	8017298 <_kill_r>
 8017226:	2b01      	cmp	r3, #1
 8017228:	d00a      	beq.n	8017240 <_raise_r+0x4c>
 801722a:	1c59      	adds	r1, r3, #1
 801722c:	d103      	bne.n	8017236 <_raise_r+0x42>
 801722e:	2316      	movs	r3, #22
 8017230:	6003      	str	r3, [r0, #0]
 8017232:	2001      	movs	r0, #1
 8017234:	e7e7      	b.n	8017206 <_raise_r+0x12>
 8017236:	2400      	movs	r4, #0
 8017238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801723c:	4628      	mov	r0, r5
 801723e:	4798      	blx	r3
 8017240:	2000      	movs	r0, #0
 8017242:	e7e0      	b.n	8017206 <_raise_r+0x12>

08017244 <raise>:
 8017244:	4b02      	ldr	r3, [pc, #8]	; (8017250 <raise+0xc>)
 8017246:	4601      	mov	r1, r0
 8017248:	6818      	ldr	r0, [r3, #0]
 801724a:	f7ff bfd3 	b.w	80171f4 <_raise_r>
 801724e:	bf00      	nop
 8017250:	2400008c 	.word	0x2400008c

08017254 <_fstat_r>:
 8017254:	b538      	push	{r3, r4, r5, lr}
 8017256:	4d07      	ldr	r5, [pc, #28]	; (8017274 <_fstat_r+0x20>)
 8017258:	2300      	movs	r3, #0
 801725a:	4604      	mov	r4, r0
 801725c:	4608      	mov	r0, r1
 801725e:	4611      	mov	r1, r2
 8017260:	602b      	str	r3, [r5, #0]
 8017262:	f7e9 fc52 	bl	8000b0a <_fstat>
 8017266:	1c43      	adds	r3, r0, #1
 8017268:	d102      	bne.n	8017270 <_fstat_r+0x1c>
 801726a:	682b      	ldr	r3, [r5, #0]
 801726c:	b103      	cbz	r3, 8017270 <_fstat_r+0x1c>
 801726e:	6023      	str	r3, [r4, #0]
 8017270:	bd38      	pop	{r3, r4, r5, pc}
 8017272:	bf00      	nop
 8017274:	24007744 	.word	0x24007744

08017278 <_isatty_r>:
 8017278:	b538      	push	{r3, r4, r5, lr}
 801727a:	4d06      	ldr	r5, [pc, #24]	; (8017294 <_isatty_r+0x1c>)
 801727c:	2300      	movs	r3, #0
 801727e:	4604      	mov	r4, r0
 8017280:	4608      	mov	r0, r1
 8017282:	602b      	str	r3, [r5, #0]
 8017284:	f7e9 fc51 	bl	8000b2a <_isatty>
 8017288:	1c43      	adds	r3, r0, #1
 801728a:	d102      	bne.n	8017292 <_isatty_r+0x1a>
 801728c:	682b      	ldr	r3, [r5, #0]
 801728e:	b103      	cbz	r3, 8017292 <_isatty_r+0x1a>
 8017290:	6023      	str	r3, [r4, #0]
 8017292:	bd38      	pop	{r3, r4, r5, pc}
 8017294:	24007744 	.word	0x24007744

08017298 <_kill_r>:
 8017298:	b538      	push	{r3, r4, r5, lr}
 801729a:	4d07      	ldr	r5, [pc, #28]	; (80172b8 <_kill_r+0x20>)
 801729c:	2300      	movs	r3, #0
 801729e:	4604      	mov	r4, r0
 80172a0:	4608      	mov	r0, r1
 80172a2:	4611      	mov	r1, r2
 80172a4:	602b      	str	r3, [r5, #0]
 80172a6:	f7e9 fbcf 	bl	8000a48 <_kill>
 80172aa:	1c43      	adds	r3, r0, #1
 80172ac:	d102      	bne.n	80172b4 <_kill_r+0x1c>
 80172ae:	682b      	ldr	r3, [r5, #0]
 80172b0:	b103      	cbz	r3, 80172b4 <_kill_r+0x1c>
 80172b2:	6023      	str	r3, [r4, #0]
 80172b4:	bd38      	pop	{r3, r4, r5, pc}
 80172b6:	bf00      	nop
 80172b8:	24007744 	.word	0x24007744

080172bc <_getpid_r>:
 80172bc:	f7e9 bbbc 	b.w	8000a38 <_getpid>

080172c0 <_malloc_usable_size_r>:
 80172c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172c4:	1f18      	subs	r0, r3, #4
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	bfbc      	itt	lt
 80172ca:	580b      	ldrlt	r3, [r1, r0]
 80172cc:	18c0      	addlt	r0, r0, r3
 80172ce:	4770      	bx	lr

080172d0 <_init>:
 80172d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172d2:	bf00      	nop
 80172d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172d6:	bc08      	pop	{r3}
 80172d8:	469e      	mov	lr, r3
 80172da:	4770      	bx	lr

080172dc <_fini>:
 80172dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172de:	bf00      	nop
 80172e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172e2:	bc08      	pop	{r3}
 80172e4:	469e      	mov	lr, r3
 80172e6:	4770      	bx	lr
