
stm32f753zi_nucleo_ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ab8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d94  08013d58  08013d58  00023d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016aec  08016aec  00026aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016af0  08016af0  00026af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  24000000  08016af4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000753c  24000090  08016b84  00030090  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240075cc  08016b84  000375cc  2**0
                  ALLOC
  8 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c86e  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006fb7  00000000  00000000  0005c96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020a0  00000000  00000000  00063928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019b1  00000000  00000000  000659c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00046c2e  00000000  00000000  00067379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000345a4  00000000  00000000  000adfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00181cc3  00000000  00000000  000e254b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008e70  00000000  00000000  00264210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0026d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013d40 	.word	0x08013d40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	08013d40 	.word	0x08013d40

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <vApplicationGetIdleTaskMemory+0x30>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	240000ac 	.word	0x240000ac
 80003c0:	24000100 	.word	0x24000100

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ca:	f000 fa47 	bl	800085c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <main+0x104>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11b      	bne.n	8000412 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <main+0x104>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fa:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <main+0x104>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <main+0x104>)
 8000400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000404:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000406:	f3bf 8f4f 	dsb	sy
}
 800040a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800040c:	f3bf 8f6f 	isb	sy
}
 8000410:	e000      	b.n	8000414 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <main+0x104>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d138      	bne.n	8000492 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000420:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <main+0x104>)
 8000422:	2200      	movs	r2, #0
 8000424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000428:	f3bf 8f4f 	dsb	sy
}
 800042c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <main+0x104>)
 8000430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000434:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	0b5b      	lsrs	r3, r3, #13
 800043a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800043e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000448:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	015a      	lsls	r2, r3, #5
 800044e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000452:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000454:	69fa      	ldr	r2, [r7, #28]
 8000456:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000458:	491b      	ldr	r1, [pc, #108]	; (80004c8 <main+0x104>)
 800045a:	4313      	orrs	r3, r2
 800045c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	61fa      	str	r2, [r7, #28]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1ef      	bne.n	800044a <main+0x86>
    } while(sets-- != 0U);
 800046a:	6a3b      	ldr	r3, [r7, #32]
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	623a      	str	r2, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1e5      	bne.n	8000440 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000474:	f3bf 8f4f 	dsb	sy
}
 8000478:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <main+0x104>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <main+0x104>)
 8000480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000484:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	e000      	b.n	8000494 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000492:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fdf6 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f81c 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 f898 	bl	80005d0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <main+0x108>)
 80004a2:	463c      	mov	r4, r7
 80004a4:	461d      	mov	r5, r3
 80004a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f005 f8b4 	bl	8005624 <osThreadCreate>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <main+0x10c>)
 80004c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004c2:	f005 f898 	bl	80055f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x102>
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	08013d64 	.word	0x08013d64
 80004d0:	24000300 	.word	0x24000300

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	224c      	movs	r2, #76	; 0x4c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f012 fd7f 	bl	8012fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f012 fd79 	bl	8012fe6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f002 fec9 	bl	800328c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <SystemClock_Config+0xf4>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	4a31      	ldr	r2, [pc, #196]	; (80005c8 <SystemClock_Config+0xf4>)
 8000504:	f023 0301 	bic.w	r3, r3, #1
 8000508:	62d3      	str	r3, [r2, #44]	; 0x2c
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <SystemClock_Config+0xf4>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <SystemClock_Config+0xf8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <SystemClock_Config+0xf8>)
 800051e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xf8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000530:	bf00      	nop
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xf8>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053e:	d1f8      	bne.n	8000532 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000544:	2301      	movs	r3, #1
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000558:	2319      	movs	r3, #25
 800055a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000564:	2302      	movs	r3, #2
 8000566:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000568:	230c      	movs	r3, #12
 800056a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056c:	2300      	movs	r3, #0
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fec1 	bl	8003300 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000584:	f000 f9ce 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	; 0x3f
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059c:	2340      	movs	r3, #64	; 0x40
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2103      	movs	r1, #3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb00 	bl	8003bb4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005ba:	f000 f9b3 	bl	8000924 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3770      	adds	r7, #112	; 0x70
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	58000400 	.word	0x58000400
 80005cc:	58024800 	.word	0x58024800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ec:	4a71      	ldr	r2, [pc, #452]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f6:	4b6f      	ldr	r3, [pc, #444]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000604:	4b6b      	ldr	r3, [pc, #428]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060a:	4a6a      	ldr	r2, [pc, #424]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000614:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	4a62      	ldr	r2, [pc, #392]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000632:	4b60      	ldr	r3, [pc, #384]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b5c      	ldr	r3, [pc, #368]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	4a5b      	ldr	r2, [pc, #364]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000650:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	4a53      	ldr	r2, [pc, #332]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066e:	4b51      	ldr	r3, [pc, #324]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 8000684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <MX_GPIO_Init+0x1e4>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	483e      	ldr	r0, [pc, #248]	; (80007b8 <MX_GPIO_Init+0x1e8>)
 80006c0:	f002 fdca 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	483c      	ldr	r0, [pc, #240]	; (80007bc <MX_GPIO_Init+0x1ec>)
 80006cc:	f002 fdc4 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	483a      	ldr	r0, [pc, #232]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80006d6:	f002 fdbf 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4835      	ldr	r0, [pc, #212]	; (80007c4 <MX_GPIO_Init+0x1f4>)
 80006f0:	f002 fc02 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <MX_GPIO_Init+0x1e8>)
 800070e:	f002 fbf3 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000724:	2307      	movs	r3, #7
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_GPIO_Init+0x1ec>)
 8000730:	f002 fbe2 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481b      	ldr	r0, [pc, #108]	; (80007bc <MX_GPIO_Init+0x1ec>)
 800074e:	f002 fbd3 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 8000768:	f002 fbc6 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800076c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800077e:	230a      	movs	r3, #10
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_GPIO_Init+0x1fc>)
 800078a:	f002 fbb5 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80007a6:	f002 fba7 	bl	8002ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	; 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58020400 	.word	0x58020400
 80007bc:	58020c00 	.word	0x58020c00
 80007c0:	58021000 	.word	0x58021000
 80007c4:	58020800 	.word	0x58020800
 80007c8:	58021800 	.word	0x58021800
 80007cc:	58020000 	.word	0x58020000

080007d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007d8:	f004 f87e 	bl	80048d8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* message = "Hello UDP message!\n\r";
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <StartDefaultTask+0x84>)
 80007de:	617b      	str	r3, [r7, #20]

  osDelay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f004 ff6a 	bl	80056bc <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 0, 1);
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <StartDefaultTask+0x88>)
 80007ea:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 80007ec:	f00f fe4c 	bl	8010488 <udp_new>
 80007f0:	6138      	str	r0, [r7, #16]
  udp_connect(my_udp, &PC_IPADDR, 55151);
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	f24d 726f 	movw	r2, #55151	; 0xd76f
 80007fa:	4619      	mov	r1, r3
 80007fc:	6938      	ldr	r0, [r7, #16]
 80007fe:	f00f fdd5 	bl	80103ac <udp_connect>
  struct pbuf* udp_buffer = NULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
    osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080a:	f004 ff57 	bl	80056bc <osDelay>
    /* !! PBUF_RAM is critical for correct operation !! */
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff fd66 	bl	80002e0 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29b      	uxth	r3, r3
 8000818:	f44f 7220 	mov.w	r2, #640	; 0x280
 800081c:	4619      	mov	r1, r3
 800081e:	2036      	movs	r0, #54	; 0x36
 8000820:	f009 f92c 	bl	8009a7c <pbuf_alloc>
 8000824:	60f8      	str	r0, [r7, #12]

    if (udp_buffer != NULL) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0ec      	beq.n	8000806 <StartDefaultTask+0x36>
      memcpy(udp_buffer->payload, message, strlen(message));
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	685c      	ldr	r4, [r3, #4]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff fd55 	bl	80002e0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	6979      	ldr	r1, [r7, #20]
 800083c:	4620      	mov	r0, r4
 800083e:	f012 fc48 	bl	80130d2 <memcpy>
      udp_send(my_udp, udp_buffer);
 8000842:	68f9      	ldr	r1, [r7, #12]
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f00f fb3f 	bl	800fec8 <udp_send>
      pbuf_free(udp_buffer);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f009 fbfa 	bl	800a044 <pbuf_free>
    osDelay(1000);
 8000850:	e7d9      	b.n	8000806 <StartDefaultTask+0x36>
 8000852:	bf00      	nop
 8000854:	08013d80 	.word	0x08013d80
 8000858:	0100a8c0 	.word	0x0100a8c0

0800085c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800086e:	f000 fd65 	bl	800133c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000872:	2301      	movs	r3, #1
 8000874:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000876:	2300      	movs	r3, #0
 8000878:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800087e:	231f      	movs	r3, #31
 8000880:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000882:	2387      	movs	r3, #135	; 0x87
 8000884:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000886:	2300      	movs	r3, #0
 8000888:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800088a:	2300      	movs	r3, #0
 800088c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000892:	2301      	movs	r3, #1
 8000894:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fd83 	bl	80013ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MPU_Config+0x9c>)
 80008ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80008ae:	2310      	movs	r3, #16
 80008b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008ba:	2303      	movs	r3, #3
 80008bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008c2:	463b      	mov	r3, r7
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fd71 	bl	80013ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MPU_Config+0xa0>)
 80008d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80008d2:	2308      	movs	r3, #8
 80008d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fd61 	bl	80013ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f000 fd3e 	bl	800136c <HAL_MPU_Enable>

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	30020000 	.word	0x30020000
 80008fc:	30040000 	.word	0x30040000

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 fbf3 	bl	80010fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x38>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_MspInit+0x38>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x38>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	210f      	movs	r1, #15
 8000958:	f06f 0001 	mvn.w	r0, #1
 800095c:	f000 fcc6 	bl	80012ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	58024400 	.word	0x58024400

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d827      	bhi.n	80009ca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800097a:	2200      	movs	r2, #0
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2036      	movs	r0, #54	; 0x36
 8000980:	f000 fcb4 	bl	80012ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000984:	2036      	movs	r0, #54	; 0x36
 8000986:	f000 fccb 	bl	8001320 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800098a:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <HAL_InitTick+0xc4>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <HAL_InitTick+0xc8>)
 8000992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000996:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <HAL_InitTick+0xc8>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <HAL_InitTick+0xc8>)
 80009a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ae:	f107 0210 	add.w	r2, r7, #16
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fc71 	bl	80042a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d106      	bne.n	80009d6 <HAL_InitTick+0x6a>
 80009c8:	e001      	b.n	80009ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e02b      	b.n	8000a26 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ce:	f003 fc51 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80009d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009d4:	e004      	b.n	80009e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d6:	f003 fc4d 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80009da:	4603      	mov	r3, r0
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <HAL_InitTick+0xcc>)
 80009e4:	fba2 2303 	umull	r2, r3, r2, r3
 80009e8:	0c9b      	lsrs	r3, r3, #18
 80009ea:	3b01      	subs	r3, #1
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_InitTick+0xd0>)
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <HAL_InitTick+0xd4>)
 80009f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_InitTick+0xd0>)
 80009f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_InitTick+0xd0>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0xd0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_InitTick+0xd0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_InitTick+0xd0>)
 8000a10:	f003 fc88 	bl	8004324 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d104      	bne.n	8000a24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <HAL_InitTick+0xd0>)
 8000a1c:	f003 fce4 	bl	80043e8 <HAL_TIM_Base_Start_IT>
 8000a20:	4603      	mov	r3, r0
 8000a22:	e000      	b.n	8000a26 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3740      	adds	r7, #64	; 0x40
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000008 	.word	0x24000008
 8000a34:	58024400 	.word	0x58024400
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	24000304 	.word	0x24000304
 8000a40:	40001000 	.word	0x40001000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM6_DAC_IRQHandler+0x10>)
 8000a76:	f003 fd2f 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000304 	.word	0x24000304

08000a84 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <ETH_IRQHandler+0x10>)
 8000a8a:	f001 f897 	bl	8001bbc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	240003b4 	.word	0x240003b4

08000a98 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <ETH_WKUP_IRQHandler+0x10>)
 8000a9e:	f001 f88d 	bl	8001bbc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	240003b4 	.word	0x240003b4

08000aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return 1;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_kill>:

int _kill(int pid, int sig)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <_kill+0x20>)
 8000ac8:	2216      	movs	r2, #22
 8000aca:	601a      	str	r2, [r3, #0]
  return -1;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	240075bc 	.word	0x240075bc

08000ae0 <_exit>:

void _exit (int status)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ffe5 	bl	8000abc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000af2:	e7fe      	b.n	8000af2 <_exit+0x12>

08000af4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d205      	bcs.n	8000c0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <_sbrk+0x6c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	24080000 	.word	0x24080000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	24000350 	.word	0x24000350
 8000c38:	240075d0 	.word	0x240075d0
 8000c3c:	240075bc 	.word	0x240075bc

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <SystemInit+0x104>)
 8000c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4c:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <SystemInit+0x104>)
 8000c4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <SystemInit+0x108>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d807      	bhi.n	8000c72 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c62:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <SystemInit+0x108>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 030f 	bic.w	r3, r3, #15
 8000c6a:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <SystemInit+0x108>)
 8000c6c:	f043 0307 	orr.w	r3, r3, #7
 8000c70:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <SystemInit+0x10c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <SystemInit+0x10c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <SystemInit+0x10c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c84:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <SystemInit+0x10c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4930      	ldr	r1, [pc, #192]	; (8000d4c <SystemInit+0x10c>)
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <SystemInit+0x110>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <SystemInit+0x108>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <SystemInit+0x108>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <SystemInit+0x108>)
 8000ca6:	f043 0307 	orr.w	r3, r3, #7
 8000caa:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <SystemInit+0x10c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemInit+0x10c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0x10c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <SystemInit+0x10c>)
 8000cc0:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <SystemInit+0x114>)
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <SystemInit+0x10c>)
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <SystemInit+0x118>)
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <SystemInit+0x10c>)
 8000ccc:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <SystemInit+0x11c>)
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <SystemInit+0x10c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <SystemInit+0x10c>)
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <SystemInit+0x11c>)
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <SystemInit+0x10c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <SystemInit+0x10c>)
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <SystemInit+0x11c>)
 8000ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <SystemInit+0x10c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <SystemInit+0x10c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <SystemInit+0x10c>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <SystemInit+0x10c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <SystemInit+0x120>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemInit+0x124>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d0c:	d202      	bcs.n	8000d14 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SystemInit+0x128>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <SystemInit+0x10c>)
 8000d16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <SystemInit+0x10c>)
 8000d1c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000d20:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <SystemInit+0x10c>)
 8000d26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d2a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000d2c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <SystemInit+0x12c>)
 8000d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	52002000 	.word	0x52002000
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d54:	02020200 	.word	0x02020200
 8000d58:	01ff0000 	.word	0x01ff0000
 8000d5c:	01010280 	.word	0x01010280
 8000d60:	5c001000 	.word	0x5c001000
 8000d64:	ffff0000 	.word	0xffff0000
 8000d68:	51008108 	.word	0x51008108
 8000d6c:	52004000 	.word	0x52004000

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d74:	f7ff ff64 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f012 f971 	bl	8013084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fb0f 	bl	80003c4 <main>
  bx  lr
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db0:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000db4:	08016af4 	.word	0x08016af4
  ldr r2, =_sbss
 8000db8:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000dbc:	240075cc 	.word	0x240075cc

08000dc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC3_IRQHandler>

08000dc2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e014      	b.n	8000e1a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d17c      	bne.n	8000f40 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2220      	movs	r2, #32
 8000e58:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e01c      	b.n	8000e9a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f107 0208 	add.w	r2, r7, #8
 8000e68:	2112      	movs	r1, #18
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da03      	bge.n	8000e7c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e7a:	e00b      	b.n	8000e94 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d105      	bne.n	8000e94 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
         break;
 8000e92:	e005      	b.n	8000ea0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	d9df      	bls.n	8000e60 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b1f      	cmp	r3, #31
 8000ea6:	d902      	bls.n	8000eae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ea8:	f06f 0302 	mvn.w	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d145      	bne.n	8000f40 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6810      	ldr	r0, [r2, #0]
 8000ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4798      	blx	r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db37      	blt.n	8000f3a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6810      	ldr	r0, [r2, #0]
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4798      	blx	r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db28      	blt.n	8000f32 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4798      	blx	r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000eea:	e01c      	b.n	8000f26 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000efe:	d80e      	bhi.n	8000f1e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6810      	ldr	r0, [r2, #0]
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4798      	blx	r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da07      	bge.n	8000f26 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f16:	f06f 0304 	mvn.w	r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
                 break;
 8000f1c:	e010      	b.n	8000f40 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f1e:	f06f 0301 	mvn.w	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
               break;
 8000f24:	e00c      	b.n	8000f40 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1dd      	bne.n	8000eec <LAN8742_Init+0xc6>
 8000f30:	e006      	b.n	8000f40 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f32:	f06f 0304 	mvn.w	r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	e002      	b.n	8000f40 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f3a:	f06f 0303 	mvn.w	r3, #3
 8000f3e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d112      	bne.n	8000f6c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4798      	blx	r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f50:	bf00      	nop
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4798      	blx	r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f64:	d9f5      	bls.n	8000f52 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 }
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6810      	ldr	r0, [r2, #0]
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da02      	bge.n	8000f9e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f98:	f06f 0304 	mvn.w	r3, #4
 8000f9c:	e06e      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6810      	ldr	r0, [r2, #0]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	2101      	movs	r1, #1
 8000fac:	4798      	blx	r3
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	da02      	bge.n	8000fba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fb4:	f06f 0304 	mvn.w	r3, #4
 8000fb8:	e060      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e059      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6810      	ldr	r0, [r2, #0]
 8000fd0:	f107 020c 	add.w	r2, r7, #12
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4798      	blx	r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da02      	bge.n	8000fe4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fde:	f06f 0304 	mvn.w	r3, #4
 8000fe2:	e04b      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11b      	bne.n	8001026 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <LAN8742_GetLinkState+0x90>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001002:	2302      	movs	r3, #2
 8001004:	e03a      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001010:	2303      	movs	r3, #3
 8001012:	e033      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800101e:	2304      	movs	r3, #4
 8001020:	e02c      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001022:	2305      	movs	r3, #5
 8001024:	e02a      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6810      	ldr	r0, [r2, #0]
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	211f      	movs	r1, #31
 8001034:	4798      	blx	r3
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	da02      	bge.n	8001042 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800103c:	f06f 0304 	mvn.w	r3, #4
 8001040:	e01c      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800104c:	2306      	movs	r3, #6
 800104e:	e015      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 031c 	and.w	r3, r3, #28
 8001056:	2b18      	cmp	r3, #24
 8001058:	d101      	bne.n	800105e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800105a:	2302      	movs	r3, #2
 800105c:	e00e      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 031c 	and.w	r3, r3, #28
 8001064:	2b08      	cmp	r3, #8
 8001066:	d101      	bne.n	800106c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001068:	2303      	movs	r3, #3
 800106a:	e007      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 031c 	and.w	r3, r3, #28
 8001072:	2b14      	cmp	r3, #20
 8001074:	d101      	bne.n	800107a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001076:	2304      	movs	r3, #4
 8001078:	e000      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800107a:	2305      	movs	r3, #5
    }				
  }
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f923 	bl	80012d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001090:	f002 ff46 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8001094:	4602      	mov	r2, r0
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <HAL_Init+0x6c>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_Init+0x6c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_Init+0x70>)
 80010c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_Init+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f7ff fc4c 	bl	800096c <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e002      	b.n	80010e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fc27 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400
 80010f0:	080168c4 	.word	0x080168c4
 80010f4:	24000004 	.word	0x24000004
 80010f8:	24000000 	.word	0x24000000

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2400000c 	.word	0x2400000c
 8001120:	24000354 	.word	0x24000354

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000354 	.word	0x24000354

0800113c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetREVID+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0c1b      	lsrs	r3, r3, #16
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	5c001000 	.word	0x5c001000

08001154 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001164:	4904      	ldr	r1, [pc, #16]	; (8001178 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	58000400 	.word	0x58000400

0800117c <__NVIC_SetPriorityGrouping>:
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x40>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	05fa0000 	.word	0x05fa0000

080011c4 <__NVIC_GetPriorityGrouping>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff4c 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fa:	f7ff ff63 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 80012fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f7ff ffb3 	bl	8001270 <NVIC_EncodePriority>
 800130a:	4602      	mov	r2, r0
 800130c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff82 	bl	800121c <__NVIC_SetPriority>
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff56 	bl	80011e0 <__NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001340:	f3bf 8f5f 	dmb	sy
}
 8001344:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_MPU_Disable+0x28>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_MPU_Disable+0x28>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001350:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_MPU_Disable+0x2c>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	e000ed90 	.word	0xe000ed90

0800136c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_MPU_Enable+0x38>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_MPU_Enable+0x3c>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_MPU_Enable+0x3c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800138a:	f3bf 8f4f 	dsb	sy
}
 800138e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001390:	f3bf 8f6f 	isb	sy
}
 8001394:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed90 	.word	0xe000ed90
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	785a      	ldrb	r2, [r3, #1]
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 80013ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d029      	beq.n	8001418 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b1b      	ldrb	r3, [r3, #12]
 80013d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a9b      	ldrb	r3, [r3, #10]
 80013de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
 80013e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
 80013ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7bdb      	ldrb	r3, [r3, #15]
 80013f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a5b      	ldrb	r3, [r3, #9]
 80013fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001400:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a1b      	ldrb	r3, [r3, #8]
 8001406:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001408:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001412:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001416:	e005      	b.n	8001424 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_MPU_ConfigRegion+0x84>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed90 	.word	0xe000ed90

08001434 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0cf      	b.n	80015e6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2223      	movs	r2, #35	; 0x23
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f003 fe35 	bl	80050c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <HAL_ETH_Init+0x1bc>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001464:	4a62      	ldr	r2, [pc, #392]	; (80015f0 <HAL_ETH_Init+0x1bc>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800146e:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <HAL_ETH_Init+0x1bc>)
 8001470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7a1b      	ldrb	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fe65 	bl	8001154 <HAL_SYSCFG_ETHInterfaceSelect>
 800148a:	e003      	b.n	8001494 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800148c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001490:	f7ff fe60 	bl	8001154 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <HAL_ETH_Init+0x1c0>)
 8001496:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff fe38 	bl	8001124 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014b6:	e011      	b.n	80014dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014b8:	f7ff fe34 	bl	8001124 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c6:	d909      	bls.n	80014dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	22e0      	movs	r2, #224	; 0xe0
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e084      	b.n	80015e6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e4      	bne.n	80014b8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 ff28 	bl	8002344 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014f4:	f002 fe8e 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_ETH_Init+0x1c4>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9a      	lsrs	r2, r3, #18
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3a01      	subs	r2, #1
 8001508:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f001 f921 	bl	8002754 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800151e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800152e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	22e0      	movs	r2, #224	; 0xe0
 800154a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e049      	b.n	80015e6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_ETH_Init+0x1c8>)
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6952      	ldr	r2, [r2, #20]
 8001566:	0051      	lsls	r1, r2, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001572:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f001 f989 	bl	800288e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f001 f9cf 	bl	8002920 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	3305      	adds	r3, #5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	021a      	lsls	r2, r3, #8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	3304      	adds	r3, #4
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	3303      	adds	r3, #3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	061a      	lsls	r2, r3, #24
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	3302      	adds	r3, #2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	041b      	lsls	r3, r3, #16
 80015b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2210      	movs	r2, #16
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58000400 	.word	0x58000400
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	ffff8001 	.word	0xffff8001

08001600 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800160e:	2b10      	cmp	r3, #16
 8001610:	d179      	bne.n	8001706 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2223      	movs	r2, #35	; 0x23
 8001616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_ETH_Start_IT+0x110>)
 800162e:	430b      	orrs	r3, r1
 8001630:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_ETH_Start_IT+0x114>)
 8001642:	430b      	orrs	r3, r1
 8001644:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f9eb 	bl	8001a2a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0202 	orr.w	r2, r2, #2
 8001662:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80016d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80016f0:	430b      	orrs	r3, r1
 80016f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2223      	movs	r2, #35	; 0x23
 80016fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	0c020060 	.word	0x0c020060
 8001714:	0c20c000 	.word	0x0c20c000

08001718 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001726:	2b23      	cmp	r3, #35	; 0x23
 8001728:	d165      	bne.n	80017f6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2223      	movs	r2, #35	; 0x23
 800172e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_ETH_Stop_IT+0xec>)
 8001744:	400b      	ands	r3, r1
 8001746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001766:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0202 	bic.w	r2, r2, #2
 80017b8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e00e      	b.n	80017de <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	3212      	adds	r2, #18
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d9ed      	bls.n	80017c0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2210      	movs	r2, #16
 80017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	ffff2f3e 	.word	0xffff2f3e

08001808 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e03a      	b.n	80018a2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001832:	2b23      	cmp	r3, #35	; 0x23
 8001834:	d134      	bne.n	80018a0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800183e:	2201      	movs	r2, #1
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 f8ca 	bl	80029dc <ETH_Prepare_Tx_Descriptors>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001854:	f043 0202 	orr.w	r2, r3, #2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01f      	b.n	80018a2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001862:	f3bf 8f4f 	dsb	sy
}
 8001866:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	2b03      	cmp	r3, #3
 8001878:	d904      	bls.n	8001884 <HAL_ETH_Transmit_IT+0x7c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	1f1a      	subs	r2, r3, #4
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3106      	adds	r1, #6
 8001890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001898:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
  }
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b088      	sub	sp, #32
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0a5      	b.n	8001a22 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018dc:	2b23      	cmp	r3, #35	; 0x23
 80018de:	d001      	beq.n	80018e4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e09e      	b.n	8001a22 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	3212      	adds	r2, #18
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fa:	f1c3 0304 	rsb	r3, r3, #4
 80018fe:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001900:	e067      	b.n	80019d2 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_ETH_ReadData+0x88>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03d      	beq.n	80019ae <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001988:	461a      	mov	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f003 fd95 	bl	80054bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	441a      	add	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d902      	bls.n	80019c0 <HAL_ETH_ReadData+0x116>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b04      	subs	r3, #4
 80019be:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	3212      	adds	r2, #18
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db06      	blt.n	80019e8 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d202      	bcs.n	80019e8 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d08c      	beq.n	8001902 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	441a      	add	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f814 	bl	8001a2a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b088      	sub	sp, #32
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a36:	2301      	movs	r3, #1
 8001a38:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a3e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	3212      	adds	r2, #18
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a50:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a52:	e03b      	b.n	8001acc <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d112      	bne.n	8001a82 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fcfb 	bl	800545c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	74fb      	strb	r3, [r7, #19]
 8001a70:	e007      	b.n	8001a82 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	461a      	mov	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d021      	beq.n	8001acc <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a88:	f3bf 8f5f 	dmb	sy
}
 8001a8c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	e003      	b.n	8001aa8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d902      	bls.n	8001aba <ETH_UpdateDescriptor+0x90>
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	3212      	adds	r2, #18
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <ETH_UpdateDescriptor+0xae>
 8001ad2:	7cfb      	ldrb	r3, [r7, #19]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1bd      	bne.n	8001a54 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d00d      	beq.n	8001afe <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	461a      	mov	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3318      	adds	r3, #24
 8001b12:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b24:	e03f      	b.n	8001ba6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3304      	adds	r3, #4
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d028      	beq.n	8001ba6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68d9      	ldr	r1, [r3, #12]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db1b      	blt.n	8001ba2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd08 	bl	800558c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3304      	adds	r3, #4
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ba0:	e001      	b.n	8001ba6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_ETH_ReleaseTxPacket+0xac>
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1b9      	bne.n	8001b26 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d115      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d10b      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f248 0340 	movw	r3, #32832	; 0x8040
 8001bfa:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f002 ffac 	bl	8004b5c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d115      	bne.n	8001c44 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10b      	bne.n	8001c44 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	461a      	mov	r2, r3
 8001c36:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c3a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f002 ff9c 	bl	8004b7c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c58:	d153      	bne.n	8001d02 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c6e:	d148      	bne.n	8001d02 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	f043 0208 	orr.w	r2, r3, #8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c88:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c94:	d11e      	bne.n	8001cd4 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001ca2:	f241 1302 	movw	r3, #4354	; 0x1102
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cc6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	22e0      	movs	r2, #224	; 0xe0
 8001cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cd2:	e013      	b.n	8001cfc <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cdc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ce0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001cf8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f002 ff4d 	bl	8004b9c <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d0a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	22e0      	movs	r2, #224	; 0xe0
 8001d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f002 ff28 	bl	8004b9c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d10f      	bne.n	8001d84 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d6c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f830 	bl	8001ddc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d10f      	bne.n	8001db4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f822 	bl	8001df0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_ETH_IRQHandler+0x21c>)
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_ETH_IRQHandler+0x21c>)
 8001dc2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f81b 	bl	8001e04 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	58000080 	.word	0x58000080

08001ddc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e03e      	b.n	8001eb8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e42:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	055b      	lsls	r3, r3, #21
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f043 030c 	orr.w	r3, r3, #12
 8001e66:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e7a:	f7ff f953 	bl	8001124 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e80:	e009      	b.n	8001e96 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e82:	f7ff f94f 	bl	8001124 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e90:	d901      	bls.n	8001e96 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e010      	b.n	8001eb8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ed      	bne.n	8001e82 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03c      	b.n	8001f5c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	055b      	lsls	r3, r3, #21
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f023 030c 	bic.w	r3, r3, #12
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f2e:	f7ff f8f9 	bl	8001124 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f34:	e009      	b.n	8001f4a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f36:	f7ff f8f5 	bl	8001124 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f44:	d901      	bls.n	8001f4a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e008      	b.n	8001f5c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ed      	bne.n	8001f36 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40028000 	.word	0x40028000

08001f68 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e1c3      	b.n	8002304 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800200a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80020f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800218c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0e5b      	lsrs	r3, r3, #25
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	b29a      	uxth	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002290:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022a0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e00b      	b.n	800233c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232a:	2b10      	cmp	r3, #16
 800232c:	d105      	bne.n	800233a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800232e:	6839      	ldr	r1, [r7, #0]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f86d 	bl	8002410 <ETH_SetMACConfig>

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002354:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800235c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800235e:	f001 ff59 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8002362:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d908      	bls.n	800237e <HAL_ETH_SetMDIOClockRange+0x3a>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d804      	bhi.n	800237e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e027      	b.n	80023ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d908      	bls.n	8002398 <HAL_ETH_SetMDIOClockRange+0x54>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d204      	bcs.n	8002398 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e01a      	b.n	80023ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d303      	bcc.n	80023a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d911      	bls.n	80023cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d908      	bls.n	80023c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d804      	bhi.n	80023c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e005      	b.n	80023ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e000      	b.n	80023ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80023cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	01312cff 	.word	0x01312cff
 80023e4:	02160ebf 	.word	0x02160ebf
 80023e8:	03938700 	.word	0x03938700
 80023ec:	05f5e0ff 	.word	0x05f5e0ff
 80023f0:	08f0d17f 	.word	0x08f0d17f

080023f4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800242a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7b1b      	ldrb	r3, [r3, #12]
 8002430:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7b5b      	ldrb	r3, [r3, #13]
 8002438:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800243a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	7b9b      	ldrb	r3, [r3, #14]
 8002440:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7bdb      	ldrb	r3, [r3, #15]
 8002448:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800244a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	7c12      	ldrb	r2, [r2, #16]
 8002450:	2a00      	cmp	r2, #0
 8002452:	d102      	bne.n	800245a <ETH_SetMACConfig+0x4a>
 8002454:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002458:	e000      	b.n	800245c <ETH_SetMACConfig+0x4c>
 800245a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800245c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	7c52      	ldrb	r2, [r2, #17]
 8002462:	2a00      	cmp	r2, #0
 8002464:	d102      	bne.n	800246c <ETH_SetMACConfig+0x5c>
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	e000      	b.n	800246e <ETH_SetMACConfig+0x5e>
 800246c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800246e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7c9b      	ldrb	r3, [r3, #18]
 8002474:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002476:	431a      	orrs	r2, r3
               macconf->Speed |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800247c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	7f1b      	ldrb	r3, [r3, #28]
 8002488:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800248a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7f5b      	ldrb	r3, [r3, #29]
 8002490:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002492:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	7f92      	ldrb	r2, [r2, #30]
 8002498:	2a00      	cmp	r2, #0
 800249a:	d102      	bne.n	80024a2 <ETH_SetMACConfig+0x92>
 800249c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a0:	e000      	b.n	80024a4 <ETH_SetMACConfig+0x94>
 80024a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	7fdb      	ldrb	r3, [r3, #31]
 80024aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d102      	bne.n	80024be <ETH_SetMACConfig+0xae>
 80024b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0xb0>
 80024be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b56      	ldr	r3, [pc, #344]	; (800263c <ETH_SetMACConfig+0x22c>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002504:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800250e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002510:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002518:	2a00      	cmp	r2, #0
 800251a:	d102      	bne.n	8002522 <ETH_SetMACConfig+0x112>
 800251c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002520:	e000      	b.n	8002524 <ETH_SetMACConfig+0x114>
 8002522:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002524:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <ETH_SetMACConfig+0x230>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	430b      	orrs	r3, r1
 8002540:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002548:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <ETH_SetMACConfig+0x234>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800256c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002572:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800257a:	2a00      	cmp	r2, #0
 800257c:	d101      	bne.n	8002582 <ETH_SetMACConfig+0x172>
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	e000      	b.n	8002584 <ETH_SetMACConfig+0x174>
 8002582:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002584:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002596:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80025ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80025b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f023 0103 	bic.w	r1, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d101      	bne.n	80025fe <ETH_SetMACConfig+0x1ee>
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0x1f0>
 80025fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002600:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002608:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800260a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002612:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002620:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	430a      	orrs	r2, r1
 800262c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	00048083 	.word	0x00048083
 8002640:	c0f88000 	.word	0xc0f88000
 8002644:	fffffef0 	.word	0xfffffef0

08002648 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <ETH_SetDMAConfig+0xf8>)
 800265e:	4013      	ands	r3, r2
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	6811      	ldr	r1, [r2, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800266e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800267a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <ETH_SetDMAConfig+0xfc>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	430b      	orrs	r3, r1
 800269c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7b5b      	ldrb	r3, [r3, #13]
 80026a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <ETH_SetDMAConfig+0x100>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7d1b      	ldrb	r3, [r3, #20]
 80026d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7f5b      	ldrb	r3, [r3, #29]
 80026e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <ETH_SetDMAConfig+0x104>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002702:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7f1b      	ldrb	r3, [r3, #28]
 800270a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <ETH_SetDMAConfig+0x108>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	430b      	orrs	r3, r1
 800272c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002730:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	ffff87fd 	.word	0xffff87fd
 8002744:	ffff2ffe 	.word	0xffff2ffe
 8002748:	fffec000 	.word	0xfffec000
 800274c:	ffc0efef 	.word	0xffc0efef
 8002750:	7fc0ffff 	.word	0x7fc0ffff

08002754 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0a4      	sub	sp, #144	; 0x90
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002762:	2300      	movs	r3, #0
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800279c:	2300      	movs	r3, #0
 800279e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80027b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027ce:	2300      	movs	r3, #0
 80027d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027d6:	2300      	movs	r3, #0
 80027d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027ec:	2320      	movs	r3, #32
 80027ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800282e:	2300      	movs	r3, #0
 8002830:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fde6 	bl	8002410 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002844:	2301      	movs	r3, #1
 8002846:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800285e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002862:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800286c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002874:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fee1 	bl	8002648 <ETH_SetDMAConfig>
}
 8002886:	bf00      	nop
 8002888:	3790      	adds	r7, #144	; 0x90
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e01d      	b.n	80028d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68d9      	ldr	r1, [r3, #12]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	3206      	adds	r2, #6
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d9de      	bls.n	800289c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ec:	461a      	mov	r2, r3
 80028ee:	2303      	movs	r3, #3
 80028f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002900:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e023      	b.n	8002976 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6919      	ldr	r1, [r3, #16]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	3212      	adds	r2, #18
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3301      	adds	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d9d8      	bls.n	800292e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	2303      	movs	r3, #3
 80029a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029dc:	b480      	push	{r7}
 80029de:	b08d      	sub	sp, #52	; 0x34
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3318      	adds	r3, #24
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a1e:	d007      	beq.n	8002a30 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3304      	adds	r3, #4
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	e259      	b.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d044      	beq.n	8002aca <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d027      	beq.n	8002aca <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00e      	beq.n	8002af4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	6992      	ldr	r2, [r2, #24]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d036      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b18:	f3bf 8f5f 	dmb	sy
}
 8002b1c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d902      	bls.n	8002b3c <ETH_Prepare_Tx_Descriptors+0x160>
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	3b04      	subs	r3, #4
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	3301      	adds	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b58:	d10f      	bne.n	8002b7a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b64:	f3bf 8f5f 	dmb	sy
}
 8002b68:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e1b6      	b.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	6852      	ldr	r2, [r2, #4]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	6852      	ldr	r2, [r2, #4]
 8002bc0:	0412      	lsls	r2, r2, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e008      	b.n	8002bdc <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d021      	beq.n	8002c2c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	04db      	lsls	r3, r3, #19
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	69d2      	ldr	r2, [r2, #28]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	e02e      	b.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c1c:	ffff0000 	.word	0xffff0000
 8002c20:	ffffc000 	.word	0xffffc000
 8002c24:	c000ffff 	.word	0xc000ffff
 8002c28:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b7b      	ldr	r3, [pc, #492]	; (8002e20 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	431a      	orrs	r2, r3
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb0:	f3bf 8f5f 	dmb	sy
}
 8002cb4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80da 	beq.w	8002e84 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ce2:	e0cf      	b.n	8002e84 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d902      	bls.n	8002d02 <ETH_Prepare_Tx_Descriptors+0x326>
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d24:	d007      	beq.n	8002d36 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d029      	beq.n	8002d8a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d42:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d48:	e019      	b.n	8002d7e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d4a:	f3bf 8f5f 	dmb	sy
}
 8002d4e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	3301      	adds	r3, #1
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d902      	bls.n	8002d6e <ETH_Prepare_Tx_Descriptors+0x392>
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3e1      	bcc.n	8002d4a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0ae      	b.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	6852      	ldr	r2, [r2, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	6852      	ldr	r2, [r2, #4]
 8002dd6:	0412      	lsls	r2, r2, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	e008      	b.n	8002df2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	69d2      	ldr	r2, [r2, #28]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	e020      	b.n	8002e60 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e1e:	bf00      	nop
 8002e20:	ffff8000 	.word	0xffff8000
 8002e24:	ffffc000 	.word	0xffffc000
 8002e28:	c000ffff 	.word	0xc000ffff
 8002e2c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	6852      	ldr	r2, [r2, #4]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e66:	f3bf 8f5f 	dmb	sy
}
 8002e6a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af2b 	bne.w	8002ce4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e005      	b.n	8002eae <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ece:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed0:	b672      	cpsid	i
}
 8002ed2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee2:	b662      	cpsie	i
}
 8002ee4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3734      	adds	r7, #52	; 0x34
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	ffff8000 	.word	0xffff8000

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f06:	4b89      	ldr	r3, [pc, #548]	; (800312c <HAL_GPIO_Init+0x234>)
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f0a:	e194      	b.n	8003236 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8186 	beq.w	8003230 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x44>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	69b9      	ldr	r1, [r7, #24]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80e0 	beq.w	8003230 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003070:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <HAL_GPIO_Init+0x238>)
 8003072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_GPIO_Init+0x238>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_GPIO_Init+0x238>)
 8003082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	4a29      	ldr	r2, [pc, #164]	; (8003134 <HAL_GPIO_Init+0x23c>)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a20      	ldr	r2, [pc, #128]	; (8003138 <HAL_GPIO_Init+0x240>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d052      	beq.n	8003160 <HAL_GPIO_Init+0x268>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_GPIO_Init+0x244>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_GPIO_Init+0x22e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_GPIO_Init+0x248>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x22a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_GPIO_Init+0x24c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x226>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_GPIO_Init+0x250>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x222>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_GPIO_Init+0x254>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x21e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <HAL_GPIO_Init+0x258>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x21a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a19      	ldr	r2, [pc, #100]	; (8003154 <HAL_GPIO_Init+0x25c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x216>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_GPIO_Init+0x260>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_GPIO_Init+0x264>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x20e>
 8003102:	2309      	movs	r3, #9
 8003104:	e02d      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 8003106:	230a      	movs	r3, #10
 8003108:	e02b      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 800310a:	2308      	movs	r3, #8
 800310c:	e029      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 800310e:	2307      	movs	r3, #7
 8003110:	e027      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 8003112:	2306      	movs	r3, #6
 8003114:	e025      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 8003116:	2305      	movs	r3, #5
 8003118:	e023      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 800311a:	2304      	movs	r3, #4
 800311c:	e021      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 800311e:	2303      	movs	r3, #3
 8003120:	e01f      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 8003122:	2302      	movs	r3, #2
 8003124:	e01d      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 8003126:	2301      	movs	r3, #1
 8003128:	e01b      	b.n	8003162 <HAL_GPIO_Init+0x26a>
 800312a:	bf00      	nop
 800312c:	58000080 	.word	0x58000080
 8003130:	58024400 	.word	0x58024400
 8003134:	58000400 	.word	0x58000400
 8003138:	58020000 	.word	0x58020000
 800313c:	58020400 	.word	0x58020400
 8003140:	58020800 	.word	0x58020800
 8003144:	58020c00 	.word	0x58020c00
 8003148:	58021000 	.word	0x58021000
 800314c:	58021400 	.word	0x58021400
 8003150:	58021800 	.word	0x58021800
 8003154:	58021c00 	.word	0x58021c00
 8003158:	58022000 	.word	0x58022000
 800315c:	58022400 	.word	0x58022400
 8003160:	2300      	movs	r3, #0
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	4093      	lsls	r3, r2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003172:	4938      	ldr	r1, [pc, #224]	; (8003254 <HAL_GPIO_Init+0x35c>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	3301      	adds	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f ae63 	bne.w	8002f0c <HAL_GPIO_Init+0x14>
  }
}
 8003246:	bf00      	nop
 8003248:	bf00      	nop
 800324a:	3724      	adds	r7, #36	; 0x24
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	58000400 	.word	0x58000400

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_PWREx_ConfigSupply+0x70>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d00a      	beq.n	80032b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_PWREx_ConfigSupply+0x70>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01f      	b.n	80032f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e01d      	b.n	80032f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_PWREx_ConfigSupply+0x70>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	490f      	ldr	r1, [pc, #60]	; (80032fc <HAL_PWREx_ConfigSupply+0x70>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032c6:	f7fd ff2d 	bl	8001124 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032cc:	e009      	b.n	80032e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032ce:	f7fd ff29 	bl	8001124 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032dc:	d901      	bls.n	80032e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e007      	b.n	80032f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_PWREx_ConfigSupply+0x70>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d1ee      	bne.n	80032ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	58024800 	.word	0x58024800

08003300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f000 bc48 	b.w	8003ba4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8088 	beq.w	8003432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003322:	4b99      	ldr	r3, [pc, #612]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332c:	4b96      	ldr	r3, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	2b10      	cmp	r3, #16
 8003336:	d007      	beq.n	8003348 <HAL_RCC_OscConfig+0x48>
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	2b18      	cmp	r3, #24
 800333c:	d111      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d06d      	beq.n	8003430 <HAL_RCC_OscConfig+0x130>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d169      	bne.n	8003430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f000 bc21 	b.w	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x7a>
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x9c>
 8003382:	4b81      	ldr	r3, [pc, #516]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7d      	ldr	r2, [pc, #500]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033a6:	4b78      	ldr	r3, [pc, #480]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a77      	ldr	r2, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b75      	ldr	r3, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a74      	ldr	r2, [pc, #464]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 80033c0:	4b71      	ldr	r3, [pc, #452]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a70      	ldr	r2, [pc, #448]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b6e      	ldr	r3, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6d      	ldr	r2, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fd fea0 	bl	8001124 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fd fe9c 	bl	8001124 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e3d4      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fe8c 	bl	8001124 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd fe88 	bl	8001124 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e3c0      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003422:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x110>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80ca 	beq.w	80035d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003440:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003448:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800344a:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_RCC_OscConfig+0x166>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	2b18      	cmp	r3, #24
 800345a:	d156      	bne.n	800350a <HAL_RCC_OscConfig+0x20a>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d151      	bne.n	800350a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003466:	4b48      	ldr	r3, [pc, #288]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x17e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e392      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800347e:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0219 	bic.w	r2, r3, #25
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	493f      	ldr	r1, [pc, #252]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fd fe48 	bl	8001124 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7fd fe44 	bl	8001124 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e37c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	f7fd fe41 	bl	800113c <HAL_GetREVID>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d817      	bhi.n	80034f4 <HAL_RCC_OscConfig+0x1f4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d108      	bne.n	80034de <HAL_RCC_OscConfig+0x1de>
 80034cc:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034dc:	e07a      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	031b      	lsls	r3, r3, #12
 80034ec:	4926      	ldr	r1, [pc, #152]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f2:	e06f      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	4921      	ldr	r1, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003508:	e064      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d047      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0219 	bic.w	r2, r3, #25
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	491a      	ldr	r1, [pc, #104]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd fdfe 	bl	8001124 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd fdfa 	bl	8001124 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e332      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	f7fd fdf7 	bl	800113c <HAL_GetREVID>
 800354e:	4603      	mov	r3, r0
 8003550:	f241 0203 	movw	r2, #4099	; 0x1003
 8003554:	4293      	cmp	r3, r2
 8003556:	d819      	bhi.n	800358c <HAL_RCC_OscConfig+0x28c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d108      	bne.n	8003572 <HAL_RCC_OscConfig+0x272>
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356e:	6053      	str	r3, [r2, #4]
 8003570:	e030      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	031b      	lsls	r3, r3, #12
 8003580:	4901      	ldr	r1, [pc, #4]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
 8003586:	e025      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
 8003588:	58024400 	.word	0x58024400
 800358c:	4b9a      	ldr	r3, [pc, #616]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	4997      	ldr	r1, [pc, #604]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e018      	b.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b95      	ldr	r3, [pc, #596]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a94      	ldr	r2, [pc, #592]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fd fdb9 	bl	8001124 <HAL_GetTick>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b6:	f7fd fdb5 	bl	8001124 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e2ed      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035c8:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a9 	beq.w	8003734 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ec:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d007      	beq.n	8003608 <HAL_RCC_OscConfig+0x308>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b18      	cmp	r3, #24
 80035fc:	d13a      	bne.n	8003674 <HAL_RCC_OscConfig+0x374>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d135      	bne.n	8003674 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003608:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_OscConfig+0x320>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e2c1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003620:	f7fd fd8c 	bl	800113c <HAL_GetREVID>
 8003624:	4603      	mov	r3, r0
 8003626:	f241 0203 	movw	r2, #4099	; 0x1003
 800362a:	4293      	cmp	r3, r2
 800362c:	d817      	bhi.n	800365e <HAL_RCC_OscConfig+0x35e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	2b20      	cmp	r3, #32
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x348>
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003644:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003646:	e075      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	069b      	lsls	r3, r3, #26
 8003656:	4968      	ldr	r1, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800365c:	e06a      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365e:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	4962      	ldr	r1, [pc, #392]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003672:	e05f      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d042      	beq.n	8003702 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800367c:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5d      	ldr	r2, [pc, #372]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fd4c 	bl	8001124 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003690:	f7fd fd48 	bl	8001124 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e280      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a2:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ae:	f7fd fd45 	bl	800113c <HAL_GetREVID>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d817      	bhi.n	80036ec <HAL_RCC_OscConfig+0x3ec>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d108      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3d6>
 80036c4:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036cc:	4a4a      	ldr	r2, [pc, #296]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036d2:	6053      	str	r3, [r2, #4]
 80036d4:	e02e      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	4944      	ldr	r1, [pc, #272]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
 80036ea:	e023      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	493f      	ldr	r1, [pc, #252]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
 8003700:	e018      	b.n	8003734 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003702:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fd fd09 	bl	8001124 <HAL_GetTick>
 8003712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003716:	f7fd fd05 	bl	8001124 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e23d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d036      	beq.n	80037ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d019      	beq.n	800377c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374c:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd fce6 	bl	8001124 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fd fce2 	bl	8001124 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e21a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x45c>
 800377a:	e018      	b.n	80037ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd fccc 	bl	8001124 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003790:	f7fd fcc8 	bl	8001124 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e200      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d039      	beq.n	800382e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01c      	beq.n	80037fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037ce:	f7fd fca9 	bl	8001124 <HAL_GetTick>
 80037d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d6:	f7fd fca5 	bl	8001124 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e1dd      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
 80037f4:	e01b      	b.n	800382e <HAL_RCC_OscConfig+0x52e>
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037fc:	4b9b      	ldr	r3, [pc, #620]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a9a      	ldr	r2, [pc, #616]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003806:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003808:	f7fd fc8c 	bl	8001124 <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003810:	f7fd fc88 	bl	8001124 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1c0      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003822:	4b92      	ldr	r3, [pc, #584]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8081 	beq.w	800393e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800383c:	4b8c      	ldr	r3, [pc, #560]	; (8003a70 <HAL_RCC_OscConfig+0x770>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a8b      	ldr	r2, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x770>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003848:	f7fd fc6c 	bl	8001124 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003850:	f7fd fc68 	bl	8001124 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1a0      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003862:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <HAL_RCC_OscConfig+0x770>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x584>
 8003876:	4b7d      	ldr	r3, [pc, #500]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a7c      	ldr	r2, [pc, #496]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	e02d      	b.n	80038e0 <HAL_RCC_OscConfig+0x5e0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5a6>
 800388c:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a76      	ldr	r2, [pc, #472]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a73      	ldr	r2, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x5e0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5c8>
 80038ae:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a6e      	ldr	r2, [pc, #440]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ba:	4b6c      	ldr	r3, [pc, #432]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x5e0>
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a67      	ldr	r2, [pc, #412]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
 80038d4:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a64      	ldr	r2, [pc, #400]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fd fc1c 	bl	8001124 <HAL_GetTick>
 80038ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fd fc18 	bl	8001124 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e14e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003906:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ee      	beq.n	80038f0 <HAL_RCC_OscConfig+0x5f0>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd fc06 	bl	8001124 <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fd fc02 	bl	8001124 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e138      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003932:	4b4e      	ldr	r3, [pc, #312]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 812d 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003950:	2b18      	cmp	r3, #24
 8003952:	f000 80bd 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b02      	cmp	r3, #2
 800395c:	f040 809e 	bne.w	8003a9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a41      	ldr	r2, [pc, #260]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fbda 	bl	8001124 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd fbd6 	bl	8001124 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e10e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003986:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003996:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x774>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	430a      	orrs	r2, r1
 80039a6:	4931      	ldr	r1, [pc, #196]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	628b      	str	r3, [r1, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	3b01      	subs	r3, #1
 80039b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	3b01      	subs	r3, #1
 80039bc:	025b      	lsls	r3, r3, #9
 80039be:	b29b      	uxth	r3, r3
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	3b01      	subs	r3, #1
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039dc:	4923      	ldr	r1, [pc, #140]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x778>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039fa:	00d2      	lsls	r2, r2, #3
 80039fc:	491b      	ldr	r1, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f023 020c 	bic.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f023 0202 	bic.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	4912      	ldr	r1, [pc, #72]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fb5f 	bl	8001124 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a68:	e011      	b.n	8003a8e <HAL_RCC_OscConfig+0x78e>
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	58024800 	.word	0x58024800
 8003a74:	fffffc0c 	.word	0xfffffc0c
 8003a78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd fb52 	bl	8001124 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e08a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x77c>
 8003a9a:	e082      	b.n	8003ba2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fb3c 	bl	8001124 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fb38 	bl	8001124 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e070      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x7b0>
 8003ace:	e068      	b.n	8003ba2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ad0:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d031      	beq.n	8003b48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0203 	and.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d12a      	bne.n	8003b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d122      	bne.n	8003b48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11a      	bne.n	8003b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0a5b      	lsrs	r3, r3, #9
 8003b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d111      	bne.n	8003b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d108      	bne.n	8003b48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0e1b      	lsrs	r3, r3, #24
 8003b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e02b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d01f      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a11      	ldr	r2, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b6e:	f7fd fad9 	bl	8001124 <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b74:	bf00      	nop
 8003b76:	f7fd fad5 	bl	8001124 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d0f9      	beq.n	8003b76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_RCC_OscConfig+0x8b0>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b8e:	00d2      	lsls	r2, r2, #3
 8003b90:	4906      	ldr	r1, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_RCC_OscConfig+0x8ac>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3730      	adds	r7, #48	; 0x30
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	ffff0007 	.word	0xffff0007

08003bb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e19c      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b8a      	ldr	r3, [pc, #552]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b87      	ldr	r3, [pc, #540]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4985      	ldr	r1, [pc, #532]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b83      	ldr	r3, [pc, #524]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e184      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	4b7b      	ldr	r3, [pc, #492]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d908      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c14:	4b78      	ldr	r3, [pc, #480]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4975      	ldr	r1, [pc, #468]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	4b70      	ldr	r3, [pc, #448]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d908      	bls.n	8003c54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c42:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	496a      	ldr	r1, [pc, #424]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d908      	bls.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c70:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	495e      	ldr	r1, [pc, #376]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d908      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4953      	ldr	r1, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d908      	bls.n	8003cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f023 020f 	bic.w	r2, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4947      	ldr	r1, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d055      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4940      	ldr	r1, [pc, #256]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d04:	4b3c      	ldr	r3, [pc, #240]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d121      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0f6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d115      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0ea      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0de      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d44:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 0207 	bic.w	r2, r3, #7
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d66:	f7fd f9dd 	bl	8001124 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6e:	f7fd f9d9 	bl	8001124 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0be      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d1eb      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d208      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d214      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	4906      	ldr	r1, [pc, #24]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e086      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
 8003df4:	52002000 	.word	0x52002000
 8003df8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d208      	bcs.n	8003e2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e18:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d208      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	492e      	ldr	r1, [pc, #184]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d208      	bcs.n	8003e86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	4922      	ldr	r1, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d208      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4917      	ldr	r1, [pc, #92]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eb4:	f000 f834 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4912      	ldr	r1, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x35c>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <HAL_RCC_ClockConfig+0x35c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x360>)
 8003eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x364>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x368>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fd38 	bl	800096c <HAL_InitTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	080168c4 	.word	0x080168c4
 8003f14:	24000004 	.word	0x24000004
 8003f18:	24000000 	.word	0x24000000
 8003f1c:	24000008 	.word	0x24000008

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f26:	4bb3      	ldr	r3, [pc, #716]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2e:	2b18      	cmp	r3, #24
 8003f30:	f200 8155 	bhi.w	80041de <HAL_RCC_GetSysClockFreq+0x2be>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	080041df 	.word	0x080041df
 8003f44:	080041df 	.word	0x080041df
 8003f48:	080041df 	.word	0x080041df
 8003f4c:	080041df 	.word	0x080041df
 8003f50:	080041df 	.word	0x080041df
 8003f54:	080041df 	.word	0x080041df
 8003f58:	080041df 	.word	0x080041df
 8003f5c:	08003fc7 	.word	0x08003fc7
 8003f60:	080041df 	.word	0x080041df
 8003f64:	080041df 	.word	0x080041df
 8003f68:	080041df 	.word	0x080041df
 8003f6c:	080041df 	.word	0x080041df
 8003f70:	080041df 	.word	0x080041df
 8003f74:	080041df 	.word	0x080041df
 8003f78:	080041df 	.word	0x080041df
 8003f7c:	08003fcd 	.word	0x08003fcd
 8003f80:	080041df 	.word	0x080041df
 8003f84:	080041df 	.word	0x080041df
 8003f88:	080041df 	.word	0x080041df
 8003f8c:	080041df 	.word	0x080041df
 8003f90:	080041df 	.word	0x080041df
 8003f94:	080041df 	.word	0x080041df
 8003f98:	080041df 	.word	0x080041df
 8003f9c:	08003fd3 	.word	0x08003fd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa0:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fac:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	4a90      	ldr	r2, [pc, #576]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003fbe:	e111      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fc0:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc2:	61bb      	str	r3, [r7, #24]
      break;
 8003fc4:	e10e      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc8:	61bb      	str	r3, [r7, #24]
      break;
 8003fca:	e10b      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003fcc:	4b8c      	ldr	r3, [pc, #560]	; (8004200 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fce:	61bb      	str	r3, [r7, #24]
      break;
 8003fd0:	e108      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd2:	4b88      	ldr	r3, [pc, #544]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fdc:	4b85      	ldr	r3, [pc, #532]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fe8:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ff2:	4b80      	ldr	r3, [pc, #512]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80e1 	beq.w	80041d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b02      	cmp	r3, #2
 800401a:	f000 8083 	beq.w	8004124 <HAL_RCC_GetSysClockFreq+0x204>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b02      	cmp	r3, #2
 8004022:	f200 80a1 	bhi.w	8004168 <HAL_RCC_GetSysClockFreq+0x248>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x114>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d056      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004032:	e099      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004034:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004040:	4b6c      	ldr	r3, [pc, #432]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406a:	4b62      	ldr	r3, [pc, #392]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407a:	ed97 6a02 	vldr	s12, [r7, #8]
 800407e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800409a:	e087      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040be:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040de:	e065      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800420c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f2:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004102:	ed97 6a02 	vldr	s12, [r7, #8]
 8004106:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800410a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004122:	e043      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004210 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004146:	ed97 6a02 	vldr	s12, [r7, #8]
 800414a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800414e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004166:	e021      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eddf 6a26 	vldr	s13, [pc, #152]	; 800420c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418a:	ed97 6a02 	vldr	s12, [r7, #8]
 800418e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	0a5b      	lsrs	r3, r3, #9
 80041b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b6:	3301      	adds	r3, #1
 80041b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d0:	ee17 3a90 	vmov	r3, s15
 80041d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041d6:	e005      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
      break;
 80041dc:	e002      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041e0:	61bb      	str	r3, [r7, #24]
      break;
 80041e2:	bf00      	nop
  }

  return sysclockfreq;
 80041e4:	69bb      	ldr	r3, [r7, #24]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	; 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	03d09000 	.word	0x03d09000
 80041fc:	003d0900 	.word	0x003d0900
 8004200:	007a1200 	.word	0x007a1200
 8004204:	46000000 	.word	0x46000000
 8004208:	4c742400 	.word	0x4c742400
 800420c:	4a742400 	.word	0x4a742400
 8004210:	4af42400 	.word	0x4af42400

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800421a:	f7ff fe81 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 800421e:	4602      	mov	r2, r0
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCC_GetHCLKFreq+0x50>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	490f      	ldr	r1, [pc, #60]	; (8004268 <HAL_RCC_GetHCLKFreq+0x54>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	fa22 f303 	lsr.w	r3, r2, r3
 8004236:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_RCC_GetHCLKFreq+0x50>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_RCC_GetHCLKFreq+0x54>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_RCC_GetHCLKFreq+0x58>)
 8004250:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_GetHCLKFreq+0x58>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	58024400 	.word	0x58024400
 8004268:	080168c4 	.word	0x080168c4
 800426c:	24000004 	.word	0x24000004
 8004270:	24000000 	.word	0x24000000

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004278:	f7ff ffcc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCC_GetPCLK1Freq+0x28>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	58024400 	.word	0x58024400
 800429c:	080168c4 	.word	0x080168c4

080042a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	223f      	movs	r2, #63	; 0x3f
 80042ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0207 	and.w	r2, r3, #7
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 020f 	and.w	r2, r3, #15
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_GetClockConfig+0x7c>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_GetClockConfig+0x80>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	58024400 	.word	0x58024400
 8004320:	52002000 	.word	0x52002000

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e049      	b.n	80043ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f841 	bl	80043d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fa00 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e054      	b.n	80044aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d01d      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a22      	ldr	r2, [pc, #136]	; (80044bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <HAL_TIM_Base_Start_IT+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d015      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d011      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e008      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40001800 	.word	0x40001800
 80044d0:	40014000 	.word	0x40014000
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0202 	mvn.w	r2, #2
 8004504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f905 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8f7 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f908 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8db 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8cd 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8de 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0208 	mvn.w	r2, #8
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2204      	movs	r2, #4
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8b1 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8a3 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8b4 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0210 	mvn.w	r2, #16
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2208      	movs	r2, #8
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f887 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f879 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f88a 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0201 	mvn.w	r2, #1
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc f952 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f914 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f907 	bl	80048c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f838 	bl	8004752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0220 	mvn.w	r2, #32
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8c7 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <TIM_Base_SetConfig+0x114>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d00f      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3d      	ldr	r2, [pc, #244]	; (8004880 <TIM_Base_SetConfig+0x118>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00b      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <TIM_Base_SetConfig+0x11c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <TIM_Base_SetConfig+0x120>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3a      	ldr	r2, [pc, #232]	; (800488c <TIM_Base_SetConfig+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2f      	ldr	r2, [pc, #188]	; (800487c <TIM_Base_SetConfig+0x114>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01f      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d01b      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <TIM_Base_SetConfig+0x118>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d017      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <TIM_Base_SetConfig+0x11c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <TIM_Base_SetConfig+0x120>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00f      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0x124>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <TIM_Base_SetConfig+0x128>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <TIM_Base_SetConfig+0x12c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <TIM_Base_SetConfig+0x130>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <TIM_Base_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <TIM_Base_SetConfig+0xf8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <TIM_Base_SetConfig+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0xf8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <TIM_Base_SetConfig+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0xf8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <TIM_Base_SetConfig+0x12c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0xf8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <TIM_Base_SetConfig+0x130>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40010400 	.word	0x40010400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80048de:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <MX_LWIP_Init+0x244>)
 80048e0:	22c0      	movs	r2, #192	; 0xc0
 80048e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80048e4:	4b8d      	ldr	r3, [pc, #564]	; (8004b1c <MX_LWIP_Init+0x244>)
 80048e6:	22a8      	movs	r2, #168	; 0xa8
 80048e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80048ea:	4b8c      	ldr	r3, [pc, #560]	; (8004b1c <MX_LWIP_Init+0x244>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80048f0:	4b8a      	ldr	r3, [pc, #552]	; (8004b1c <MX_LWIP_Init+0x244>)
 80048f2:	220a      	movs	r2, #10
 80048f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80048f6:	4b8a      	ldr	r3, [pc, #552]	; (8004b20 <MX_LWIP_Init+0x248>)
 80048f8:	22ff      	movs	r2, #255	; 0xff
 80048fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80048fc:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <MX_LWIP_Init+0x248>)
 80048fe:	22ff      	movs	r2, #255	; 0xff
 8004900:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004902:	4b87      	ldr	r3, [pc, #540]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004908:	4b85      	ldr	r3, [pc, #532]	; (8004b20 <MX_LWIP_Init+0x248>)
 800490a:	2200      	movs	r2, #0
 800490c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800490e:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004914:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004916:	2200      	movs	r2, #0
 8004918:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800491a:	4b82      	ldr	r3, [pc, #520]	; (8004b24 <MX_LWIP_Init+0x24c>)
 800491c:	2200      	movs	r2, #0
 800491e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004920:	4b80      	ldr	r3, [pc, #512]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004922:	2200      	movs	r2, #0
 8004924:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004926:	2100      	movs	r1, #0
 8004928:	2000      	movs	r0, #0
 800492a:	f003 fe97 	bl	800865c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800492e:	4b7b      	ldr	r3, [pc, #492]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	061a      	lsls	r2, r3, #24
 8004934:	4b79      	ldr	r3, [pc, #484]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
 800493c:	4b77      	ldr	r3, [pc, #476]	; (8004b1c <MX_LWIP_Init+0x244>)
 800493e:	789b      	ldrb	r3, [r3, #2]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	4313      	orrs	r3, r2
 8004944:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004946:	78d2      	ldrb	r2, [r2, #3]
 8004948:	4313      	orrs	r3, r2
 800494a:	061a      	lsls	r2, r3, #24
 800494c:	4b73      	ldr	r3, [pc, #460]	; (8004b1c <MX_LWIP_Init+0x244>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	0619      	lsls	r1, r3, #24
 8004952:	4b72      	ldr	r3, [pc, #456]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	4319      	orrs	r1, r3
 800495a:	4b70      	ldr	r3, [pc, #448]	; (8004b1c <MX_LWIP_Init+0x244>)
 800495c:	789b      	ldrb	r3, [r3, #2]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	430b      	orrs	r3, r1
 8004962:	496e      	ldr	r1, [pc, #440]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004964:	78c9      	ldrb	r1, [r1, #3]
 8004966:	430b      	orrs	r3, r1
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800496e:	431a      	orrs	r2, r3
 8004970:	4b6a      	ldr	r3, [pc, #424]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	0619      	lsls	r1, r3, #24
 8004976:	4b69      	ldr	r3, [pc, #420]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	4319      	orrs	r1, r3
 800497e:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004980:	789b      	ldrb	r3, [r3, #2]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	430b      	orrs	r3, r1
 8004986:	4965      	ldr	r1, [pc, #404]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004988:	78c9      	ldrb	r1, [r1, #3]
 800498a:	430b      	orrs	r3, r1
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004992:	431a      	orrs	r2, r3
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <MX_LWIP_Init+0x244>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	0619      	lsls	r1, r3, #24
 800499a:	4b60      	ldr	r3, [pc, #384]	; (8004b1c <MX_LWIP_Init+0x244>)
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	4319      	orrs	r1, r3
 80049a2:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <MX_LWIP_Init+0x244>)
 80049a4:	789b      	ldrb	r3, [r3, #2]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	430b      	orrs	r3, r1
 80049aa:	495c      	ldr	r1, [pc, #368]	; (8004b1c <MX_LWIP_Init+0x244>)
 80049ac:	78c9      	ldrb	r1, [r1, #3]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	4313      	orrs	r3, r2
 80049b4:	4a5c      	ldr	r2, [pc, #368]	; (8004b28 <MX_LWIP_Init+0x250>)
 80049b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	061a      	lsls	r2, r3, #24
 80049be:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049c8:	789b      	ldrb	r3, [r3, #2]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	4313      	orrs	r3, r2
 80049ce:	4a54      	ldr	r2, [pc, #336]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049d0:	78d2      	ldrb	r2, [r2, #3]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	061a      	lsls	r2, r3, #24
 80049d6:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	0619      	lsls	r1, r3, #24
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	4319      	orrs	r1, r3
 80049e4:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049e6:	789b      	ldrb	r3, [r3, #2]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	430b      	orrs	r3, r1
 80049ec:	494c      	ldr	r1, [pc, #304]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049ee:	78c9      	ldrb	r1, [r1, #3]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049f8:	431a      	orrs	r2, r3
 80049fa:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <MX_LWIP_Init+0x248>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	0619      	lsls	r1, r3, #24
 8004a00:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	4319      	orrs	r1, r3
 8004a08:	4b45      	ldr	r3, [pc, #276]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a0a:	789b      	ldrb	r3, [r3, #2]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	4943      	ldr	r1, [pc, #268]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a12:	78c9      	ldrb	r1, [r1, #3]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	0619      	lsls	r1, r3, #24
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	4319      	orrs	r1, r3
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a2e:	789b      	ldrb	r3, [r3, #2]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	430b      	orrs	r3, r1
 8004a34:	493a      	ldr	r1, [pc, #232]	; (8004b20 <MX_LWIP_Init+0x248>)
 8004a36:	78c9      	ldrb	r1, [r1, #3]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	0e1b      	lsrs	r3, r3, #24
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <MX_LWIP_Init+0x254>)
 8004a40:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	061a      	lsls	r2, r3, #24
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a52:	789b      	ldrb	r3, [r3, #2]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	4313      	orrs	r3, r2
 8004a58:	4a32      	ldr	r2, [pc, #200]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a5a:	78d2      	ldrb	r2, [r2, #3]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	061a      	lsls	r2, r3, #24
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	0619      	lsls	r1, r3, #24
 8004a66:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	4319      	orrs	r1, r3
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	430b      	orrs	r3, r1
 8004a76:	492b      	ldr	r1, [pc, #172]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a78:	78c9      	ldrb	r1, [r1, #3]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a82:	431a      	orrs	r2, r3
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	0619      	lsls	r1, r3, #24
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	4319      	orrs	r1, r3
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a94:	789b      	ldrb	r3, [r3, #2]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	4922      	ldr	r1, [pc, #136]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004a9c:	78c9      	ldrb	r1, [r1, #3]
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	0619      	lsls	r1, r3, #24
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	4319      	orrs	r1, r3
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	430b      	orrs	r3, r1
 8004abe:	4919      	ldr	r1, [pc, #100]	; (8004b24 <MX_LWIP_Init+0x24c>)
 8004ac0:	78c9      	ldrb	r1, [r1, #3]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <MX_LWIP_Init+0x258>)
 8004aca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <MX_LWIP_Init+0x25c>)
 8004ace:	9302      	str	r3, [sp, #8]
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <MX_LWIP_Init+0x260>)
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <MX_LWIP_Init+0x258>)
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <MX_LWIP_Init+0x254>)
 8004adc:	4912      	ldr	r1, [pc, #72]	; (8004b28 <MX_LWIP_Init+0x250>)
 8004ade:	4817      	ldr	r0, [pc, #92]	; (8004b3c <MX_LWIP_Init+0x264>)
 8004ae0:	f004 fc3e 	bl	8009360 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ae4:	4815      	ldr	r0, [pc, #84]	; (8004b3c <MX_LWIP_Init+0x264>)
 8004ae6:	f004 fded 	bl	80096c4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004aea:	4814      	ldr	r0, [pc, #80]	; (8004b3c <MX_LWIP_Init+0x264>)
 8004aec:	f004 fdfa 	bl	80096e4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004af0:	4913      	ldr	r1, [pc, #76]	; (8004b40 <MX_LWIP_Init+0x268>)
 8004af2:	4812      	ldr	r0, [pc, #72]	; (8004b3c <MX_LWIP_Init+0x264>)
 8004af4:	f004 fef8 	bl	80098e8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <MX_LWIP_Init+0x26c>)
 8004afa:	1d3c      	adds	r4, r7, #4
 8004afc:	461d      	mov	r5, r3
 8004afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	490b      	ldr	r1, [pc, #44]	; (8004b3c <MX_LWIP_Init+0x264>)
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd88 	bl	8005624 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b14:	bf00      	nop
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b1c:	24000398 	.word	0x24000398
 8004b20:	2400039c 	.word	0x2400039c
 8004b24:	240003a0 	.word	0x240003a0
 8004b28:	2400038c 	.word	0x2400038c
 8004b2c:	24000390 	.word	0x24000390
 8004b30:	24000394 	.word	0x24000394
 8004b34:	08008599 	.word	0x08008599
 8004b38:	0800501d 	.word	0x0800501d
 8004b3c:	24000358 	.word	0x24000358
 8004b40:	08004b49 	.word	0x08004b49
 8004b44:	08013da0 	.word	0x08013da0

08004b48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_ETH_RxCpltCallback+0x1c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fed7 	bl	800591c <osSemaphoreRelease>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	240003ac 	.word	0x240003ac

08004b7c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <HAL_ETH_TxCpltCallback+0x1c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fec7 	bl	800591c <osSemaphoreRelease>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	240003b0 	.word	0x240003b0

08004b9c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fd fc25 	bl	80023f4 <HAL_ETH_GetDMAError>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d104      	bne.n	8004bbe <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_ETH_ErrorCallback+0x2c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 feaf 	bl	800591c <osSemaphoreRelease>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	240003ac 	.word	0x240003ac

08004bcc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004bcc:	b5b0      	push	{r4, r5, r7, lr}
 8004bce:	b0ac      	sub	sp, #176	; 0xb0
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8004be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bea:	2264      	movs	r2, #100	; 0x64
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f00e f9f9 	bl	8012fe6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004bf4:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <low_level_init+0x268>)
 8004bf6:	4a90      	ldr	r2, [pc, #576]	; (8004e38 <low_level_init+0x26c>)
 8004bf8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x80;
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0xE1;
 8004c06:	23e1      	movs	r3, #225	; 0xe1
 8004c08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x00;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0x00;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0x00;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8004c1e:	4a85      	ldr	r2, [pc, #532]	; (8004e34 <low_level_init+0x268>)
 8004c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c24:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004c26:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <low_level_init+0x268>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004c2c:	4b81      	ldr	r3, [pc, #516]	; (8004e34 <low_level_init+0x268>)
 8004c2e:	4a83      	ldr	r2, [pc, #524]	; (8004e3c <low_level_init+0x270>)
 8004c30:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004c32:	4b80      	ldr	r3, [pc, #512]	; (8004e34 <low_level_init+0x268>)
 8004c34:	4a82      	ldr	r2, [pc, #520]	; (8004e40 <low_level_init+0x274>)
 8004c36:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004c38:	4b7e      	ldr	r3, [pc, #504]	; (8004e34 <low_level_init+0x268>)
 8004c3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004c3e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c40:	487c      	ldr	r0, [pc, #496]	; (8004e34 <low_level_init+0x268>)
 8004c42:	f7fc fbf7 	bl	8001434 <HAL_ETH_Init>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004c4c:	2238      	movs	r2, #56	; 0x38
 8004c4e:	2100      	movs	r1, #0
 8004c50:	487c      	ldr	r0, [pc, #496]	; (8004e44 <low_level_init+0x278>)
 8004c52:	f00e f9c8 	bl	8012fe6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004c56:	4b7b      	ldr	r3, [pc, #492]	; (8004e44 <low_level_init+0x278>)
 8004c58:	2221      	movs	r2, #33	; 0x21
 8004c5a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004c5c:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <low_level_init+0x278>)
 8004c5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c62:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004c64:	4b77      	ldr	r3, [pc, #476]	; (8004e44 <low_level_init+0x278>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004c6a:	4877      	ldr	r0, [pc, #476]	; (8004e48 <low_level_init+0x27c>)
 8004c6c:	f004 fa32 	bl	80090d4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2206      	movs	r2, #6
 8004c74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c78:	4b6e      	ldr	r3, [pc, #440]	; (8004e34 <low_level_init+0x268>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c84:	4b6b      	ldr	r3, [pc, #428]	; (8004e34 <low_level_init+0x268>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	785a      	ldrb	r2, [r3, #1]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c90:	4b68      	ldr	r3, [pc, #416]	; (8004e34 <low_level_init+0x268>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	789a      	ldrb	r2, [r3, #2]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c9c:	4b65      	ldr	r3, [pc, #404]	; (8004e34 <low_level_init+0x268>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	78da      	ldrb	r2, [r3, #3]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ca8:	4b62      	ldr	r3, [pc, #392]	; (8004e34 <low_level_init+0x268>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	791a      	ldrb	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004cb4:	4b5f      	ldr	r3, [pc, #380]	; (8004e34 <low_level_init+0x268>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	795a      	ldrb	r2, [r3, #5]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cc6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cce:	f043 030a 	orr.w	r3, r3, #10
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cde:	2300      	movs	r3, #0
 8004ce0:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8004ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fd97 	bl	800581c <osSemaphoreCreate>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <low_level_init+0x280>)
 8004cf2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8004cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fd8a 	bl	800581c <osSemaphoreCreate>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <low_level_init+0x284>)
 8004d0c:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <low_level_init+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fdb3 	bl	8005880 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8004d1a:	4b4d      	ldr	r3, [pc, #308]	; (8004e50 <low_level_init+0x284>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fdad 	bl	8005880 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004d26:	4b4b      	ldr	r3, [pc, #300]	; (8004e54 <low_level_init+0x288>)
 8004d28:	f107 0408 	add.w	r4, r7, #8
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fc6f 	bl	8005624 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004d46:	4944      	ldr	r1, [pc, #272]	; (8004e58 <low_level_init+0x28c>)
 8004d48:	4844      	ldr	r0, [pc, #272]	; (8004e5c <low_level_init+0x290>)
 8004d4a:	f7fc f83a 	bl	8000dc2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004d4e:	4843      	ldr	r0, [pc, #268]	; (8004e5c <low_level_init+0x290>)
 8004d50:	f7fc f869 	bl	8000e26 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004d54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d164      	bne.n	8004e26 <low_level_init+0x25a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d5c:	483f      	ldr	r0, [pc, #252]	; (8004e5c <low_level_init+0x290>)
 8004d5e:	f7fc f90a 	bl	8000f76 <LAN8742_GetLinkState>
 8004d62:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	dc06      	bgt.n	8004d7c <low_level_init+0x1b0>
    {
      netif_set_link_down(netif);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f004 fd8a 	bl	8009888 <netif_set_link_down>
      netif_set_down(netif);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f004 fd21 	bl	80097bc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d7a:	e056      	b.n	8004e2a <low_level_init+0x25e>
      switch (PHYLinkState)
 8004d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d80:	3b02      	subs	r3, #2
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d82a      	bhi.n	8004ddc <low_level_init+0x210>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <low_level_init+0x1c0>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004daf 	.word	0x08004daf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
        duplex = ETH_FULLDUPLEX_MODE;
 8004d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004da4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004dac:	e01f      	b.n	8004dee <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004dbc:	e017      	b.n	8004dee <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 8004dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004dcc:	e00f      	b.n	8004dee <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004dda:	e008      	b.n	8004dee <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 8004ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8004de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8004dec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004dee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004df2:	4619      	mov	r1, r3
 8004df4:	480f      	ldr	r0, [pc, #60]	; (8004e34 <low_level_init+0x268>)
 8004df6:	f7fd f8b7 	bl	8001f68 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8004e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4809      	ldr	r0, [pc, #36]	; (8004e34 <low_level_init+0x268>)
 8004e0e:	f7fd fa7f 	bl	8002310 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004e12:	4808      	ldr	r0, [pc, #32]	; (8004e34 <low_level_init+0x268>)
 8004e14:	f7fc fbf4 	bl	8001600 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f004 fc63 	bl	80096e4 <netif_set_up>
    netif_set_link_up(netif);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f004 fcfe 	bl	8009820 <netif_set_link_up>
}
 8004e24:	e001      	b.n	8004e2a <low_level_init+0x25e>
    Error_Handler();
 8004e26:	f7fb fd7d 	bl	8000924 <Error_Handler>
}
 8004e2a:	bf00      	nop
 8004e2c:	37b0      	adds	r7, #176	; 0xb0
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bdb0      	pop	{r4, r5, r7, pc}
 8004e32:	bf00      	nop
 8004e34:	240003b4 	.word	0x240003b4
 8004e38:	40028000 	.word	0x40028000
 8004e3c:	30040060 	.word	0x30040060
 8004e40:	30040000 	.word	0x30040000
 8004e44:	24000464 	.word	0x24000464
 8004e48:	080168d4 	.word	0x080168d4
 8004e4c:	240003ac 	.word	0x240003ac
 8004e50:	240003b0 	.word	0x240003b0
 8004e54:	08013dc4 	.word	0x08013dc4
 8004e58:	24000010 	.word	0x24000010
 8004e5c:	2400049c 	.word	0x2400049c

08004e60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b092      	sub	sp, #72	; 0x48
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	2230      	movs	r2, #48	; 0x30
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f00e f8b0 	bl	8012fe6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	2230      	movs	r2, #48	; 0x30
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f00e f8a9 	bl	8012fe6 <memset>

  for(q = p; q != NULL; q = q->next)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
 8004e98:	e045      	b.n	8004f26 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d902      	bls.n	8004ea6 <low_level_output+0x46>
      return ERR_IF;
 8004ea0:	f06f 030b 	mvn.w	r3, #11
 8004ea4:	e06c      	b.n	8004f80 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3348      	adds	r3, #72	; 0x48
 8004eb6:	443b      	add	r3, r7
 8004eb8:	3b3c      	subs	r3, #60	; 0x3c
 8004eba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	895b      	ldrh	r3, [r3, #10]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	3348      	adds	r3, #72	; 0x48
 8004ece:	443b      	add	r3, r7
 8004ed0:	3b38      	subs	r3, #56	; 0x38
 8004ed2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004edc:	1e5a      	subs	r2, r3, #1
 8004ede:	f107 000c 	add.w	r0, r7, #12
 8004ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	18c1      	adds	r1, r0, r3
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	3348      	adds	r3, #72	; 0x48
 8004ef8:	443b      	add	r3, r7
 8004efa:	3b34      	subs	r3, #52	; 0x34
 8004efc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3348      	adds	r3, #72	; 0x48
 8004f12:	443b      	add	r3, r7
 8004f14:	3b34      	subs	r3, #52	; 0x34
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
 8004f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1b6      	bne.n	8004e9a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	891b      	ldrh	r3, [r3, #8]
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <low_level_output+0x128>)
 8004f34:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <low_level_output+0x128>)
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <low_level_output+0x128>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004f44:	6838      	ldr	r0, [r7, #0]
 8004f46:	f005 f923 	bl	800a190 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004f4a:	490f      	ldr	r1, [pc, #60]	; (8004f88 <low_level_output+0x128>)
 8004f4c:	480f      	ldr	r0, [pc, #60]	; (8004f8c <low_level_output+0x12c>)
 8004f4e:	f7fc fc5b 	bl	8001808 <HAL_ETH_Transmit_IT>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004f58:	bf00      	nop
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <low_level_output+0x130>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fc8c 	bl	8005880 <osSemaphoreWait>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f5      	bne.n	8004f5a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <low_level_output+0x12c>)
 8004f70:	f7fc fdc9 	bl	8001b06 <HAL_ETH_ReleaseTxPacket>
 8004f74:	e002      	b.n	8004f7c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004f76:	6838      	ldr	r0, [r7, #0]
 8004f78:	f005 f864 	bl	800a044 <pbuf_free>
  }

  return errval;
 8004f7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3748      	adds	r7, #72	; 0x48
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	24000464 	.word	0x24000464
 8004f8c:	240003b4 	.word	0x240003b4
 8004f90:	240003b0 	.word	0x240003b0

08004f94 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <low_level_input+0x2c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004fa8:	f107 030c 	add.w	r3, r7, #12
 8004fac:	4619      	mov	r1, r3
 8004fae:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <low_level_input+0x30>)
 8004fb0:	f7fc fc7b 	bl	80018aa <HAL_ETH_ReadData>
  }

  return p;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	240003a8 	.word	0x240003a8
 8004fc4:	240003b4 	.word	0x240003b4

08004fc8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <ethernetif_input+0x50>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fc4d 	bl	8005880 <osSemaphoreWait>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f5      	bne.n	8004fd8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f7ff ffd1 	bl	8004f94 <low_level_input>
 8004ff2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f005 f81a 	bl	800a044 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ea      	bne.n	8004fec <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005016:	e7df      	b.n	8004fd8 <ethernetif_input+0x10>
 8005018:	240003ac 	.word	0x240003ac

0800501c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <ethernetif_init+0x1c>
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <ethernetif_init+0x48>)
 800502c:	f240 2203 	movw	r2, #515	; 0x203
 8005030:	490d      	ldr	r1, [pc, #52]	; (8005068 <ethernetif_init+0x4c>)
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <ethernetif_init+0x50>)
 8005034:	f00d ff72 	bl	8012f1c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2273      	movs	r2, #115	; 0x73
 800503c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2274      	movs	r2, #116	; 0x74
 8005044:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <ethernetif_init+0x54>)
 800504c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a08      	ldr	r2, [pc, #32]	; (8005074 <ethernetif_init+0x58>)
 8005052:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff fdb9 	bl	8004bcc <low_level_init>

  return ERR_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	08013de0 	.word	0x08013de0
 8005068:	08013dfc 	.word	0x08013dfc
 800506c:	08013e0c 	.word	0x08013e0c
 8005070:	08010db1 	.word	0x08010db1
 8005074:	08004e61 	.word	0x08004e61

08005078 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005084:	68f9      	ldr	r1, [r7, #12]
 8005086:	4809      	ldr	r0, [pc, #36]	; (80050ac <pbuf_free_custom+0x34>)
 8005088:	f004 f914 	bl	80092b4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <pbuf_free_custom+0x38>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <pbuf_free_custom+0x38>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <pbuf_free_custom+0x3c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fc3c 	bl	800591c <osSemaphoreRelease>
  }
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	080168d4 	.word	0x080168d4
 80050b0:	240003a8 	.word	0x240003a8
 80050b4:	240003ac 	.word	0x240003ac

080050b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80050bc:	f7fc f832 	bl	8001124 <HAL_GetTick>
 80050c0:	4603      	mov	r3, r0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08e      	sub	sp, #56	; 0x38
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a69      	ldr	r2, [pc, #420]	; (800528c <HAL_ETH_MspInit+0x1c4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	f040 80cb 	bne.w	8005282 <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80050ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050f2:	4a67      	ldr	r2, [pc, #412]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80050fc:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80050fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800510a:	4b61      	ldr	r3, [pc, #388]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800510c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005110:	4a5f      	ldr	r2, [pc, #380]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800511c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005128:	4b59      	ldr	r3, [pc, #356]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800512a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800512e:	4a58      	ldr	r2, [pc, #352]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005134:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005138:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800513a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005146:	4b52      	ldr	r3, [pc, #328]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800514c:	4a50      	ldr	r2, [pc, #320]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005156:	4b4e      	ldr	r3, [pc, #312]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005164:	4b4a      	ldr	r3, [pc, #296]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516a:	4a49      	ldr	r2, [pc, #292]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005174:	4b46      	ldr	r3, [pc, #280]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	4b43      	ldr	r3, [pc, #268]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005188:	4a41      	ldr	r2, [pc, #260]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005192:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 8005194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80051a0:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80051a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a6:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80051a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051b0:	4b37      	ldr	r3, [pc, #220]	; (8005290 <HAL_ETH_MspInit+0x1c8>)
 80051b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80051be:	2332      	movs	r3, #50	; 0x32
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c2:	2302      	movs	r3, #2
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ca:	2303      	movs	r3, #3
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051ce:	230b      	movs	r3, #11
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051d6:	4619      	mov	r1, r3
 80051d8:	482e      	ldr	r0, [pc, #184]	; (8005294 <HAL_ETH_MspInit+0x1cc>)
 80051da:	f7fd fe8d 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80051de:	2386      	movs	r3, #134	; 0x86
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e2:	2302      	movs	r3, #2
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ea:	2303      	movs	r3, #3
 80051ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051ee:	230b      	movs	r3, #11
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f6:	4619      	mov	r1, r3
 80051f8:	4827      	ldr	r0, [pc, #156]	; (8005298 <HAL_ETH_MspInit+0x1d0>)
 80051fa:	f7fd fe7d 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051fe:	2301      	movs	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800520e:	230b      	movs	r3, #11
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005216:	4619      	mov	r1, r3
 8005218:	4820      	ldr	r0, [pc, #128]	; (800529c <HAL_ETH_MspInit+0x1d4>)
 800521a:	f7fd fe6d 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800521e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005230:	230b      	movs	r3, #11
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005238:	4619      	mov	r1, r3
 800523a:	4818      	ldr	r0, [pc, #96]	; (800529c <HAL_ETH_MspInit+0x1d4>)
 800523c:	f7fd fe5c 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005240:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005246:	2302      	movs	r3, #2
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524e:	2303      	movs	r3, #3
 8005250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005252:	230b      	movs	r3, #11
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525a:	4619      	mov	r1, r3
 800525c:	4810      	ldr	r0, [pc, #64]	; (80052a0 <HAL_ETH_MspInit+0x1d8>)
 800525e:	f7fd fe4b 	bl	8002ef8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005262:	2200      	movs	r2, #0
 8005264:	2105      	movs	r1, #5
 8005266:	203d      	movs	r0, #61	; 0x3d
 8005268:	f7fc f840 	bl	80012ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800526c:	203d      	movs	r0, #61	; 0x3d
 800526e:	f7fc f857 	bl	8001320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	2105      	movs	r1, #5
 8005276:	203e      	movs	r0, #62	; 0x3e
 8005278:	f7fc f838 	bl	80012ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800527c:	203e      	movs	r0, #62	; 0x3e
 800527e:	f7fc f84f 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005282:	bf00      	nop
 8005284:	3738      	adds	r7, #56	; 0x38
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40028000 	.word	0x40028000
 8005290:	58024400 	.word	0x58024400
 8005294:	58020800 	.word	0x58020800
 8005298:	58020000 	.word	0x58020000
 800529c:	58020400 	.word	0x58020400
 80052a0:	58021800 	.word	0x58021800

080052a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <ETH_PHY_IO_Init+0x10>)
 80052aa:	f7fd f84b 	bl	8002344 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	240003b4 	.word	0x240003b4

080052b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return 0;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	4807      	ldr	r0, [pc, #28]	; (80052f8 <ETH_PHY_IO_ReadReg+0x30>)
 80052dc:	f7fc fd9c 	bl	8001e18 <HAL_ETH_ReadPHYRegister>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	e000      	b.n	80052ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	240003b4 	.word	0x240003b4

080052fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	4807      	ldr	r0, [pc, #28]	; (800532c <ETH_PHY_IO_WriteReg+0x30>)
 8005310:	f7fc fdd6 	bl	8001ec0 <HAL_ETH_WritePHYRegister>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	e000      	b.n	8005322 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	240003b4 	.word	0x240003b4

08005330 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005334:	f7fb fef6 	bl	8001124 <HAL_GetTick>
 8005338:	4603      	mov	r3, r0
}
 800533a:	4618      	mov	r0, r3
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0a0      	sub	sp, #128	; 0x80
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	2264      	movs	r2, #100	; 0x64
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f00d fe48 	bl	8012fe6 <memset>
  int32_t PHYLinkState = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800535e:	2300      	movs	r3, #0
 8005360:	67bb      	str	r3, [r7, #120]	; 0x78
 8005362:	2300      	movs	r3, #0
 8005364:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800536a:	483a      	ldr	r0, [pc, #232]	; (8005454 <ethernet_link_thread+0x114>)
 800536c:	f7fb fe03 	bl	8000f76 <LAN8742_GetLinkState>
 8005370:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00c      	beq.n	800539e <ethernet_link_thread+0x5e>
 8005384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005386:	2b01      	cmp	r3, #1
 8005388:	dc09      	bgt.n	800539e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800538a:	4833      	ldr	r0, [pc, #204]	; (8005458 <ethernet_link_thread+0x118>)
 800538c:	f7fc f9c4 	bl	8001718 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005390:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005392:	f004 fa13 	bl	80097bc <netif_set_down>
    netif_set_link_down(netif);
 8005396:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005398:	f004 fa76 	bl	8009888 <netif_set_link_down>
 800539c:	e055      	b.n	800544a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d14e      	bne.n	800544a <ethernet_link_thread+0x10a>
 80053ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	dd4b      	ble.n	800544a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80053b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b4:	3b02      	subs	r3, #2
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d82a      	bhi.n	8005410 <ethernet_link_thread+0xd0>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <ethernet_link_thread+0x80>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053e3 	.word	0x080053e3
 80053c8:	080053f3 	.word	0x080053f3
 80053cc:	08005403 	.word	0x08005403
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80053d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80053d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053e0:	e017      	b.n	8005412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80053e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053ec:	2301      	movs	r3, #1
 80053ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053f0:	e00f      	b.n	8005412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80053f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80053f8:	2300      	movs	r3, #0
 80053fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005400:	e007      	b.n	8005412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005402:	2300      	movs	r3, #0
 8005404:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005406:	2300      	movs	r3, #0
 8005408:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800540a:	2301      	movs	r3, #1
 800540c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800540e:	e000      	b.n	8005412 <ethernet_link_thread+0xd2>
    default:
      break;
 8005410:	bf00      	nop
    }

    if(linkchanged)
 8005412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d018      	beq.n	800544a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	4619      	mov	r1, r3
 800541e:	480e      	ldr	r0, [pc, #56]	; (8005458 <ethernet_link_thread+0x118>)
 8005420:	f7fc fda2 	bl	8001f68 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	4619      	mov	r1, r3
 8005432:	4809      	ldr	r0, [pc, #36]	; (8005458 <ethernet_link_thread+0x118>)
 8005434:	f7fc ff6c 	bl	8002310 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005438:	4807      	ldr	r0, [pc, #28]	; (8005458 <ethernet_link_thread+0x118>)
 800543a:	f7fc f8e1 	bl	8001600 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800543e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005440:	f004 f950 	bl	80096e4 <netif_set_up>
      netif_set_link_up(netif);
 8005444:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005446:	f004 f9eb 	bl	8009820 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800544a:	2064      	movs	r0, #100	; 0x64
 800544c:	f000 f936 	bl	80056bc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005450:	e78b      	b.n	800536a <ethernet_link_thread+0x2a>
 8005452:	bf00      	nop
 8005454:	2400049c 	.word	0x2400049c
 8005458:	240003b4 	.word	0x240003b4

0800545c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005464:	4812      	ldr	r0, [pc, #72]	; (80054b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8005466:	f003 feb1 	bl	80091cc <memp_malloc_pool>
 800546a:	60f8      	str	r0, [r7, #12]
  if (p)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d014      	beq.n	800549c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f103 0220 	add.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8005480:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800548a:	9201      	str	r2, [sp, #4]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2241      	movs	r2, #65	; 0x41
 8005492:	2100      	movs	r1, #0
 8005494:	2000      	movs	r0, #0
 8005496:	f004 fc1b 	bl	8009cd0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800549a:	e005      	b.n	80054a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	080168d4 	.word	0x080168d4
 80054b4:	08005079 	.word	0x08005079
 80054b8:	240003a8 	.word	0x240003a8

080054bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80054bc:	b480      	push	{r7}
 80054be:	b08d      	sub	sp, #52	; 0x34
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3b20      	subs	r3, #32
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	2200      	movs	r2, #0
 80054e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e003      	b.n	8005506 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005504:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	e009      	b.n	8005528 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	891a      	ldrh	r2, [r3, #8]
 8005518:	887b      	ldrh	r3, [r7, #2]
 800551a:	4413      	add	r3, r2
 800551c:	b29a      	uxth	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	623a      	str	r2, [r7, #32]
 8005534:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dd1d      	ble.n	8005578 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f003 021f 	and.w	r2, r3, #31
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800554c:	f3bf 8f4f 	dsb	sy
}
 8005550:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <HAL_ETH_RxLinkCallback+0xcc>)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	3320      	adds	r3, #32
 800555e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3b20      	subs	r3, #32
 8005564:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dcf2      	bgt.n	8005552 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800556c:	f3bf 8f4f 	dsb	sy
}
 8005570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005572:	f3bf 8f6f 	isb	sy
}
 8005576:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005578:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800557a:	bf00      	nop
 800557c:	3734      	adds	r7, #52	; 0x34
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f004 fd55 	bl	800a044 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4603      	mov	r3, r0
 80055aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b4:	2b84      	cmp	r3, #132	; 0x84
 80055b6:	d005      	beq.n	80055c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	3303      	adds	r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d8:	f3ef 8305 	mrs	r3, IPSR
 80055dc:	607b      	str	r3, [r7, #4]
  return(result);
 80055de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055fa:	f001 fc5d 	bl	8006eb8 <vTaskStartScheduler>
  
  return osOK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}

08005604 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005608:	f7ff ffe3 	bl	80055d2 <inHandlerMode>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005612:	f001 fd6b 	bl	80070ec <xTaskGetTickCountFromISR>
 8005616:	4603      	mov	r3, r0
 8005618:	e002      	b.n	8005620 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800561a:	f001 fd57 	bl	80070cc <xTaskGetTickCount>
 800561e:	4603      	mov	r3, r0
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}

08005624 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b089      	sub	sp, #36	; 0x24
 8005628:	af04      	add	r7, sp, #16
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d020      	beq.n	8005678 <osThreadCreate+0x54>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01c      	beq.n	8005678 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685c      	ldr	r4, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691e      	ldr	r6, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ffa6 	bl	80055a2 <makeFreeRtosPriority>
 8005656:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005660:	9202      	str	r2, [sp, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9100      	str	r1, [sp, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	4632      	mov	r2, r6
 800566a:	4629      	mov	r1, r5
 800566c:	4620      	mov	r0, r4
 800566e:	f001 fa5b 	bl	8006b28 <xTaskCreateStatic>
 8005672:	4603      	mov	r3, r0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e01c      	b.n	80056b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685c      	ldr	r4, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005684:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff88 	bl	80055a2 <makeFreeRtosPriority>
 8005692:	4602      	mov	r2, r0
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	9200      	str	r2, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	4632      	mov	r2, r6
 80056a0:	4629      	mov	r1, r5
 80056a2:	4620      	mov	r0, r4
 80056a4:	f001 fa9d 	bl	8006be2 <xTaskCreate>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <osDelay+0x16>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	e000      	b.n	80056d4 <osDelay+0x18>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fbbb 	bl	8006e50 <vTaskDelay>
  
  return osOK;
 80056da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4619      	mov	r1, r3
 80056fa:	2001      	movs	r0, #1
 80056fc:	f000 fc3f 	bl	8005f7e <xQueueCreateMutexStatic>
 8005700:	4603      	mov	r3, r0
 8005702:	e003      	b.n	800570c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005704:	2001      	movs	r0, #1
 8005706:	f000 fc22 	bl	8005f4e <xQueueCreateMutex>
 800570a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <osMutexWait+0x18>
    return osErrorParameter;
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	e03a      	b.n	80057a2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d103      	bne.n	8005740 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e009      	b.n	8005754 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <osMutexWait+0x40>
      ticks = 1;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005754:	f7ff ff3d 	bl	80055d2 <inHandlerMode>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d017      	beq.n	800578e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	461a      	mov	r2, r3
 8005764:	2100      	movs	r1, #0
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 f836 	bl	80067d8 <xQueueReceiveFromISR>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <osMutexWait+0x62>
      return osErrorOS;
 8005772:	23ff      	movs	r3, #255	; 0xff
 8005774:	e015      	b.n	80057a2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <osMutexWait+0x8c>
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <osMutexWait+0x98>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	e008      	b.n	80057a0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 ff15 	bl	80065c0 <xQueueSemaphoreTake>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d001      	beq.n	80057a0 <osMutexWait+0x8c>
    return osErrorOS;
 800579c:	23ff      	movs	r3, #255	; 0xff
 800579e:	e000      	b.n	80057a2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80057c0:	f7ff ff07 	bl	80055d2 <inHandlerMode>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80057ca:	f107 0308 	add.w	r3, r7, #8
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fd88 	bl	80062e6 <xQueueGiveFromISR>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <osMutexRelease+0x30>
      return osErrorOS;
 80057dc:	23ff      	movs	r3, #255	; 0xff
 80057de:	e017      	b.n	8005810 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d013      	beq.n	800580e <osMutexRelease+0x5e>
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <osMutexRelease+0x68>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e00a      	b.n	800580e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80057f8:	2300      	movs	r3, #0
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fbd8 	bl	8005fb4 <xQueueGenericSend>
 8005804:	4603      	mov	r3, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800580a:	23ff      	movs	r3, #255	; 0xff
 800580c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00f      	beq.n	800584e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d10a      	bne.n	800584a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2203      	movs	r2, #3
 800583a:	9200      	str	r2, [sp, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	2100      	movs	r1, #0
 8005840:	2001      	movs	r0, #1
 8005842:	f000 fa99 	bl	8005d78 <xQueueGenericCreateStatic>
 8005846:	4603      	mov	r3, r0
 8005848:	e016      	b.n	8005878 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	e014      	b.n	8005878 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d110      	bne.n	8005876 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005854:	2203      	movs	r2, #3
 8005856:	2100      	movs	r1, #0
 8005858:	2001      	movs	r0, #1
 800585a:	f000 fb05 	bl	8005e68 <xQueueGenericCreate>
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <osSemaphoreCreate+0x56>
 8005866:	2300      	movs	r3, #0
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fba1 	bl	8005fb4 <xQueueGenericSend>
      return sema;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	e000      	b.n	8005878 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005876:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	e03a      	b.n	800590e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d103      	bne.n	80058ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e009      	b.n	80058c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80058bc:	2301      	movs	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80058c0:	f7ff fe87 	bl	80055d2 <inHandlerMode>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d017      	beq.n	80058fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	461a      	mov	r2, r3
 80058d0:	2100      	movs	r1, #0
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 ff80 	bl	80067d8 <xQueueReceiveFromISR>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d001      	beq.n	80058e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80058de:	23ff      	movs	r3, #255	; 0xff
 80058e0:	e015      	b.n	800590e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d011      	beq.n	800590c <osSemaphoreWait+0x8c>
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <osSemaphoreWait+0x98>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	e008      	b.n	800590c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fe5f 	bl	80065c0 <xQueueSemaphoreTake>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005908:	23ff      	movs	r3, #255	; 0xff
 800590a:	e000      	b.n	800590e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800592c:	f7ff fe51 	bl	80055d2 <inHandlerMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fcd2 	bl	80062e6 <xQueueGiveFromISR>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d001      	beq.n	800594c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005948:	23ff      	movs	r3, #255	; 0xff
 800594a:	e017      	b.n	800597c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <osSemaphoreRelease+0x5e>
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <osSemaphoreRelease+0x68>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	e00a      	b.n	800597a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005964:	2300      	movs	r3, #0
 8005966:	2200      	movs	r2, #0
 8005968:	2100      	movs	r1, #0
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fb22 	bl	8005fb4 <xQueueGenericSend>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d001      	beq.n	800597a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005976:	23ff      	movs	r3, #255	; 0xff
 8005978:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af02      	add	r7, sp, #8
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d011      	beq.n	80059be <osMessageCreate+0x36>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2400      	movs	r4, #0
 80059b4:	9400      	str	r4, [sp, #0]
 80059b6:	f000 f9df 	bl	8005d78 <xQueueGenericCreateStatic>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e008      	b.n	80059d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	4619      	mov	r1, r3
 80059ca:	f000 fa4d 	bl	8005e68 <xQueueGenericCreate>
 80059ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd90      	pop	{r4, r7, pc}

080059d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <osMessagePut+0x1e>
    ticks = 1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80059f6:	f7ff fdec 	bl	80055d2 <inHandlerMode>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d018      	beq.n	8005a32 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a00:	f107 0210 	add.w	r2, r7, #16
 8005a04:	f107 0108 	add.w	r1, r7, #8
 8005a08:	2300      	movs	r3, #0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fbd0 	bl	80061b0 <xQueueGenericSendFromISR>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <osMessagePut+0x42>
      return osErrorOS;
 8005a16:	23ff      	movs	r3, #255	; 0xff
 8005a18:	e018      	b.n	8005a4c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d014      	beq.n	8005a4a <osMessagePut+0x72>
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <osMessagePut+0x7c>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	e00b      	b.n	8005a4a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005a32:	f107 0108 	add.w	r1, r7, #8
 8005a36:	2300      	movs	r3, #0
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 faba 	bl	8005fb4 <xQueueGenericSend>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d001      	beq.n	8005a4a <osMessagePut+0x72>
      return osErrorOS;
 8005a46:	23ff      	movs	r3, #255	; 0xff
 8005a48:	e000      	b.n	8005a4c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b08b      	sub	sp, #44	; 0x2c
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	617b      	str	r3, [r7, #20]
    return event;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	461c      	mov	r4, r3
 8005a7a:	f107 0314 	add.w	r3, r7, #20
 8005a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a86:	e054      	b.n	8005b32 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d103      	bne.n	8005aa0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9e:	e009      	b.n	8005ab4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <osMessageGet+0x5c>
      ticks = 1;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ab4:	f7ff fd8d 	bl	80055d2 <inHandlerMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01c      	beq.n	8005af8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005abe:	f107 0220 	add.w	r2, r7, #32
 8005ac2:	f107 0314 	add.w	r3, r7, #20
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	f000 fe84 	bl	80067d8 <xQueueReceiveFromISR>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d102      	bne.n	8005adc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e001      	b.n	8005ae0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01d      	beq.n	8005b22 <osMessageGet+0xca>
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <osMessageGet+0xe4>)
 8005ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	e014      	b.n	8005b22 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	3304      	adds	r3, #4
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	4619      	mov	r1, r3
 8005b02:	68b8      	ldr	r0, [r7, #8]
 8005b04:	f000 fc7c 	bl	8006400 <xQueueReceive>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d102      	bne.n	8005b14 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005b0e:	2310      	movs	r3, #16
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e006      	b.n	8005b22 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <osMessageGet+0xc6>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e000      	b.n	8005b20 <osMessageGet+0xc8>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	461c      	mov	r4, r3
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	372c      	adds	r7, #44	; 0x2c
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f103 0208 	add.w	r2, r3, #8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f103 0208 	add.w	r2, r3, #8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	601a      	str	r2, [r3, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d103      	bne.n	8005c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e00c      	b.n	8005c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3308      	adds	r3, #8
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e002      	b.n	8005c10 <vListInsert+0x2e>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d2f6      	bcs.n	8005c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6892      	ldr	r2, [r2, #8]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d103      	bne.n	8005c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cd2:	f002 f85f 	bl	8007d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	3b01      	subs	r3, #1
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d114      	bne.n	8005d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01a      	beq.n	8005d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3310      	adds	r3, #16
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fb23 	bl	8007380 <xTaskRemoveFromEventList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <xQueueGenericReset+0xcc>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	e009      	b.n	8005d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3310      	adds	r3, #16
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fef2 	bl	8005b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff feed 	bl	8005b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f002 f845 	bl	8007df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d6a:	2301      	movs	r3, #1
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <xQueueGenericCreateStatic+0x52>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <xQueueGenericCreateStatic+0x56>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericCreateStatic+0x58>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <xQueueGenericCreateStatic+0x7e>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <xQueueGenericCreateStatic+0x82>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueGenericCreateStatic+0x84>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61fb      	str	r3, [r7, #28]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e16:	2348      	movs	r3, #72	; 0x48
 8005e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b48      	cmp	r3, #72	; 0x48
 8005e1e:	d00a      	beq.n	8005e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61bb      	str	r3, [r7, #24]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f83f 	bl	8005edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3730      	adds	r7, #48	; 0x30
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	613b      	str	r3, [r7, #16]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f002 f899 	bl	8007fd8 <pvPortMalloc>
 8005ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	3348      	adds	r3, #72	; 0x48
 8005eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec0:	79fa      	ldrb	r2, [r7, #7]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f805 	bl	8005edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d103      	bne.n	8005ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	69b8      	ldr	r0, [r7, #24]
 8005f0e:	f7ff fecb 	bl	8005ca8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f837 	bl	8005fb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	461a      	mov	r2, r3
 8005f64:	6939      	ldr	r1, [r7, #16]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff7e 	bl	8005e68 <xQueueGenericCreate>
 8005f6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ffd3 	bl	8005f1a <prvInitialiseMutex>

		return xNewQueue;
 8005f74:	68fb      	ldr	r3, [r7, #12]
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b088      	sub	sp, #32
 8005f82:	af02      	add	r7, sp, #8
 8005f84:	4603      	mov	r3, r0
 8005f86:	6039      	str	r1, [r7, #0]
 8005f88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	6978      	ldr	r0, [r7, #20]
 8005f9e:	f7ff feeb 	bl	8005d78 <xQueueGenericCreateStatic>
 8005fa2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ffb8 	bl	8005f1a <prvInitialiseMutex>

		return xNewQueue;
 8005faa:	68fb      	ldr	r3, [r7, #12]
	}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericSend+0x32>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <xQueueGenericSend+0x40>
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <xQueueGenericSend+0x44>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <xQueueGenericSend+0x46>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <xQueueGenericSend+0x60>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d103      	bne.n	8006022 <xQueueGenericSend+0x6e>
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <xQueueGenericSend+0x72>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <xQueueGenericSend+0x74>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueGenericSend+0x8e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	623b      	str	r3, [r7, #32]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006042:	f001 fb59 	bl	80076f8 <xTaskGetSchedulerState>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <xQueueGenericSend+0x9e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <xQueueGenericSend+0xa2>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueGenericSend+0xa4>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xQueueGenericSend+0xbe>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61fb      	str	r3, [r7, #28]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006072:	f001 fe8f 	bl	8007d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <xQueueGenericSend+0xd4>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d129      	bne.n	80060dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608e:	f000 fc3b 	bl	8006908 <prvCopyDataToQueue>
 8006092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d010      	beq.n	80060be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	3324      	adds	r3, #36	; 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f96d 	bl	8007380 <xTaskRemoveFromEventList>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060ac:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <xQueueGenericSend+0x1f8>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	e00a      	b.n	80060d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060c4:	4b39      	ldr	r3, [pc, #228]	; (80061ac <xQueueGenericSend+0x1f8>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060d4:	f001 fe8e 	bl	8007df4 <vPortExitCritical>
				return pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	e063      	b.n	80061a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060e2:	f001 fe87 	bl	8007df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e05c      	b.n	80061a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f9a5 	bl	8007444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060fe:	f001 fe79 	bl	8007df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006102:	f000 ff39 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006106:	f001 fe45 	bl	8007d94 <vPortEnterCritical>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006110:	b25b      	sxtb	r3, r3
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d103      	bne.n	8006120 <xQueueGenericSend+0x16c>
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006126:	b25b      	sxtb	r3, r3
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d103      	bne.n	8006136 <xQueueGenericSend+0x182>
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006136:	f001 fe5d 	bl	8007df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800613a:	1d3a      	adds	r2, r7, #4
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f994 	bl	8007470 <xTaskCheckForTimeOut>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d124      	bne.n	8006198 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800614e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006150:	f000 fcd2 	bl	8006af8 <prvIsQueueFull>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	3310      	adds	r3, #16
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f8e8 	bl	8007338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800616a:	f000 fc5d 	bl	8006a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800616e:	f000 ff11 	bl	8006f94 <xTaskResumeAll>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af7c 	bne.w	8006072 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800617a:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <xQueueGenericSend+0x1f8>)
 800617c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	e772      	b.n	8006072 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800618c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800618e:	f000 fc4b 	bl	8006a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006192:	f000 feff 	bl	8006f94 <xTaskResumeAll>
 8006196:	e76c      	b.n	8006072 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619a:	f000 fc45 	bl	8006a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800619e:	f000 fef9 	bl	8006f94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3738      	adds	r7, #56	; 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b090      	sub	sp, #64	; 0x40
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d103      	bne.n	80061ec <xQueueGenericSendFromISR+0x3c>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <xQueueGenericSendFromISR+0x40>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <xQueueGenericSendFromISR+0x42>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d103      	bne.n	800621a <xQueueGenericSendFromISR+0x6a>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <xQueueGenericSendFromISR+0x6e>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueGenericSendFromISR+0x70>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	623b      	str	r3, [r7, #32]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800623a:	f001 fe8d 	bl	8007f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800623e:	f3ef 8211 	mrs	r2, BASEPRI
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	61fa      	str	r2, [r7, #28]
 8006254:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006256:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <xQueueGenericSendFromISR+0xbc>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d12f      	bne.n	80062cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006282:	f000 fb41 	bl	8006908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006286:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d112      	bne.n	80062b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f86f 	bl	8007380 <xTaskRemoveFromEventList>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e007      	b.n	80062c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062ba:	3301      	adds	r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	b25a      	sxtb	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062c6:	2301      	movs	r3, #1
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80062ca:	e001      	b.n	80062d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3740      	adds	r7, #64	; 0x40
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b08e      	sub	sp, #56	; 0x38
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	623b      	str	r3, [r7, #32]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	61fb      	str	r3, [r7, #28]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d103      	bne.n	800633e <xQueueGiveFromISR+0x58>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <xQueueGiveFromISR+0x5c>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <xQueueGiveFromISR+0x5e>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	61bb      	str	r3, [r7, #24]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800635e:	f001 fdfb 	bl	8007f58 <vPortValidateInterruptPriority>
	__asm volatile
 8006362:	f3ef 8211 	mrs	r2, BASEPRI
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617a      	str	r2, [r7, #20]
 8006378:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800637a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800638a:	429a      	cmp	r2, r3
 800638c:	d22b      	bcs.n	80063e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d112      	bne.n	80063d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	3324      	adds	r3, #36	; 0x24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 ffe2 	bl	8007380 <xTaskRemoveFromEventList>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e007      	b.n	80063e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d4:	3301      	adds	r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	b25a      	sxtb	r2, r3
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063e0:	2301      	movs	r3, #1
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	e001      	b.n	80063ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f383 8811 	msr	BASEPRI, r3
}
 80063f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3738      	adds	r7, #56	; 0x38
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xQueueReceive+0x30>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	623b      	str	r3, [r7, #32]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueReceive+0x3e>
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueReceive+0x42>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueReceive+0x44>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueReceive+0x5e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fb      	str	r3, [r7, #28]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645e:	f001 f94b 	bl	80076f8 <xTaskGetSchedulerState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <xQueueReceive+0x6e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <xQueueReceive+0x72>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueReceive+0x74>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueReceive+0x8e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	61bb      	str	r3, [r7, #24]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800648e:	f001 fc81 	bl	8007d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01f      	beq.n	80064de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a2:	f000 fa9b 	bl	80069dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	3310      	adds	r3, #16
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 ff60 	bl	8007380 <xTaskRemoveFromEventList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <xQueueReceive+0x1bc>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d6:	f001 fc8d 	bl	8007df4 <vPortExitCritical>
				return pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	e069      	b.n	80065b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e4:	f001 fc86 	bl	8007df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e062      	b.n	80065b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f2:	f107 0310 	add.w	r3, r7, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ffa4 	bl	8007444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006500:	f001 fc78 	bl	8007df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006504:	f000 fd38 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006508:	f001 fc44 	bl	8007d94 <vPortEnterCritical>
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d103      	bne.n	8006522 <xQueueReceive+0x122>
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006528:	b25b      	sxtb	r3, r3
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d103      	bne.n	8006538 <xQueueReceive+0x138>
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	f001 fc5c 	bl	8007df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653c:	1d3a      	adds	r2, r7, #4
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 ff93 	bl	8007470 <xTaskCheckForTimeOut>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d123      	bne.n	8006598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006552:	f000 fabb 	bl	8006acc <prvIsQueueEmpty>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d017      	beq.n	800658c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	3324      	adds	r3, #36	; 0x24
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fee7 	bl	8007338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	f000 fa5c 	bl	8006a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006570:	f000 fd10 	bl	8006f94 <xTaskResumeAll>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d189      	bne.n	800648e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <xQueueReceive+0x1bc>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e780      	b.n	800648e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 fa4b 	bl	8006a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006592:	f000 fcff 	bl	8006f94 <xTaskResumeAll>
 8006596:	e77a      	b.n	800648e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659a:	f000 fa45 	bl	8006a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659e:	f000 fcf9 	bl	8006f94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a4:	f000 fa92 	bl	8006acc <prvIsQueueEmpty>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f43f af6f 	beq.w	800648e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3730      	adds	r7, #48	; 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08e      	sub	sp, #56	; 0x38
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	623b      	str	r3, [r7, #32]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61fb      	str	r3, [r7, #28]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006610:	f001 f872 	bl	80076f8 <xTaskGetSchedulerState>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <xQueueSemaphoreTake+0x60>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <xQueueSemaphoreTake+0x64>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <xQueueSemaphoreTake+0x66>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006640:	f001 fba8 	bl	8007d94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d024      	beq.n	800669a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006660:	f001 f9f2 	bl	8007a48 <pvTaskIncrementMutexHeldCount>
 8006664:	4602      	mov	r2, r0
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00f      	beq.n	8006692 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	3310      	adds	r3, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fe82 	bl	8007380 <xTaskRemoveFromEventList>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006682:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <xQueueSemaphoreTake+0x214>)
 8006684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006692:	f001 fbaf 	bl	8007df4 <vPortExitCritical>
				return pdPASS;
 8006696:	2301      	movs	r3, #1
 8006698:	e097      	b.n	80067ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d111      	bne.n	80066c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	617b      	str	r3, [r7, #20]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066bc:	f001 fb9a 	bl	8007df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e082      	b.n	80067ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 feb8 	bl	8007444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066d8:	f001 fb8c 	bl	8007df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066dc:	f000 fc4c 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066e0:	f001 fb58 	bl	8007d94 <vPortEnterCritical>
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d103      	bne.n	80066fa <xQueueSemaphoreTake+0x13a>
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <xQueueSemaphoreTake+0x150>
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006710:	f001 fb70 	bl	8007df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006714:	463a      	mov	r2, r7
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fea7 	bl	8007470 <xTaskCheckForTimeOut>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d132      	bne.n	800678e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800672a:	f000 f9cf 	bl	8006acc <prvIsQueueEmpty>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d026      	beq.n	8006782 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800673c:	f001 fb2a 	bl	8007d94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fff5 	bl	8007734 <xTaskPriorityInherit>
 800674a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800674c:	f001 fb52 	bl	8007df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fded 	bl	8007338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800675e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006760:	f000 f962 	bl	8006a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006764:	f000 fc16 	bl	8006f94 <xTaskResumeAll>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f47f af68 	bne.w	8006640 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <xQueueSemaphoreTake+0x214>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	e75e      	b.n	8006640 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006784:	f000 f950 	bl	8006a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006788:	f000 fc04 	bl	8006f94 <xTaskResumeAll>
 800678c:	e758      	b.n	8006640 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800678e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006790:	f000 f94a 	bl	8006a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006794:	f000 fbfe 	bl	8006f94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800679a:	f000 f997 	bl	8006acc <prvIsQueueEmpty>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f43f af4d 	beq.w	8006640 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80067ac:	f001 faf2 	bl	8007d94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067b2:	f000 f891 	bl	80068d8 <prvGetDisinheritPriorityAfterTimeout>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f8b4 	bl	800792c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067c4:	f001 fb16 	bl	8007df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3738      	adds	r7, #56	; 0x38
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08e      	sub	sp, #56	; 0x38
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	623b      	str	r3, [r7, #32]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <xQueueReceiveFromISR+0x3a>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <xQueueReceiveFromISR+0x3e>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <xQueueReceiveFromISR+0x40>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61fb      	str	r3, [r7, #28]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006832:	f001 fb91 	bl	8007f58 <vPortValidateInterruptPriority>
	__asm volatile
 8006836:	f3ef 8211 	mrs	r2, BASEPRI
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	61ba      	str	r2, [r7, #24]
 800684c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800684e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02f      	beq.n	80068be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686c:	f000 f8b6 	bl	80069dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	1e5a      	subs	r2, r3, #1
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d112      	bne.n	80068a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	3310      	adds	r3, #16
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fd76 	bl	8007380 <xTaskRemoveFromEventList>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00e      	beq.n	80068b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e007      	b.n	80068b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ac:	3301      	adds	r3, #1
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	b25a      	sxtb	r2, r3
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80068b8:	2301      	movs	r3, #1
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	e001      	b.n	80068c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80068be:	2300      	movs	r3, #0
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f383 8811 	msr	BASEPRI, r3
}
 80068cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3738      	adds	r7, #56	; 0x38
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1c3 0307 	rsb	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e001      	b.n	80068fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068fa:	68fb      	ldr	r3, [r7, #12]
	}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d14d      	bne.n	80069ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 ff74 	bl	8007820 <xTaskPriorityDisinherit>
 8006938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	e043      	b.n	80069ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d119      	bne.n	800697c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6858      	ldr	r0, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	461a      	mov	r2, r3
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	f00c fbbd 	bl	80130d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d32b      	bcc.n	80069ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	e026      	b.n	80069ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68d8      	ldr	r0, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	461a      	mov	r2, r3
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	f00c fba3 	bl	80130d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	425b      	negs	r3, r3
 8006996:	441a      	add	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d207      	bcs.n	80069b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	425b      	negs	r3, r3
 80069b2:	441a      	add	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d105      	bne.n	80069ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d303      	bcc.n	8006a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68d9      	ldr	r1, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f00c fb59 	bl	80130d2 <memcpy>
	}
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a30:	f001 f9b0 	bl	8007d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	e011      	b.n	8006a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d012      	beq.n	8006a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc98 	bl	8007380 <xTaskRemoveFromEventList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a56:	f000 fd6d 	bl	8007534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dce9      	bgt.n	8006a3e <prvUnlockQueue+0x16>
 8006a6a:	e000      	b.n	8006a6e <prvUnlockQueue+0x46>
					break;
 8006a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 f9bd 	bl	8007df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a7a:	f001 f98b 	bl	8007d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a86:	e011      	b.n	8006aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d012      	beq.n	8006ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3310      	adds	r3, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fc73 	bl	8007380 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aa0:	f000 fd48 	bl	8007534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dce9      	bgt.n	8006a88 <prvUnlockQueue+0x60>
 8006ab4:	e000      	b.n	8006ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22ff      	movs	r2, #255	; 0xff
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 f998 	bl	8007df4 <vPortExitCritical>
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 f95e 	bl	8007d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e001      	b.n	8006aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aea:	f001 f983 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b00:	f001 f948 	bl	8007d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d102      	bne.n	8006b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e001      	b.n	8006b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b1a:	f001 f96b 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b6e:	2354      	movs	r3, #84	; 0x54
 8006b70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b54      	cmp	r3, #84	; 0x54
 8006b76:	d00a      	beq.n	8006b8e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	61bb      	str	r3, [r7, #24]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01e      	beq.n	8006bd4 <xTaskCreateStatic+0xac>
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01b      	beq.n	8006bd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f850 	bl	8006c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bce:	f000 f8d5 	bl	8006d7c <prvAddNewTaskToReadyList>
 8006bd2:	e001      	b.n	8006bd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bd8:	697b      	ldr	r3, [r7, #20]
	}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b08c      	sub	sp, #48	; 0x30
 8006be6:	af04      	add	r7, sp, #16
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 f9ee 	bl	8007fd8 <pvPortMalloc>
 8006bfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c04:	2054      	movs	r0, #84	; 0x54
 8006c06:	f001 f9e7 	bl	8007fd8 <pvPortMalloc>
 8006c0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
 8006c18:	e005      	b.n	8006c26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c1a:	6978      	ldr	r0, [r7, #20]
 8006c1c:	f001 faa8 	bl	8008170 <vPortFree>
 8006c20:	e001      	b.n	8006c26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d017      	beq.n	8006c5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f80e 	bl	8006c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c50:	69f8      	ldr	r0, [r7, #28]
 8006c52:	f000 f893 	bl	8006d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c56:	2301      	movs	r3, #1
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e002      	b.n	8006c62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c62:	69bb      	ldr	r3, [r7, #24]
	}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c84:	440b      	add	r3, r1
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	617b      	str	r3, [r7, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01f      	beq.n	8006cfa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	e012      	b.n	8006ce6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	7819      	ldrb	r1, [r3, #0]
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	3334      	adds	r3, #52	; 0x34
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b0f      	cmp	r3, #15
 8006cea:	d9e9      	bls.n	8006cc0 <prvInitialiseNewTask+0x54>
 8006cec:	e000      	b.n	8006cf0 <prvInitialiseNewTask+0x84>
			{
				break;
 8006cee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	e003      	b.n	8006d02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d901      	bls.n	8006d0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d08:	2306      	movs	r3, #6
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe ff2c 	bl	8005b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe ff27 	bl	8005b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f1c3 0207 	rsb	r2, r3, #7
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	69b8      	ldr	r0, [r7, #24]
 8006d5c:	f000 feee 	bl	8007b3c <pxPortInitialiseStack>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d72:	bf00      	nop
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d84:	f001 f806 	bl	8007d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d88:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <prvAddNewTaskToReadyList+0xb8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a29      	ldr	r2, [pc, #164]	; (8006e34 <prvAddNewTaskToReadyList+0xb8>)
 8006d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <prvAddNewTaskToReadyList+0xbc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d9a:	4a27      	ldr	r2, [pc, #156]	; (8006e38 <prvAddNewTaskToReadyList+0xbc>)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da0:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <prvAddNewTaskToReadyList+0xb8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d110      	bne.n	8006dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da8:	f000 fbe8 	bl	800757c <prvInitialiseTaskLists>
 8006dac:	e00d      	b.n	8006dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dae:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <prvAddNewTaskToReadyList+0xc0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006db6:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <prvAddNewTaskToReadyList+0xbc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d802      	bhi.n	8006dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <prvAddNewTaskToReadyList+0xbc>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <prvAddNewTaskToReadyList+0xc4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <prvAddNewTaskToReadyList+0xc4>)
 8006dd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2201      	movs	r2, #1
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <prvAddNewTaskToReadyList+0xc8>)
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <prvAddNewTaskToReadyList+0xcc>)
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe fecc 	bl	8005b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e02:	f000 fff7 	bl	8007df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <prvAddNewTaskToReadyList+0xc0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <prvAddNewTaskToReadyList+0xbc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d207      	bcs.n	8006e2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <prvAddNewTaskToReadyList+0xd0>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	240005bc 	.word	0x240005bc
 8006e38:	240004bc 	.word	0x240004bc
 8006e3c:	240005c8 	.word	0x240005c8
 8006e40:	240005d8 	.word	0x240005d8
 8006e44:	240005c4 	.word	0x240005c4
 8006e48:	240004c0 	.word	0x240004c0
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d017      	beq.n	8006e92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <vTaskDelay+0x60>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <vTaskDelay+0x30>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	60bb      	str	r3, [r7, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e80:	f000 f87a 	bl	8006f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fdf2 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e8c:	f000 f882 	bl	8006f94 <xTaskResumeAll>
 8006e90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e98:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <vTaskDelay+0x64>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	240005e4 	.word	0x240005e4
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ec6:	463a      	mov	r2, r7
 8006ec8:	1d39      	adds	r1, r7, #4
 8006eca:	f107 0308 	add.w	r3, r7, #8
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 fa5e 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	9202      	str	r2, [sp, #8]
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	491e      	ldr	r1, [pc, #120]	; (8006f60 <vTaskStartScheduler+0xa8>)
 8006ee8:	481e      	ldr	r0, [pc, #120]	; (8006f64 <vTaskStartScheduler+0xac>)
 8006eea:	f7ff fe1d 	bl	8006b28 <xTaskCreateStatic>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4a1d      	ldr	r2, [pc, #116]	; (8006f68 <vTaskStartScheduler+0xb0>)
 8006ef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ef4:	4b1c      	ldr	r3, [pc, #112]	; (8006f68 <vTaskStartScheduler+0xb0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e001      	b.n	8006f06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d116      	bne.n	8006f3a <vTaskStartScheduler+0x82>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	613b      	str	r3, [r7, #16]
}
 8006f1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <vTaskStartScheduler+0xb4>)
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <vTaskStartScheduler+0xb8>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f2e:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <vTaskStartScheduler+0xbc>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f34:	f000 fe8c 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f38:	e00e      	b.n	8006f58 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d10a      	bne.n	8006f58 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60fb      	str	r3, [r7, #12]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vTaskStartScheduler+0x9e>
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08013e34 	.word	0x08013e34
 8006f64:	0800754d 	.word	0x0800754d
 8006f68:	240005e0 	.word	0x240005e0
 8006f6c:	240005dc 	.word	0x240005dc
 8006f70:	240005c8 	.word	0x240005c8
 8006f74:	240005c0 	.word	0x240005c0

08006f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a03      	ldr	r2, [pc, #12]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	240005e4 	.word	0x240005e4

08006f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	603b      	str	r3, [r7, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fc0:	f000 fee8 	bl	8007d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fc4:	4b38      	ldr	r3, [pc, #224]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4a37      	ldr	r2, [pc, #220]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fce:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d161      	bne.n	800709a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fd6:	4b35      	ldr	r3, [pc, #212]	; (80070ac <xTaskResumeAll+0x118>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d05d      	beq.n	800709a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fde:	e02e      	b.n	800703e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe0:	4b33      	ldr	r3, [pc, #204]	; (80070b0 <xTaskResumeAll+0x11c>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3318      	adds	r3, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fe31 	bl	8005c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fe2c 	bl	8005c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	4b2b      	ldr	r3, [pc, #172]	; (80070b4 <xTaskResumeAll+0x120>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4313      	orrs	r3, r2
 800700a:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <xTaskResumeAll+0x120>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <xTaskResumeAll+0x124>)
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f7fe fdb8 	bl	8005b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	4b23      	ldr	r3, [pc, #140]	; (80070bc <xTaskResumeAll+0x128>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007038:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <xTaskResumeAll+0x12c>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <xTaskResumeAll+0x11c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1cc      	bne.n	8006fe0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800704c:	f000 fb34 	bl	80076b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007050:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xTaskResumeAll+0x130>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800705c:	f000 f858 	bl	8007110 <xTaskIncrementTick>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <xTaskResumeAll+0x12c>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3b01      	subs	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f1      	bne.n	800705c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <xTaskResumeAll+0x130>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <xTaskResumeAll+0x12c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <xTaskResumeAll+0x134>)
 800708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800709a:	f000 feab 	bl	8007df4 <vPortExitCritical>

	return xAlreadyYielded;
 800709e:	68bb      	ldr	r3, [r7, #8]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	240005e4 	.word	0x240005e4
 80070ac:	240005bc 	.word	0x240005bc
 80070b0:	2400057c 	.word	0x2400057c
 80070b4:	240005c4 	.word	0x240005c4
 80070b8:	240004c0 	.word	0x240004c0
 80070bc:	240004bc 	.word	0x240004bc
 80070c0:	240005d0 	.word	0x240005d0
 80070c4:	240005cc 	.word	0x240005cc
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <xTaskGetTickCount+0x1c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070d8:	687b      	ldr	r3, [r7, #4]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	240005c0 	.word	0x240005c0

080070ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070f2:	f000 ff31 	bl	8007f58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80070fa:	4b04      	ldr	r3, [pc, #16]	; (800710c <xTaskGetTickCountFromISR+0x20>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007100:	683b      	ldr	r3, [r7, #0]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	240005c0 	.word	0x240005c0

08007110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711a:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <xTaskIncrementTick+0x144>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 808e 	bne.w	8007240 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007124:	4b4c      	ldr	r3, [pc, #304]	; (8007258 <xTaskIncrementTick+0x148>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800712c:	4a4a      	ldr	r2, [pc, #296]	; (8007258 <xTaskIncrementTick+0x148>)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d120      	bne.n	800717a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007138:	4b48      	ldr	r3, [pc, #288]	; (800725c <xTaskIncrementTick+0x14c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <xTaskIncrementTick+0x48>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	603b      	str	r3, [r7, #0]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <xTaskIncrementTick+0x46>
 8007158:	4b40      	ldr	r3, [pc, #256]	; (800725c <xTaskIncrementTick+0x14c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	4b40      	ldr	r3, [pc, #256]	; (8007260 <xTaskIncrementTick+0x150>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a3e      	ldr	r2, [pc, #248]	; (800725c <xTaskIncrementTick+0x14c>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4a3e      	ldr	r2, [pc, #248]	; (8007260 <xTaskIncrementTick+0x150>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <xTaskIncrementTick+0x154>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <xTaskIncrementTick+0x154>)
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	f000 fa9f 	bl	80076b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800717a:	4b3b      	ldr	r3, [pc, #236]	; (8007268 <xTaskIncrementTick+0x158>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	429a      	cmp	r2, r3
 8007182:	d348      	bcc.n	8007216 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007184:	4b35      	ldr	r3, [pc, #212]	; (800725c <xTaskIncrementTick+0x14c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718e:	4b36      	ldr	r3, [pc, #216]	; (8007268 <xTaskIncrementTick+0x158>)
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	601a      	str	r2, [r3, #0]
					break;
 8007196:	e03e      	b.n	8007216 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007198:	4b30      	ldr	r3, [pc, #192]	; (800725c <xTaskIncrementTick+0x14c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d203      	bcs.n	80071b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071b0:	4a2d      	ldr	r2, [pc, #180]	; (8007268 <xTaskIncrementTick+0x158>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b6:	e02e      	b.n	8007216 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fd49 	bl	8005c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3318      	adds	r3, #24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fd40 	bl	8005c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	2201      	movs	r2, #1
 80071da:	409a      	lsls	r2, r3
 80071dc:	4b23      	ldr	r3, [pc, #140]	; (800726c <xTaskIncrementTick+0x15c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	4a22      	ldr	r2, [pc, #136]	; (800726c <xTaskIncrementTick+0x15c>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <xTaskIncrementTick+0x160>)
 80071f4:	441a      	add	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7fe fccc 	bl	8005b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007206:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <xTaskIncrementTick+0x164>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	429a      	cmp	r2, r3
 800720e:	d3b9      	bcc.n	8007184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007210:	2301      	movs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007214:	e7b6      	b.n	8007184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007216:	4b17      	ldr	r3, [pc, #92]	; (8007274 <xTaskIncrementTick+0x164>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	4914      	ldr	r1, [pc, #80]	; (8007270 <xTaskIncrementTick+0x160>)
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d901      	bls.n	8007232 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <xTaskIncrementTick+0x168>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	e004      	b.n	800724a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007240:	4b0e      	ldr	r3, [pc, #56]	; (800727c <xTaskIncrementTick+0x16c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a0d      	ldr	r2, [pc, #52]	; (800727c <xTaskIncrementTick+0x16c>)
 8007248:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800724a:	697b      	ldr	r3, [r7, #20]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	240005e4 	.word	0x240005e4
 8007258:	240005c0 	.word	0x240005c0
 800725c:	24000574 	.word	0x24000574
 8007260:	24000578 	.word	0x24000578
 8007264:	240005d4 	.word	0x240005d4
 8007268:	240005dc 	.word	0x240005dc
 800726c:	240005c4 	.word	0x240005c4
 8007270:	240004c0 	.word	0x240004c0
 8007274:	240004bc 	.word	0x240004bc
 8007278:	240005d0 	.word	0x240005d0
 800727c:	240005cc 	.word	0x240005cc

08007280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007286:	4b27      	ldr	r3, [pc, #156]	; (8007324 <vTaskSwitchContext+0xa4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728e:	4b26      	ldr	r3, [pc, #152]	; (8007328 <vTaskSwitchContext+0xa8>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007294:	e03f      	b.n	8007316 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <vTaskSwitchContext+0xa8>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <vTaskSwitchContext+0xac>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	fab3 f383 	clz	r3, r3
 80072a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	f1c3 031f 	rsb	r3, r3, #31
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	491f      	ldr	r1, [pc, #124]	; (8007330 <vTaskSwitchContext+0xb0>)
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	607b      	str	r3, [r7, #4]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskSwitchContext+0x5a>
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <vTaskSwitchContext+0xb0>)
 80072e8:	4413      	add	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3308      	adds	r3, #8
 80072fe:	429a      	cmp	r2, r3
 8007300:	d104      	bne.n	800730c <vTaskSwitchContext+0x8c>
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	4a08      	ldr	r2, [pc, #32]	; (8007334 <vTaskSwitchContext+0xb4>)
 8007314:	6013      	str	r3, [r2, #0]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	240005e4 	.word	0x240005e4
 8007328:	240005d0 	.word	0x240005d0
 800732c:	240005c4 	.word	0x240005c4
 8007330:	240004c0 	.word	0x240004c0
 8007334:	240004bc 	.word	0x240004bc

08007338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800735e:	4b07      	ldr	r3, [pc, #28]	; (800737c <vTaskPlaceOnEventList+0x44>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3318      	adds	r3, #24
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fe fc3b 	bl	8005be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800736c:	2101      	movs	r1, #1
 800736e:	6838      	ldr	r0, [r7, #0]
 8007370:	f000 fb7e 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	240004bc 	.word	0x240004bc

08007380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60fb      	str	r3, [r7, #12]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	3318      	adds	r3, #24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fc4f 	bl	8005c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b1d      	ldr	r3, [pc, #116]	; (800742c <xTaskRemoveFromEventList+0xac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11c      	bne.n	80073f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fc46 	bl	8005c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	2201      	movs	r2, #1
 80073ce:	409a      	lsls	r2, r3
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <xTaskRemoveFromEventList+0xb0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	4a16      	ldr	r2, [pc, #88]	; (8007430 <xTaskRemoveFromEventList+0xb0>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4a13      	ldr	r2, [pc, #76]	; (8007434 <xTaskRemoveFromEventList+0xb4>)
 80073e8:	441a      	add	r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe fbd2 	bl	8005b9a <vListInsertEnd>
 80073f6:	e005      	b.n	8007404 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4619      	mov	r1, r3
 80073fe:	480e      	ldr	r0, [pc, #56]	; (8007438 <xTaskRemoveFromEventList+0xb8>)
 8007400:	f7fe fbcb 	bl	8005b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <xTaskRemoveFromEventList+0xbc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	429a      	cmp	r2, r3
 8007410:	d905      	bls.n	800741e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <xTaskRemoveFromEventList+0xc0>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e001      	b.n	8007422 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007422:	697b      	ldr	r3, [r7, #20]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	240005e4 	.word	0x240005e4
 8007430:	240005c4 	.word	0x240005c4
 8007434:	240004c0 	.word	0x240004c0
 8007438:	2400057c 	.word	0x2400057c
 800743c:	240004bc 	.word	0x240004bc
 8007440:	240005d0 	.word	0x240005d0

08007444 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <vTaskInternalSetTimeOutState+0x24>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <vTaskInternalSetTimeOutState+0x28>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	605a      	str	r2, [r3, #4]
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	240005d4 	.word	0x240005d4
 800746c:	240005c0 	.word	0x240005c0

08007470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	613b      	str	r3, [r7, #16]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074b2:	f000 fc6f 	bl	8007d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <xTaskCheckForTimeOut+0xbc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ce:	d102      	bne.n	80074d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	e023      	b.n	800751e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b15      	ldr	r3, [pc, #84]	; (8007530 <xTaskCheckForTimeOut+0xc0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d007      	beq.n	80074f2 <xTaskCheckForTimeOut+0x82>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d302      	bcc.n	80074f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074ec:	2301      	movs	r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	e015      	b.n	800751e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d20b      	bcs.n	8007514 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ff9b 	bl	8007444 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e004      	b.n	800751e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800751e:	f000 fc69 	bl	8007df4 <vPortExitCritical>

	return xReturn;
 8007522:	69fb      	ldr	r3, [r7, #28]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	240005c0 	.word	0x240005c0
 8007530:	240005d4 	.word	0x240005d4

08007534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <vTaskMissedYield+0x14>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	240005d0 	.word	0x240005d0

0800754c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007554:	f000 f852 	bl	80075fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <prvIdleTask+0x28>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d9f9      	bls.n	8007554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <prvIdleTask+0x2c>)
 8007562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007570:	e7f0      	b.n	8007554 <prvIdleTask+0x8>
 8007572:	bf00      	nop
 8007574:	240004c0 	.word	0x240004c0
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007582:	2300      	movs	r3, #0
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e00c      	b.n	80075a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4a12      	ldr	r2, [pc, #72]	; (80075dc <prvInitialiseTaskLists+0x60>)
 8007594:	4413      	add	r3, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fad2 	bl	8005b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3301      	adds	r3, #1
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	d9ef      	bls.n	8007588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075a8:	480d      	ldr	r0, [pc, #52]	; (80075e0 <prvInitialiseTaskLists+0x64>)
 80075aa:	f7fe fac9 	bl	8005b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ae:	480d      	ldr	r0, [pc, #52]	; (80075e4 <prvInitialiseTaskLists+0x68>)
 80075b0:	f7fe fac6 	bl	8005b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075b4:	480c      	ldr	r0, [pc, #48]	; (80075e8 <prvInitialiseTaskLists+0x6c>)
 80075b6:	f7fe fac3 	bl	8005b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075ba:	480c      	ldr	r0, [pc, #48]	; (80075ec <prvInitialiseTaskLists+0x70>)
 80075bc:	f7fe fac0 	bl	8005b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075c0:	480b      	ldr	r0, [pc, #44]	; (80075f0 <prvInitialiseTaskLists+0x74>)
 80075c2:	f7fe fabd 	bl	8005b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <prvInitialiseTaskLists+0x78>)
 80075c8:	4a05      	ldr	r2, [pc, #20]	; (80075e0 <prvInitialiseTaskLists+0x64>)
 80075ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <prvInitialiseTaskLists+0x7c>)
 80075ce:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <prvInitialiseTaskLists+0x68>)
 80075d0:	601a      	str	r2, [r3, #0]
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	240004c0 	.word	0x240004c0
 80075e0:	2400054c 	.word	0x2400054c
 80075e4:	24000560 	.word	0x24000560
 80075e8:	2400057c 	.word	0x2400057c
 80075ec:	24000590 	.word	0x24000590
 80075f0:	240005a8 	.word	0x240005a8
 80075f4:	24000574 	.word	0x24000574
 80075f8:	24000578 	.word	0x24000578

080075fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007602:	e019      	b.n	8007638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007604:	f000 fbc6 	bl	8007d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007608:	4b10      	ldr	r3, [pc, #64]	; (800764c <prvCheckTasksWaitingTermination+0x50>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fb1d 	bl	8005c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <prvCheckTasksWaitingTermination+0x54>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3b01      	subs	r3, #1
 8007620:	4a0b      	ldr	r2, [pc, #44]	; (8007650 <prvCheckTasksWaitingTermination+0x54>)
 8007622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007624:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <prvCheckTasksWaitingTermination+0x58>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <prvCheckTasksWaitingTermination+0x58>)
 800762c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800762e:	f000 fbe1 	bl	8007df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f810 	bl	8007658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <prvCheckTasksWaitingTermination+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e1      	bne.n	8007604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	24000590 	.word	0x24000590
 8007650:	240005bc 	.word	0x240005bc
 8007654:	240005a4 	.word	0x240005a4

08007658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007666:	2b00      	cmp	r3, #0
 8007668:	d108      	bne.n	800767c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fd7e 	bl	8008170 <vPortFree>
				vPortFree( pxTCB );
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fd7b 	bl	8008170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800767a:	e018      	b.n	80076ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007682:	2b01      	cmp	r3, #1
 8007684:	d103      	bne.n	800768e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fd72 	bl	8008170 <vPortFree>
	}
 800768c:	e00f      	b.n	80076ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007694:	2b02      	cmp	r3, #2
 8007696:	d00a      	beq.n	80076ae <prvDeleteTCB+0x56>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60fb      	str	r3, [r7, #12]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <prvDeleteTCB+0x54>
	}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <prvResetNextTaskUnblockTime+0x38>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <prvResetNextTaskUnblockTime+0x3c>)
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076d0:	e008      	b.n	80076e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <prvResetNextTaskUnblockTime+0x38>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <prvResetNextTaskUnblockTime+0x3c>)
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	24000574 	.word	0x24000574
 80076f4:	240005dc 	.word	0x240005dc

080076f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <xTaskGetSchedulerState+0x34>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007706:	2301      	movs	r3, #1
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	e008      	b.n	800771e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800770c:	4b08      	ldr	r3, [pc, #32]	; (8007730 <xTaskGetSchedulerState+0x38>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007714:	2302      	movs	r3, #2
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	e001      	b.n	800771e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800771e:	687b      	ldr	r3, [r7, #4]
	}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	240005c8 	.word	0x240005c8
 8007730:	240005e4 	.word	0x240005e4

08007734 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d05e      	beq.n	8007808 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	4b31      	ldr	r3, [pc, #196]	; (8007814 <xTaskPriorityInherit+0xe0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d24e      	bcs.n	80077f6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	db06      	blt.n	800776e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007760:	4b2c      	ldr	r3, [pc, #176]	; (8007814 <xTaskPriorityInherit+0xe0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f1c3 0207 	rsb	r2, r3, #7
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6959      	ldr	r1, [r3, #20]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a26      	ldr	r2, [pc, #152]	; (8007818 <xTaskPriorityInherit+0xe4>)
 8007780:	4413      	add	r3, r2
 8007782:	4299      	cmp	r1, r3
 8007784:	d12f      	bne.n	80077e6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fa62 	bl	8005c54 <uxListRemove>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	2201      	movs	r2, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	43da      	mvns	r2, r3
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <xTaskPriorityInherit+0xe8>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4013      	ands	r3, r2
 80077a8:	4a1c      	ldr	r2, [pc, #112]	; (800781c <xTaskPriorityInherit+0xe8>)
 80077aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ac:	4b19      	ldr	r3, [pc, #100]	; (8007814 <xTaskPriorityInherit+0xe0>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	2201      	movs	r2, #1
 80077bc:	409a      	lsls	r2, r3
 80077be:	4b17      	ldr	r3, [pc, #92]	; (800781c <xTaskPriorityInherit+0xe8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	4a15      	ldr	r2, [pc, #84]	; (800781c <xTaskPriorityInherit+0xe8>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a10      	ldr	r2, [pc, #64]	; (8007818 <xTaskPriorityInherit+0xe4>)
 80077d6:	441a      	add	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fe f9db 	bl	8005b9a <vListInsertEnd>
 80077e4:	e004      	b.n	80077f0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <xTaskPriorityInherit+0xe0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e008      	b.n	8007808 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <xTaskPriorityInherit+0xe0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d201      	bcs.n	8007808 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007808:	68fb      	ldr	r3, [r7, #12]
	}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	240004bc 	.word	0x240004bc
 8007818:	240004c0 	.word	0x240004c0
 800781c:	240005c4 	.word	0x240005c4

08007820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d06e      	beq.n	8007914 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007836:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <xTaskPriorityDisinherit+0x100>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d00a      	beq.n	8007856 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60fb      	str	r3, [r7, #12]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007878:	1e5a      	subs	r2, r3, #1
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	429a      	cmp	r2, r3
 8007888:	d044      	beq.n	8007914 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	2b00      	cmp	r3, #0
 8007890:	d140      	bne.n	8007914 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe f9dc 	bl	8005c54 <uxListRemove>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d115      	bne.n	80078ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a6:	491f      	ldr	r1, [pc, #124]	; (8007924 <xTaskPriorityDisinherit+0x104>)
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xTaskPriorityDisinherit+0xae>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	2201      	movs	r2, #1
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43da      	mvns	r2, r3
 80078c4:	4b18      	ldr	r3, [pc, #96]	; (8007928 <xTaskPriorityDisinherit+0x108>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4013      	ands	r3, r2
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <xTaskPriorityDisinherit+0x108>)
 80078cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	f1c3 0207 	rsb	r2, r3, #7
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	2201      	movs	r2, #1
 80078e8:	409a      	lsls	r2, r3
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <xTaskPriorityDisinherit+0x108>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	4a0d      	ldr	r2, [pc, #52]	; (8007928 <xTaskPriorityDisinherit+0x108>)
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4a08      	ldr	r2, [pc, #32]	; (8007924 <xTaskPriorityDisinherit+0x104>)
 8007902:	441a      	add	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7fe f945 	bl	8005b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007914:	697b      	ldr	r3, [r7, #20]
	}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	240004bc 	.word	0x240004bc
 8007924:	240004c0 	.word	0x240004c0
 8007928:	240005c4 	.word	0x240005c4

0800792c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800793a:	2301      	movs	r3, #1
 800793c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d077      	beq.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fb      	str	r3, [r7, #12]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d902      	bls.n	8007972 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e002      	b.n	8007978 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	429a      	cmp	r2, r3
 8007980:	d058      	beq.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	429a      	cmp	r2, r3
 800798a:	d153      	bne.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800798c:	4b2b      	ldr	r3, [pc, #172]	; (8007a3c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	429a      	cmp	r2, r3
 8007994:	d10a      	bne.n	80079ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60bb      	str	r3, [r7, #8]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	db04      	blt.n	80079ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f1c3 0207 	rsb	r2, r3, #7
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	6959      	ldr	r1, [r3, #20]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80079da:	4413      	add	r3, r2
 80079dc:	4299      	cmp	r1, r3
 80079de:	d129      	bne.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe f935 	bl	8005c54 <uxListRemove>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	2201      	movs	r2, #1
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43da      	mvns	r2, r3
 80079fc:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4013      	ands	r3, r2
 8007a02:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007a04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	4a0b      	ldr	r2, [pc, #44]	; (8007a44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a06      	ldr	r2, [pc, #24]	; (8007a40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007a26:	441a      	add	r2, r3
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe f8b3 	bl	8005b9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a34:	bf00      	nop
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	240004bc 	.word	0x240004bc
 8007a40:	240004c0 	.word	0x240004c0
 8007a44:	240005c4 	.word	0x240005c4

08007a48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a60:	681b      	ldr	r3, [r3, #0]
	}
 8007a62:	4618      	mov	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	240004bc 	.word	0x240004bc

08007a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a7a:	4b29      	ldr	r3, [pc, #164]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe f8e4 	bl	8005c54 <uxListRemove>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	2201      	movs	r2, #1
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	43da      	mvns	r2, r3
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	4a20      	ldr	r2, [pc, #128]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d10a      	bne.n	8007ac8 <prvAddCurrentTaskToDelayedList+0x58>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	481a      	ldr	r0, [pc, #104]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ac2:	f7fe f86a 	bl	8005b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ac6:	e026      	b.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad0:	4b14      	ldr	r3, [pc, #80]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d209      	bcs.n	8007af4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae0:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe f878 	bl	8005be2 <vListInsert>
}
 8007af2:	e010      	b.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f7fe f86e 	bl	8005be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d202      	bcs.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b10:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6013      	str	r3, [r2, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	240005c0 	.word	0x240005c0
 8007b24:	240004bc 	.word	0x240004bc
 8007b28:	240005c4 	.word	0x240005c4
 8007b2c:	240005a8 	.word	0x240005a8
 8007b30:	24000578 	.word	0x24000578
 8007b34:	24000574 	.word	0x24000574
 8007b38:	240005dc 	.word	0x240005dc

08007b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ba0 <pxPortInitialiseStack+0x64>)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b14      	subs	r3, #20
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b04      	subs	r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f06f 0202 	mvn.w	r2, #2
 8007b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b20      	subs	r3, #32
 8007b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	08007ba5 	.word	0x08007ba5

08007ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <prvTaskExitError+0x54>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d00a      	beq.n	8007bce <prvTaskExitError+0x2a>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <prvTaskExitError+0x28>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60bb      	str	r3, [r7, #8]
}
 8007be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007be2:	bf00      	nop
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0fc      	beq.n	8007be4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	24000024 	.word	0x24000024
 8007bfc:	00000000 	.word	0x00000000

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	240004bc 	.word	0x240004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	; (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c56:	4b46      	ldr	r3, [pc, #280]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a46      	ldr	r2, [pc, #280]	; (8007d74 <xPortStartScheduler+0x124>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10a      	bne.n	8007c76 <xPortStartScheduler+0x26>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c76:	4b3e      	ldr	r3, [pc, #248]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3f      	ldr	r2, [pc, #252]	; (8007d78 <xPortStartScheduler+0x128>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10a      	bne.n	8007c96 <xPortStartScheduler+0x46>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c96:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <xPortStartScheduler+0x130>)
 8007cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cbe:	4b31      	ldr	r3, [pc, #196]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc4:	e009      	b.n	8007cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	4a2d      	ldr	r2, [pc, #180]	; (8007d84 <xPortStartScheduler+0x134>)
 8007cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d0ef      	beq.n	8007cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <xPortStartScheduler+0x134>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1c3 0307 	rsb	r3, r3, #7
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d00a      	beq.n	8007d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60bb      	str	r3, [r7, #8]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d26:	4b18      	ldr	r3, [pc, #96]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d3e:	f000 f8dd 	bl	8007efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <xPortStartScheduler+0x13c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d48:	f000 f8fc 	bl	8007f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <xPortStartScheduler+0x140>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0f      	ldr	r2, [pc, #60]	; (8007d90 <xPortStartScheduler+0x140>)
 8007d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d58:	f7ff ff66 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d5c:	f7ff fa90 	bl	8007280 <vTaskSwitchContext>
	prvTaskExitError();
 8007d60:	f7ff ff20 	bl	8007ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	e000ed00 	.word	0xe000ed00
 8007d74:	410fc271 	.word	0x410fc271
 8007d78:	410fc270 	.word	0x410fc270
 8007d7c:	e000e400 	.word	0xe000e400
 8007d80:	240005e8 	.word	0x240005e8
 8007d84:	240005ec 	.word	0x240005ec
 8007d88:	e000ed20 	.word	0xe000ed20
 8007d8c:	24000024 	.word	0x24000024
 8007d90:	e000ef34 	.word	0xe000ef34

08007d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	607b      	str	r3, [r7, #4]
}
 8007dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <vPortEnterCritical+0x58>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <vPortEnterCritical+0x58>)
 8007db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007db8:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <vPortEnterCritical+0x58>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10f      	bne.n	8007de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <vPortEnterCritical+0x5c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	603b      	str	r3, [r7, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vPortEnterCritical+0x4a>
	}
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	24000024 	.word	0x24000024
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <vPortExitCritical+0x50>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <vPortExitCritical+0x24>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	607b      	str	r3, [r7, #4]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <vPortExitCritical+0x50>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <vPortExitCritical+0x50>)
 8007e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <vPortExitCritical+0x42>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f383 8811 	msr	BASEPRI, r3
}
 8007e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	24000024 	.word	0x24000024
	...

08007e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e50:	f3ef 8009 	mrs	r0, PSP
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <pxCurrentTCBConst>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f01e 0f10 	tst.w	lr, #16
 8007e60:	bf08      	it	eq
 8007e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e74:	f380 8811 	msr	BASEPRI, r0
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f7ff f9fe 	bl	8007280 <vTaskSwitchContext>
 8007e84:	f04f 0000 	mov.w	r0, #0
 8007e88:	f380 8811 	msr	BASEPRI, r0
 8007e8c:	bc09      	pop	{r0, r3}
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	6808      	ldr	r0, [r1, #0]
 8007e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e96:	f01e 0f10 	tst.w	lr, #16
 8007e9a:	bf08      	it	eq
 8007e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ea0:	f380 8809 	msr	PSP, r0
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst>:
 8007eb0:	240004bc 	.word	0x240004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
}
 8007ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ed2:	f7ff f91d 	bl	8007110 <xTaskIncrementTick>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <SysTick_Handler+0x40>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f383 8811 	msr	BASEPRI, r3
}
 8007eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <vPortSetupTimerInterrupt+0x38>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <vPortSetupTimerInterrupt+0x3c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <vPortSetupTimerInterrupt+0x40>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <vPortSetupTimerInterrupt+0x44>)
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f1e:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e010 	.word	0xe000e010
 8007f34:	e000e018 	.word	0xe000e018
 8007f38:	24000000 	.word	0x24000000
 8007f3c:	10624dd3 	.word	0x10624dd3
 8007f40:	e000e014 	.word	0xe000e014

08007f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f54 <vPortEnableVFP+0x10>
 8007f48:	6801      	ldr	r1, [r0, #0]
 8007f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f4e:	6001      	str	r1, [r0, #0]
 8007f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f52:	bf00      	nop
 8007f54:	e000ed88 	.word	0xe000ed88

08007f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d914      	bls.n	8007f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f6a:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <vPortValidateInterruptPriority+0x70>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f74:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <vPortValidateInterruptPriority+0x74>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d20a      	bcs.n	8007f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	607b      	str	r3, [r7, #4]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <vPortValidateInterruptPriority+0x78>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <vPortValidateInterruptPriority+0x7c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d90a      	bls.n	8007fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	603b      	str	r3, [r7, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <vPortValidateInterruptPriority+0x60>
	}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	e000e3f0 	.word	0xe000e3f0
 8007fcc:	240005e8 	.word	0x240005e8
 8007fd0:	e000ed0c 	.word	0xe000ed0c
 8007fd4:	240005ec 	.word	0x240005ec

08007fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fe4:	f7fe ffc8 	bl	8006f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <pvPortMalloc+0x180>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ff0:	f000 f920 	bl	8008234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ff4:	4b59      	ldr	r3, [pc, #356]	; (800815c <pvPortMalloc+0x184>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 8093 	bne.w	8008128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008008:	2208      	movs	r2, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	3308      	adds	r3, #8
 8008022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <pvPortMalloc+0x6c>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	617b      	str	r3, [r7, #20]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d06e      	beq.n	8008128 <pvPortMalloc+0x150>
 800804a:	4b45      	ldr	r3, [pc, #276]	; (8008160 <pvPortMalloc+0x188>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d869      	bhi.n	8008128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008054:	4b43      	ldr	r3, [pc, #268]	; (8008164 <pvPortMalloc+0x18c>)
 8008056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <pvPortMalloc+0x18c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800805e:	e004      	b.n	800806a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <pvPortMalloc+0xa4>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f1      	bne.n	8008060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800807c:	4b36      	ldr	r3, [pc, #216]	; (8008158 <pvPortMalloc+0x180>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d050      	beq.n	8008128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2208      	movs	r2, #8
 800808c:	4413      	add	r3, r2
 800808e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	2308      	movs	r3, #8
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d91f      	bls.n	80080e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	613b      	str	r3, [r7, #16]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f000 f908 	bl	80082f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <pvPortMalloc+0x188>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <pvPortMalloc+0x188>)
 80080f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080f6:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <pvPortMalloc+0x188>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <pvPortMalloc+0x190>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d203      	bcs.n	800810a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008102:	4b17      	ldr	r3, [pc, #92]	; (8008160 <pvPortMalloc+0x188>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <pvPortMalloc+0x190>)
 8008108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <pvPortMalloc+0x184>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	431a      	orrs	r2, r3
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x194>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a11      	ldr	r2, [pc, #68]	; (800816c <pvPortMalloc+0x194>)
 8008126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008128:	f7fe ff34 	bl	8006f94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <pvPortMalloc+0x174>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <pvPortMalloc+0x172>
	return pvReturn;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	240041f8 	.word	0x240041f8
 800815c:	2400420c 	.word	0x2400420c
 8008160:	240041fc 	.word	0x240041fc
 8008164:	240041f0 	.word	0x240041f0
 8008168:	24004200 	.word	0x24004200
 800816c:	24004204 	.word	0x24004204

08008170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04d      	beq.n	800821e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008182:	2308      	movs	r3, #8
 8008184:	425b      	negs	r3, r3
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <vPortFree+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <vPortFree+0x44>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60fb      	str	r3, [r7, #12]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <vPortFree+0x62>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60bb      	str	r3, [r7, #8]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <vPortFree+0xb8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d11a      	bne.n	800821e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <vPortFree+0xb8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f8:	f7fe febe 	bl	8006f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <vPortFree+0xbc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4413      	add	r3, r2
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <vPortFree+0xbc>)
 8008208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f000 f874 	bl	80082f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <vPortFree+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a06      	ldr	r2, [pc, #24]	; (8008230 <vPortFree+0xc0>)
 8008218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800821a:	f7fe febb 	bl	8006f94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800821e:	bf00      	nop
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	2400420c 	.word	0x2400420c
 800822c:	240041fc 	.word	0x240041fc
 8008230:	24004208 	.word	0x24004208

08008234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800823a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800823e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008240:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <prvHeapInit+0xac>)
 8008242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <prvHeapInit+0xac>)
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <prvHeapInit+0xb0>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <prvHeapInit+0xb0>)
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008280:	2208      	movs	r2, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <prvHeapInit+0xb4>)
 8008294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <prvHeapInit+0xb4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <prvHeapInit+0xb4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <prvHeapInit+0xb4>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <prvHeapInit+0xb8>)
 80082c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <prvHeapInit+0xbc>)
 80082ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvHeapInit+0xc0>)
 80082ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	240005f0 	.word	0x240005f0
 80082e4:	240041f0 	.word	0x240041f0
 80082e8:	240041f8 	.word	0x240041f8
 80082ec:	24004200 	.word	0x24004200
 80082f0:	240041fc 	.word	0x240041fc
 80082f4:	2400420c 	.word	0x2400420c

080082f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008300:	4b28      	ldr	r3, [pc, #160]	; (80083a4 <prvInsertBlockIntoFreeList+0xac>)
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e002      	b.n	800830c <prvInsertBlockIntoFreeList+0x14>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d8f7      	bhi.n	8008306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d108      	bne.n	800833a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d118      	bne.n	8008380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d00d      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e008      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e003      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d002      	beq.n	8008396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	240041f0 	.word	0x240041f0
 80083a8:	240041f8 	.word	0x240041f8

080083ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80083b6:	f007 fb8d 	bl	800fad4 <sys_timeouts_sleeptime>
 80083ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d10b      	bne.n	80083dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80083c4:	4813      	ldr	r0, [pc, #76]	; (8008414 <tcpip_timeouts_mbox_fetch+0x68>)
 80083c6:	f00a fc58 	bl	8012c7a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80083ca:	2200      	movs	r2, #0
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f00a fbca 	bl	8012b68 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80083d4:	480f      	ldr	r0, [pc, #60]	; (8008414 <tcpip_timeouts_mbox_fetch+0x68>)
 80083d6:	f00a fc41 	bl	8012c5c <sys_mutex_lock>
    return;
 80083da:	e018      	b.n	800840e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80083e2:	f007 fb3d 	bl	800fa60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80083e6:	e7e6      	b.n	80083b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80083e8:	480a      	ldr	r0, [pc, #40]	; (8008414 <tcpip_timeouts_mbox_fetch+0x68>)
 80083ea:	f00a fc46 	bl	8012c7a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f00a fbb8 	bl	8012b68 <sys_arch_mbox_fetch>
 80083f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80083fa:	4806      	ldr	r0, [pc, #24]	; (8008414 <tcpip_timeouts_mbox_fetch+0x68>)
 80083fc:	f00a fc2e 	bl	8012c5c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d102      	bne.n	800840e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008408:	f007 fb2a 	bl	800fa60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800840c:	e7d3      	b.n	80083b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	2400421c 	.word	0x2400421c

08008418 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008420:	4810      	ldr	r0, [pc, #64]	; (8008464 <tcpip_thread+0x4c>)
 8008422:	f00a fc1b 	bl	8012c5c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <tcpip_thread+0x50>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800842e:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <tcpip_thread+0x50>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a0e      	ldr	r2, [pc, #56]	; (800846c <tcpip_thread+0x54>)
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800843a:	f107 030c 	add.w	r3, r7, #12
 800843e:	4619      	mov	r1, r3
 8008440:	480b      	ldr	r0, [pc, #44]	; (8008470 <tcpip_thread+0x58>)
 8008442:	f7ff ffb3 	bl	80083ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <tcpip_thread+0x5c>)
 800844e:	2291      	movs	r2, #145	; 0x91
 8008450:	4909      	ldr	r1, [pc, #36]	; (8008478 <tcpip_thread+0x60>)
 8008452:	480a      	ldr	r0, [pc, #40]	; (800847c <tcpip_thread+0x64>)
 8008454:	f00a fd62 	bl	8012f1c <iprintf>
      continue;
 8008458:	e003      	b.n	8008462 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f80f 	bl	8008480 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008462:	e7ea      	b.n	800843a <tcpip_thread+0x22>
 8008464:	2400421c 	.word	0x2400421c
 8008468:	24004210 	.word	0x24004210
 800846c:	24004214 	.word	0x24004214
 8008470:	24004218 	.word	0x24004218
 8008474:	08013e3c 	.word	0x08013e3c
 8008478:	08013e6c 	.word	0x08013e6c
 800847c:	08013e8c 	.word	0x08013e8c

08008480 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d026      	beq.n	80084de <tcpip_thread_handle_msg+0x5e>
 8008490:	2b02      	cmp	r3, #2
 8008492:	dc2b      	bgt.n	80084ec <tcpip_thread_handle_msg+0x6c>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <tcpip_thread_handle_msg+0x1e>
 8008498:	2b01      	cmp	r3, #1
 800849a:	d015      	beq.n	80084c8 <tcpip_thread_handle_msg+0x48>
 800849c:	e026      	b.n	80084ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6850      	ldr	r0, [r2, #4]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6892      	ldr	r2, [r2, #8]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4798      	blx	r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fdc3 	bl	800a044 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	2009      	movs	r0, #9
 80084c2:	f000 ff1b 	bl	80092fc <memp_free>
      break;
 80084c6:	e018      	b.n	80084fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6892      	ldr	r2, [r2, #8]
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	2008      	movs	r0, #8
 80084d8:	f000 ff10 	bl	80092fc <memp_free>
      break;
 80084dc:	e00d      	b.n	80084fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6892      	ldr	r2, [r2, #8]
 80084e6:	4610      	mov	r0, r2
 80084e8:	4798      	blx	r3
      break;
 80084ea:	e006      	b.n	80084fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <tcpip_thread_handle_msg+0x84>)
 80084ee:	22cf      	movs	r2, #207	; 0xcf
 80084f0:	4905      	ldr	r1, [pc, #20]	; (8008508 <tcpip_thread_handle_msg+0x88>)
 80084f2:	4806      	ldr	r0, [pc, #24]	; (800850c <tcpip_thread_handle_msg+0x8c>)
 80084f4:	f00a fd12 	bl	8012f1c <iprintf>
      break;
 80084f8:	bf00      	nop
  }
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	08013e3c 	.word	0x08013e3c
 8008508:	08013e6c 	.word	0x08013e6c
 800850c:	08013e8c 	.word	0x08013e8c

08008510 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800851c:	481a      	ldr	r0, [pc, #104]	; (8008588 <tcpip_inpkt+0x78>)
 800851e:	f00a fb62 	bl	8012be6 <sys_mbox_valid>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d105      	bne.n	8008534 <tcpip_inpkt+0x24>
 8008528:	4b18      	ldr	r3, [pc, #96]	; (800858c <tcpip_inpkt+0x7c>)
 800852a:	22fc      	movs	r2, #252	; 0xfc
 800852c:	4918      	ldr	r1, [pc, #96]	; (8008590 <tcpip_inpkt+0x80>)
 800852e:	4819      	ldr	r0, [pc, #100]	; (8008594 <tcpip_inpkt+0x84>)
 8008530:	f00a fcf4 	bl	8012f1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008534:	2009      	movs	r0, #9
 8008536:	f000 fe6b 	bl	8009210 <memp_malloc>
 800853a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008542:	f04f 33ff 	mov.w	r3, #4294967295
 8008546:	e01a      	b.n	800857e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008560:	6979      	ldr	r1, [r7, #20]
 8008562:	4809      	ldr	r0, [pc, #36]	; (8008588 <tcpip_inpkt+0x78>)
 8008564:	f00a fae6 	bl	8012b34 <sys_mbox_trypost>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800856e:	6979      	ldr	r1, [r7, #20]
 8008570:	2009      	movs	r0, #9
 8008572:	f000 fec3 	bl	80092fc <memp_free>
    return ERR_MEM;
 8008576:	f04f 33ff 	mov.w	r3, #4294967295
 800857a:	e000      	b.n	800857e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800857c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	24004218 	.word	0x24004218
 800858c:	08013e3c 	.word	0x08013e3c
 8008590:	08013eb4 	.word	0x08013eb4
 8008594:	08013e8c 	.word	0x08013e8c

08008598 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085a8:	f003 0318 	and.w	r3, r3, #24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80085b0:	4a08      	ldr	r2, [pc, #32]	; (80085d4 <tcpip_input+0x3c>)
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff ffab 	bl	8008510 <tcpip_inpkt>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e005      	b.n	80085ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80085be:	4a06      	ldr	r2, [pc, #24]	; (80085d8 <tcpip_input+0x40>)
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ffa4 	bl	8008510 <tcpip_inpkt>
 80085c8:	4603      	mov	r3, r0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	08012945 	.word	0x08012945
 80085d8:	0801184d 	.word	0x0801184d

080085dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80085e6:	4819      	ldr	r0, [pc, #100]	; (800864c <tcpip_try_callback+0x70>)
 80085e8:	f00a fafd 	bl	8012be6 <sys_mbox_valid>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <tcpip_try_callback+0x24>
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <tcpip_try_callback+0x74>)
 80085f4:	f240 125d 	movw	r2, #349	; 0x15d
 80085f8:	4916      	ldr	r1, [pc, #88]	; (8008654 <tcpip_try_callback+0x78>)
 80085fa:	4817      	ldr	r0, [pc, #92]	; (8008658 <tcpip_try_callback+0x7c>)
 80085fc:	f00a fc8e 	bl	8012f1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008600:	2008      	movs	r0, #8
 8008602:	f000 fe05 	bl	8009210 <memp_malloc>
 8008606:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800860e:	f04f 33ff 	mov.w	r3, #4294967295
 8008612:	e017      	b.n	8008644 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	4808      	ldr	r0, [pc, #32]	; (800864c <tcpip_try_callback+0x70>)
 800862a:	f00a fa83 	bl	8012b34 <sys_mbox_trypost>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008634:	68f9      	ldr	r1, [r7, #12]
 8008636:	2008      	movs	r0, #8
 8008638:	f000 fe60 	bl	80092fc <memp_free>
    return ERR_MEM;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
 8008640:	e000      	b.n	8008644 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	24004218 	.word	0x24004218
 8008650:	08013e3c 	.word	0x08013e3c
 8008654:	08013eb4 	.word	0x08013eb4
 8008658:	08013e8c 	.word	0x08013e8c

0800865c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af02      	add	r7, sp, #8
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008666:	f000 f92d 	bl	80088c4 <lwip_init>

  tcpip_init_done = initfunc;
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <tcpip_init+0x6c>)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008670:	4a16      	ldr	r2, [pc, #88]	; (80086cc <tcpip_init+0x70>)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008676:	2106      	movs	r1, #6
 8008678:	4815      	ldr	r0, [pc, #84]	; (80086d0 <tcpip_init+0x74>)
 800867a:	f00a fa39 	bl	8012af0 <sys_mbox_new>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d006      	beq.n	8008692 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <tcpip_init+0x78>)
 8008686:	f240 2261 	movw	r2, #609	; 0x261
 800868a:	4913      	ldr	r1, [pc, #76]	; (80086d8 <tcpip_init+0x7c>)
 800868c:	4813      	ldr	r0, [pc, #76]	; (80086dc <tcpip_init+0x80>)
 800868e:	f00a fc45 	bl	8012f1c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008692:	4813      	ldr	r0, [pc, #76]	; (80086e0 <tcpip_init+0x84>)
 8008694:	f00a fac6 	bl	8012c24 <sys_mutex_new>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d006      	beq.n	80086ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800869e:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <tcpip_init+0x78>)
 80086a0:	f240 2265 	movw	r2, #613	; 0x265
 80086a4:	490f      	ldr	r1, [pc, #60]	; (80086e4 <tcpip_init+0x88>)
 80086a6:	480d      	ldr	r0, [pc, #52]	; (80086dc <tcpip_init+0x80>)
 80086a8:	f00a fc38 	bl	8012f1c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80086ac:	2300      	movs	r3, #0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086b4:	2200      	movs	r2, #0
 80086b6:	490c      	ldr	r1, [pc, #48]	; (80086e8 <tcpip_init+0x8c>)
 80086b8:	480c      	ldr	r0, [pc, #48]	; (80086ec <tcpip_init+0x90>)
 80086ba:	f00a faeb 	bl	8012c94 <sys_thread_new>
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	24004210 	.word	0x24004210
 80086cc:	24004214 	.word	0x24004214
 80086d0:	24004218 	.word	0x24004218
 80086d4:	08013e3c 	.word	0x08013e3c
 80086d8:	08013ec4 	.word	0x08013ec4
 80086dc:	08013e8c 	.word	0x08013e8c
 80086e0:	2400421c 	.word	0x2400421c
 80086e4:	08013ee8 	.word	0x08013ee8
 80086e8:	08008419 	.word	0x08008419
 80086ec:	08013f0c 	.word	0x08013f0c

080086f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	b21a      	sxth	r2, r3
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	b29b      	uxth	r3, r3
 8008706:	b21b      	sxth	r3, r3
 8008708:	4313      	orrs	r3, r2
 800870a:	b21b      	sxth	r3, r3
 800870c:	b29b      	uxth	r3, r3
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	061a      	lsls	r2, r3, #24
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	0e1b      	lsrs	r3, r3, #24
 800873e:	4313      	orrs	r3, r2
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800874c:	b480      	push	{r7}
 800874e:	b089      	sub	sp, #36	; 0x24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <lwip_standard_chksum+0x40>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dd0a      	ble.n	800878c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	1c53      	adds	r3, r2, #1
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	f107 030e 	add.w	r3, r7, #14
 8008780:	3301      	adds	r3, #1
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
    len--;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	3b01      	subs	r3, #1
 800878a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008790:	e00a      	b.n	80087a8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	1c9a      	adds	r2, r3, #2
 8008796:	61ba      	str	r2, [r7, #24]
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4413      	add	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	3b02      	subs	r3, #2
 80087a6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	dcf1      	bgt.n	8008792 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dd04      	ble.n	80087be <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80087b4:	f107 030e 	add.w	r3, r7, #14
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80087be:	89fb      	ldrh	r3, [r7, #14]
 80087c0:	461a      	mov	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	4413      	add	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	0c1a      	lsrs	r2, r3, #16
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	0c1a      	lsrs	r2, r3, #16
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4413      	add	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	b29b      	uxth	r3, r3
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3724      	adds	r7, #36	; 0x24
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008812:	887b      	ldrh	r3, [r7, #2]
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff ff98 	bl	800874c <lwip_standard_chksum>
 800881c:	4603      	mov	r3, r0
 800881e:	43db      	mvns	r3, r3
 8008820:	b29b      	uxth	r3, r3
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	e02b      	b.n	8008898 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	895b      	ldrh	r3, [r3, #10]
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7ff ff7e 	bl	800874c <lwip_standard_chksum>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4413      	add	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	0c1a      	lsrs	r2, r3, #16
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	b29b      	uxth	r3, r3
 8008862:	4413      	add	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	895b      	ldrh	r3, [r3, #10]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00e      	beq.n	8008892 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bf0c      	ite	eq
 800887a:	2301      	moveq	r3, #1
 800887c:	2300      	movne	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	b29a      	uxth	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1d0      	bne.n	8008840 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	43db      	mvns	r3, r3
 80088ba:	b29b      	uxth	r3, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80088ce:	f00a f99b 	bl	8012c08 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80088d2:	f000 f8d5 	bl	8008a80 <mem_init>
  memp_init();
 80088d6:	f000 fc2d 	bl	8009134 <memp_init>
  pbuf_init();
  netif_init();
 80088da:	f000 fd39 	bl	8009350 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80088de:	f007 f931 	bl	800fb44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80088e2:	f001 fe59 	bl	800a598 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80088e6:	f007 f873 	bl	800f9d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <ptr_to_mem+0x20>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	4413      	add	r3, r2
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	24004238 	.word	0x24004238

08008918 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <mem_to_ptr+0x20>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	b29b      	uxth	r3, r3
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	24004238 	.word	0x24004238

0800893c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008944:	4b45      	ldr	r3, [pc, #276]	; (8008a5c <plug_holes+0x120>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d206      	bcs.n	800895c <plug_holes+0x20>
 800894e:	4b44      	ldr	r3, [pc, #272]	; (8008a60 <plug_holes+0x124>)
 8008950:	f240 12df 	movw	r2, #479	; 0x1df
 8008954:	4943      	ldr	r1, [pc, #268]	; (8008a64 <plug_holes+0x128>)
 8008956:	4844      	ldr	r0, [pc, #272]	; (8008a68 <plug_holes+0x12c>)
 8008958:	f00a fae0 	bl	8012f1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800895c:	4b43      	ldr	r3, [pc, #268]	; (8008a6c <plug_holes+0x130>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d306      	bcc.n	8008974 <plug_holes+0x38>
 8008966:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <plug_holes+0x124>)
 8008968:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800896c:	4940      	ldr	r1, [pc, #256]	; (8008a70 <plug_holes+0x134>)
 800896e:	483e      	ldr	r0, [pc, #248]	; (8008a68 <plug_holes+0x12c>)
 8008970:	f00a fad4 	bl	8012f1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d006      	beq.n	800898a <plug_holes+0x4e>
 800897c:	4b38      	ldr	r3, [pc, #224]	; (8008a60 <plug_holes+0x124>)
 800897e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008982:	493c      	ldr	r1, [pc, #240]	; (8008a74 <plug_holes+0x138>)
 8008984:	4838      	ldr	r0, [pc, #224]	; (8008a68 <plug_holes+0x12c>)
 8008986:	f00a fac9 	bl	8012f1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008992:	d906      	bls.n	80089a2 <plug_holes+0x66>
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <plug_holes+0x124>)
 8008996:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800899a:	4937      	ldr	r1, [pc, #220]	; (8008a78 <plug_holes+0x13c>)
 800899c:	4832      	ldr	r0, [pc, #200]	; (8008a68 <plug_holes+0x12c>)
 800899e:	f00a fabd 	bl	8012f1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff ffa4 	bl	80088f4 <ptr_to_mem>
 80089ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d024      	beq.n	8008a00 <plug_holes+0xc4>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d120      	bne.n	8008a00 <plug_holes+0xc4>
 80089be:	4b2b      	ldr	r3, [pc, #172]	; (8008a6c <plug_holes+0x130>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d01b      	beq.n	8008a00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80089c8:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <plug_holes+0x140>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d102      	bne.n	80089d8 <plug_holes+0x9c>
      lfree = mem;
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <plug_holes+0x140>)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	881a      	ldrh	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e8:	d00a      	beq.n	8008a00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ff80 	bl	80088f4 <ptr_to_mem>
 80089f4:	4604      	mov	r4, r0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ff8e 	bl	8008918 <mem_to_ptr>
 80089fc:	4603      	mov	r3, r0
 80089fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	885b      	ldrh	r3, [r3, #2]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7ff ff75 	bl	80088f4 <ptr_to_mem>
 8008a0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d01f      	beq.n	8008a54 <plug_holes+0x118>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	791b      	ldrb	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11b      	bne.n	8008a54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008a1c:	4b17      	ldr	r3, [pc, #92]	; (8008a7c <plug_holes+0x140>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d102      	bne.n	8008a2c <plug_holes+0xf0>
      lfree = pmem;
 8008a26:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <plug_holes+0x140>)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	881a      	ldrh	r2, [r3, #0]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a3c:	d00a      	beq.n	8008a54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff ff56 	bl	80088f4 <ptr_to_mem>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	68b8      	ldr	r0, [r7, #8]
 8008a4c:	f7ff ff64 	bl	8008918 <mem_to_ptr>
 8008a50:	4603      	mov	r3, r0
 8008a52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}
 8008a5c:	24004238 	.word	0x24004238
 8008a60:	08013f1c 	.word	0x08013f1c
 8008a64:	08013f4c 	.word	0x08013f4c
 8008a68:	08013f64 	.word	0x08013f64
 8008a6c:	2400423c 	.word	0x2400423c
 8008a70:	08013f8c 	.word	0x08013f8c
 8008a74:	08013fa8 	.word	0x08013fa8
 8008a78:	08013fc4 	.word	0x08013fc4
 8008a7c:	24004244 	.word	0x24004244

08008a80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008a86:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <mem_init+0x7c>)
 8008a88:	4a1d      	ldr	r2, [pc, #116]	; (8008b00 <mem_init+0x80>)
 8008a8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <mem_init+0x7c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008aa6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008aaa:	f7ff ff23 	bl	80088f4 <ptr_to_mem>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <mem_init+0x84>)
 8008ab2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008ab4:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <mem_init+0x84>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <mem_init+0x84>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ac4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <mem_init+0x84>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ace:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <mem_init+0x7c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <mem_init+0x88>)
 8008ad6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008ad8:	480c      	ldr	r0, [pc, #48]	; (8008b0c <mem_init+0x8c>)
 8008ada:	f00a f8a3 	bl	8012c24 <sys_mutex_new>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d006      	beq.n	8008af2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <mem_init+0x90>)
 8008ae6:	f240 221f 	movw	r2, #543	; 0x21f
 8008aea:	490a      	ldr	r1, [pc, #40]	; (8008b14 <mem_init+0x94>)
 8008aec:	480a      	ldr	r0, [pc, #40]	; (8008b18 <mem_init+0x98>)
 8008aee:	f00a fa15 	bl	8012f1c <iprintf>
  }
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	24004238 	.word	0x24004238
 8008b00:	30020000 	.word	0x30020000
 8008b04:	2400423c 	.word	0x2400423c
 8008b08:	24004244 	.word	0x24004244
 8008b0c:	24004240 	.word	0x24004240
 8008b10:	08013f1c 	.word	0x08013f1c
 8008b14:	08013ff0 	.word	0x08013ff0
 8008b18:	08013f64 	.word	0x08013f64

08008b1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fef7 	bl	8008918 <mem_to_ptr>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff fede 	bl	80088f4 <ptr_to_mem>
 8008b38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff fed8 	bl	80088f4 <ptr_to_mem>
 8008b44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4e:	d818      	bhi.n	8008b82 <mem_link_valid+0x66>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	885b      	ldrh	r3, [r3, #2]
 8008b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b58:	d813      	bhi.n	8008b82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b5e:	8afa      	ldrh	r2, [r7, #22]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d004      	beq.n	8008b6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	8afa      	ldrh	r2, [r7, #22]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d109      	bne.n	8008b82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b6e:	4b08      	ldr	r3, [pc, #32]	; (8008b90 <mem_link_valid+0x74>)
 8008b70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d006      	beq.n	8008b86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	885b      	ldrh	r3, [r3, #2]
 8008b7c:	8afa      	ldrh	r2, [r7, #22]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d001      	beq.n	8008b86 <mem_link_valid+0x6a>
    return 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e000      	b.n	8008b88 <mem_link_valid+0x6c>
  }
  return 1;
 8008b86:	2301      	movs	r3, #1
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	2400423c 	.word	0x2400423c

08008b94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d070      	beq.n	8008c84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008bac:	4b37      	ldr	r3, [pc, #220]	; (8008c8c <mem_free+0xf8>)
 8008bae:	f240 2273 	movw	r2, #627	; 0x273
 8008bb2:	4937      	ldr	r1, [pc, #220]	; (8008c90 <mem_free+0xfc>)
 8008bb4:	4837      	ldr	r0, [pc, #220]	; (8008c94 <mem_free+0x100>)
 8008bb6:	f00a f9b1 	bl	8012f1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008bba:	f00a f891 	bl	8012ce0 <sys_arch_protect>
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f00a f89b 	bl	8012cfc <sys_arch_unprotect>
    return;
 8008bc6:	e05e      	b.n	8008c86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3b08      	subs	r3, #8
 8008bcc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008bce:	4b32      	ldr	r3, [pc, #200]	; (8008c98 <mem_free+0x104>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d306      	bcc.n	8008be6 <mem_free+0x52>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f103 020c 	add.w	r2, r3, #12
 8008bde:	4b2f      	ldr	r3, [pc, #188]	; (8008c9c <mem_free+0x108>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d90d      	bls.n	8008c02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008be6:	4b29      	ldr	r3, [pc, #164]	; (8008c8c <mem_free+0xf8>)
 8008be8:	f240 227f 	movw	r2, #639	; 0x27f
 8008bec:	492c      	ldr	r1, [pc, #176]	; (8008ca0 <mem_free+0x10c>)
 8008bee:	4829      	ldr	r0, [pc, #164]	; (8008c94 <mem_free+0x100>)
 8008bf0:	f00a f994 	bl	8012f1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008bf4:	f00a f874 	bl	8012ce0 <sys_arch_protect>
 8008bf8:	6138      	str	r0, [r7, #16]
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f00a f87e 	bl	8012cfc <sys_arch_unprotect>
    return;
 8008c00:	e041      	b.n	8008c86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008c02:	4828      	ldr	r0, [pc, #160]	; (8008ca4 <mem_free+0x110>)
 8008c04:	f00a f82a 	bl	8012c5c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	791b      	ldrb	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d110      	bne.n	8008c32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008c10:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <mem_free+0xf8>)
 8008c12:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008c16:	4924      	ldr	r1, [pc, #144]	; (8008ca8 <mem_free+0x114>)
 8008c18:	481e      	ldr	r0, [pc, #120]	; (8008c94 <mem_free+0x100>)
 8008c1a:	f00a f97f 	bl	8012f1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008c1e:	4821      	ldr	r0, [pc, #132]	; (8008ca4 <mem_free+0x110>)
 8008c20:	f00a f82b 	bl	8012c7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008c24:	f00a f85c 	bl	8012ce0 <sys_arch_protect>
 8008c28:	6178      	str	r0, [r7, #20]
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f00a f866 	bl	8012cfc <sys_arch_unprotect>
    return;
 8008c30:	e029      	b.n	8008c86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008c32:	69f8      	ldr	r0, [r7, #28]
 8008c34:	f7ff ff72 	bl	8008b1c <mem_link_valid>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d110      	bne.n	8008c60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008c3e:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <mem_free+0xf8>)
 8008c40:	f240 2295 	movw	r2, #661	; 0x295
 8008c44:	4919      	ldr	r1, [pc, #100]	; (8008cac <mem_free+0x118>)
 8008c46:	4813      	ldr	r0, [pc, #76]	; (8008c94 <mem_free+0x100>)
 8008c48:	f00a f968 	bl	8012f1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008c4c:	4815      	ldr	r0, [pc, #84]	; (8008ca4 <mem_free+0x110>)
 8008c4e:	f00a f814 	bl	8012c7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008c52:	f00a f845 	bl	8012ce0 <sys_arch_protect>
 8008c56:	61b8      	str	r0, [r7, #24]
 8008c58:	69b8      	ldr	r0, [r7, #24]
 8008c5a:	f00a f84f 	bl	8012cfc <sys_arch_unprotect>
    return;
 8008c5e:	e012      	b.n	8008c86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	2200      	movs	r2, #0
 8008c64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <mem_free+0x11c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d202      	bcs.n	8008c76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008c70:	4a0f      	ldr	r2, [pc, #60]	; (8008cb0 <mem_free+0x11c>)
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008c76:	69f8      	ldr	r0, [r7, #28]
 8008c78:	f7ff fe60 	bl	800893c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <mem_free+0x110>)
 8008c7e:	f009 fffc 	bl	8012c7a <sys_mutex_unlock>
 8008c82:	e000      	b.n	8008c86 <mem_free+0xf2>
    return;
 8008c84:	bf00      	nop
}
 8008c86:	3720      	adds	r7, #32
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	08013f1c 	.word	0x08013f1c
 8008c90:	0801400c 	.word	0x0801400c
 8008c94:	08013f64 	.word	0x08013f64
 8008c98:	24004238 	.word	0x24004238
 8008c9c:	2400423c 	.word	0x2400423c
 8008ca0:	08014030 	.word	0x08014030
 8008ca4:	24004240 	.word	0x24004240
 8008ca8:	0801404c 	.word	0x0801404c
 8008cac:	08014074 	.word	0x08014074
 8008cb0:	24004244 	.word	0x24004244

08008cb4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	3303      	adds	r3, #3
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008ccc:	8bfb      	ldrh	r3, [r7, #30]
 8008cce:	2b0b      	cmp	r3, #11
 8008cd0:	d801      	bhi.n	8008cd6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008cd6:	8bfb      	ldrh	r3, [r7, #30]
 8008cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cdc:	d803      	bhi.n	8008ce6 <mem_trim+0x32>
 8008cde:	8bfa      	ldrh	r2, [r7, #30]
 8008ce0:	887b      	ldrh	r3, [r7, #2]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d201      	bcs.n	8008cea <mem_trim+0x36>
    return NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e0d8      	b.n	8008e9c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008cea:	4b6e      	ldr	r3, [pc, #440]	; (8008ea4 <mem_trim+0x1f0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d304      	bcc.n	8008cfe <mem_trim+0x4a>
 8008cf4:	4b6c      	ldr	r3, [pc, #432]	; (8008ea8 <mem_trim+0x1f4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d306      	bcc.n	8008d0c <mem_trim+0x58>
 8008cfe:	4b6b      	ldr	r3, [pc, #428]	; (8008eac <mem_trim+0x1f8>)
 8008d00:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008d04:	496a      	ldr	r1, [pc, #424]	; (8008eb0 <mem_trim+0x1fc>)
 8008d06:	486b      	ldr	r0, [pc, #428]	; (8008eb4 <mem_trim+0x200>)
 8008d08:	f00a f908 	bl	8012f1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008d0c:	4b65      	ldr	r3, [pc, #404]	; (8008ea4 <mem_trim+0x1f0>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d304      	bcc.n	8008d20 <mem_trim+0x6c>
 8008d16:	4b64      	ldr	r3, [pc, #400]	; (8008ea8 <mem_trim+0x1f4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d307      	bcc.n	8008d30 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008d20:	f009 ffde 	bl	8012ce0 <sys_arch_protect>
 8008d24:	60b8      	str	r0, [r7, #8]
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f009 ffe8 	bl	8012cfc <sys_arch_unprotect>
    return rmem;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	e0b5      	b.n	8008e9c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3b08      	subs	r3, #8
 8008d34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008d36:	69b8      	ldr	r0, [r7, #24]
 8008d38:	f7ff fdee 	bl	8008918 <mem_to_ptr>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	881a      	ldrh	r2, [r3, #0]
 8008d44:	8afb      	ldrh	r3, [r7, #22]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b08      	subs	r3, #8
 8008d4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008d4e:	8bfa      	ldrh	r2, [r7, #30]
 8008d50:	8abb      	ldrh	r3, [r7, #20]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d906      	bls.n	8008d64 <mem_trim+0xb0>
 8008d56:	4b55      	ldr	r3, [pc, #340]	; (8008eac <mem_trim+0x1f8>)
 8008d58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008d5c:	4956      	ldr	r1, [pc, #344]	; (8008eb8 <mem_trim+0x204>)
 8008d5e:	4855      	ldr	r0, [pc, #340]	; (8008eb4 <mem_trim+0x200>)
 8008d60:	f00a f8dc 	bl	8012f1c <iprintf>
  if (newsize > size) {
 8008d64:	8bfa      	ldrh	r2, [r7, #30]
 8008d66:	8abb      	ldrh	r3, [r7, #20]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d901      	bls.n	8008d70 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e095      	b.n	8008e9c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008d70:	8bfa      	ldrh	r2, [r7, #30]
 8008d72:	8abb      	ldrh	r3, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d101      	bne.n	8008d7c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	e08f      	b.n	8008e9c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008d7c:	484f      	ldr	r0, [pc, #316]	; (8008ebc <mem_trim+0x208>)
 8008d7e:	f009 ff6d 	bl	8012c5c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fdb4 	bl	80088f4 <ptr_to_mem>
 8008d8c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	791b      	ldrb	r3, [r3, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d13f      	bne.n	8008e16 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9e:	d106      	bne.n	8008dae <mem_trim+0xfa>
 8008da0:	4b42      	ldr	r3, [pc, #264]	; (8008eac <mem_trim+0x1f8>)
 8008da2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008da6:	4946      	ldr	r1, [pc, #280]	; (8008ec0 <mem_trim+0x20c>)
 8008da8:	4842      	ldr	r0, [pc, #264]	; (8008eb4 <mem_trim+0x200>)
 8008daa:	f00a f8b7 	bl	8012f1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008db4:	8afa      	ldrh	r2, [r7, #22]
 8008db6:	8bfb      	ldrh	r3, [r7, #30]
 8008db8:	4413      	add	r3, r2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008dc0:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <mem_trim+0x210>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d106      	bne.n	8008dd8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8008dca:	89fb      	ldrh	r3, [r7, #14]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fd91 	bl	80088f4 <ptr_to_mem>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4a3b      	ldr	r2, [pc, #236]	; (8008ec4 <mem_trim+0x210>)
 8008dd6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fd8a 	bl	80088f4 <ptr_to_mem>
 8008de0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2200      	movs	r2, #0
 8008de6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	89ba      	ldrh	r2, [r7, #12]
 8008dec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	8afa      	ldrh	r2, [r7, #22]
 8008df2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	89fa      	ldrh	r2, [r7, #14]
 8008df8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e02:	d047      	beq.n	8008e94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fd73 	bl	80088f4 <ptr_to_mem>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	8053      	strh	r3, [r2, #2]
 8008e14:	e03e      	b.n	8008e94 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008e16:	8bfb      	ldrh	r3, [r7, #30]
 8008e18:	f103 0214 	add.w	r2, r3, #20
 8008e1c:	8abb      	ldrh	r3, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d838      	bhi.n	8008e94 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008e22:	8afa      	ldrh	r2, [r7, #22]
 8008e24:	8bfb      	ldrh	r3, [r7, #30]
 8008e26:	4413      	add	r3, r2
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e36:	d106      	bne.n	8008e46 <mem_trim+0x192>
 8008e38:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <mem_trim+0x1f8>)
 8008e3a:	f240 3216 	movw	r2, #790	; 0x316
 8008e3e:	4920      	ldr	r1, [pc, #128]	; (8008ec0 <mem_trim+0x20c>)
 8008e40:	481c      	ldr	r0, [pc, #112]	; (8008eb4 <mem_trim+0x200>)
 8008e42:	f00a f86b 	bl	8012f1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fd53 	bl	80088f4 <ptr_to_mem>
 8008e4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <mem_trim+0x210>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d202      	bcs.n	8008e60 <mem_trim+0x1ac>
      lfree = mem2;
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ec4 <mem_trim+0x210>)
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2200      	movs	r2, #0
 8008e64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	881a      	ldrh	r2, [r3, #0]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	8afa      	ldrh	r2, [r7, #22]
 8008e72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	89fa      	ldrh	r2, [r7, #14]
 8008e78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e82:	d007      	beq.n	8008e94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fd33 	bl	80088f4 <ptr_to_mem>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	89fb      	ldrh	r3, [r7, #14]
 8008e92:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008e94:	4809      	ldr	r0, [pc, #36]	; (8008ebc <mem_trim+0x208>)
 8008e96:	f009 fef0 	bl	8012c7a <sys_mutex_unlock>
  return rmem;
 8008e9a:	687b      	ldr	r3, [r7, #4]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	24004238 	.word	0x24004238
 8008ea8:	2400423c 	.word	0x2400423c
 8008eac:	08013f1c 	.word	0x08013f1c
 8008eb0:	080140a8 	.word	0x080140a8
 8008eb4:	08013f64 	.word	0x08013f64
 8008eb8:	080140c0 	.word	0x080140c0
 8008ebc:	24004240 	.word	0x24004240
 8008ec0:	080140e0 	.word	0x080140e0
 8008ec4:	24004244 	.word	0x24004244

08008ec8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <mem_malloc+0x14>
    return NULL;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e0e2      	b.n	80090a2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	3303      	adds	r3, #3
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008ee8:	8bbb      	ldrh	r3, [r7, #28]
 8008eea:	2b0b      	cmp	r3, #11
 8008eec:	d801      	bhi.n	8008ef2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008eee:	230c      	movs	r3, #12
 8008ef0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008ef2:	8bbb      	ldrh	r3, [r7, #28]
 8008ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef8:	d803      	bhi.n	8008f02 <mem_malloc+0x3a>
 8008efa:	8bba      	ldrh	r2, [r7, #28]
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d201      	bcs.n	8008f06 <mem_malloc+0x3e>
    return NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e0cd      	b.n	80090a2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008f06:	4869      	ldr	r0, [pc, #420]	; (80090ac <mem_malloc+0x1e4>)
 8008f08:	f009 fea8 	bl	8012c5c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008f0c:	4b68      	ldr	r3, [pc, #416]	; (80090b0 <mem_malloc+0x1e8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff fd01 	bl	8008918 <mem_to_ptr>
 8008f16:	4603      	mov	r3, r0
 8008f18:	83fb      	strh	r3, [r7, #30]
 8008f1a:	e0b7      	b.n	800908c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008f1c:	8bfb      	ldrh	r3, [r7, #30]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fce8 	bl	80088f4 <ptr_to_mem>
 8008f24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	791b      	ldrb	r3, [r3, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f040 80a7 	bne.w	800907e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	8bfb      	ldrh	r3, [r7, #30]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f1a3 0208 	sub.w	r2, r3, #8
 8008f3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008f40:	429a      	cmp	r2, r3
 8008f42:	f0c0 809c 	bcc.w	800907e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	8bfb      	ldrh	r3, [r7, #30]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	f1a3 0208 	sub.w	r2, r3, #8
 8008f54:	8bbb      	ldrh	r3, [r7, #28]
 8008f56:	3314      	adds	r3, #20
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d333      	bcc.n	8008fc4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008f5c:	8bfa      	ldrh	r2, [r7, #30]
 8008f5e:	8bbb      	ldrh	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3308      	adds	r3, #8
 8008f66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008f68:	8a7b      	ldrh	r3, [r7, #18]
 8008f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6e:	d106      	bne.n	8008f7e <mem_malloc+0xb6>
 8008f70:	4b50      	ldr	r3, [pc, #320]	; (80090b4 <mem_malloc+0x1ec>)
 8008f72:	f240 3287 	movw	r2, #903	; 0x387
 8008f76:	4950      	ldr	r1, [pc, #320]	; (80090b8 <mem_malloc+0x1f0>)
 8008f78:	4850      	ldr	r0, [pc, #320]	; (80090bc <mem_malloc+0x1f4>)
 8008f7a:	f009 ffcf 	bl	8012f1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008f7e:	8a7b      	ldrh	r3, [r7, #18]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff fcb7 	bl	80088f4 <ptr_to_mem>
 8008f86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8bfa      	ldrh	r2, [r7, #30]
 8008f9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	8a7a      	ldrh	r2, [r7, #18]
 8008fa0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb0:	d00b      	beq.n	8008fca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fc9c 	bl	80088f4 <ptr_to_mem>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	8a7b      	ldrh	r3, [r7, #18]
 8008fc0:	8053      	strh	r3, [r2, #2]
 8008fc2:	e002      	b.n	8008fca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008fca:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <mem_malloc+0x1e8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d127      	bne.n	8009024 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008fd4:	4b36      	ldr	r3, [pc, #216]	; (80090b0 <mem_malloc+0x1e8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008fda:	e005      	b.n	8008fe8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fc87 	bl	80088f4 <ptr_to_mem>
 8008fe6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <mem_malloc+0x132>
 8008ff0:	4b33      	ldr	r3, [pc, #204]	; (80090c0 <mem_malloc+0x1f8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d1f0      	bne.n	8008fdc <mem_malloc+0x114>
          }
          lfree = cur;
 8008ffa:	4a2d      	ldr	r2, [pc, #180]	; (80090b0 <mem_malloc+0x1e8>)
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009000:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <mem_malloc+0x1e8>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <mem_malloc+0x1f8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d00b      	beq.n	8009024 <mem_malloc+0x15c>
 800900c:	4b28      	ldr	r3, [pc, #160]	; (80090b0 <mem_malloc+0x1e8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d006      	beq.n	8009024 <mem_malloc+0x15c>
 8009016:	4b27      	ldr	r3, [pc, #156]	; (80090b4 <mem_malloc+0x1ec>)
 8009018:	f240 32b5 	movw	r2, #949	; 0x3b5
 800901c:	4929      	ldr	r1, [pc, #164]	; (80090c4 <mem_malloc+0x1fc>)
 800901e:	4827      	ldr	r0, [pc, #156]	; (80090bc <mem_malloc+0x1f4>)
 8009020:	f009 ff7c 	bl	8012f1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009024:	4821      	ldr	r0, [pc, #132]	; (80090ac <mem_malloc+0x1e4>)
 8009026:	f009 fe28 	bl	8012c7a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800902a:	8bba      	ldrh	r2, [r7, #28]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	4413      	add	r3, r2
 8009030:	3308      	adds	r3, #8
 8009032:	4a23      	ldr	r2, [pc, #140]	; (80090c0 <mem_malloc+0x1f8>)
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	4293      	cmp	r3, r2
 8009038:	d906      	bls.n	8009048 <mem_malloc+0x180>
 800903a:	4b1e      	ldr	r3, [pc, #120]	; (80090b4 <mem_malloc+0x1ec>)
 800903c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009040:	4921      	ldr	r1, [pc, #132]	; (80090c8 <mem_malloc+0x200>)
 8009042:	481e      	ldr	r0, [pc, #120]	; (80090bc <mem_malloc+0x1f4>)
 8009044:	f009 ff6a 	bl	8012f1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <mem_malloc+0x198>
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <mem_malloc+0x1ec>)
 8009054:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009058:	491c      	ldr	r1, [pc, #112]	; (80090cc <mem_malloc+0x204>)
 800905a:	4818      	ldr	r0, [pc, #96]	; (80090bc <mem_malloc+0x1f4>)
 800905c:	f009 ff5e 	bl	8012f1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <mem_malloc+0x1b0>
 800906a:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <mem_malloc+0x1ec>)
 800906c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009070:	4917      	ldr	r1, [pc, #92]	; (80090d0 <mem_malloc+0x208>)
 8009072:	4812      	ldr	r0, [pc, #72]	; (80090bc <mem_malloc+0x1f4>)
 8009074:	f009 ff52 	bl	8012f1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	3308      	adds	r3, #8
 800907c:	e011      	b.n	80090a2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800907e:	8bfb      	ldrh	r3, [r7, #30]
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff fc37 	bl	80088f4 <ptr_to_mem>
 8009086:	4603      	mov	r3, r0
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800908c:	8bfa      	ldrh	r2, [r7, #30]
 800908e:	8bbb      	ldrh	r3, [r7, #28]
 8009090:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009094:	429a      	cmp	r2, r3
 8009096:	f4ff af41 	bcc.w	8008f1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800909a:	4804      	ldr	r0, [pc, #16]	; (80090ac <mem_malloc+0x1e4>)
 800909c:	f009 fded 	bl	8012c7a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	24004240 	.word	0x24004240
 80090b0:	24004244 	.word	0x24004244
 80090b4:	08013f1c 	.word	0x08013f1c
 80090b8:	080140e0 	.word	0x080140e0
 80090bc:	08013f64 	.word	0x08013f64
 80090c0:	2400423c 	.word	0x2400423c
 80090c4:	080140f4 	.word	0x080140f4
 80090c8:	08014110 	.word	0x08014110
 80090cc:	08014140 	.word	0x08014140
 80090d0:	08014170 	.word	0x08014170

080090d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	3303      	adds	r3, #3
 80090ea:	f023 0303 	bic.w	r3, r3, #3
 80090ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	e011      	b.n	800911a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4413      	add	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	885b      	ldrh	r3, [r3, #2]
 800911e:	461a      	mov	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4293      	cmp	r3, r2
 8009124:	dbe7      	blt.n	80090f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800913a:	2300      	movs	r3, #0
 800913c:	80fb      	strh	r3, [r7, #6]
 800913e:	e009      	b.n	8009154 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	4a08      	ldr	r2, [pc, #32]	; (8009164 <memp_init+0x30>)
 8009144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff ffc3 	bl	80090d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	3301      	adds	r3, #1
 8009152:	80fb      	strh	r3, [r7, #6]
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	2b0c      	cmp	r3, #12
 8009158:	d9f2      	bls.n	8009140 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	0801697c 	.word	0x0801697c

08009168 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009170:	f009 fdb6 	bl	8012ce0 <sys_arch_protect>
 8009174:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d015      	beq.n	80091b0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	6812      	ldr	r2, [r2, #0]
 800918c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <do_memp_malloc_pool+0x3e>
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <do_memp_malloc_pool+0x58>)
 800919a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800919e:	4909      	ldr	r1, [pc, #36]	; (80091c4 <do_memp_malloc_pool+0x5c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	; (80091c8 <do_memp_malloc_pool+0x60>)
 80091a2:	f009 febb 	bl	8012f1c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f009 fda8 	bl	8012cfc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	e003      	b.n	80091b8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f009 fda3 	bl	8012cfc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	08014194 	.word	0x08014194
 80091c4:	080141c4 	.word	0x080141c4
 80091c8:	080141e8 	.word	0x080141e8

080091cc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <memp_malloc_pool+0x1c>
 80091da:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <memp_malloc_pool+0x38>)
 80091dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80091e0:	4909      	ldr	r1, [pc, #36]	; (8009208 <memp_malloc_pool+0x3c>)
 80091e2:	480a      	ldr	r0, [pc, #40]	; (800920c <memp_malloc_pool+0x40>)
 80091e4:	f009 fe9a 	bl	8012f1c <iprintf>
  if (desc == NULL) {
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <memp_malloc_pool+0x26>
    return NULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	e003      	b.n	80091fa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff ffb8 	bl	8009168 <do_memp_malloc_pool>
 80091f8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	08014194 	.word	0x08014194
 8009208:	08014210 	.word	0x08014210
 800920c:	080141e8 	.word	0x080141e8

08009210 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	2b0c      	cmp	r3, #12
 800921e:	d908      	bls.n	8009232 <memp_malloc+0x22>
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <memp_malloc+0x3c>)
 8009222:	f240 1257 	movw	r2, #343	; 0x157
 8009226:	490a      	ldr	r1, [pc, #40]	; (8009250 <memp_malloc+0x40>)
 8009228:	480a      	ldr	r0, [pc, #40]	; (8009254 <memp_malloc+0x44>)
 800922a:	f009 fe77 	bl	8012f1c <iprintf>
 800922e:	2300      	movs	r3, #0
 8009230:	e008      	b.n	8009244 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	4a08      	ldr	r2, [pc, #32]	; (8009258 <memp_malloc+0x48>)
 8009236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff ff94 	bl	8009168 <do_memp_malloc_pool>
 8009240:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009242:	68fb      	ldr	r3, [r7, #12]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	08014194 	.word	0x08014194
 8009250:	08014224 	.word	0x08014224
 8009254:	080141e8 	.word	0x080141e8
 8009258:	0801697c 	.word	0x0801697c

0800925c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <do_memp_free_pool+0x22>
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <do_memp_free_pool+0x4c>)
 8009272:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009276:	490d      	ldr	r1, [pc, #52]	; (80092ac <do_memp_free_pool+0x50>)
 8009278:	480d      	ldr	r0, [pc, #52]	; (80092b0 <do_memp_free_pool+0x54>)
 800927a:	f009 fe4f 	bl	8012f1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009282:	f009 fd2d 	bl	8012ce0 <sys_arch_protect>
 8009286:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800929a:	68b8      	ldr	r0, [r7, #8]
 800929c:	f009 fd2e 	bl	8012cfc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	08014194 	.word	0x08014194
 80092ac:	08014244 	.word	0x08014244
 80092b0:	080141e8 	.word	0x080141e8

080092b4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <memp_free_pool+0x1e>
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <memp_free_pool+0x3c>)
 80092c6:	f240 1295 	movw	r2, #405	; 0x195
 80092ca:	490a      	ldr	r1, [pc, #40]	; (80092f4 <memp_free_pool+0x40>)
 80092cc:	480a      	ldr	r0, [pc, #40]	; (80092f8 <memp_free_pool+0x44>)
 80092ce:	f009 fe25 	bl	8012f1c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <memp_free_pool+0x34>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ffbb 	bl	800925c <do_memp_free_pool>
 80092e6:	e000      	b.n	80092ea <memp_free_pool+0x36>
    return;
 80092e8:	bf00      	nop
}
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08014194 	.word	0x08014194
 80092f4:	08014210 	.word	0x08014210
 80092f8:	080141e8 	.word	0x080141e8

080092fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	2b0c      	cmp	r3, #12
 800930c:	d907      	bls.n	800931e <memp_free+0x22>
 800930e:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <memp_free+0x44>)
 8009310:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009314:	490b      	ldr	r1, [pc, #44]	; (8009344 <memp_free+0x48>)
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <memp_free+0x4c>)
 8009318:	f009 fe00 	bl	8012f1c <iprintf>
 800931c:	e00c      	b.n	8009338 <memp_free+0x3c>

  if (mem == NULL) {
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d008      	beq.n	8009336 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <memp_free+0x50>)
 8009328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff ff94 	bl	800925c <do_memp_free_pool>
 8009334:	e000      	b.n	8009338 <memp_free+0x3c>
    return;
 8009336:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	08014194 	.word	0x08014194
 8009344:	08014264 	.word	0x08014264
 8009348:	080141e8 	.word	0x080141e8
 800934c:	0801697c 	.word	0x0801697c

08009350 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009354:	bf00      	nop
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d108      	bne.n	8009386 <netif_add+0x26>
 8009374:	4b57      	ldr	r3, [pc, #348]	; (80094d4 <netif_add+0x174>)
 8009376:	f240 1227 	movw	r2, #295	; 0x127
 800937a:	4957      	ldr	r1, [pc, #348]	; (80094d8 <netif_add+0x178>)
 800937c:	4857      	ldr	r0, [pc, #348]	; (80094dc <netif_add+0x17c>)
 800937e:	f009 fdcd 	bl	8012f1c <iprintf>
 8009382:	2300      	movs	r3, #0
 8009384:	e0a2      	b.n	80094cc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d108      	bne.n	800939e <netif_add+0x3e>
 800938c:	4b51      	ldr	r3, [pc, #324]	; (80094d4 <netif_add+0x174>)
 800938e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009392:	4953      	ldr	r1, [pc, #332]	; (80094e0 <netif_add+0x180>)
 8009394:	4851      	ldr	r0, [pc, #324]	; (80094dc <netif_add+0x17c>)
 8009396:	f009 fdc1 	bl	8012f1c <iprintf>
 800939a:	2300      	movs	r3, #0
 800939c:	e096      	b.n	80094cc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80093a4:	4b4f      	ldr	r3, [pc, #316]	; (80094e4 <netif_add+0x184>)
 80093a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80093ae:	4b4d      	ldr	r3, [pc, #308]	; (80094e4 <netif_add+0x184>)
 80093b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80093b8:	4b4a      	ldr	r3, [pc, #296]	; (80094e4 <netif_add+0x184>)
 80093ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4a45      	ldr	r2, [pc, #276]	; (80094e8 <netif_add+0x188>)
 80093d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a3a      	ldr	r2, [r7, #32]
 80093ec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80093ee:	4b3f      	ldr	r3, [pc, #252]	; (80094ec <netif_add+0x18c>)
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f913 	bl	8009630 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <netif_add+0xba>
    return NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	e058      	b.n	80094cc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009420:	2bff      	cmp	r3, #255	; 0xff
 8009422:	d103      	bne.n	800942c <netif_add+0xcc>
        netif->num = 0;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009430:	4b2f      	ldr	r3, [pc, #188]	; (80094f0 <netif_add+0x190>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e02b      	b.n	8009490 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	429a      	cmp	r2, r3
 800943e:	d106      	bne.n	800944e <netif_add+0xee>
 8009440:	4b24      	ldr	r3, [pc, #144]	; (80094d4 <netif_add+0x174>)
 8009442:	f240 128b 	movw	r2, #395	; 0x18b
 8009446:	492b      	ldr	r1, [pc, #172]	; (80094f4 <netif_add+0x194>)
 8009448:	4824      	ldr	r0, [pc, #144]	; (80094dc <netif_add+0x17c>)
 800944a:	f009 fd67 	bl	8012f1c <iprintf>
        num_netifs++;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	3301      	adds	r3, #1
 8009452:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2bff      	cmp	r3, #255	; 0xff
 8009458:	dd06      	ble.n	8009468 <netif_add+0x108>
 800945a:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <netif_add+0x174>)
 800945c:	f240 128d 	movw	r2, #397	; 0x18d
 8009460:	4925      	ldr	r1, [pc, #148]	; (80094f8 <netif_add+0x198>)
 8009462:	481e      	ldr	r0, [pc, #120]	; (80094dc <netif_add+0x17c>)
 8009464:	f009 fd5a 	bl	8012f1c <iprintf>
        if (netif2->num == netif->num) {
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009474:	429a      	cmp	r2, r3
 8009476:	d108      	bne.n	800948a <netif_add+0x12a>
          netif->num++;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800947e:	3301      	adds	r3, #1
 8009480:	b2da      	uxtb	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009488:	e005      	b.n	8009496 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1d0      	bne.n	8009438 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1be      	bne.n	800941a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094a2:	2bfe      	cmp	r3, #254	; 0xfe
 80094a4:	d103      	bne.n	80094ae <netif_add+0x14e>
    netif_num = 0;
 80094a6:	4b11      	ldr	r3, [pc, #68]	; (80094ec <netif_add+0x18c>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	e006      	b.n	80094bc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <netif_add+0x18c>)
 80094ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <netif_add+0x190>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80094c4:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <netif_add+0x190>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80094ca:	68fb      	ldr	r3, [r7, #12]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	08014280 	.word	0x08014280
 80094d8:	08014314 	.word	0x08014314
 80094dc:	080142d0 	.word	0x080142d0
 80094e0:	08014330 	.word	0x08014330
 80094e4:	080169f0 	.word	0x080169f0
 80094e8:	0800990b 	.word	0x0800990b
 80094ec:	2400731c 	.word	0x2400731c
 80094f0:	24007314 	.word	0x24007314
 80094f4:	08014354 	.word	0x08014354
 80094f8:	08014368 	.word	0x08014368

080094fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 fb8d 	bl	800bc28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f006 ffd1 	bl	80104b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <netif_do_set_ipaddr+0x20>
 8009532:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <netif_do_set_ipaddr+0x88>)
 8009534:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009538:	491c      	ldr	r1, [pc, #112]	; (80095ac <netif_do_set_ipaddr+0x8c>)
 800953a:	481d      	ldr	r0, [pc, #116]	; (80095b0 <netif_do_set_ipaddr+0x90>)
 800953c:	f009 fcee 	bl	8012f1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <netif_do_set_ipaddr+0x34>
 8009546:	4b18      	ldr	r3, [pc, #96]	; (80095a8 <netif_do_set_ipaddr+0x88>)
 8009548:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800954c:	4917      	ldr	r1, [pc, #92]	; (80095ac <netif_do_set_ipaddr+0x8c>)
 800954e:	4818      	ldr	r0, [pc, #96]	; (80095b0 <netif_do_set_ipaddr+0x90>)
 8009550:	f009 fce4 	bl	8012f1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3304      	adds	r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d01c      	beq.n	800959c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3304      	adds	r3, #4
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009572:	f107 0314 	add.w	r3, r7, #20
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ffbf 	bl	80094fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <netif_do_set_ipaddr+0x6a>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	e000      	b.n	800958c <netif_do_set_ipaddr+0x6c>
 800958a:	2300      	movs	r3, #0
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009590:	2101      	movs	r1, #1
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 f8d2 	bl	800973c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	08014280 	.word	0x08014280
 80095ac:	08014398 	.word	0x08014398
 80095b0:	080142d0 	.word	0x080142d0

080095b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3308      	adds	r3, #8
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d00a      	beq.n	80095e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <netif_do_set_netmask+0x26>
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	e000      	b.n	80095dc <netif_do_set_netmask+0x28>
 80095da:	2300      	movs	r3, #0
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80095e0:	2301      	movs	r3, #1
 80095e2:	e000      	b.n	80095e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	330c      	adds	r3, #12
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d00a      	beq.n	8009622 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <netif_do_set_gw+0x26>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	e000      	b.n	800961a <netif_do_set_gw+0x28>
 8009618:	2300      	movs	r3, #0
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800961e:	2301      	movs	r3, #1
 8009620:	e000      	b.n	8009624 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800964c:	4b1c      	ldr	r3, [pc, #112]	; (80096c0 <netif_set_addr+0x90>)
 800964e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009656:	4b1a      	ldr	r3, [pc, #104]	; (80096c0 <netif_set_addr+0x90>)
 8009658:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <netif_set_addr+0x90>)
 8009662:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <netif_set_addr+0x42>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <netif_set_addr+0x46>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <netif_set_addr+0x48>
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]
  if (remove) {
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d006      	beq.n	800968e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009680:	f107 0310 	add.w	r3, r7, #16
 8009684:	461a      	mov	r2, r3
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff ff49 	bl	8009520 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff ff8e 	bl	80095b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff ffa8 	bl	80095f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	461a      	mov	r2, r3
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff ff35 	bl	8009520 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80096b6:	bf00      	nop
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	080169f0 	.word	0x080169f0

080096c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80096cc:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <netif_set_default+0x1c>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	24007318 	.word	0x24007318

080096e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d107      	bne.n	8009702 <netif_set_up+0x1e>
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <netif_set_up+0x4c>)
 80096f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80096f8:	490e      	ldr	r1, [pc, #56]	; (8009734 <netif_set_up+0x50>)
 80096fa:	480f      	ldr	r0, [pc, #60]	; (8009738 <netif_set_up+0x54>)
 80096fc:	f009 fc0e 	bl	8012f1c <iprintf>
 8009700:	e013      	b.n	800972a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10c      	bne.n	800972a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009716:	f043 0301 	orr.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009722:	2103      	movs	r1, #3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f809 	bl	800973c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	08014280 	.word	0x08014280
 8009734:	08014408 	.word	0x08014408
 8009738:	080142d0 	.word	0x080142d0

0800973c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <netif_issue_reports+0x20>
 800974e:	4b18      	ldr	r3, [pc, #96]	; (80097b0 <netif_issue_reports+0x74>)
 8009750:	f240 326d 	movw	r2, #877	; 0x36d
 8009754:	4917      	ldr	r1, [pc, #92]	; (80097b4 <netif_issue_reports+0x78>)
 8009756:	4818      	ldr	r0, [pc, #96]	; (80097b8 <netif_issue_reports+0x7c>)
 8009758:	f009 fbe0 	bl	8012f1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01e      	beq.n	80097a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009770:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009774:	2b00      	cmp	r3, #0
 8009776:	d017      	beq.n	80097a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d013      	beq.n	80097aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3304      	adds	r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00e      	beq.n	80097aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3304      	adds	r3, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f007 fdf3 	bl	801138c <etharp_request>
 80097a6:	e000      	b.n	80097aa <netif_issue_reports+0x6e>
    return;
 80097a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	08014280 	.word	0x08014280
 80097b4:	08014424 	.word	0x08014424
 80097b8:	080142d0 	.word	0x080142d0

080097bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d107      	bne.n	80097da <netif_set_down+0x1e>
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <netif_set_down+0x58>)
 80097cc:	f240 329b 	movw	r2, #923	; 0x39b
 80097d0:	4911      	ldr	r1, [pc, #68]	; (8009818 <netif_set_down+0x5c>)
 80097d2:	4812      	ldr	r0, [pc, #72]	; (800981c <netif_set_down+0x60>)
 80097d4:	f009 fba2 	bl	8012f1c <iprintf>
 80097d8:	e019      	b.n	800980e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d012      	beq.n	800980e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f007 f97d 	bl	8010b08 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	08014280 	.word	0x08014280
 8009818:	08014448 	.word	0x08014448
 800981c:	080142d0 	.word	0x080142d0

08009820 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <netif_set_link_up+0x1e>
 800982e:	4b13      	ldr	r3, [pc, #76]	; (800987c <netif_set_link_up+0x5c>)
 8009830:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009834:	4912      	ldr	r1, [pc, #72]	; (8009880 <netif_set_link_up+0x60>)
 8009836:	4813      	ldr	r0, [pc, #76]	; (8009884 <netif_set_link_up+0x64>)
 8009838:	f009 fb70 	bl	8012f1c <iprintf>
 800983c:	e01b      	b.n	8009876 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d114      	bne.n	8009876 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009852:	f043 0304 	orr.w	r3, r3, #4
 8009856:	b2da      	uxtb	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800985e:	2103      	movs	r1, #3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff6b 	bl	800973c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <netif_set_link_up+0x56>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	08014280 	.word	0x08014280
 8009880:	08014468 	.word	0x08014468
 8009884:	080142d0 	.word	0x080142d0

08009888 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d107      	bne.n	80098a6 <netif_set_link_down+0x1e>
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <netif_set_link_down+0x54>)
 8009898:	f240 4206 	movw	r2, #1030	; 0x406
 800989c:	4910      	ldr	r1, [pc, #64]	; (80098e0 <netif_set_link_down+0x58>)
 800989e:	4811      	ldr	r0, [pc, #68]	; (80098e4 <netif_set_link_down+0x5c>)
 80098a0:	f009 fb3c 	bl	8012f1c <iprintf>
 80098a4:	e017      	b.n	80098d6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098ba:	f023 0304 	bic.w	r3, r3, #4
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <netif_set_link_down+0x4e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	08014280 	.word	0x08014280
 80098e0:	0801448c 	.word	0x0801448c
 80098e4:	080142d0 	.word	0x080142d0

080098e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	61da      	str	r2, [r3, #28]
  }
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009916:	f06f 030b 	mvn.w	r3, #11
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d013      	beq.n	8009960 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <netif_get_by_index+0x48>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	e00c      	b.n	800995a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009946:	3301      	adds	r3, #1
 8009948:	b2db      	uxtb	r3, r3
 800994a:	79fa      	ldrb	r2, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d101      	bne.n	8009954 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	e006      	b.n	8009962 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ef      	bne.n	8009940 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	24007314 	.word	0x24007314

08009974 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800997a:	f009 f9b1 	bl	8012ce0 <sys_arch_protect>
 800997e:	6038      	str	r0, [r7, #0]
 8009980:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <pbuf_free_ooseq+0x44>)
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	6838      	ldr	r0, [r7, #0]
 8009988:	f009 f9b8 	bl	8012cfc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800998c:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <pbuf_free_ooseq+0x48>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	607b      	str	r3, [r7, #4]
 8009992:	e00a      	b.n	80099aa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f002 f981 	bl	800bca4 <tcp_free_ooseq>
      return;
 80099a2:	e005      	b.n	80099b0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f1      	bne.n	8009994 <pbuf_free_ooseq+0x20>
    }
  }
}
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	2400731d 	.word	0x2400731d
 80099bc:	2400732c 	.word	0x2400732c

080099c0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80099c8:	f7ff ffd4 	bl	8009974 <pbuf_free_ooseq>
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80099da:	f009 f981 	bl	8012ce0 <sys_arch_protect>
 80099de:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80099e0:	4b0f      	ldr	r3, [pc, #60]	; (8009a20 <pbuf_pool_is_empty+0x4c>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80099e6:	4b0e      	ldr	r3, [pc, #56]	; (8009a20 <pbuf_pool_is_empty+0x4c>)
 80099e8:	2201      	movs	r2, #1
 80099ea:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f009 f985 	bl	8012cfc <sys_arch_unprotect>

  if (!queued) {
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10f      	bne.n	8009a18 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80099f8:	2100      	movs	r1, #0
 80099fa:	480a      	ldr	r0, [pc, #40]	; (8009a24 <pbuf_pool_is_empty+0x50>)
 80099fc:	f7fe fdee 	bl	80085dc <tcpip_try_callback>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d008      	beq.n	8009a18 <pbuf_pool_is_empty+0x44>
 8009a06:	f009 f96b 	bl	8012ce0 <sys_arch_protect>
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <pbuf_pool_is_empty+0x4c>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f009 f972 	bl	8012cfc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	2400731d 	.word	0x2400731d
 8009a24:	080099c1 	.word	0x080099c1

08009a28 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	4611      	mov	r1, r2
 8009a34:	461a      	mov	r2, r3
 8009a36:	460b      	mov	r3, r1
 8009a38:	80fb      	strh	r3, [r7, #6]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	88fa      	ldrh	r2, [r7, #6]
 8009a4e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	88ba      	ldrh	r2, [r7, #4]
 8009a54:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009a56:	8b3b      	ldrh	r3, [r7, #24]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	7f3a      	ldrb	r2, [r7, #28]
 8009a62:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	73da      	strb	r2, [r3, #15]
}
 8009a70:	bf00      	nop
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08c      	sub	sp, #48	; 0x30
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
 8009a86:	460b      	mov	r3, r1
 8009a88:	80bb      	strh	r3, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009a92:	887b      	ldrh	r3, [r7, #2]
 8009a94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009a98:	d07f      	beq.n	8009b9a <pbuf_alloc+0x11e>
 8009a9a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009a9e:	f300 80c8 	bgt.w	8009c32 <pbuf_alloc+0x1b6>
 8009aa2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009aa6:	d010      	beq.n	8009aca <pbuf_alloc+0x4e>
 8009aa8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009aac:	f300 80c1 	bgt.w	8009c32 <pbuf_alloc+0x1b6>
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d002      	beq.n	8009aba <pbuf_alloc+0x3e>
 8009ab4:	2b41      	cmp	r3, #65	; 0x41
 8009ab6:	f040 80bc 	bne.w	8009c32 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009aba:	887a      	ldrh	r2, [r7, #2]
 8009abc:	88bb      	ldrh	r3, [r7, #4]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f000 f8d1 	bl	8009c68 <pbuf_alloc_reference>
 8009ac6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009ac8:	e0bd      	b.n	8009c46 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009ad2:	88bb      	ldrh	r3, [r7, #4]
 8009ad4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009ad6:	200c      	movs	r0, #12
 8009ad8:	f7ff fb9a 	bl	8009210 <memp_malloc>
 8009adc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d109      	bne.n	8009af8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009ae4:	f7ff ff76 	bl	80099d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009af0:	f000 faa8 	bl	800a044 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	e0a7      	b.n	8009c48 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009afa:	3303      	adds	r3, #3
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f023 0303 	bic.w	r3, r3, #3
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	8b7a      	ldrh	r2, [r7, #26]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bf28      	it	cs
 8009b10:	4613      	movcs	r3, r2
 8009b12:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b16:	3310      	adds	r3, #16
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	4618      	mov	r0, r3
 8009b24:	89f9      	ldrh	r1, [r7, #14]
 8009b26:	8b7a      	ldrh	r2, [r7, #26]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	887b      	ldrh	r3, [r7, #2]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	460b      	mov	r3, r1
 8009b32:	4601      	mov	r1, r0
 8009b34:	6938      	ldr	r0, [r7, #16]
 8009b36:	f7ff ff77 	bl	8009a28 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d006      	beq.n	8009b54 <pbuf_alloc+0xd8>
 8009b46:	4b42      	ldr	r3, [pc, #264]	; (8009c50 <pbuf_alloc+0x1d4>)
 8009b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b4c:	4941      	ldr	r1, [pc, #260]	; (8009c54 <pbuf_alloc+0x1d8>)
 8009b4e:	4842      	ldr	r0, [pc, #264]	; (8009c58 <pbuf_alloc+0x1dc>)
 8009b50:	f009 f9e4 	bl	8012f1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009b54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b56:	3303      	adds	r3, #3
 8009b58:	f023 0303 	bic.w	r3, r3, #3
 8009b5c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009b60:	d106      	bne.n	8009b70 <pbuf_alloc+0xf4>
 8009b62:	4b3b      	ldr	r3, [pc, #236]	; (8009c50 <pbuf_alloc+0x1d4>)
 8009b64:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009b68:	493c      	ldr	r1, [pc, #240]	; (8009c5c <pbuf_alloc+0x1e0>)
 8009b6a:	483b      	ldr	r0, [pc, #236]	; (8009c58 <pbuf_alloc+0x1dc>)
 8009b6c:	f009 f9d6 	bl	8012f1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
 8009b7a:	e002      	b.n	8009b82 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009b86:	8b7a      	ldrh	r2, [r7, #26]
 8009b88:	89fb      	ldrh	r3, [r7, #14]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009b92:	8b7b      	ldrh	r3, [r7, #26]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d19e      	bne.n	8009ad6 <pbuf_alloc+0x5a>
      break;
 8009b98:	e055      	b.n	8009c46 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b9c:	3303      	adds	r3, #3
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	88bb      	ldrh	r3, [r7, #4]
 8009ba8:	3303      	adds	r3, #3
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009bb6:	8b3b      	ldrh	r3, [r7, #24]
 8009bb8:	3310      	adds	r3, #16
 8009bba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009bbc:	8b3a      	ldrh	r2, [r7, #24]
 8009bbe:	88bb      	ldrh	r3, [r7, #4]
 8009bc0:	3303      	adds	r3, #3
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d306      	bcc.n	8009bd8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009bca:	8afa      	ldrh	r2, [r7, #22]
 8009bcc:	88bb      	ldrh	r3, [r7, #4]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d201      	bcs.n	8009bdc <pbuf_alloc+0x160>
        return NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e035      	b.n	8009c48 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009bdc:	8afb      	ldrh	r3, [r7, #22]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff f972 	bl	8008ec8 <mem_malloc>
 8009be4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <pbuf_alloc+0x174>
        return NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e02b      	b.n	8009c48 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bf2:	3310      	adds	r3, #16
 8009bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	4618      	mov	r0, r3
 8009c00:	88b9      	ldrh	r1, [r7, #4]
 8009c02:	88ba      	ldrh	r2, [r7, #4]
 8009c04:	2300      	movs	r3, #0
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	887b      	ldrh	r3, [r7, #2]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c12:	f7ff ff09 	bl	8009a28 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d010      	beq.n	8009c44 <pbuf_alloc+0x1c8>
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <pbuf_alloc+0x1d4>)
 8009c24:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009c28:	490d      	ldr	r1, [pc, #52]	; (8009c60 <pbuf_alloc+0x1e4>)
 8009c2a:	480b      	ldr	r0, [pc, #44]	; (8009c58 <pbuf_alloc+0x1dc>)
 8009c2c:	f009 f976 	bl	8012f1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009c30:	e008      	b.n	8009c44 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <pbuf_alloc+0x1d4>)
 8009c34:	f240 1227 	movw	r2, #295	; 0x127
 8009c38:	490a      	ldr	r1, [pc, #40]	; (8009c64 <pbuf_alloc+0x1e8>)
 8009c3a:	4807      	ldr	r0, [pc, #28]	; (8009c58 <pbuf_alloc+0x1dc>)
 8009c3c:	f009 f96e 	bl	8012f1c <iprintf>
      return NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e001      	b.n	8009c48 <pbuf_alloc+0x1cc>
      break;
 8009c44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3728      	adds	r7, #40	; 0x28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	080144b0 	.word	0x080144b0
 8009c54:	080144e0 	.word	0x080144e0
 8009c58:	08014510 	.word	0x08014510
 8009c5c:	08014538 	.word	0x08014538
 8009c60:	0801456c 	.word	0x0801456c
 8009c64:	08014598 	.word	0x08014598

08009c68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	807b      	strh	r3, [r7, #2]
 8009c74:	4613      	mov	r3, r2
 8009c76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009c78:	883b      	ldrh	r3, [r7, #0]
 8009c7a:	2b41      	cmp	r3, #65	; 0x41
 8009c7c:	d009      	beq.n	8009c92 <pbuf_alloc_reference+0x2a>
 8009c7e:	883b      	ldrh	r3, [r7, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d006      	beq.n	8009c92 <pbuf_alloc_reference+0x2a>
 8009c84:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <pbuf_alloc_reference+0x5c>)
 8009c86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009c8a:	490f      	ldr	r1, [pc, #60]	; (8009cc8 <pbuf_alloc_reference+0x60>)
 8009c8c:	480f      	ldr	r0, [pc, #60]	; (8009ccc <pbuf_alloc_reference+0x64>)
 8009c8e:	f009 f945 	bl	8012f1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009c92:	200b      	movs	r0, #11
 8009c94:	f7ff fabc 	bl	8009210 <memp_malloc>
 8009c98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e00b      	b.n	8009cbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009ca4:	8879      	ldrh	r1, [r7, #2]
 8009ca6:	887a      	ldrh	r2, [r7, #2]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	883b      	ldrh	r3, [r7, #0]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff feb7 	bl	8009a28 <pbuf_init_alloced_pbuf>
  return p;
 8009cba:	68fb      	ldr	r3, [r7, #12]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	080144b0 	.word	0x080144b0
 8009cc8:	080145b4 	.word	0x080145b4
 8009ccc:	08014510 	.word	0x08014510

08009cd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	81bb      	strh	r3, [r7, #12]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009ce8:	8a7b      	ldrh	r3, [r7, #18]
 8009cea:	3303      	adds	r3, #3
 8009cec:	f023 0203 	bic.w	r2, r3, #3
 8009cf0:	89bb      	ldrh	r3, [r7, #12]
 8009cf2:	441a      	add	r2, r3
 8009cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d901      	bls.n	8009cfe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e018      	b.n	8009d30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009d04:	8a7b      	ldrh	r3, [r7, #18]
 8009d06:	3303      	adds	r3, #3
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	6a3a      	ldr	r2, [r7, #32]
 8009d0e:	4413      	add	r3, r2
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e001      	b.n	8009d18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	89b9      	ldrh	r1, [r7, #12]
 8009d1c:	89ba      	ldrh	r2, [r7, #12]
 8009d1e:	2302      	movs	r3, #2
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	897b      	ldrh	r3, [r7, #10]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	460b      	mov	r3, r1
 8009d28:	6979      	ldr	r1, [r7, #20]
 8009d2a:	f7ff fe7d 	bl	8009a28 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009d2e:	687b      	ldr	r3, [r7, #4]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <pbuf_realloc+0x20>
 8009d4a:	4b3a      	ldr	r3, [pc, #232]	; (8009e34 <pbuf_realloc+0xfc>)
 8009d4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009d50:	4939      	ldr	r1, [pc, #228]	; (8009e38 <pbuf_realloc+0x100>)
 8009d52:	483a      	ldr	r0, [pc, #232]	; (8009e3c <pbuf_realloc+0x104>)
 8009d54:	f009 f8e2 	bl	8012f1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	891b      	ldrh	r3, [r3, #8]
 8009d5c:	887a      	ldrh	r2, [r7, #2]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d263      	bcs.n	8009e2a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	891a      	ldrh	r2, [r3, #8]
 8009d66:	887b      	ldrh	r3, [r7, #2]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	817b      	strh	r3, [r7, #10]
  q = p;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009d74:	e018      	b.n	8009da8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	895b      	ldrh	r3, [r3, #10]
 8009d7a:	897a      	ldrh	r2, [r7, #10]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	891a      	ldrh	r2, [r3, #8]
 8009d84:	893b      	ldrh	r3, [r7, #8]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <pbuf_realloc+0x70>
 8009d9a:	4b26      	ldr	r3, [pc, #152]	; (8009e34 <pbuf_realloc+0xfc>)
 8009d9c:	f240 12af 	movw	r2, #431	; 0x1af
 8009da0:	4927      	ldr	r1, [pc, #156]	; (8009e40 <pbuf_realloc+0x108>)
 8009da2:	4826      	ldr	r0, [pc, #152]	; (8009e3c <pbuf_realloc+0x104>)
 8009da4:	f009 f8ba 	bl	8012f1c <iprintf>
  while (rem_len > q->len) {
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	895b      	ldrh	r3, [r3, #10]
 8009dac:	897a      	ldrh	r2, [r7, #10]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d8e1      	bhi.n	8009d76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	7b1b      	ldrb	r3, [r3, #12]
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d121      	bne.n	8009e02 <pbuf_realloc+0xca>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	895b      	ldrh	r3, [r3, #10]
 8009dc2:	897a      	ldrh	r2, [r7, #10]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d01c      	beq.n	8009e02 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	7b5b      	ldrb	r3, [r3, #13]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d116      	bne.n	8009e02 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	897b      	ldrh	r3, [r7, #10]
 8009de0:	4413      	add	r3, r2
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4619      	mov	r1, r3
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7fe ff64 	bl	8008cb4 <mem_trim>
 8009dec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <pbuf_realloc+0xca>
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <pbuf_realloc+0xfc>)
 8009df6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009dfa:	4912      	ldr	r1, [pc, #72]	; (8009e44 <pbuf_realloc+0x10c>)
 8009dfc:	480f      	ldr	r0, [pc, #60]	; (8009e3c <pbuf_realloc+0x104>)
 8009dfe:	f009 f88d 	bl	8012f1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	897a      	ldrh	r2, [r7, #10]
 8009e06:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	895a      	ldrh	r2, [r3, #10]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d004      	beq.n	8009e22 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f911 	bl	800a044 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	e000      	b.n	8009e2c <pbuf_realloc+0xf4>
    return;
 8009e2a:	bf00      	nop

}
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	080144b0 	.word	0x080144b0
 8009e38:	080145c8 	.word	0x080145c8
 8009e3c:	08014510 	.word	0x08014510
 8009e40:	080145e0 	.word	0x080145e0
 8009e44:	080145f8 	.word	0x080145f8

08009e48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d106      	bne.n	8009e6a <pbuf_add_header_impl+0x22>
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <pbuf_add_header_impl+0xc4>)
 8009e5e:	f240 12df 	movw	r2, #479	; 0x1df
 8009e62:	492b      	ldr	r1, [pc, #172]	; (8009f10 <pbuf_add_header_impl+0xc8>)
 8009e64:	482b      	ldr	r0, [pc, #172]	; (8009f14 <pbuf_add_header_impl+0xcc>)
 8009e66:	f009 f859 	bl	8012f1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <pbuf_add_header_impl+0x30>
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e76:	d301      	bcc.n	8009e7c <pbuf_add_header_impl+0x34>
    return 1;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e043      	b.n	8009f04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <pbuf_add_header_impl+0x3e>
    return 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	e03e      	b.n	8009f04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	891a      	ldrh	r2, [r3, #8]
 8009e8e:	8a7b      	ldrh	r3, [r7, #18]
 8009e90:	4413      	add	r3, r2
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	8a7a      	ldrh	r2, [r7, #18]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d901      	bls.n	8009e9e <pbuf_add_header_impl+0x56>
    return 1;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e032      	b.n	8009f04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	7b1b      	ldrb	r3, [r3, #12]
 8009ea2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009ea4:	8a3b      	ldrh	r3, [r7, #16]
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00c      	beq.n	8009ec8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	425b      	negs	r3, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3310      	adds	r3, #16
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d20d      	bcs.n	8009ee0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e01d      	b.n	8009f04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d006      	beq.n	8009edc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	425b      	negs	r3, r3
 8009ed6:	4413      	add	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e001      	b.n	8009ee0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e011      	b.n	8009f04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	895a      	ldrh	r2, [r3, #10]
 8009eea:	8a7b      	ldrh	r3, [r7, #18]
 8009eec:	4413      	add	r3, r2
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	891a      	ldrh	r2, [r3, #8]
 8009ef8:	8a7b      	ldrh	r3, [r7, #18]
 8009efa:	4413      	add	r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	811a      	strh	r2, [r3, #8]


  return 0;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	080144b0 	.word	0x080144b0
 8009f10:	08014614 	.word	0x08014614
 8009f14:	08014510 	.word	0x08014510

08009f18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009f22:	2200      	movs	r2, #0
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff ff8e 	bl	8009e48 <pbuf_add_header_impl>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d106      	bne.n	8009f56 <pbuf_remove_header+0x1e>
 8009f48:	4b20      	ldr	r3, [pc, #128]	; (8009fcc <pbuf_remove_header+0x94>)
 8009f4a:	f240 224b 	movw	r2, #587	; 0x24b
 8009f4e:	4920      	ldr	r1, [pc, #128]	; (8009fd0 <pbuf_remove_header+0x98>)
 8009f50:	4820      	ldr	r0, [pc, #128]	; (8009fd4 <pbuf_remove_header+0x9c>)
 8009f52:	f008 ffe3 	bl	8012f1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <pbuf_remove_header+0x2c>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f62:	d301      	bcc.n	8009f68 <pbuf_remove_header+0x30>
    return 1;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e02c      	b.n	8009fc2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <pbuf_remove_header+0x3a>
    return 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e027      	b.n	8009fc2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	895b      	ldrh	r3, [r3, #10]
 8009f7a:	89fa      	ldrh	r2, [r7, #14]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d908      	bls.n	8009f92 <pbuf_remove_header+0x5a>
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <pbuf_remove_header+0x94>)
 8009f82:	f240 2255 	movw	r2, #597	; 0x255
 8009f86:	4914      	ldr	r1, [pc, #80]	; (8009fd8 <pbuf_remove_header+0xa0>)
 8009f88:	4812      	ldr	r0, [pc, #72]	; (8009fd4 <pbuf_remove_header+0x9c>)
 8009f8a:	f008 ffc7 	bl	8012f1c <iprintf>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e017      	b.n	8009fc2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	895a      	ldrh	r2, [r3, #10]
 8009fa8:	89fb      	ldrh	r3, [r7, #14]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	891a      	ldrh	r2, [r3, #8]
 8009fb6:	89fb      	ldrh	r3, [r7, #14]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	080144b0 	.word	0x080144b0
 8009fd0:	08014614 	.word	0x08014614
 8009fd4:	08014510 	.word	0x08014510
 8009fd8:	08014620 	.word	0x08014620

08009fdc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	807b      	strh	r3, [r7, #2]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da08      	bge.n	800a006 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ff8:	425b      	negs	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff9b 	bl	8009f38 <pbuf_remove_header>
 800a002:	4603      	mov	r3, r0
 800a004:	e007      	b.n	800a016 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a00a:	787a      	ldrb	r2, [r7, #1]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff ff1a 	bl	8009e48 <pbuf_add_header_impl>
 800a014:	4603      	mov	r3, r0
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a02a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a02e:	2201      	movs	r2, #1
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff ffd2 	bl	8009fdc <pbuf_header_impl>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d106      	bne.n	800a066 <pbuf_free+0x22>
 800a058:	4b3b      	ldr	r3, [pc, #236]	; (800a148 <pbuf_free+0x104>)
 800a05a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a05e:	493b      	ldr	r1, [pc, #236]	; (800a14c <pbuf_free+0x108>)
 800a060:	483b      	ldr	r0, [pc, #236]	; (800a150 <pbuf_free+0x10c>)
 800a062:	f008 ff5b 	bl	8012f1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a066:	2300      	movs	r3, #0
 800a068:	e069      	b.n	800a13e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a06e:	e062      	b.n	800a136 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a070:	f008 fe36 	bl	8012ce0 <sys_arch_protect>
 800a074:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	7b9b      	ldrb	r3, [r3, #14]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <pbuf_free+0x48>
 800a07e:	4b32      	ldr	r3, [pc, #200]	; (800a148 <pbuf_free+0x104>)
 800a080:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a084:	4933      	ldr	r1, [pc, #204]	; (800a154 <pbuf_free+0x110>)
 800a086:	4832      	ldr	r0, [pc, #200]	; (800a150 <pbuf_free+0x10c>)
 800a088:	f008 ff48 	bl	8012f1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7b9b      	ldrb	r3, [r3, #14]
 800a090:	3b01      	subs	r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	739a      	strb	r2, [r3, #14]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7b9b      	ldrb	r3, [r3, #14]
 800a09c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a09e:	69b8      	ldr	r0, [r7, #24]
 800a0a0:	f008 fe2c 	bl	8012cfc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d143      	bne.n	800a132 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7b1b      	ldrb	r3, [r3, #12]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7b5b      	ldrb	r3, [r3, #13]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d011      	beq.n	800a0ea <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d106      	bne.n	800a0e0 <pbuf_free+0x9c>
 800a0d2:	4b1d      	ldr	r3, [pc, #116]	; (800a148 <pbuf_free+0x104>)
 800a0d4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a0d8:	491f      	ldr	r1, [pc, #124]	; (800a158 <pbuf_free+0x114>)
 800a0da:	481d      	ldr	r0, [pc, #116]	; (800a150 <pbuf_free+0x10c>)
 800a0dc:	f008 ff1e 	bl	8012f1c <iprintf>
        pc->custom_free_function(p);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	4798      	blx	r3
 800a0e8:	e01d      	b.n	800a126 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d104      	bne.n	800a0fa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	200c      	movs	r0, #12
 800a0f4:	f7ff f902 	bl	80092fc <memp_free>
 800a0f8:	e015      	b.n	800a126 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d104      	bne.n	800a10a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	200b      	movs	r0, #11
 800a104:	f7ff f8fa 	bl	80092fc <memp_free>
 800a108:	e00d      	b.n	800a126 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <pbuf_free+0xd4>
          mem_free(p);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7fe fd3f 	bl	8008b94 <mem_free>
 800a116:	e006      	b.n	800a126 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <pbuf_free+0x104>)
 800a11a:	f240 320f 	movw	r2, #783	; 0x30f
 800a11e:	490f      	ldr	r1, [pc, #60]	; (800a15c <pbuf_free+0x118>)
 800a120:	480b      	ldr	r0, [pc, #44]	; (800a150 <pbuf_free+0x10c>)
 800a122:	f008 fefb 	bl	8012f1c <iprintf>
        }
      }
      count++;
 800a126:	7ffb      	ldrb	r3, [r7, #31]
 800a128:	3301      	adds	r3, #1
 800a12a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	607b      	str	r3, [r7, #4]
 800a130:	e001      	b.n	800a136 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d199      	bne.n	800a070 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a13c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3720      	adds	r7, #32
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	080144b0 	.word	0x080144b0
 800a14c:	08014614 	.word	0x08014614
 800a150:	08014510 	.word	0x08014510
 800a154:	08014640 	.word	0x08014640
 800a158:	08014658 	.word	0x08014658
 800a15c:	0801467c 	.word	0x0801467c

0800a160 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a16c:	e005      	b.n	800a17a <pbuf_clen+0x1a>
    ++len;
 800a16e:	89fb      	ldrh	r3, [r7, #14]
 800a170:	3301      	adds	r3, #1
 800a172:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f6      	bne.n	800a16e <pbuf_clen+0xe>
  }
  return len;
 800a180:	89fb      	ldrh	r3, [r7, #14]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d016      	beq.n	800a1cc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a19e:	f008 fd9f 	bl	8012ce0 <sys_arch_protect>
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7b9b      	ldrb	r3, [r3, #14]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	739a      	strb	r2, [r3, #14]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f008 fda3 	bl	8012cfc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	7b9b      	ldrb	r3, [r3, #14]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <pbuf_ref+0x3c>
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <pbuf_ref+0x44>)
 800a1c0:	f240 3242 	movw	r2, #834	; 0x342
 800a1c4:	4904      	ldr	r1, [pc, #16]	; (800a1d8 <pbuf_ref+0x48>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	; (800a1dc <pbuf_ref+0x4c>)
 800a1c8:	f008 fea8 	bl	8012f1c <iprintf>
  }
}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	080144b0 	.word	0x080144b0
 800a1d8:	08014690 	.word	0x08014690
 800a1dc:	08014510 	.word	0x08014510

0800a1e0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <pbuf_cat+0x16>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d107      	bne.n	800a206 <pbuf_cat+0x26>
 800a1f6:	4b20      	ldr	r3, [pc, #128]	; (800a278 <pbuf_cat+0x98>)
 800a1f8:	f240 3259 	movw	r2, #857	; 0x359
 800a1fc:	491f      	ldr	r1, [pc, #124]	; (800a27c <pbuf_cat+0x9c>)
 800a1fe:	4820      	ldr	r0, [pc, #128]	; (800a280 <pbuf_cat+0xa0>)
 800a200:	f008 fe8c 	bl	8012f1c <iprintf>
 800a204:	e034      	b.n	800a270 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	e00a      	b.n	800a222 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	891a      	ldrh	r2, [r3, #8]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	891b      	ldrh	r3, [r3, #8]
 800a214:	4413      	add	r3, r2
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f0      	bne.n	800a20c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	891a      	ldrh	r2, [r3, #8]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	895b      	ldrh	r3, [r3, #10]
 800a232:	429a      	cmp	r2, r3
 800a234:	d006      	beq.n	800a244 <pbuf_cat+0x64>
 800a236:	4b10      	ldr	r3, [pc, #64]	; (800a278 <pbuf_cat+0x98>)
 800a238:	f240 3262 	movw	r2, #866	; 0x362
 800a23c:	4911      	ldr	r1, [pc, #68]	; (800a284 <pbuf_cat+0xa4>)
 800a23e:	4810      	ldr	r0, [pc, #64]	; (800a280 <pbuf_cat+0xa0>)
 800a240:	f008 fe6c 	bl	8012f1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d006      	beq.n	800a25a <pbuf_cat+0x7a>
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <pbuf_cat+0x98>)
 800a24e:	f240 3263 	movw	r2, #867	; 0x363
 800a252:	490d      	ldr	r1, [pc, #52]	; (800a288 <pbuf_cat+0xa8>)
 800a254:	480a      	ldr	r0, [pc, #40]	; (800a280 <pbuf_cat+0xa0>)
 800a256:	f008 fe61 	bl	8012f1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	891a      	ldrh	r2, [r3, #8]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	891b      	ldrh	r3, [r3, #8]
 800a262:	4413      	add	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	080144b0 	.word	0x080144b0
 800a27c:	080146a4 	.word	0x080146a4
 800a280:	08014510 	.word	0x08014510
 800a284:	080146dc 	.word	0x080146dc
 800a288:	0801470c 	.word	0x0801470c

0800a28c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff ffa1 	bl	800a1e0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a29e:	6838      	ldr	r0, [r7, #0]
 800a2a0:	f7ff ff76 	bl	800a190 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <pbuf_copy+0x2a>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <pbuf_copy+0x2a>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	891a      	ldrh	r2, [r3, #8]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	891b      	ldrh	r3, [r3, #8]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d209      	bcs.n	800a2ea <pbuf_copy+0x3e>
 800a2d6:	4b57      	ldr	r3, [pc, #348]	; (800a434 <pbuf_copy+0x188>)
 800a2d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a2dc:	4956      	ldr	r1, [pc, #344]	; (800a438 <pbuf_copy+0x18c>)
 800a2de:	4857      	ldr	r0, [pc, #348]	; (800a43c <pbuf_copy+0x190>)
 800a2e0:	f008 fe1c 	bl	8012f1c <iprintf>
 800a2e4:	f06f 030f 	mvn.w	r3, #15
 800a2e8:	e09f      	b.n	800a42a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	895b      	ldrh	r3, [r3, #10]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	1ad2      	subs	r2, r2, r3
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	895b      	ldrh	r3, [r3, #10]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	1acb      	subs	r3, r1, r3
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d306      	bcc.n	800a310 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	895b      	ldrh	r3, [r3, #10]
 800a306:	461a      	mov	r2, r3
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e005      	b.n	800a31c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	895b      	ldrh	r3, [r3, #10]
 800a314:	461a      	mov	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	18d0      	adds	r0, r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	4413      	add	r3, r2
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4619      	mov	r1, r3
 800a330:	f008 fecf 	bl	80130d2 <memcpy>
    offset_to += len;
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4413      	add	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	4413      	add	r3, r2
 800a342:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	895b      	ldrh	r3, [r3, #10]
 800a348:	461a      	mov	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d906      	bls.n	800a35e <pbuf_copy+0xb2>
 800a350:	4b38      	ldr	r3, [pc, #224]	; (800a434 <pbuf_copy+0x188>)
 800a352:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a356:	493a      	ldr	r1, [pc, #232]	; (800a440 <pbuf_copy+0x194>)
 800a358:	4838      	ldr	r0, [pc, #224]	; (800a43c <pbuf_copy+0x190>)
 800a35a:	f008 fddf 	bl	8012f1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	895b      	ldrh	r3, [r3, #10]
 800a362:	461a      	mov	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	4293      	cmp	r3, r2
 800a368:	d906      	bls.n	800a378 <pbuf_copy+0xcc>
 800a36a:	4b32      	ldr	r3, [pc, #200]	; (800a434 <pbuf_copy+0x188>)
 800a36c:	f240 32da 	movw	r2, #986	; 0x3da
 800a370:	4934      	ldr	r1, [pc, #208]	; (800a444 <pbuf_copy+0x198>)
 800a372:	4832      	ldr	r0, [pc, #200]	; (800a43c <pbuf_copy+0x190>)
 800a374:	f008 fdd2 	bl	8012f1c <iprintf>
    if (offset_from >= p_from->len) {
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	895b      	ldrh	r3, [r3, #10]
 800a37c:	461a      	mov	r2, r3
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	4293      	cmp	r3, r2
 800a382:	d304      	bcc.n	800a38e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	895b      	ldrh	r3, [r3, #10]
 800a392:	461a      	mov	r2, r3
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	4293      	cmp	r3, r2
 800a398:	d114      	bne.n	800a3c4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10c      	bne.n	800a3c4 <pbuf_copy+0x118>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d009      	beq.n	800a3c4 <pbuf_copy+0x118>
 800a3b0:	4b20      	ldr	r3, [pc, #128]	; (800a434 <pbuf_copy+0x188>)
 800a3b2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a3b6:	4924      	ldr	r1, [pc, #144]	; (800a448 <pbuf_copy+0x19c>)
 800a3b8:	4820      	ldr	r0, [pc, #128]	; (800a43c <pbuf_copy+0x190>)
 800a3ba:	f008 fdaf 	bl	8012f1c <iprintf>
 800a3be:	f06f 030f 	mvn.w	r3, #15
 800a3c2:	e032      	b.n	800a42a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d013      	beq.n	800a3f2 <pbuf_copy+0x146>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	895a      	ldrh	r2, [r3, #10]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	891b      	ldrh	r3, [r3, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d10d      	bne.n	800a3f2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <pbuf_copy+0x146>
 800a3de:	4b15      	ldr	r3, [pc, #84]	; (800a434 <pbuf_copy+0x188>)
 800a3e0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a3e4:	4919      	ldr	r1, [pc, #100]	; (800a44c <pbuf_copy+0x1a0>)
 800a3e6:	4815      	ldr	r0, [pc, #84]	; (800a43c <pbuf_copy+0x190>)
 800a3e8:	f008 fd98 	bl	8012f1c <iprintf>
 800a3ec:	f06f 0305 	mvn.w	r3, #5
 800a3f0:	e01b      	b.n	800a42a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <pbuf_copy+0x174>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	895a      	ldrh	r2, [r3, #10]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	891b      	ldrh	r3, [r3, #8]
 800a400:	429a      	cmp	r2, r3
 800a402:	d10d      	bne.n	800a420 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d009      	beq.n	800a420 <pbuf_copy+0x174>
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <pbuf_copy+0x188>)
 800a40e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a412:	490e      	ldr	r1, [pc, #56]	; (800a44c <pbuf_copy+0x1a0>)
 800a414:	4809      	ldr	r0, [pc, #36]	; (800a43c <pbuf_copy+0x190>)
 800a416:	f008 fd81 	bl	8012f1c <iprintf>
 800a41a:	f06f 0305 	mvn.w	r3, #5
 800a41e:	e004      	b.n	800a42a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f47f af61 	bne.w	800a2ea <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	080144b0 	.word	0x080144b0
 800a438:	08014758 	.word	0x08014758
 800a43c:	08014510 	.word	0x08014510
 800a440:	08014788 	.word	0x08014788
 800a444:	080147a0 	.word	0x080147a0
 800a448:	080147bc 	.word	0x080147bc
 800a44c:	080147cc 	.word	0x080147cc

0800a450 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4611      	mov	r1, r2
 800a45c:	461a      	mov	r2, r3
 800a45e:	460b      	mov	r3, r1
 800a460:	80fb      	strh	r3, [r7, #6]
 800a462:	4613      	mov	r3, r2
 800a464:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <pbuf_copy_partial+0x36>
 800a474:	4b2b      	ldr	r3, [pc, #172]	; (800a524 <pbuf_copy_partial+0xd4>)
 800a476:	f240 420a 	movw	r2, #1034	; 0x40a
 800a47a:	492b      	ldr	r1, [pc, #172]	; (800a528 <pbuf_copy_partial+0xd8>)
 800a47c:	482b      	ldr	r0, [pc, #172]	; (800a52c <pbuf_copy_partial+0xdc>)
 800a47e:	f008 fd4d 	bl	8012f1c <iprintf>
 800a482:	2300      	movs	r3, #0
 800a484:	e04a      	b.n	800a51c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d108      	bne.n	800a49e <pbuf_copy_partial+0x4e>
 800a48c:	4b25      	ldr	r3, [pc, #148]	; (800a524 <pbuf_copy_partial+0xd4>)
 800a48e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a492:	4927      	ldr	r1, [pc, #156]	; (800a530 <pbuf_copy_partial+0xe0>)
 800a494:	4825      	ldr	r0, [pc, #148]	; (800a52c <pbuf_copy_partial+0xdc>)
 800a496:	f008 fd41 	bl	8012f1c <iprintf>
 800a49a:	2300      	movs	r3, #0
 800a49c:	e03e      	b.n	800a51c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	e034      	b.n	800a50e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a4a4:	88bb      	ldrh	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <pbuf_copy_partial+0x70>
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	895b      	ldrh	r3, [r3, #10]
 800a4ae:	88ba      	ldrh	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d305      	bcc.n	800a4c0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	895b      	ldrh	r3, [r3, #10]
 800a4b8:	88ba      	ldrh	r2, [r7, #4]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	80bb      	strh	r3, [r7, #4]
 800a4be:	e023      	b.n	800a508 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	895a      	ldrh	r2, [r3, #10]
 800a4c4:	88bb      	ldrh	r3, [r7, #4]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a4ca:	8b3a      	ldrh	r2, [r7, #24]
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d901      	bls.n	800a4d6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a4d2:	88fb      	ldrh	r3, [r7, #6]
 800a4d4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a4d6:	8b7b      	ldrh	r3, [r7, #26]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	18d0      	adds	r0, r2, r3
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	88bb      	ldrh	r3, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	8b3a      	ldrh	r2, [r7, #24]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	f008 fdf3 	bl	80130d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a4ec:	8afa      	ldrh	r2, [r7, #22]
 800a4ee:	8b3b      	ldrh	r3, [r7, #24]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a4f4:	8b7a      	ldrh	r2, [r7, #26]
 800a4f6:	8b3b      	ldrh	r3, [r7, #24]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	8b3b      	ldrh	r3, [r7, #24]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	61fb      	str	r3, [r7, #28]
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <pbuf_copy_partial+0xca>
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1c4      	bne.n	800a4a4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a51a:	8afb      	ldrh	r3, [r7, #22]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	080144b0 	.word	0x080144b0
 800a528:	080147f8 	.word	0x080147f8
 800a52c:	08014510 	.word	0x08014510
 800a530:	08014818 	.word	0x08014818

0800a534 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	603a      	str	r2, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
 800a540:	460b      	mov	r3, r1
 800a542:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	8919      	ldrh	r1, [r3, #8]
 800a548:	88ba      	ldrh	r2, [r7, #4]
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fa95 	bl	8009a7c <pbuf_alloc>
 800a552:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <pbuf_clone+0x2a>
    return NULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e011      	b.n	800a582 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fea3 	bl	800a2ac <pbuf_copy>
 800a566:	4603      	mov	r3, r0
 800a568:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a56a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d006      	beq.n	800a580 <pbuf_clone+0x4c>
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <pbuf_clone+0x58>)
 800a574:	f240 5224 	movw	r2, #1316	; 0x524
 800a578:	4905      	ldr	r1, [pc, #20]	; (800a590 <pbuf_clone+0x5c>)
 800a57a:	4806      	ldr	r0, [pc, #24]	; (800a594 <pbuf_clone+0x60>)
 800a57c:	f008 fcce 	bl	8012f1c <iprintf>
  return q;
 800a580:	68fb      	ldr	r3, [r7, #12]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	080144b0 	.word	0x080144b0
 800a590:	08014924 	.word	0x08014924
 800a594:	08014510 	.word	0x08014510

0800a598 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a59c:	f008 fbbe 	bl	8012d1c <rand>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	4b01      	ldr	r3, [pc, #4]	; (800a5b8 <tcp_init+0x20>)
 800a5b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a5b4:	bf00      	nop
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	24000028 	.word	0x24000028

0800a5bc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7d1b      	ldrb	r3, [r3, #20]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d105      	bne.n	800a5d8 <tcp_free+0x1c>
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <tcp_free+0x2c>)
 800a5ce:	22d4      	movs	r2, #212	; 0xd4
 800a5d0:	4906      	ldr	r1, [pc, #24]	; (800a5ec <tcp_free+0x30>)
 800a5d2:	4807      	ldr	r0, [pc, #28]	; (800a5f0 <tcp_free+0x34>)
 800a5d4:	f008 fca2 	bl	8012f1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	2001      	movs	r0, #1
 800a5dc:	f7fe fe8e 	bl	80092fc <memp_free>
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	080149b0 	.word	0x080149b0
 800a5ec:	080149e0 	.word	0x080149e0
 800a5f0:	080149f4 	.word	0x080149f4

0800a5f4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7d1b      	ldrb	r3, [r3, #20]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d105      	bne.n	800a610 <tcp_free_listen+0x1c>
 800a604:	4b06      	ldr	r3, [pc, #24]	; (800a620 <tcp_free_listen+0x2c>)
 800a606:	22df      	movs	r2, #223	; 0xdf
 800a608:	4906      	ldr	r1, [pc, #24]	; (800a624 <tcp_free_listen+0x30>)
 800a60a:	4807      	ldr	r0, [pc, #28]	; (800a628 <tcp_free_listen+0x34>)
 800a60c:	f008 fc86 	bl	8012f1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	2002      	movs	r0, #2
 800a614:	f7fe fe72 	bl	80092fc <memp_free>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	080149b0 	.word	0x080149b0
 800a624:	08014a1c 	.word	0x08014a1c
 800a628:	080149f4 	.word	0x080149f4

0800a62c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a630:	f000 fea2 	bl	800b378 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a634:	4b07      	ldr	r3, [pc, #28]	; (800a654 <tcp_tmr+0x28>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <tcp_tmr+0x28>)
 800a63e:	701a      	strb	r2, [r3, #0]
 800a640:	4b04      	ldr	r3, [pc, #16]	; (800a654 <tcp_tmr+0x28>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a64c:	f000 fb54 	bl	800acf8 <tcp_slowtmr>
  }
}
 800a650:	bf00      	nop
 800a652:	bd80      	pop	{r7, pc}
 800a654:	24007335 	.word	0x24007335

0800a658 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d105      	bne.n	800a674 <tcp_remove_listener+0x1c>
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <tcp_remove_listener+0x48>)
 800a66a:	22ff      	movs	r2, #255	; 0xff
 800a66c:	490d      	ldr	r1, [pc, #52]	; (800a6a4 <tcp_remove_listener+0x4c>)
 800a66e:	480e      	ldr	r0, [pc, #56]	; (800a6a8 <tcp_remove_listener+0x50>)
 800a670:	f008 fc54 	bl	8012f1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e00a      	b.n	800a690 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	429a      	cmp	r2, r3
 800a682:	d102      	bne.n	800a68a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f1      	bne.n	800a67a <tcp_remove_listener+0x22>
    }
  }
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	080149b0 	.word	0x080149b0
 800a6a4:	08014a38 	.word	0x08014a38
 800a6a8:	080149f4 	.word	0x080149f4

0800a6ac <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <tcp_listen_closed+0x1c>
 800a6ba:	4b14      	ldr	r3, [pc, #80]	; (800a70c <tcp_listen_closed+0x60>)
 800a6bc:	f240 1211 	movw	r2, #273	; 0x111
 800a6c0:	4913      	ldr	r1, [pc, #76]	; (800a710 <tcp_listen_closed+0x64>)
 800a6c2:	4814      	ldr	r0, [pc, #80]	; (800a714 <tcp_listen_closed+0x68>)
 800a6c4:	f008 fc2a 	bl	8012f1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7d1b      	ldrb	r3, [r3, #20]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d006      	beq.n	800a6de <tcp_listen_closed+0x32>
 800a6d0:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <tcp_listen_closed+0x60>)
 800a6d2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a6d6:	4910      	ldr	r1, [pc, #64]	; (800a718 <tcp_listen_closed+0x6c>)
 800a6d8:	480e      	ldr	r0, [pc, #56]	; (800a714 <tcp_listen_closed+0x68>)
 800a6da:	f008 fc1f 	bl	8012f1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a6de:	2301      	movs	r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e00b      	b.n	800a6fc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <tcp_listen_closed+0x70>)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff ffb1 	bl	800a658 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d9f0      	bls.n	800a6e4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	080149b0 	.word	0x080149b0
 800a710:	08014a60 	.word	0x08014a60
 800a714:	080149f4 	.word	0x080149f4
 800a718:	08014a6c 	.word	0x08014a6c
 800a71c:	080169c8 	.word	0x080169c8

0800a720 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a720:	b5b0      	push	{r4, r5, r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af04      	add	r7, sp, #16
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <tcp_close_shutdown+0x20>
 800a732:	4b63      	ldr	r3, [pc, #396]	; (800a8c0 <tcp_close_shutdown+0x1a0>)
 800a734:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a738:	4962      	ldr	r1, [pc, #392]	; (800a8c4 <tcp_close_shutdown+0x1a4>)
 800a73a:	4863      	ldr	r0, [pc, #396]	; (800a8c8 <tcp_close_shutdown+0x1a8>)
 800a73c:	f008 fbee 	bl	8012f1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d066      	beq.n	800a814 <tcp_close_shutdown+0xf4>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	7d1b      	ldrb	r3, [r3, #20]
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d003      	beq.n	800a756 <tcp_close_shutdown+0x36>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	7d1b      	ldrb	r3, [r3, #20]
 800a752:	2b07      	cmp	r3, #7
 800a754:	d15e      	bne.n	800a814 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d104      	bne.n	800a768 <tcp_close_shutdown+0x48>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a762:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a766:	d055      	beq.n	800a814 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d106      	bne.n	800a782 <tcp_close_shutdown+0x62>
 800a774:	4b52      	ldr	r3, [pc, #328]	; (800a8c0 <tcp_close_shutdown+0x1a0>)
 800a776:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a77a:	4954      	ldr	r1, [pc, #336]	; (800a8cc <tcp_close_shutdown+0x1ac>)
 800a77c:	4852      	ldr	r0, [pc, #328]	; (800a8c8 <tcp_close_shutdown+0x1a8>)
 800a77e:	f008 fbcd 	bl	8012f1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a78a:	687d      	ldr	r5, [r7, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3304      	adds	r3, #4
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	8ad2      	ldrh	r2, [r2, #22]
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	8b09      	ldrh	r1, [r1, #24]
 800a798:	9102      	str	r1, [sp, #8]
 800a79a:	9201      	str	r2, [sp, #4]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	462b      	mov	r3, r5
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f004 fe91 	bl	800f4cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f8c6 	bl	800b93c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a7b0:	4b47      	ldr	r3, [pc, #284]	; (800a8d0 <tcp_close_shutdown+0x1b0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d105      	bne.n	800a7c6 <tcp_close_shutdown+0xa6>
 800a7ba:	4b45      	ldr	r3, [pc, #276]	; (800a8d0 <tcp_close_shutdown+0x1b0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	4a43      	ldr	r2, [pc, #268]	; (800a8d0 <tcp_close_shutdown+0x1b0>)
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	e013      	b.n	800a7ee <tcp_close_shutdown+0xce>
 800a7c6:	4b42      	ldr	r3, [pc, #264]	; (800a8d0 <tcp_close_shutdown+0x1b0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	e00c      	b.n	800a7e8 <tcp_close_shutdown+0xc8>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d104      	bne.n	800a7e2 <tcp_close_shutdown+0xc2>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	60da      	str	r2, [r3, #12]
 800a7e0:	e005      	b.n	800a7ee <tcp_close_shutdown+0xce>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1ef      	bne.n	800a7ce <tcp_close_shutdown+0xae>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	60da      	str	r2, [r3, #12]
 800a7f4:	4b37      	ldr	r3, [pc, #220]	; (800a8d4 <tcp_close_shutdown+0x1b4>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a7fa:	4b37      	ldr	r3, [pc, #220]	; (800a8d8 <tcp_close_shutdown+0x1b8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	429a      	cmp	r2, r3
 800a802:	d102      	bne.n	800a80a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a804:	f003 fd5e 	bl	800e2c4 <tcp_trigger_input_pcb_close>
 800a808:	e002      	b.n	800a810 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fed6 	bl	800a5bc <tcp_free>
      }
      return ERR_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	e050      	b.n	800a8b6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	7d1b      	ldrb	r3, [r3, #20]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d03b      	beq.n	800a894 <tcp_close_shutdown+0x174>
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	dc44      	bgt.n	800a8aa <tcp_close_shutdown+0x18a>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <tcp_close_shutdown+0x10a>
 800a824:	2b01      	cmp	r3, #1
 800a826:	d02a      	beq.n	800a87e <tcp_close_shutdown+0x15e>
 800a828:	e03f      	b.n	800a8aa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8adb      	ldrh	r3, [r3, #22]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d021      	beq.n	800a876 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a832:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <tcp_close_shutdown+0x1bc>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d105      	bne.n	800a848 <tcp_close_shutdown+0x128>
 800a83c:	4b27      	ldr	r3, [pc, #156]	; (800a8dc <tcp_close_shutdown+0x1bc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <tcp_close_shutdown+0x1bc>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	e013      	b.n	800a870 <tcp_close_shutdown+0x150>
 800a848:	4b24      	ldr	r3, [pc, #144]	; (800a8dc <tcp_close_shutdown+0x1bc>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60bb      	str	r3, [r7, #8]
 800a84e:	e00c      	b.n	800a86a <tcp_close_shutdown+0x14a>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	d104      	bne.n	800a864 <tcp_close_shutdown+0x144>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	60da      	str	r2, [r3, #12]
 800a862:	e005      	b.n	800a870 <tcp_close_shutdown+0x150>
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	60bb      	str	r3, [r7, #8]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1ef      	bne.n	800a850 <tcp_close_shutdown+0x130>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fea0 	bl	800a5bc <tcp_free>
      break;
 800a87c:	e01a      	b.n	800a8b4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff ff14 	bl	800a6ac <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	4816      	ldr	r0, [pc, #88]	; (800a8e0 <tcp_close_shutdown+0x1c0>)
 800a888:	f001 f8a8 	bl	800b9dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff feb1 	bl	800a5f4 <tcp_free_listen>
      break;
 800a892:	e00f      	b.n	800a8b4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	480e      	ldr	r0, [pc, #56]	; (800a8d0 <tcp_close_shutdown+0x1b0>)
 800a898:	f001 f8a0 	bl	800b9dc <tcp_pcb_remove>
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <tcp_close_shutdown+0x1b4>)
 800a89e:	2201      	movs	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fe8a 	bl	800a5bc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a8a8:	e004      	b.n	800a8b4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f81a 	bl	800a8e4 <tcp_close_shutdown_fin>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	e000      	b.n	800a8b6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bdb0      	pop	{r4, r5, r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	080149b0 	.word	0x080149b0
 800a8c4:	08014a84 	.word	0x08014a84
 800a8c8:	080149f4 	.word	0x080149f4
 800a8cc:	08014aa4 	.word	0x08014aa4
 800a8d0:	2400732c 	.word	0x2400732c
 800a8d4:	24007334 	.word	0x24007334
 800a8d8:	2400736c 	.word	0x2400736c
 800a8dc:	24007324 	.word	0x24007324
 800a8e0:	24007328 	.word	0x24007328

0800a8e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d106      	bne.n	800a900 <tcp_close_shutdown_fin+0x1c>
 800a8f2:	4b2e      	ldr	r3, [pc, #184]	; (800a9ac <tcp_close_shutdown_fin+0xc8>)
 800a8f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a8f8:	492d      	ldr	r1, [pc, #180]	; (800a9b0 <tcp_close_shutdown_fin+0xcc>)
 800a8fa:	482e      	ldr	r0, [pc, #184]	; (800a9b4 <tcp_close_shutdown_fin+0xd0>)
 800a8fc:	f008 fb0e 	bl	8012f1c <iprintf>

  switch (pcb->state) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	7d1b      	ldrb	r3, [r3, #20]
 800a904:	2b07      	cmp	r3, #7
 800a906:	d020      	beq.n	800a94a <tcp_close_shutdown_fin+0x66>
 800a908:	2b07      	cmp	r3, #7
 800a90a:	dc2b      	bgt.n	800a964 <tcp_close_shutdown_fin+0x80>
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d002      	beq.n	800a916 <tcp_close_shutdown_fin+0x32>
 800a910:	2b04      	cmp	r3, #4
 800a912:	d00d      	beq.n	800a930 <tcp_close_shutdown_fin+0x4c>
 800a914:	e026      	b.n	800a964 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f003 fee6 	bl	800e6e8 <tcp_send_fin>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d11f      	bne.n	800a968 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2205      	movs	r2, #5
 800a92c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a92e:	e01b      	b.n	800a968 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f003 fed9 	bl	800e6e8 <tcp_send_fin>
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d114      	bne.n	800a96c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2205      	movs	r2, #5
 800a946:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a948:	e010      	b.n	800a96c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f003 fecc 	bl	800e6e8 <tcp_send_fin>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d109      	bne.n	800a970 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2209      	movs	r2, #9
 800a960:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a962:	e005      	b.n	800a970 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	e01c      	b.n	800a9a2 <tcp_close_shutdown_fin+0xbe>
      break;
 800a968:	bf00      	nop
 800a96a:	e002      	b.n	800a972 <tcp_close_shutdown_fin+0x8e>
      break;
 800a96c:	bf00      	nop
 800a96e:	e000      	b.n	800a972 <tcp_close_shutdown_fin+0x8e>
      break;
 800a970:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f003 fff2 	bl	800e964 <tcp_output>
 800a980:	e00d      	b.n	800a99e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98a:	d108      	bne.n	800a99e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	8b5b      	ldrh	r3, [r3, #26]
 800a990:	f043 0308 	orr.w	r3, r3, #8
 800a994:	b29a      	uxth	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e001      	b.n	800a9a2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	080149b0 	.word	0x080149b0
 800a9b0:	08014a60 	.word	0x08014a60
 800a9b4:	080149f4 	.word	0x080149f4

0800a9b8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <tcp_close+0x22>
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <tcp_close+0x4c>)
 800a9c8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a9cc:	490e      	ldr	r1, [pc, #56]	; (800aa08 <tcp_close+0x50>)
 800a9ce:	480f      	ldr	r0, [pc, #60]	; (800aa0c <tcp_close+0x54>)
 800a9d0:	f008 faa4 	bl	8012f1c <iprintf>
 800a9d4:	f06f 030f 	mvn.w	r3, #15
 800a9d8:	e00f      	b.n	800a9fa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7d1b      	ldrb	r3, [r3, #20]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d006      	beq.n	800a9f0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8b5b      	ldrh	r3, [r3, #26]
 800a9e6:	f043 0310 	orr.w	r3, r3, #16
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fe94 	bl	800a720 <tcp_close_shutdown>
 800a9f8:	4603      	mov	r3, r0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	080149b0 	.word	0x080149b0
 800aa08:	08014ac0 	.word	0x08014ac0
 800aa0c:	080149f4 	.word	0x080149f4

0800aa10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08e      	sub	sp, #56	; 0x38
 800aa14:	af04      	add	r7, sp, #16
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d107      	bne.n	800aa30 <tcp_abandon+0x20>
 800aa20:	4b52      	ldr	r3, [pc, #328]	; (800ab6c <tcp_abandon+0x15c>)
 800aa22:	f240 223d 	movw	r2, #573	; 0x23d
 800aa26:	4952      	ldr	r1, [pc, #328]	; (800ab70 <tcp_abandon+0x160>)
 800aa28:	4852      	ldr	r0, [pc, #328]	; (800ab74 <tcp_abandon+0x164>)
 800aa2a:	f008 fa77 	bl	8012f1c <iprintf>
 800aa2e:	e099      	b.n	800ab64 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7d1b      	ldrb	r3, [r3, #20]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d106      	bne.n	800aa46 <tcp_abandon+0x36>
 800aa38:	4b4c      	ldr	r3, [pc, #304]	; (800ab6c <tcp_abandon+0x15c>)
 800aa3a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800aa3e:	494e      	ldr	r1, [pc, #312]	; (800ab78 <tcp_abandon+0x168>)
 800aa40:	484c      	ldr	r0, [pc, #304]	; (800ab74 <tcp_abandon+0x164>)
 800aa42:	f008 fa6b 	bl	8012f1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7d1b      	ldrb	r3, [r3, #20]
 800aa4a:	2b0a      	cmp	r3, #10
 800aa4c:	d107      	bne.n	800aa5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	484a      	ldr	r0, [pc, #296]	; (800ab7c <tcp_abandon+0x16c>)
 800aa52:	f000 ffc3 	bl	800b9dc <tcp_pcb_remove>
    tcp_free(pcb);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fdb0 	bl	800a5bc <tcp_free>
 800aa5c:	e082      	b.n	800ab64 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7d1b      	ldrb	r3, [r3, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d126      	bne.n	800aad6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	8adb      	ldrh	r3, [r3, #22]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d02e      	beq.n	800aaee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa90:	4b3b      	ldr	r3, [pc, #236]	; (800ab80 <tcp_abandon+0x170>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d105      	bne.n	800aaa6 <tcp_abandon+0x96>
 800aa9a:	4b39      	ldr	r3, [pc, #228]	; (800ab80 <tcp_abandon+0x170>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	4a37      	ldr	r2, [pc, #220]	; (800ab80 <tcp_abandon+0x170>)
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	e013      	b.n	800aace <tcp_abandon+0xbe>
 800aaa6:	4b36      	ldr	r3, [pc, #216]	; (800ab80 <tcp_abandon+0x170>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	61fb      	str	r3, [r7, #28]
 800aaac:	e00c      	b.n	800aac8 <tcp_abandon+0xb8>
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d104      	bne.n	800aac2 <tcp_abandon+0xb2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68da      	ldr	r2, [r3, #12]
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	60da      	str	r2, [r3, #12]
 800aac0:	e005      	b.n	800aace <tcp_abandon+0xbe>
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ef      	bne.n	800aaae <tcp_abandon+0x9e>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	60da      	str	r2, [r3, #12]
 800aad4:	e00b      	b.n	800aaee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8adb      	ldrh	r3, [r3, #22]
 800aade:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	4828      	ldr	r0, [pc, #160]	; (800ab84 <tcp_abandon+0x174>)
 800aae4:	f000 ff7a 	bl	800b9dc <tcp_pcb_remove>
 800aae8:	4b27      	ldr	r3, [pc, #156]	; (800ab88 <tcp_abandon+0x178>)
 800aaea:	2201      	movs	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d004      	beq.n	800ab00 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fd1c 	bl	800b538 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d004      	beq.n	800ab12 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fd13 	bl	800b538 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fd0a 	bl	800b538 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00e      	beq.n	800ab48 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	8b12      	ldrh	r2, [r2, #24]
 800ab34:	9202      	str	r2, [sp, #8]
 800ab36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab38:	9201      	str	r2, [sp, #4]
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	69b9      	ldr	r1, [r7, #24]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f004 fcc2 	bl	800f4cc <tcp_rst>
    }
    last_state = pcb->state;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7d1b      	ldrb	r3, [r3, #20]
 800ab4c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff fd34 	bl	800a5bc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <tcp_abandon+0x154>
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f06f 010c 	mvn.w	r1, #12
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	4798      	blx	r3
  }
}
 800ab64:	3728      	adds	r7, #40	; 0x28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	080149b0 	.word	0x080149b0
 800ab70:	08014af4 	.word	0x08014af4
 800ab74:	080149f4 	.word	0x080149f4
 800ab78:	08014b10 	.word	0x08014b10
 800ab7c:	24007330 	.word	0x24007330
 800ab80:	24007324 	.word	0x24007324
 800ab84:	2400732c 	.word	0x2400732c
 800ab88:	24007334 	.word	0x24007334

0800ab8c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ab94:	2101      	movs	r1, #1
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff ff3a 	bl	800aa10 <tcp_abandon>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <tcp_update_rcv_ann_wnd+0x1c>
 800abb2:	4b25      	ldr	r3, [pc, #148]	; (800ac48 <tcp_update_rcv_ann_wnd+0xa4>)
 800abb4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800abb8:	4924      	ldr	r1, [pc, #144]	; (800ac4c <tcp_update_rcv_ann_wnd+0xa8>)
 800abba:	4825      	ldr	r0, [pc, #148]	; (800ac50 <tcp_update_rcv_ann_wnd+0xac>)
 800abbc:	f008 f9ae 	bl	8012f1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800abc8:	4413      	add	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800abd4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800abd8:	bf28      	it	cs
 800abda:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800abde:	b292      	uxth	r2, r2
 800abe0:	4413      	add	r3, r2
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	db08      	blt.n	800abfc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	e020      	b.n	800ac3e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dd03      	ble.n	800ac12 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac10:	e014      	b.n	800ac3c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac24:	d306      	bcc.n	800ac34 <tcp_update_rcv_ann_wnd+0x90>
 800ac26:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <tcp_update_rcv_ann_wnd+0xa4>)
 800ac28:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ac2c:	4909      	ldr	r1, [pc, #36]	; (800ac54 <tcp_update_rcv_ann_wnd+0xb0>)
 800ac2e:	4808      	ldr	r0, [pc, #32]	; (800ac50 <tcp_update_rcv_ann_wnd+0xac>)
 800ac30:	f008 f974 	bl	8012f1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ac3c:	2300      	movs	r3, #0
  }
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	080149b0 	.word	0x080149b0
 800ac4c:	08014c0c 	.word	0x08014c0c
 800ac50:	080149f4 	.word	0x080149f4
 800ac54:	08014c30 	.word	0x08014c30

0800ac58 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d107      	bne.n	800ac7a <tcp_recved+0x22>
 800ac6a:	4b1f      	ldr	r3, [pc, #124]	; (800ace8 <tcp_recved+0x90>)
 800ac6c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ac70:	491e      	ldr	r1, [pc, #120]	; (800acec <tcp_recved+0x94>)
 800ac72:	481f      	ldr	r0, [pc, #124]	; (800acf0 <tcp_recved+0x98>)
 800ac74:	f008 f952 	bl	8012f1c <iprintf>
 800ac78:	e032      	b.n	800ace0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	7d1b      	ldrb	r3, [r3, #20]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d106      	bne.n	800ac90 <tcp_recved+0x38>
 800ac82:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <tcp_recved+0x90>)
 800ac84:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ac88:	491a      	ldr	r1, [pc, #104]	; (800acf4 <tcp_recved+0x9c>)
 800ac8a:	4819      	ldr	r0, [pc, #100]	; (800acf0 <tcp_recved+0x98>)
 800ac8c:	f008 f946 	bl	8012f1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac94:	887b      	ldrh	r3, [r7, #2]
 800ac96:	4413      	add	r3, r2
 800ac98:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ac9a:	89fb      	ldrh	r3, [r7, #14]
 800ac9c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aca0:	d804      	bhi.n	800acac <tcp_recved+0x54>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aca6:	89fa      	ldrh	r2, [r7, #14]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d204      	bcs.n	800acb6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800acb2:	851a      	strh	r2, [r3, #40]	; 0x28
 800acb4:	e002      	b.n	800acbc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	89fa      	ldrh	r2, [r7, #14]
 800acba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff71 	bl	800aba4 <tcp_update_rcv_ann_wnd>
 800acc2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800acca:	d309      	bcc.n	800ace0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8b5b      	ldrh	r3, [r3, #26]
 800acd0:	f043 0302 	orr.w	r3, r3, #2
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f003 fe42 	bl	800e964 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	080149b0 	.word	0x080149b0
 800acec:	08014c4c 	.word	0x08014c4c
 800acf0:	080149f4 	.word	0x080149f4
 800acf4:	08014c64 	.word	0x08014c64

0800acf8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800acf8:	b5b0      	push	{r4, r5, r7, lr}
 800acfa:	b090      	sub	sp, #64	; 0x40
 800acfc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ad04:	4b94      	ldr	r3, [pc, #592]	; (800af58 <tcp_slowtmr+0x260>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	4a93      	ldr	r2, [pc, #588]	; (800af58 <tcp_slowtmr+0x260>)
 800ad0c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ad0e:	4b93      	ldr	r3, [pc, #588]	; (800af5c <tcp_slowtmr+0x264>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	3301      	adds	r3, #1
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b91      	ldr	r3, [pc, #580]	; (800af5c <tcp_slowtmr+0x264>)
 800ad18:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ad1e:	4b90      	ldr	r3, [pc, #576]	; (800af60 <tcp_slowtmr+0x268>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ad24:	e29d      	b.n	800b262 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	7d1b      	ldrb	r3, [r3, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <tcp_slowtmr+0x44>
 800ad2e:	4b8d      	ldr	r3, [pc, #564]	; (800af64 <tcp_slowtmr+0x26c>)
 800ad30:	f240 42be 	movw	r2, #1214	; 0x4be
 800ad34:	498c      	ldr	r1, [pc, #560]	; (800af68 <tcp_slowtmr+0x270>)
 800ad36:	488d      	ldr	r0, [pc, #564]	; (800af6c <tcp_slowtmr+0x274>)
 800ad38:	f008 f8f0 	bl	8012f1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	7d1b      	ldrb	r3, [r3, #20]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d106      	bne.n	800ad52 <tcp_slowtmr+0x5a>
 800ad44:	4b87      	ldr	r3, [pc, #540]	; (800af64 <tcp_slowtmr+0x26c>)
 800ad46:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ad4a:	4989      	ldr	r1, [pc, #548]	; (800af70 <tcp_slowtmr+0x278>)
 800ad4c:	4887      	ldr	r0, [pc, #540]	; (800af6c <tcp_slowtmr+0x274>)
 800ad4e:	f008 f8e5 	bl	8012f1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	7d1b      	ldrb	r3, [r3, #20]
 800ad56:	2b0a      	cmp	r3, #10
 800ad58:	d106      	bne.n	800ad68 <tcp_slowtmr+0x70>
 800ad5a:	4b82      	ldr	r3, [pc, #520]	; (800af64 <tcp_slowtmr+0x26c>)
 800ad5c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ad60:	4984      	ldr	r1, [pc, #528]	; (800af74 <tcp_slowtmr+0x27c>)
 800ad62:	4882      	ldr	r0, [pc, #520]	; (800af6c <tcp_slowtmr+0x274>)
 800ad64:	f008 f8da 	bl	8012f1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	7f9a      	ldrb	r2, [r3, #30]
 800ad6c:	4b7b      	ldr	r3, [pc, #492]	; (800af5c <tcp_slowtmr+0x264>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d105      	bne.n	800ad80 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ad7e:	e270      	b.n	800b262 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ad80:	4b76      	ldr	r3, [pc, #472]	; (800af5c <tcp_slowtmr+0x264>)
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	7d1b      	ldrb	r3, [r3, #20]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d10a      	bne.n	800adb2 <tcp_slowtmr+0xba>
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d905      	bls.n	800adb2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ada6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adaa:	3301      	adds	r3, #1
 800adac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adb0:	e11e      	b.n	800aff0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adb8:	2b0b      	cmp	r3, #11
 800adba:	d905      	bls.n	800adc8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800adbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc0:	3301      	adds	r3, #1
 800adc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adc6:	e113      	b.n	800aff0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800adce:	2b00      	cmp	r3, #0
 800add0:	d075      	beq.n	800aebe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <tcp_slowtmr+0xf0>
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <tcp_slowtmr+0x26c>)
 800addc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ade0:	4965      	ldr	r1, [pc, #404]	; (800af78 <tcp_slowtmr+0x280>)
 800ade2:	4862      	ldr	r0, [pc, #392]	; (800af6c <tcp_slowtmr+0x274>)
 800ade4:	f008 f89a 	bl	8012f1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <tcp_slowtmr+0x106>
 800adf0:	4b5c      	ldr	r3, [pc, #368]	; (800af64 <tcp_slowtmr+0x26c>)
 800adf2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800adf6:	4961      	ldr	r1, [pc, #388]	; (800af7c <tcp_slowtmr+0x284>)
 800adf8:	485c      	ldr	r0, [pc, #368]	; (800af6c <tcp_slowtmr+0x274>)
 800adfa:	f008 f88f 	bl	8012f1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ae04:	2b0b      	cmp	r3, #11
 800ae06:	d905      	bls.n	800ae14 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae12:	e0ed      	b.n	800aff0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4a58      	ldr	r2, [pc, #352]	; (800af80 <tcp_slowtmr+0x288>)
 800ae1e:	5cd3      	ldrb	r3, [r2, r3]
 800ae20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ae28:	7c7a      	ldrb	r2, [r7, #17]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d907      	bls.n	800ae3e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ae34:	3301      	adds	r3, #1
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ae44:	7c7a      	ldrb	r2, [r7, #17]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	f200 80d2 	bhi.w	800aff0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d108      	bne.n	800ae6c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ae5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5c:	f004 fc2a 	bl	800f6b4 <tcp_zero_window_probe>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d014      	beq.n	800ae90 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ae66:	2300      	movs	r3, #0
 800ae68:	623b      	str	r3, [r7, #32]
 800ae6a:	e011      	b.n	800ae90 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae72:	4619      	mov	r1, r3
 800ae74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae76:	f003 faef 	bl	800e458 <tcp_split_unsent_seg>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ae80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae82:	f003 fd6f 	bl	800e964 <tcp_output>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 80ac 	beq.w	800aff0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aea6:	2b06      	cmp	r3, #6
 800aea8:	f200 80a2 	bhi.w	800aff0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800aebc:	e098      	b.n	800aff0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	db0f      	blt.n	800aee8 <tcp_slowtmr+0x1f0>
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aece:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d008      	beq.n	800aee8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3301      	adds	r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	b21a      	sxth	r2, r3
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aef4:	429a      	cmp	r2, r3
 800aef6:	db7b      	blt.n	800aff0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aefa:	f004 f827 	bl	800ef4c <tcp_rexmit_rto_prepare>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <tcp_slowtmr+0x21c>
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d171      	bne.n	800aff0 <tcp_slowtmr+0x2f8>
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d06d      	beq.n	800aff0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	7d1b      	ldrb	r3, [r3, #20]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d03a      	beq.n	800af92 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af22:	2b0c      	cmp	r3, #12
 800af24:	bf28      	it	cs
 800af26:	230c      	movcs	r3, #12
 800af28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af30:	10db      	asrs	r3, r3, #3
 800af32:	b21b      	sxth	r3, r3
 800af34:	461a      	mov	r2, r3
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af3c:	4413      	add	r3, r2
 800af3e:	7efa      	ldrb	r2, [r7, #27]
 800af40:	4910      	ldr	r1, [pc, #64]	; (800af84 <tcp_slowtmr+0x28c>)
 800af42:	5c8a      	ldrb	r2, [r1, r2]
 800af44:	4093      	lsls	r3, r2
 800af46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800af4e:	4293      	cmp	r3, r2
 800af50:	dc1a      	bgt.n	800af88 <tcp_slowtmr+0x290>
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	b21a      	sxth	r2, r3
 800af56:	e019      	b.n	800af8c <tcp_slowtmr+0x294>
 800af58:	24007320 	.word	0x24007320
 800af5c:	24007336 	.word	0x24007336
 800af60:	2400732c 	.word	0x2400732c
 800af64:	080149b0 	.word	0x080149b0
 800af68:	08014cf4 	.word	0x08014cf4
 800af6c:	080149f4 	.word	0x080149f4
 800af70:	08014d20 	.word	0x08014d20
 800af74:	08014d4c 	.word	0x08014d4c
 800af78:	08014d7c 	.word	0x08014d7c
 800af7c:	08014db0 	.word	0x08014db0
 800af80:	080169c0 	.word	0x080169c0
 800af84:	080169b0 	.word	0x080169b0
 800af88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	2200      	movs	r2, #0
 800af96:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800afa4:	4293      	cmp	r3, r2
 800afa6:	bf28      	it	cs
 800afa8:	4613      	movcs	r3, r2
 800afaa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800afac:	8a7b      	ldrh	r3, [r7, #18]
 800afae:	085b      	lsrs	r3, r3, #1
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d206      	bcs.n	800afd8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800afea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afec:	f004 f81e 	bl	800f02c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	7d1b      	ldrb	r3, [r3, #20]
 800aff4:	2b06      	cmp	r3, #6
 800aff6:	d111      	bne.n	800b01c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	8b5b      	ldrh	r3, [r3, #26]
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b004:	4b9c      	ldr	r3, [pc, #624]	; (800b278 <tcp_slowtmr+0x580>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b28      	cmp	r3, #40	; 0x28
 800b010:	d904      	bls.n	800b01c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b016:	3301      	adds	r3, #1
 800b018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	7a5b      	ldrb	r3, [r3, #9]
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d04a      	beq.n	800b0be <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d003      	beq.n	800b038 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b034:	2b07      	cmp	r3, #7
 800b036:	d142      	bne.n	800b0be <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b038:	4b8f      	ldr	r3, [pc, #572]	; (800b278 <tcp_slowtmr+0x580>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b048:	4b8c      	ldr	r3, [pc, #560]	; (800b27c <tcp_slowtmr+0x584>)
 800b04a:	440b      	add	r3, r1
 800b04c:	498c      	ldr	r1, [pc, #560]	; (800b280 <tcp_slowtmr+0x588>)
 800b04e:	fba1 1303 	umull	r1, r3, r1, r3
 800b052:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b054:	429a      	cmp	r2, r3
 800b056:	d90a      	bls.n	800b06e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b05c:	3301      	adds	r3, #1
 800b05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b066:	3301      	adds	r3, #1
 800b068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b06c:	e027      	b.n	800b0be <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b06e:	4b82      	ldr	r3, [pc, #520]	; (800b278 <tcp_slowtmr+0x580>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b084:	4618      	mov	r0, r3
 800b086:	4b7f      	ldr	r3, [pc, #508]	; (800b284 <tcp_slowtmr+0x58c>)
 800b088:	fb00 f303 	mul.w	r3, r0, r3
 800b08c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b08e:	497c      	ldr	r1, [pc, #496]	; (800b280 <tcp_slowtmr+0x588>)
 800b090:	fba1 1303 	umull	r1, r3, r1, r3
 800b094:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b096:	429a      	cmp	r2, r3
 800b098:	d911      	bls.n	800b0be <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b09a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b09c:	f004 faca 	bl	800f634 <tcp_keepalive>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b0a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d011      	beq.n	800b0ea <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b0c6:	4b6c      	ldr	r3, [pc, #432]	; (800b278 <tcp_slowtmr+0x580>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	460b      	mov	r3, r1
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	440b      	add	r3, r1
 800b0de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d302      	bcc.n	800b0ea <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0e6:	f000 fddd 	bl	800bca4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	7d1b      	ldrb	r3, [r3, #20]
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d10b      	bne.n	800b10a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b0f2:	4b61      	ldr	r3, [pc, #388]	; (800b278 <tcp_slowtmr+0x580>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	2b28      	cmp	r3, #40	; 0x28
 800b0fe:	d904      	bls.n	800b10a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b104:	3301      	adds	r3, #1
 800b106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	7d1b      	ldrb	r3, [r3, #20]
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d10b      	bne.n	800b12a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b112:	4b59      	ldr	r3, [pc, #356]	; (800b278 <tcp_slowtmr+0x580>)
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	2bf0      	cmp	r3, #240	; 0xf0
 800b11e:	d904      	bls.n	800b12a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b124:	3301      	adds	r3, #1
 800b126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d060      	beq.n	800b1f4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b138:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13c:	f000 fbfe 	bl	800b93c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	2b00      	cmp	r3, #0
 800b144:	d010      	beq.n	800b168 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b146:	4b50      	ldr	r3, [pc, #320]	; (800b288 <tcp_slowtmr+0x590>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d106      	bne.n	800b15e <tcp_slowtmr+0x466>
 800b150:	4b4e      	ldr	r3, [pc, #312]	; (800b28c <tcp_slowtmr+0x594>)
 800b152:	f240 526d 	movw	r2, #1389	; 0x56d
 800b156:	494e      	ldr	r1, [pc, #312]	; (800b290 <tcp_slowtmr+0x598>)
 800b158:	484e      	ldr	r0, [pc, #312]	; (800b294 <tcp_slowtmr+0x59c>)
 800b15a:	f007 fedf 	bl	8012f1c <iprintf>
        prev->next = pcb->next;
 800b15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e00f      	b.n	800b188 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b168:	4b47      	ldr	r3, [pc, #284]	; (800b288 <tcp_slowtmr+0x590>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b16e:	429a      	cmp	r2, r3
 800b170:	d006      	beq.n	800b180 <tcp_slowtmr+0x488>
 800b172:	4b46      	ldr	r3, [pc, #280]	; (800b28c <tcp_slowtmr+0x594>)
 800b174:	f240 5271 	movw	r2, #1393	; 0x571
 800b178:	4947      	ldr	r1, [pc, #284]	; (800b298 <tcp_slowtmr+0x5a0>)
 800b17a:	4846      	ldr	r0, [pc, #280]	; (800b294 <tcp_slowtmr+0x59c>)
 800b17c:	f007 fece 	bl	8012f1c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	4a40      	ldr	r2, [pc, #256]	; (800b288 <tcp_slowtmr+0x590>)
 800b186:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d013      	beq.n	800b1b8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b198:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	3304      	adds	r3, #4
 800b19e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a0:	8ad2      	ldrh	r2, [r2, #22]
 800b1a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1a4:	8b09      	ldrh	r1, [r1, #24]
 800b1a6:	9102      	str	r1, [sp, #8]
 800b1a8:	9201      	str	r2, [sp, #4]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4601      	mov	r1, r0
 800b1b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1b4:	f004 f98a 	bl	800f4cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	7d1b      	ldrb	r3, [r3, #20]
 800b1c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b1ce:	6838      	ldr	r0, [r7, #0]
 800b1d0:	f7ff f9f4 	bl	800a5bc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b1d4:	4b31      	ldr	r3, [pc, #196]	; (800b29c <tcp_slowtmr+0x5a4>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <tcp_slowtmr+0x4f2>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f06f 010c 	mvn.w	r1, #12
 800b1e6:	68b8      	ldr	r0, [r7, #8]
 800b1e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b1ea:	4b2c      	ldr	r3, [pc, #176]	; (800b29c <tcp_slowtmr+0x5a4>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d037      	beq.n	800b262 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800b1f2:	e592      	b.n	800ad1a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	7f1b      	ldrb	r3, [r3, #28]
 800b202:	3301      	adds	r3, #1
 800b204:	b2da      	uxtb	r2, r3
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20c:	7f1a      	ldrb	r2, [r3, #28]
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	7f5b      	ldrb	r3, [r3, #29]
 800b212:	429a      	cmp	r2, r3
 800b214:	d325      	bcc.n	800b262 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b218:	2200      	movs	r2, #0
 800b21a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b21c:	4b1f      	ldr	r3, [pc, #124]	; (800b29c <tcp_slowtmr+0x5a4>)
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <tcp_slowtmr+0x54c>
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b234:	6912      	ldr	r2, [r2, #16]
 800b236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b242:	e002      	b.n	800b24a <tcp_slowtmr+0x552>
 800b244:	2300      	movs	r3, #0
 800b246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b24a:	4b14      	ldr	r3, [pc, #80]	; (800b29c <tcp_slowtmr+0x5a4>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d000      	beq.n	800b254 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b252:	e562      	b.n	800ad1a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b254:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b25e:	f003 fb81 	bl	800e964 <tcp_output>
  while (pcb != NULL) {
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	2b00      	cmp	r3, #0
 800b266:	f47f ad5e 	bne.w	800ad26 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b26e:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <tcp_slowtmr+0x5a8>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b274:	e069      	b.n	800b34a <tcp_slowtmr+0x652>
 800b276:	bf00      	nop
 800b278:	24007320 	.word	0x24007320
 800b27c:	000a4cb8 	.word	0x000a4cb8
 800b280:	10624dd3 	.word	0x10624dd3
 800b284:	000124f8 	.word	0x000124f8
 800b288:	2400732c 	.word	0x2400732c
 800b28c:	080149b0 	.word	0x080149b0
 800b290:	08014de8 	.word	0x08014de8
 800b294:	080149f4 	.word	0x080149f4
 800b298:	08014e14 	.word	0x08014e14
 800b29c:	24007334 	.word	0x24007334
 800b2a0:	24007330 	.word	0x24007330
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a6:	7d1b      	ldrb	r3, [r3, #20]
 800b2a8:	2b0a      	cmp	r3, #10
 800b2aa:	d006      	beq.n	800b2ba <tcp_slowtmr+0x5c2>
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	; (800b35c <tcp_slowtmr+0x664>)
 800b2ae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b2b2:	492b      	ldr	r1, [pc, #172]	; (800b360 <tcp_slowtmr+0x668>)
 800b2b4:	482b      	ldr	r0, [pc, #172]	; (800b364 <tcp_slowtmr+0x66c>)
 800b2b6:	f007 fe31 	bl	8012f1c <iprintf>
    pcb_remove = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b2c0:	4b29      	ldr	r3, [pc, #164]	; (800b368 <tcp_slowtmr+0x670>)
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	2bf0      	cmp	r3, #240	; 0xf0
 800b2cc:	d904      	bls.n	800b2d8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02f      	beq.n	800b340 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b2e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2e2:	f000 fb2b 	bl	800b93c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d010      	beq.n	800b30e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b2ec:	4b1f      	ldr	r3, [pc, #124]	; (800b36c <tcp_slowtmr+0x674>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d106      	bne.n	800b304 <tcp_slowtmr+0x60c>
 800b2f6:	4b19      	ldr	r3, [pc, #100]	; (800b35c <tcp_slowtmr+0x664>)
 800b2f8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b2fc:	491c      	ldr	r1, [pc, #112]	; (800b370 <tcp_slowtmr+0x678>)
 800b2fe:	4819      	ldr	r0, [pc, #100]	; (800b364 <tcp_slowtmr+0x66c>)
 800b300:	f007 fe0c 	bl	8012f1c <iprintf>
        prev->next = pcb->next;
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	68da      	ldr	r2, [r3, #12]
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	60da      	str	r2, [r3, #12]
 800b30c:	e00f      	b.n	800b32e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b30e:	4b17      	ldr	r3, [pc, #92]	; (800b36c <tcp_slowtmr+0x674>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b314:	429a      	cmp	r2, r3
 800b316:	d006      	beq.n	800b326 <tcp_slowtmr+0x62e>
 800b318:	4b10      	ldr	r3, [pc, #64]	; (800b35c <tcp_slowtmr+0x664>)
 800b31a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b31e:	4915      	ldr	r1, [pc, #84]	; (800b374 <tcp_slowtmr+0x67c>)
 800b320:	4810      	ldr	r0, [pc, #64]	; (800b364 <tcp_slowtmr+0x66c>)
 800b322:	f007 fdfb 	bl	8012f1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	4a10      	ldr	r2, [pc, #64]	; (800b36c <tcp_slowtmr+0x674>)
 800b32c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b330:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b338:	69f8      	ldr	r0, [r7, #28]
 800b33a:	f7ff f93f 	bl	800a5bc <tcp_free>
 800b33e:	e004      	b.n	800b34a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1a9      	bne.n	800b2a4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	3730      	adds	r7, #48	; 0x30
 800b356:	46bd      	mov	sp, r7
 800b358:	bdb0      	pop	{r4, r5, r7, pc}
 800b35a:	bf00      	nop
 800b35c:	080149b0 	.word	0x080149b0
 800b360:	08014e40 	.word	0x08014e40
 800b364:	080149f4 	.word	0x080149f4
 800b368:	24007320 	.word	0x24007320
 800b36c:	24007330 	.word	0x24007330
 800b370:	08014e70 	.word	0x08014e70
 800b374:	08014e98 	.word	0x08014e98

0800b378 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b37e:	4b2d      	ldr	r3, [pc, #180]	; (800b434 <tcp_fasttmr+0xbc>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	b2da      	uxtb	r2, r3
 800b386:	4b2b      	ldr	r3, [pc, #172]	; (800b434 <tcp_fasttmr+0xbc>)
 800b388:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b38a:	4b2b      	ldr	r3, [pc, #172]	; (800b438 <tcp_fasttmr+0xc0>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b390:	e048      	b.n	800b424 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7f9a      	ldrb	r2, [r3, #30]
 800b396:	4b27      	ldr	r3, [pc, #156]	; (800b434 <tcp_fasttmr+0xbc>)
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d03f      	beq.n	800b41e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b39e:	4b25      	ldr	r3, [pc, #148]	; (800b434 <tcp_fasttmr+0xbc>)
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8b5b      	ldrh	r3, [r3, #26]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8b5b      	ldrh	r3, [r3, #26]
 800b3b6:	f043 0302 	orr.w	r3, r3, #2
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f003 facf 	bl	800e964 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ca:	f023 0303 	bic.w	r3, r3, #3
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	8b5b      	ldrh	r3, [r3, #26]
 800b3d8:	f003 0308 	and.w	r3, r3, #8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	8b5b      	ldrh	r3, [r3, #26]
 800b3e4:	f023 0308 	bic.w	r3, r3, #8
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fa78 	bl	800a8e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b402:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <tcp_fasttmr+0xc4>)
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f819 	bl	800b440 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b40e:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <tcp_fasttmr+0xc4>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d000      	beq.n	800b418 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b416:	e7b8      	b.n	800b38a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	607b      	str	r3, [r7, #4]
 800b41c:	e002      	b.n	800b424 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1b3      	bne.n	800b392 <tcp_fasttmr+0x1a>
    }
  }
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	24007336 	.word	0x24007336
 800b438:	2400732c 	.word	0x2400732c
 800b43c:	24007334 	.word	0x24007334

0800b440 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b440:	b590      	push	{r4, r7, lr}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d109      	bne.n	800b462 <tcp_process_refused_data+0x22>
 800b44e:	4b37      	ldr	r3, [pc, #220]	; (800b52c <tcp_process_refused_data+0xec>)
 800b450:	f240 6209 	movw	r2, #1545	; 0x609
 800b454:	4936      	ldr	r1, [pc, #216]	; (800b530 <tcp_process_refused_data+0xf0>)
 800b456:	4837      	ldr	r0, [pc, #220]	; (800b534 <tcp_process_refused_data+0xf4>)
 800b458:	f007 fd60 	bl	8012f1c <iprintf>
 800b45c:	f06f 030f 	mvn.w	r3, #15
 800b460:	e060      	b.n	800b524 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b466:	7b5b      	ldrb	r3, [r3, #13]
 800b468:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <tcp_process_refused_data+0x58>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6918      	ldr	r0, [r3, #16]
 800b48a:	2300      	movs	r3, #0
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	47a0      	blx	r4
 800b492:	4603      	mov	r3, r0
 800b494:	73fb      	strb	r3, [r7, #15]
 800b496:	e007      	b.n	800b4a8 <tcp_process_refused_data+0x68>
 800b498:	2300      	movs	r3, #0
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	2000      	movs	r0, #0
 800b4a0:	f000 f8a4 	bl	800b5ec <tcp_recv_null>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d12a      	bne.n	800b506 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	f003 0320 	and.w	r3, r3, #32
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d033      	beq.n	800b522 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b4c2:	d005      	beq.n	800b4d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00b      	beq.n	800b4f2 <tcp_process_refused_data+0xb2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6918      	ldr	r0, [r3, #16]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	47a0      	blx	r4
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73fb      	strb	r3, [r7, #15]
 800b4f0:	e001      	b.n	800b4f6 <tcp_process_refused_data+0xb6>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fa:	f113 0f0d 	cmn.w	r3, #13
 800b4fe:	d110      	bne.n	800b522 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b500:	f06f 030c 	mvn.w	r3, #12
 800b504:	e00e      	b.n	800b524 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b50a:	f113 0f0d 	cmn.w	r3, #13
 800b50e:	d102      	bne.n	800b516 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b510:	f06f 030c 	mvn.w	r3, #12
 800b514:	e006      	b.n	800b524 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b51c:	f06f 0304 	mvn.w	r3, #4
 800b520:	e000      	b.n	800b524 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}
 800b52c:	080149b0 	.word	0x080149b0
 800b530:	08014ec0 	.word	0x08014ec0
 800b534:	080149f4 	.word	0x080149f4

0800b538 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b540:	e007      	b.n	800b552 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f80a 	bl	800b562 <tcp_seg_free>
    seg = next;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f4      	bne.n	800b542 <tcp_segs_free+0xa>
  }
}
 800b558:	bf00      	nop
 800b55a:	bf00      	nop
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00c      	beq.n	800b58a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d004      	beq.n	800b582 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe fd61 	bl	800a044 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	2003      	movs	r0, #3
 800b586:	f7fd feb9 	bl	80092fc <memp_free>
  }
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <tcp_seg_copy+0x1c>
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <tcp_seg_copy+0x4c>)
 800b5a4:	f240 6282 	movw	r2, #1666	; 0x682
 800b5a8:	490e      	ldr	r1, [pc, #56]	; (800b5e4 <tcp_seg_copy+0x50>)
 800b5aa:	480f      	ldr	r0, [pc, #60]	; (800b5e8 <tcp_seg_copy+0x54>)
 800b5ac:	f007 fcb6 	bl	8012f1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b5b0:	2003      	movs	r0, #3
 800b5b2:	f7fd fe2d 	bl	8009210 <memp_malloc>
 800b5b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <tcp_seg_copy+0x2e>
    return NULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e00a      	b.n	800b5d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b5c2:	2210      	movs	r2, #16
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f007 fd83 	bl	80130d2 <memcpy>
  pbuf_ref(cseg->p);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fddd 	bl	800a190 <pbuf_ref>
  return cseg;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	080149b0 	.word	0x080149b0
 800b5e4:	08014f04 	.word	0x08014f04
 800b5e8:	080149f4 	.word	0x080149f4

0800b5ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d109      	bne.n	800b614 <tcp_recv_null+0x28>
 800b600:	4b12      	ldr	r3, [pc, #72]	; (800b64c <tcp_recv_null+0x60>)
 800b602:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b606:	4912      	ldr	r1, [pc, #72]	; (800b650 <tcp_recv_null+0x64>)
 800b608:	4812      	ldr	r0, [pc, #72]	; (800b654 <tcp_recv_null+0x68>)
 800b60a:	f007 fc87 	bl	8012f1c <iprintf>
 800b60e:	f06f 030f 	mvn.w	r3, #15
 800b612:	e016      	b.n	800b642 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	891b      	ldrh	r3, [r3, #8]
 800b61e:	4619      	mov	r1, r3
 800b620:	68b8      	ldr	r0, [r7, #8]
 800b622:	f7ff fb19 	bl	800ac58 <tcp_recved>
    pbuf_free(p);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fe fd0c 	bl	800a044 <pbuf_free>
 800b62c:	e008      	b.n	800b640 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b62e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d104      	bne.n	800b640 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b636:	68b8      	ldr	r0, [r7, #8]
 800b638:	f7ff f9be 	bl	800a9b8 <tcp_close>
 800b63c:	4603      	mov	r3, r0
 800b63e:	e000      	b.n	800b642 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	080149b0 	.word	0x080149b0
 800b650:	08014f20 	.word	0x08014f20
 800b654:	080149f4 	.word	0x080149f4

0800b658 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	db01      	blt.n	800b66e <tcp_kill_prio+0x16>
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	e000      	b.n	800b670 <tcp_kill_prio+0x18>
 800b66e:	237f      	movs	r3, #127	; 0x7f
 800b670:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d034      	beq.n	800b6e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b686:	4b19      	ldr	r3, [pc, #100]	; (800b6ec <tcp_kill_prio+0x94>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e01f      	b.n	800b6ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	7d5b      	ldrb	r3, [r3, #21]
 800b692:	7afa      	ldrb	r2, [r7, #11]
 800b694:	429a      	cmp	r2, r3
 800b696:	d80c      	bhi.n	800b6b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b69c:	7afa      	ldrb	r2, [r7, #11]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d112      	bne.n	800b6c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <tcp_kill_prio+0x98>)
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d80a      	bhi.n	800b6c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b6b2:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <tcp_kill_prio+0x98>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	7d5b      	ldrb	r3, [r3, #21]
 800b6c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1dc      	bne.n	800b68e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d004      	beq.n	800b6e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f7ff fa56 	bl	800ab8c <tcp_abort>
 800b6e0:	e000      	b.n	800b6e4 <tcp_kill_prio+0x8c>
    return;
 800b6e2:	bf00      	nop
  }
}
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2400732c 	.word	0x2400732c
 800b6f0:	24007320 	.word	0x24007320

0800b6f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	2b08      	cmp	r3, #8
 800b702:	d009      	beq.n	800b718 <tcp_kill_state+0x24>
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b09      	cmp	r3, #9
 800b708:	d006      	beq.n	800b718 <tcp_kill_state+0x24>
 800b70a:	4b1a      	ldr	r3, [pc, #104]	; (800b774 <tcp_kill_state+0x80>)
 800b70c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b710:	4919      	ldr	r1, [pc, #100]	; (800b778 <tcp_kill_state+0x84>)
 800b712:	481a      	ldr	r0, [pc, #104]	; (800b77c <tcp_kill_state+0x88>)
 800b714:	f007 fc02 	bl	8012f1c <iprintf>

  inactivity = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b720:	4b17      	ldr	r3, [pc, #92]	; (800b780 <tcp_kill_state+0x8c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	617b      	str	r3, [r7, #20]
 800b726:	e017      	b.n	800b758 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	7d1b      	ldrb	r3, [r3, #20]
 800b72c:	79fa      	ldrb	r2, [r7, #7]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d10f      	bne.n	800b752 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b732:	4b14      	ldr	r3, [pc, #80]	; (800b784 <tcp_kill_state+0x90>)
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d807      	bhi.n	800b752 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b742:	4b10      	ldr	r3, [pc, #64]	; (800b784 <tcp_kill_state+0x90>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e4      	bne.n	800b728 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b764:	2100      	movs	r1, #0
 800b766:	6938      	ldr	r0, [r7, #16]
 800b768:	f7ff f952 	bl	800aa10 <tcp_abandon>
  }
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	080149b0 	.word	0x080149b0
 800b778:	08014f3c 	.word	0x08014f3c
 800b77c:	080149f4 	.word	0x080149f4
 800b780:	2400732c 	.word	0x2400732c
 800b784:	24007320 	.word	0x24007320

0800b788 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b796:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <tcp_kill_timewait+0x58>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e012      	b.n	800b7c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b79e:	4b11      	ldr	r3, [pc, #68]	; (800b7e4 <tcp_kill_timewait+0x5c>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d807      	bhi.n	800b7be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <tcp_kill_timewait+0x5c>)
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e9      	bne.n	800b79e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f7ff f9db 	bl	800ab8c <tcp_abort>
  }
}
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	24007330 	.word	0x24007330
 800b7e4:	24007320 	.word	0x24007320

0800b7e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b7ee:	4b10      	ldr	r3, [pc, #64]	; (800b830 <tcp_handle_closepend+0x48>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b7f4:	e014      	b.n	800b820 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	8b5b      	ldrh	r3, [r3, #26]
 800b800:	f003 0308 	and.w	r3, r3, #8
 800b804:	2b00      	cmp	r3, #0
 800b806:	d009      	beq.n	800b81c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	8b5b      	ldrh	r3, [r3, #26]
 800b80c:	f023 0308 	bic.w	r3, r3, #8
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff f864 	bl	800a8e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e7      	bne.n	800b7f6 <tcp_handle_closepend+0xe>
  }
}
 800b826:	bf00      	nop
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2400732c 	.word	0x2400732c

0800b834 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b83e:	2001      	movs	r0, #1
 800b840:	f7fd fce6 	bl	8009210 <memp_malloc>
 800b844:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d126      	bne.n	800b89a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b84c:	f7ff ffcc 	bl	800b7e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b850:	f7ff ff9a 	bl	800b788 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b854:	2001      	movs	r0, #1
 800b856:	f7fd fcdb 	bl	8009210 <memp_malloc>
 800b85a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d11b      	bne.n	800b89a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b862:	2009      	movs	r0, #9
 800b864:	f7ff ff46 	bl	800b6f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b868:	2001      	movs	r0, #1
 800b86a:	f7fd fcd1 	bl	8009210 <memp_malloc>
 800b86e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d111      	bne.n	800b89a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b876:	2008      	movs	r0, #8
 800b878:	f7ff ff3c 	bl	800b6f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b87c:	2001      	movs	r0, #1
 800b87e:	f7fd fcc7 	bl	8009210 <memp_malloc>
 800b882:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d107      	bne.n	800b89a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fee3 	bl	800b658 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b892:	2001      	movs	r0, #1
 800b894:	f7fd fcbc 	bl	8009210 <memp_malloc>
 800b898:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d03f      	beq.n	800b920 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b8a0:	229c      	movs	r2, #156	; 0x9c
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f007 fb9e 	bl	8012fe6 <memset>
    pcb->prio = prio;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	79fa      	ldrb	r2, [r7, #7]
 800b8ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b8b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b8c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	22ff      	movs	r2, #255	; 0xff
 800b8ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b8d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2206      	movs	r2, #6
 800b8dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2206      	movs	r2, #6
 800b8e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <tcp_alloc+0xf8>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <tcp_alloc+0xfc>)
 800b900:	781a      	ldrb	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b90c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a08      	ldr	r2, [pc, #32]	; (800b934 <tcp_alloc+0x100>)
 800b914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a07      	ldr	r2, [pc, #28]	; (800b938 <tcp_alloc+0x104>)
 800b91c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b920:	68fb      	ldr	r3, [r7, #12]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	24007320 	.word	0x24007320
 800b930:	24007336 	.word	0x24007336
 800b934:	0800b5ed 	.word	0x0800b5ed
 800b938:	006ddd00 	.word	0x006ddd00

0800b93c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d107      	bne.n	800b95a <tcp_pcb_purge+0x1e>
 800b94a:	4b21      	ldr	r3, [pc, #132]	; (800b9d0 <tcp_pcb_purge+0x94>)
 800b94c:	f640 0251 	movw	r2, #2129	; 0x851
 800b950:	4920      	ldr	r1, [pc, #128]	; (800b9d4 <tcp_pcb_purge+0x98>)
 800b952:	4821      	ldr	r0, [pc, #132]	; (800b9d8 <tcp_pcb_purge+0x9c>)
 800b954:	f007 fae2 	bl	8012f1c <iprintf>
 800b958:	e037      	b.n	800b9ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	7d1b      	ldrb	r3, [r3, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d033      	beq.n	800b9ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b966:	2b0a      	cmp	r3, #10
 800b968:	d02f      	beq.n	800b9ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d02b      	beq.n	800b9ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fb60 	bl	800a044 <pbuf_free>
      pcb->refused_data = NULL;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f986 	bl	800bca4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b99e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fdc7 	bl	800b538 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fdc2 	bl	800b538 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	080149b0 	.word	0x080149b0
 800b9d4:	08014ffc 	.word	0x08014ffc
 800b9d8:	080149f4 	.word	0x080149f4

0800b9dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <tcp_pcb_remove+0x1e>
 800b9ec:	4b3e      	ldr	r3, [pc, #248]	; (800bae8 <tcp_pcb_remove+0x10c>)
 800b9ee:	f640 0283 	movw	r2, #2179	; 0x883
 800b9f2:	493e      	ldr	r1, [pc, #248]	; (800baec <tcp_pcb_remove+0x110>)
 800b9f4:	483e      	ldr	r0, [pc, #248]	; (800baf0 <tcp_pcb_remove+0x114>)
 800b9f6:	f007 fa91 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d106      	bne.n	800ba0e <tcp_pcb_remove+0x32>
 800ba00:	4b39      	ldr	r3, [pc, #228]	; (800bae8 <tcp_pcb_remove+0x10c>)
 800ba02:	f640 0284 	movw	r2, #2180	; 0x884
 800ba06:	493b      	ldr	r1, [pc, #236]	; (800baf4 <tcp_pcb_remove+0x118>)
 800ba08:	4839      	ldr	r0, [pc, #228]	; (800baf0 <tcp_pcb_remove+0x114>)
 800ba0a:	f007 fa87 	bl	8012f1c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d105      	bne.n	800ba24 <tcp_pcb_remove+0x48>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68da      	ldr	r2, [r3, #12]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e013      	b.n	800ba4c <tcp_pcb_remove+0x70>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e00c      	b.n	800ba46 <tcp_pcb_remove+0x6a>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d104      	bne.n	800ba40 <tcp_pcb_remove+0x64>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	60da      	str	r2, [r3, #12]
 800ba3e:	e005      	b.n	800ba4c <tcp_pcb_remove+0x70>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1ef      	bne.n	800ba2c <tcp_pcb_remove+0x50>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ba52:	6838      	ldr	r0, [r7, #0]
 800ba54:	f7ff ff72 	bl	800b93c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	7d1b      	ldrb	r3, [r3, #20]
 800ba5c:	2b0a      	cmp	r3, #10
 800ba5e:	d013      	beq.n	800ba88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d00f      	beq.n	800ba88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	8b5b      	ldrh	r3, [r3, #26]
 800ba6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	8b5b      	ldrh	r3, [r3, #26]
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ba82:	6838      	ldr	r0, [r7, #0]
 800ba84:	f002 ff6e 	bl	800e964 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	7d1b      	ldrb	r3, [r3, #20]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d020      	beq.n	800bad2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d006      	beq.n	800baa6 <tcp_pcb_remove+0xca>
 800ba98:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <tcp_pcb_remove+0x10c>)
 800ba9a:	f640 0293 	movw	r2, #2195	; 0x893
 800ba9e:	4916      	ldr	r1, [pc, #88]	; (800baf8 <tcp_pcb_remove+0x11c>)
 800baa0:	4813      	ldr	r0, [pc, #76]	; (800baf0 <tcp_pcb_remove+0x114>)
 800baa2:	f007 fa3b 	bl	8012f1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <tcp_pcb_remove+0xe0>
 800baae:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <tcp_pcb_remove+0x10c>)
 800bab0:	f640 0294 	movw	r2, #2196	; 0x894
 800bab4:	4911      	ldr	r1, [pc, #68]	; (800bafc <tcp_pcb_remove+0x120>)
 800bab6:	480e      	ldr	r0, [pc, #56]	; (800baf0 <tcp_pcb_remove+0x114>)
 800bab8:	f007 fa30 	bl	8012f1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d006      	beq.n	800bad2 <tcp_pcb_remove+0xf6>
 800bac4:	4b08      	ldr	r3, [pc, #32]	; (800bae8 <tcp_pcb_remove+0x10c>)
 800bac6:	f640 0296 	movw	r2, #2198	; 0x896
 800baca:	490d      	ldr	r1, [pc, #52]	; (800bb00 <tcp_pcb_remove+0x124>)
 800bacc:	4808      	ldr	r0, [pc, #32]	; (800baf0 <tcp_pcb_remove+0x114>)
 800bace:	f007 fa25 	bl	8012f1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2200      	movs	r2, #0
 800bad6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2200      	movs	r2, #0
 800badc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	080149b0 	.word	0x080149b0
 800baec:	08015018 	.word	0x08015018
 800baf0:	080149f4 	.word	0x080149f4
 800baf4:	08015034 	.word	0x08015034
 800baf8:	08015054 	.word	0x08015054
 800bafc:	0801506c 	.word	0x0801506c
 800bb00:	08015088 	.word	0x08015088

0800bb04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <tcp_next_iss+0x1c>
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <tcp_next_iss+0x38>)
 800bb14:	f640 02af 	movw	r2, #2223	; 0x8af
 800bb18:	4909      	ldr	r1, [pc, #36]	; (800bb40 <tcp_next_iss+0x3c>)
 800bb1a:	480a      	ldr	r0, [pc, #40]	; (800bb44 <tcp_next_iss+0x40>)
 800bb1c:	f007 f9fe 	bl	8012f1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <tcp_next_iss+0x44>)
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <tcp_next_iss+0x48>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4413      	add	r3, r2
 800bb2a:	4a07      	ldr	r2, [pc, #28]	; (800bb48 <tcp_next_iss+0x44>)
 800bb2c:	6013      	str	r3, [r2, #0]
  return iss;
 800bb2e:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <tcp_next_iss+0x44>)
 800bb30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	080149b0 	.word	0x080149b0
 800bb40:	080150a0 	.word	0x080150a0
 800bb44:	080149f4 	.word	0x080149f4
 800bb48:	2400002c 	.word	0x2400002c
 800bb4c:	24007320 	.word	0x24007320

0800bb50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <tcp_eff_send_mss_netif+0x22>
 800bb64:	4b14      	ldr	r3, [pc, #80]	; (800bbb8 <tcp_eff_send_mss_netif+0x68>)
 800bb66:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bb6a:	4914      	ldr	r1, [pc, #80]	; (800bbbc <tcp_eff_send_mss_netif+0x6c>)
 800bb6c:	4814      	ldr	r0, [pc, #80]	; (800bbc0 <tcp_eff_send_mss_netif+0x70>)
 800bb6e:	f007 f9d5 	bl	8012f1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bb78:	89fb      	ldrh	r3, [r7, #14]
 800bb7a:	e019      	b.n	800bbb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bb80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bb82:	8afb      	ldrh	r3, [r7, #22]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d012      	beq.n	800bbae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bb88:	2328      	movs	r3, #40	; 0x28
 800bb8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bb8c:	8afa      	ldrh	r2, [r7, #22]
 800bb8e:	8abb      	ldrh	r3, [r7, #20]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d904      	bls.n	800bb9e <tcp_eff_send_mss_netif+0x4e>
 800bb94:	8afa      	ldrh	r2, [r7, #22]
 800bb96:	8abb      	ldrh	r3, [r7, #20]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	e000      	b.n	800bba0 <tcp_eff_send_mss_netif+0x50>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bba2:	8a7a      	ldrh	r2, [r7, #18]
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	bf28      	it	cs
 800bbaa:	4613      	movcs	r3, r2
 800bbac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bbae:	89fb      	ldrh	r3, [r7, #14]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	080149b0 	.word	0x080149b0
 800bbbc:	080150bc 	.word	0x080150bc
 800bbc0:	080149f4 	.word	0x080149f4

0800bbc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d119      	bne.n	800bc0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bbd8:	4b10      	ldr	r3, [pc, #64]	; (800bc1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bbda:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bbde:	4910      	ldr	r1, [pc, #64]	; (800bc20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bbe0:	4810      	ldr	r0, [pc, #64]	; (800bc24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bbe2:	f007 f99b 	bl	8012f1c <iprintf>

  while (pcb != NULL) {
 800bbe6:	e011      	b.n	800bc0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d108      	bne.n	800bc06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f7fe ffc6 	bl	800ab8c <tcp_abort>
      pcb = next;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e002      	b.n	800bc0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1ea      	bne.n	800bbe8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	080149b0 	.word	0x080149b0
 800bc20:	080150e4 	.word	0x080150e4
 800bc24:	080149f4 	.word	0x080149f4

0800bc28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d02a      	beq.n	800bc8e <tcp_netif_ip_addr_changed+0x66>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d026      	beq.n	800bc8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bc40:	4b15      	ldr	r3, [pc, #84]	; (800bc98 <tcp_netif_ip_addr_changed+0x70>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff ffbc 	bl	800bbc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bc4c:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <tcp_netif_ip_addr_changed+0x74>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff ffb6 	bl	800bbc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d017      	beq.n	800bc8e <tcp_netif_ip_addr_changed+0x66>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d013      	beq.n	800bc8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <tcp_netif_ip_addr_changed+0x78>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e00c      	b.n	800bc88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d103      	bne.n	800bc82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1ef      	bne.n	800bc6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	2400732c 	.word	0x2400732c
 800bc9c:	24007324 	.word	0x24007324
 800bca0:	24007328 	.word	0x24007328

0800bca4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d007      	beq.n	800bcc4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fc3d 	bl	800b538 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bccc:	b590      	push	{r4, r7, lr}
 800bcce:	b08d      	sub	sp, #52	; 0x34
 800bcd0:	af04      	add	r7, sp, #16
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <tcp_input+0x1c>
 800bcdc:	4b9b      	ldr	r3, [pc, #620]	; (800bf4c <tcp_input+0x280>)
 800bcde:	2283      	movs	r2, #131	; 0x83
 800bce0:	499b      	ldr	r1, [pc, #620]	; (800bf50 <tcp_input+0x284>)
 800bce2:	489c      	ldr	r0, [pc, #624]	; (800bf54 <tcp_input+0x288>)
 800bce4:	f007 f91a 	bl	8012f1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	4a9a      	ldr	r2, [pc, #616]	; (800bf58 <tcp_input+0x28c>)
 800bcee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	895b      	ldrh	r3, [r3, #10]
 800bcf4:	2b13      	cmp	r3, #19
 800bcf6:	f240 83d1 	bls.w	800c49c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bcfa:	4b98      	ldr	r3, [pc, #608]	; (800bf5c <tcp_input+0x290>)
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	4a97      	ldr	r2, [pc, #604]	; (800bf5c <tcp_input+0x290>)
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f005 ff9d 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f040 83c7 	bne.w	800c4a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bd12:	4b92      	ldr	r3, [pc, #584]	; (800bf5c <tcp_input+0x290>)
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bd1a:	2be0      	cmp	r3, #224	; 0xe0
 800bd1c:	f000 83c0 	beq.w	800c4a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bd20:	4b8d      	ldr	r3, [pc, #564]	; (800bf58 <tcp_input+0x28c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	899b      	ldrh	r3, [r3, #12]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fc fce1 	bl	80086f0 <lwip_htons>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	0b1b      	lsrs	r3, r3, #12
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bd3a:	7cbb      	ldrb	r3, [r7, #18]
 800bd3c:	2b13      	cmp	r3, #19
 800bd3e:	f240 83b1 	bls.w	800c4a4 <tcp_input+0x7d8>
 800bd42:	7cbb      	ldrb	r3, [r7, #18]
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	891b      	ldrh	r3, [r3, #8]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	f200 83aa 	bhi.w	800c4a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bd50:	7cbb      	ldrb	r3, [r7, #18]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	3b14      	subs	r3, #20
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	4b81      	ldr	r3, [pc, #516]	; (800bf60 <tcp_input+0x294>)
 800bd5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bd5c:	4b81      	ldr	r3, [pc, #516]	; (800bf64 <tcp_input+0x298>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	895a      	ldrh	r2, [r3, #10]
 800bd66:	7cbb      	ldrb	r3, [r7, #18]
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d309      	bcc.n	800bd82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bd6e:	4b7c      	ldr	r3, [pc, #496]	; (800bf60 <tcp_input+0x294>)
 800bd70:	881a      	ldrh	r2, [r3, #0]
 800bd72:	4b7d      	ldr	r3, [pc, #500]	; (800bf68 <tcp_input+0x29c>)
 800bd74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bd76:	7cbb      	ldrb	r3, [r7, #18]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fe f8dc 	bl	8009f38 <pbuf_remove_header>
 800bd80:	e04e      	b.n	800be20 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <tcp_input+0xca>
 800bd8a:	4b70      	ldr	r3, [pc, #448]	; (800bf4c <tcp_input+0x280>)
 800bd8c:	22c2      	movs	r2, #194	; 0xc2
 800bd8e:	4977      	ldr	r1, [pc, #476]	; (800bf6c <tcp_input+0x2a0>)
 800bd90:	4870      	ldr	r0, [pc, #448]	; (800bf54 <tcp_input+0x288>)
 800bd92:	f007 f8c3 	bl	8012f1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bd96:	2114      	movs	r1, #20
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7fe f8cd 	bl	8009f38 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	895a      	ldrh	r2, [r3, #10]
 800bda2:	4b71      	ldr	r3, [pc, #452]	; (800bf68 <tcp_input+0x29c>)
 800bda4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bda6:	4b6e      	ldr	r3, [pc, #440]	; (800bf60 <tcp_input+0x294>)
 800bda8:	881a      	ldrh	r2, [r3, #0]
 800bdaa:	4b6f      	ldr	r3, [pc, #444]	; (800bf68 <tcp_input+0x29c>)
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bdb2:	4b6d      	ldr	r3, [pc, #436]	; (800bf68 <tcp_input+0x29c>)
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7fe f8bd 	bl	8009f38 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	895b      	ldrh	r3, [r3, #10]
 800bdc4:	8a3a      	ldrh	r2, [r7, #16]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	f200 836e 	bhi.w	800c4a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4a64      	ldr	r2, [pc, #400]	; (800bf64 <tcp_input+0x298>)
 800bdd4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	8a3a      	ldrh	r2, [r7, #16]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f8aa 	bl	8009f38 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	891a      	ldrh	r2, [r3, #8]
 800bde8:	8a3b      	ldrh	r3, [r7, #16]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	895b      	ldrh	r3, [r3, #10]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d005      	beq.n	800be06 <tcp_input+0x13a>
 800bdfa:	4b54      	ldr	r3, [pc, #336]	; (800bf4c <tcp_input+0x280>)
 800bdfc:	22df      	movs	r2, #223	; 0xdf
 800bdfe:	495c      	ldr	r1, [pc, #368]	; (800bf70 <tcp_input+0x2a4>)
 800be00:	4854      	ldr	r0, [pc, #336]	; (800bf54 <tcp_input+0x288>)
 800be02:	f007 f88b 	bl	8012f1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	891a      	ldrh	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	891b      	ldrh	r3, [r3, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	d005      	beq.n	800be20 <tcp_input+0x154>
 800be14:	4b4d      	ldr	r3, [pc, #308]	; (800bf4c <tcp_input+0x280>)
 800be16:	22e0      	movs	r2, #224	; 0xe0
 800be18:	4956      	ldr	r1, [pc, #344]	; (800bf74 <tcp_input+0x2a8>)
 800be1a:	484e      	ldr	r0, [pc, #312]	; (800bf54 <tcp_input+0x288>)
 800be1c:	f007 f87e 	bl	8012f1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800be20:	4b4d      	ldr	r3, [pc, #308]	; (800bf58 <tcp_input+0x28c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	b29b      	uxth	r3, r3
 800be28:	4a4b      	ldr	r2, [pc, #300]	; (800bf58 <tcp_input+0x28c>)
 800be2a:	6814      	ldr	r4, [r2, #0]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fc fc5f 	bl	80086f0 <lwip_htons>
 800be32:	4603      	mov	r3, r0
 800be34:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800be36:	4b48      	ldr	r3, [pc, #288]	; (800bf58 <tcp_input+0x28c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	885b      	ldrh	r3, [r3, #2]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	4a46      	ldr	r2, [pc, #280]	; (800bf58 <tcp_input+0x28c>)
 800be40:	6814      	ldr	r4, [r2, #0]
 800be42:	4618      	mov	r0, r3
 800be44:	f7fc fc54 	bl	80086f0 <lwip_htons>
 800be48:	4603      	mov	r3, r0
 800be4a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800be4c:	4b42      	ldr	r3, [pc, #264]	; (800bf58 <tcp_input+0x28c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	4a41      	ldr	r2, [pc, #260]	; (800bf58 <tcp_input+0x28c>)
 800be54:	6814      	ldr	r4, [r2, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f7fc fc5f 	bl	800871a <lwip_htonl>
 800be5c:	4603      	mov	r3, r0
 800be5e:	6063      	str	r3, [r4, #4]
 800be60:	6863      	ldr	r3, [r4, #4]
 800be62:	4a45      	ldr	r2, [pc, #276]	; (800bf78 <tcp_input+0x2ac>)
 800be64:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800be66:	4b3c      	ldr	r3, [pc, #240]	; (800bf58 <tcp_input+0x28c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	4a3a      	ldr	r2, [pc, #232]	; (800bf58 <tcp_input+0x28c>)
 800be6e:	6814      	ldr	r4, [r2, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f7fc fc52 	bl	800871a <lwip_htonl>
 800be76:	4603      	mov	r3, r0
 800be78:	60a3      	str	r3, [r4, #8]
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	4a3f      	ldr	r2, [pc, #252]	; (800bf7c <tcp_input+0x2b0>)
 800be7e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800be80:	4b35      	ldr	r3, [pc, #212]	; (800bf58 <tcp_input+0x28c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	89db      	ldrh	r3, [r3, #14]
 800be86:	b29b      	uxth	r3, r3
 800be88:	4a33      	ldr	r2, [pc, #204]	; (800bf58 <tcp_input+0x28c>)
 800be8a:	6814      	ldr	r4, [r2, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fc fc2f 	bl	80086f0 <lwip_htons>
 800be92:	4603      	mov	r3, r0
 800be94:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800be96:	4b30      	ldr	r3, [pc, #192]	; (800bf58 <tcp_input+0x28c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	899b      	ldrh	r3, [r3, #12]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fc fc26 	bl	80086f0 <lwip_htons>
 800bea4:	4603      	mov	r3, r0
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beac:	b2da      	uxtb	r2, r3
 800beae:	4b34      	ldr	r3, [pc, #208]	; (800bf80 <tcp_input+0x2b4>)
 800beb0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	891a      	ldrh	r2, [r3, #8]
 800beb6:	4b33      	ldr	r3, [pc, #204]	; (800bf84 <tcp_input+0x2b8>)
 800beb8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800beba:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <tcp_input+0x2b4>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00c      	beq.n	800bee0 <tcp_input+0x214>
    tcplen++;
 800bec6:	4b2f      	ldr	r3, [pc, #188]	; (800bf84 <tcp_input+0x2b8>)
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	3301      	adds	r3, #1
 800becc:	b29a      	uxth	r2, r3
 800bece:	4b2d      	ldr	r3, [pc, #180]	; (800bf84 <tcp_input+0x2b8>)
 800bed0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	891a      	ldrh	r2, [r3, #8]
 800bed6:	4b2b      	ldr	r3, [pc, #172]	; (800bf84 <tcp_input+0x2b8>)
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f200 82e6 	bhi.w	800c4ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bee4:	4b28      	ldr	r3, [pc, #160]	; (800bf88 <tcp_input+0x2bc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	61fb      	str	r3, [r7, #28]
 800beea:	e09d      	b.n	800c028 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	7d1b      	ldrb	r3, [r3, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d105      	bne.n	800bf00 <tcp_input+0x234>
 800bef4:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <tcp_input+0x280>)
 800bef6:	22fb      	movs	r2, #251	; 0xfb
 800bef8:	4924      	ldr	r1, [pc, #144]	; (800bf8c <tcp_input+0x2c0>)
 800befa:	4816      	ldr	r0, [pc, #88]	; (800bf54 <tcp_input+0x288>)
 800befc:	f007 f80e 	bl	8012f1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	7d1b      	ldrb	r3, [r3, #20]
 800bf04:	2b0a      	cmp	r3, #10
 800bf06:	d105      	bne.n	800bf14 <tcp_input+0x248>
 800bf08:	4b10      	ldr	r3, [pc, #64]	; (800bf4c <tcp_input+0x280>)
 800bf0a:	22fc      	movs	r2, #252	; 0xfc
 800bf0c:	4920      	ldr	r1, [pc, #128]	; (800bf90 <tcp_input+0x2c4>)
 800bf0e:	4811      	ldr	r0, [pc, #68]	; (800bf54 <tcp_input+0x288>)
 800bf10:	f007 f804 	bl	8012f1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	7d1b      	ldrb	r3, [r3, #20]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d105      	bne.n	800bf28 <tcp_input+0x25c>
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <tcp_input+0x280>)
 800bf1e:	22fd      	movs	r2, #253	; 0xfd
 800bf20:	491c      	ldr	r1, [pc, #112]	; (800bf94 <tcp_input+0x2c8>)
 800bf22:	480c      	ldr	r0, [pc, #48]	; (800bf54 <tcp_input+0x288>)
 800bf24:	f006 fffa 	bl	8012f1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	7a1b      	ldrb	r3, [r3, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d033      	beq.n	800bf98 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	7a1a      	ldrb	r2, [r3, #8]
 800bf34:	4b09      	ldr	r3, [pc, #36]	; (800bf5c <tcp_input+0x290>)
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d029      	beq.n	800bf98 <tcp_input+0x2cc>
      prev = pcb;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	61bb      	str	r3, [r7, #24]
      continue;
 800bf48:	e06b      	b.n	800c022 <tcp_input+0x356>
 800bf4a:	bf00      	nop
 800bf4c:	08015118 	.word	0x08015118
 800bf50:	0801514c 	.word	0x0801514c
 800bf54:	08015164 	.word	0x08015164
 800bf58:	24007348 	.word	0x24007348
 800bf5c:	24004220 	.word	0x24004220
 800bf60:	2400734c 	.word	0x2400734c
 800bf64:	24007350 	.word	0x24007350
 800bf68:	2400734e 	.word	0x2400734e
 800bf6c:	0801518c 	.word	0x0801518c
 800bf70:	0801519c 	.word	0x0801519c
 800bf74:	080151a8 	.word	0x080151a8
 800bf78:	24007358 	.word	0x24007358
 800bf7c:	2400735c 	.word	0x2400735c
 800bf80:	24007364 	.word	0x24007364
 800bf84:	24007362 	.word	0x24007362
 800bf88:	2400732c 	.word	0x2400732c
 800bf8c:	080151c8 	.word	0x080151c8
 800bf90:	080151f0 	.word	0x080151f0
 800bf94:	0801521c 	.word	0x0801521c
    }

    if (pcb->remote_port == tcphdr->src &&
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	8b1a      	ldrh	r2, [r3, #24]
 800bf9c:	4b72      	ldr	r3, [pc, #456]	; (800c168 <tcp_input+0x49c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d13a      	bne.n	800c01e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	8ada      	ldrh	r2, [r3, #22]
 800bfac:	4b6e      	ldr	r3, [pc, #440]	; (800c168 <tcp_input+0x49c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	885b      	ldrh	r3, [r3, #2]
 800bfb2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d132      	bne.n	800c01e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b6b      	ldr	r3, [pc, #428]	; (800c16c <tcp_input+0x4a0>)
 800bfbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d12c      	bne.n	800c01e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	4b68      	ldr	r3, [pc, #416]	; (800c16c <tcp_input+0x4a0>)
 800bfca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d126      	bne.n	800c01e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d106      	bne.n	800bfe8 <tcp_input+0x31c>
 800bfda:	4b65      	ldr	r3, [pc, #404]	; (800c170 <tcp_input+0x4a4>)
 800bfdc:	f240 120d 	movw	r2, #269	; 0x10d
 800bfe0:	4964      	ldr	r1, [pc, #400]	; (800c174 <tcp_input+0x4a8>)
 800bfe2:	4865      	ldr	r0, [pc, #404]	; (800c178 <tcp_input+0x4ac>)
 800bfe4:	f006 ff9a 	bl	8012f1c <iprintf>
      if (prev != NULL) {
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <tcp_input+0x338>
        prev->next = pcb->next;
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bff6:	4b61      	ldr	r3, [pc, #388]	; (800c17c <tcp_input+0x4b0>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bffe:	4a5f      	ldr	r2, [pc, #380]	; (800c17c <tcp_input+0x4b0>)
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d111      	bne.n	800c032 <tcp_input+0x366>
 800c00e:	4b58      	ldr	r3, [pc, #352]	; (800c170 <tcp_input+0x4a4>)
 800c010:	f240 1215 	movw	r2, #277	; 0x115
 800c014:	495a      	ldr	r1, [pc, #360]	; (800c180 <tcp_input+0x4b4>)
 800c016:	4858      	ldr	r0, [pc, #352]	; (800c178 <tcp_input+0x4ac>)
 800c018:	f006 ff80 	bl	8012f1c <iprintf>
      break;
 800c01c:	e009      	b.n	800c032 <tcp_input+0x366>
    }
    prev = pcb;
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	61fb      	str	r3, [r7, #28]
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f47f af5e 	bne.w	800beec <tcp_input+0x220>
 800c030:	e000      	b.n	800c034 <tcp_input+0x368>
      break;
 800c032:	bf00      	nop
  }

  if (pcb == NULL) {
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f040 80aa 	bne.w	800c190 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c03c:	4b51      	ldr	r3, [pc, #324]	; (800c184 <tcp_input+0x4b8>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	e03f      	b.n	800c0c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	7d1b      	ldrb	r3, [r3, #20]
 800c048:	2b0a      	cmp	r3, #10
 800c04a:	d006      	beq.n	800c05a <tcp_input+0x38e>
 800c04c:	4b48      	ldr	r3, [pc, #288]	; (800c170 <tcp_input+0x4a4>)
 800c04e:	f240 121f 	movw	r2, #287	; 0x11f
 800c052:	494d      	ldr	r1, [pc, #308]	; (800c188 <tcp_input+0x4bc>)
 800c054:	4848      	ldr	r0, [pc, #288]	; (800c178 <tcp_input+0x4ac>)
 800c056:	f006 ff61 	bl	8012f1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	7a1b      	ldrb	r3, [r3, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d009      	beq.n	800c076 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	7a1a      	ldrb	r2, [r3, #8]
 800c066:	4b41      	ldr	r3, [pc, #260]	; (800c16c <tcp_input+0x4a0>)
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c06e:	3301      	adds	r3, #1
 800c070:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c072:	429a      	cmp	r2, r3
 800c074:	d122      	bne.n	800c0bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	8b1a      	ldrh	r2, [r3, #24]
 800c07a:	4b3b      	ldr	r3, [pc, #236]	; (800c168 <tcp_input+0x49c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	b29b      	uxth	r3, r3
 800c082:	429a      	cmp	r2, r3
 800c084:	d11b      	bne.n	800c0be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	8ada      	ldrh	r2, [r3, #22]
 800c08a:	4b37      	ldr	r3, [pc, #220]	; (800c168 <tcp_input+0x49c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	885b      	ldrh	r3, [r3, #2]
 800c090:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c092:	429a      	cmp	r2, r3
 800c094:	d113      	bne.n	800c0be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	685a      	ldr	r2, [r3, #4]
 800c09a:	4b34      	ldr	r3, [pc, #208]	; (800c16c <tcp_input+0x4a0>)
 800c09c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d10d      	bne.n	800c0be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	4b31      	ldr	r3, [pc, #196]	; (800c16c <tcp_input+0x4a0>)
 800c0a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d107      	bne.n	800c0be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c0ae:	69f8      	ldr	r0, [r7, #28]
 800c0b0:	f000 fb56 	bl	800c760 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f7fd ffc5 	bl	800a044 <pbuf_free>
        return;
 800c0ba:	e1fd      	b.n	800c4b8 <tcp_input+0x7ec>
        continue;
 800c0bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	61fb      	str	r3, [r7, #28]
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1bc      	bne.n	800c044 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c0ce:	4b2f      	ldr	r3, [pc, #188]	; (800c18c <tcp_input+0x4c0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e02a      	b.n	800c12c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	7a1b      	ldrb	r3, [r3, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	7a1a      	ldrb	r2, [r3, #8]
 800c0e2:	4b22      	ldr	r3, [pc, #136]	; (800c16c <tcp_input+0x4a0>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d002      	beq.n	800c0f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	61bb      	str	r3, [r7, #24]
        continue;
 800c0f6:	e016      	b.n	800c126 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	8ada      	ldrh	r2, [r3, #22]
 800c0fc:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <tcp_input+0x49c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	885b      	ldrh	r3, [r3, #2]
 800c102:	b29b      	uxth	r3, r3
 800c104:	429a      	cmp	r2, r3
 800c106:	d10c      	bne.n	800c122 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b17      	ldr	r3, [pc, #92]	; (800c16c <tcp_input+0x4a0>)
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	429a      	cmp	r2, r3
 800c112:	d00f      	beq.n	800c134 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00d      	beq.n	800c136 <tcp_input+0x46a>
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1d1      	bne.n	800c0d6 <tcp_input+0x40a>
 800c132:	e000      	b.n	800c136 <tcp_input+0x46a>
            break;
 800c134:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d029      	beq.n	800c190 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00a      	beq.n	800c158 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c14a:	4b10      	ldr	r3, [pc, #64]	; (800c18c <tcp_input+0x4c0>)
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c152:	4a0e      	ldr	r2, [pc, #56]	; (800c18c <tcp_input+0x4c0>)
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c158:	6978      	ldr	r0, [r7, #20]
 800c15a:	f000 fa03 	bl	800c564 <tcp_listen_input>
      }
      pbuf_free(p);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7fd ff70 	bl	800a044 <pbuf_free>
      return;
 800c164:	e1a8      	b.n	800c4b8 <tcp_input+0x7ec>
 800c166:	bf00      	nop
 800c168:	24007348 	.word	0x24007348
 800c16c:	24004220 	.word	0x24004220
 800c170:	08015118 	.word	0x08015118
 800c174:	08015244 	.word	0x08015244
 800c178:	08015164 	.word	0x08015164
 800c17c:	2400732c 	.word	0x2400732c
 800c180:	08015270 	.word	0x08015270
 800c184:	24007330 	.word	0x24007330
 800c188:	0801529c 	.word	0x0801529c
 800c18c:	24007328 	.word	0x24007328
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 8158 	beq.w	800c448 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c198:	4b95      	ldr	r3, [pc, #596]	; (800c3f0 <tcp_input+0x724>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	891a      	ldrh	r2, [r3, #8]
 800c1a2:	4b93      	ldr	r3, [pc, #588]	; (800c3f0 <tcp_input+0x724>)
 800c1a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c1a6:	4a92      	ldr	r2, [pc, #584]	; (800c3f0 <tcp_input+0x724>)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c1ac:	4b91      	ldr	r3, [pc, #580]	; (800c3f4 <tcp_input+0x728>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a8f      	ldr	r2, [pc, #572]	; (800c3f0 <tcp_input+0x724>)
 800c1b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c1b4:	4b90      	ldr	r3, [pc, #576]	; (800c3f8 <tcp_input+0x72c>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c1ba:	4b90      	ldr	r3, [pc, #576]	; (800c3fc <tcp_input+0x730>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c1c0:	4b8f      	ldr	r3, [pc, #572]	; (800c400 <tcp_input+0x734>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c1c6:	4b8f      	ldr	r3, [pc, #572]	; (800c404 <tcp_input+0x738>)
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	f003 0308 	and.w	r3, r3, #8
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d006      	beq.n	800c1e0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	7b5b      	ldrb	r3, [r3, #13]
 800c1d6:	f043 0301 	orr.w	r3, r3, #1
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d017      	beq.n	800c218 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c1e8:	69f8      	ldr	r0, [r7, #28]
 800c1ea:	f7ff f929 	bl	800b440 <tcp_process_refused_data>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f113 0f0d 	cmn.w	r3, #13
 800c1f4:	d007      	beq.n	800c206 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00c      	beq.n	800c218 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c1fe:	4b82      	ldr	r3, [pc, #520]	; (800c408 <tcp_input+0x73c>)
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d008      	beq.n	800c218 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f040 80e3 	bne.w	800c3d6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c210:	69f8      	ldr	r0, [r7, #28]
 800c212:	f003 f9ad 	bl	800f570 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c216:	e0de      	b.n	800c3d6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c218:	4a7c      	ldr	r2, [pc, #496]	; (800c40c <tcp_input+0x740>)
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c21e:	69f8      	ldr	r0, [r7, #28]
 800c220:	f000 fb18 	bl	800c854 <tcp_process>
 800c224:	4603      	mov	r3, r0
 800c226:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c228:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c22c:	f113 0f0d 	cmn.w	r3, #13
 800c230:	f000 80d3 	beq.w	800c3da <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c234:	4b71      	ldr	r3, [pc, #452]	; (800c3fc <tcp_input+0x730>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	f003 0308 	and.w	r3, r3, #8
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d015      	beq.n	800c26c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c246:	2b00      	cmp	r3, #0
 800c248:	d008      	beq.n	800c25c <tcp_input+0x590>
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	6912      	ldr	r2, [r2, #16]
 800c254:	f06f 010d 	mvn.w	r1, #13
 800c258:	4610      	mov	r0, r2
 800c25a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c25c:	69f9      	ldr	r1, [r7, #28]
 800c25e:	486c      	ldr	r0, [pc, #432]	; (800c410 <tcp_input+0x744>)
 800c260:	f7ff fbbc 	bl	800b9dc <tcp_pcb_remove>
        tcp_free(pcb);
 800c264:	69f8      	ldr	r0, [r7, #28]
 800c266:	f7fe f9a9 	bl	800a5bc <tcp_free>
 800c26a:	e0da      	b.n	800c422 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c270:	4b63      	ldr	r3, [pc, #396]	; (800c400 <tcp_input+0x734>)
 800c272:	881b      	ldrh	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01d      	beq.n	800c2b4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c278:	4b61      	ldr	r3, [pc, #388]	; (800c400 <tcp_input+0x734>)
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00a      	beq.n	800c29e <tcp_input+0x5d2>
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c28e:	69fa      	ldr	r2, [r7, #28]
 800c290:	6910      	ldr	r0, [r2, #16]
 800c292:	89fa      	ldrh	r2, [r7, #14]
 800c294:	69f9      	ldr	r1, [r7, #28]
 800c296:	4798      	blx	r3
 800c298:	4603      	mov	r3, r0
 800c29a:	74fb      	strb	r3, [r7, #19]
 800c29c:	e001      	b.n	800c2a2 <tcp_input+0x5d6>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c2a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2a6:	f113 0f0d 	cmn.w	r3, #13
 800c2aa:	f000 8098 	beq.w	800c3de <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c2ae:	4b54      	ldr	r3, [pc, #336]	; (800c400 <tcp_input+0x734>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c2b4:	69f8      	ldr	r0, [r7, #28]
 800c2b6:	f000 f915 	bl	800c4e4 <tcp_input_delayed_close>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 8090 	bne.w	800c3e2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c2c2:	4b4d      	ldr	r3, [pc, #308]	; (800c3f8 <tcp_input+0x72c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d041      	beq.n	800c34e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d006      	beq.n	800c2e0 <tcp_input+0x614>
 800c2d2:	4b50      	ldr	r3, [pc, #320]	; (800c414 <tcp_input+0x748>)
 800c2d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c2d8:	494f      	ldr	r1, [pc, #316]	; (800c418 <tcp_input+0x74c>)
 800c2da:	4850      	ldr	r0, [pc, #320]	; (800c41c <tcp_input+0x750>)
 800c2dc:	f006 fe1e 	bl	8012f1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	8b5b      	ldrh	r3, [r3, #26]
 800c2e4:	f003 0310 	and.w	r3, r3, #16
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d008      	beq.n	800c2fe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c2ec:	4b42      	ldr	r3, [pc, #264]	; (800c3f8 <tcp_input+0x72c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fd fea7 	bl	800a044 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c2f6:	69f8      	ldr	r0, [r7, #28]
 800c2f8:	f7fe fc48 	bl	800ab8c <tcp_abort>
            goto aborted;
 800c2fc:	e091      	b.n	800c422 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00c      	beq.n	800c322 <tcp_input+0x656>
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	6918      	ldr	r0, [r3, #16]
 800c312:	4b39      	ldr	r3, [pc, #228]	; (800c3f8 <tcp_input+0x72c>)
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	69f9      	ldr	r1, [r7, #28]
 800c31a:	47a0      	blx	r4
 800c31c:	4603      	mov	r3, r0
 800c31e:	74fb      	strb	r3, [r7, #19]
 800c320:	e008      	b.n	800c334 <tcp_input+0x668>
 800c322:	4b35      	ldr	r3, [pc, #212]	; (800c3f8 <tcp_input+0x72c>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	2300      	movs	r3, #0
 800c328:	69f9      	ldr	r1, [r7, #28]
 800c32a:	2000      	movs	r0, #0
 800c32c:	f7ff f95e 	bl	800b5ec <tcp_recv_null>
 800c330:	4603      	mov	r3, r0
 800c332:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c338:	f113 0f0d 	cmn.w	r3, #13
 800c33c:	d053      	beq.n	800c3e6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c33e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <tcp_input+0x72c>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c34e:	4b2b      	ldr	r3, [pc, #172]	; (800c3fc <tcp_input+0x730>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	2b00      	cmp	r3, #0
 800c358:	d030      	beq.n	800c3bc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c366:	7b5a      	ldrb	r2, [r3, #13]
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c36c:	f042 0220 	orr.w	r2, r2, #32
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	735a      	strb	r2, [r3, #13]
 800c374:	e022      	b.n	800c3bc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c37a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c37e:	d005      	beq.n	800c38c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c384:	3301      	adds	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <tcp_input+0x6e2>
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	6918      	ldr	r0, [r3, #16]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	69f9      	ldr	r1, [r7, #28]
 800c3a6:	47a0      	blx	r4
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	74fb      	strb	r3, [r7, #19]
 800c3ac:	e001      	b.n	800c3b2 <tcp_input+0x6e6>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c3b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3b6:	f113 0f0d 	cmn.w	r3, #13
 800c3ba:	d016      	beq.n	800c3ea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c3bc:	4b13      	ldr	r3, [pc, #76]	; (800c40c <tcp_input+0x740>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c3c2:	69f8      	ldr	r0, [r7, #28]
 800c3c4:	f000 f88e 	bl	800c4e4 <tcp_input_delayed_close>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d128      	bne.n	800c420 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c3ce:	69f8      	ldr	r0, [r7, #28]
 800c3d0:	f002 fac8 	bl	800e964 <tcp_output>
 800c3d4:	e025      	b.n	800c422 <tcp_input+0x756>
        goto aborted;
 800c3d6:	bf00      	nop
 800c3d8:	e023      	b.n	800c422 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c3da:	bf00      	nop
 800c3dc:	e021      	b.n	800c422 <tcp_input+0x756>
              goto aborted;
 800c3de:	bf00      	nop
 800c3e0:	e01f      	b.n	800c422 <tcp_input+0x756>
          goto aborted;
 800c3e2:	bf00      	nop
 800c3e4:	e01d      	b.n	800c422 <tcp_input+0x756>
            goto aborted;
 800c3e6:	bf00      	nop
 800c3e8:	e01b      	b.n	800c422 <tcp_input+0x756>
              goto aborted;
 800c3ea:	bf00      	nop
 800c3ec:	e019      	b.n	800c422 <tcp_input+0x756>
 800c3ee:	bf00      	nop
 800c3f0:	24007338 	.word	0x24007338
 800c3f4:	24007348 	.word	0x24007348
 800c3f8:	24007368 	.word	0x24007368
 800c3fc:	24007365 	.word	0x24007365
 800c400:	24007360 	.word	0x24007360
 800c404:	24007364 	.word	0x24007364
 800c408:	24007362 	.word	0x24007362
 800c40c:	2400736c 	.word	0x2400736c
 800c410:	2400732c 	.word	0x2400732c
 800c414:	08015118 	.word	0x08015118
 800c418:	080152cc 	.word	0x080152cc
 800c41c:	08015164 	.word	0x08015164
          goto aborted;
 800c420:	bf00      	nop
    tcp_input_pcb = NULL;
 800c422:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <tcp_input+0x7f4>)
 800c424:	2200      	movs	r2, #0
 800c426:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c428:	4b26      	ldr	r3, [pc, #152]	; (800c4c4 <tcp_input+0x7f8>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c42e:	4b26      	ldr	r3, [pc, #152]	; (800c4c8 <tcp_input+0x7fc>)
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d03f      	beq.n	800c4b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c436:	4b24      	ldr	r3, [pc, #144]	; (800c4c8 <tcp_input+0x7fc>)
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fd fe02 	bl	800a044 <pbuf_free>
      inseg.p = NULL;
 800c440:	4b21      	ldr	r3, [pc, #132]	; (800c4c8 <tcp_input+0x7fc>)
 800c442:	2200      	movs	r2, #0
 800c444:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c446:	e036      	b.n	800c4b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c448:	4b20      	ldr	r3, [pc, #128]	; (800c4cc <tcp_input+0x800>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	899b      	ldrh	r3, [r3, #12]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	4618      	mov	r0, r3
 800c452:	f7fc f94d 	bl	80086f0 <lwip_htons>
 800c456:	4603      	mov	r3, r0
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d118      	bne.n	800c494 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <tcp_input+0x804>)
 800c464:	6819      	ldr	r1, [r3, #0]
 800c466:	4b1b      	ldr	r3, [pc, #108]	; (800c4d4 <tcp_input+0x808>)
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <tcp_input+0x80c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c472:	4b16      	ldr	r3, [pc, #88]	; (800c4cc <tcp_input+0x800>)
 800c474:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c476:	885b      	ldrh	r3, [r3, #2]
 800c478:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c47a:	4a14      	ldr	r2, [pc, #80]	; (800c4cc <tcp_input+0x800>)
 800c47c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c47e:	8812      	ldrh	r2, [r2, #0]
 800c480:	b292      	uxth	r2, r2
 800c482:	9202      	str	r2, [sp, #8]
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	4b15      	ldr	r3, [pc, #84]	; (800c4dc <tcp_input+0x810>)
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <tcp_input+0x814>)
 800c48c:	4602      	mov	r2, r0
 800c48e:	2000      	movs	r0, #0
 800c490:	f003 f81c 	bl	800f4cc <tcp_rst>
    pbuf_free(p);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7fd fdd5 	bl	800a044 <pbuf_free>
  return;
 800c49a:	e00c      	b.n	800c4b6 <tcp_input+0x7ea>
    goto dropped;
 800c49c:	bf00      	nop
 800c49e:	e006      	b.n	800c4ae <tcp_input+0x7e2>
    goto dropped;
 800c4a0:	bf00      	nop
 800c4a2:	e004      	b.n	800c4ae <tcp_input+0x7e2>
    goto dropped;
 800c4a4:	bf00      	nop
 800c4a6:	e002      	b.n	800c4ae <tcp_input+0x7e2>
      goto dropped;
 800c4a8:	bf00      	nop
 800c4aa:	e000      	b.n	800c4ae <tcp_input+0x7e2>
      goto dropped;
 800c4ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7fd fdc8 	bl	800a044 <pbuf_free>
 800c4b4:	e000      	b.n	800c4b8 <tcp_input+0x7ec>
  return;
 800c4b6:	bf00      	nop
}
 800c4b8:	3724      	adds	r7, #36	; 0x24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd90      	pop	{r4, r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	2400736c 	.word	0x2400736c
 800c4c4:	24007368 	.word	0x24007368
 800c4c8:	24007338 	.word	0x24007338
 800c4cc:	24007348 	.word	0x24007348
 800c4d0:	2400735c 	.word	0x2400735c
 800c4d4:	24007362 	.word	0x24007362
 800c4d8:	24007358 	.word	0x24007358
 800c4dc:	24004230 	.word	0x24004230
 800c4e0:	24004234 	.word	0x24004234

0800c4e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_input_delayed_close+0x1c>
 800c4f2:	4b17      	ldr	r3, [pc, #92]	; (800c550 <tcp_input_delayed_close+0x6c>)
 800c4f4:	f240 225a 	movw	r2, #602	; 0x25a
 800c4f8:	4916      	ldr	r1, [pc, #88]	; (800c554 <tcp_input_delayed_close+0x70>)
 800c4fa:	4817      	ldr	r0, [pc, #92]	; (800c558 <tcp_input_delayed_close+0x74>)
 800c4fc:	f006 fd0e 	bl	8012f1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c500:	4b16      	ldr	r3, [pc, #88]	; (800c55c <tcp_input_delayed_close+0x78>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d01c      	beq.n	800c546 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	8b5b      	ldrh	r3, [r3, #26]
 800c510:	f003 0310 	and.w	r3, r3, #16
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10d      	bne.n	800c534 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d008      	beq.n	800c534 <tcp_input_delayed_close+0x50>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	6912      	ldr	r2, [r2, #16]
 800c52c:	f06f 010e 	mvn.w	r1, #14
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	480a      	ldr	r0, [pc, #40]	; (800c560 <tcp_input_delayed_close+0x7c>)
 800c538:	f7ff fa50 	bl	800b9dc <tcp_pcb_remove>
    tcp_free(pcb);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7fe f83d 	bl	800a5bc <tcp_free>
    return 1;
 800c542:	2301      	movs	r3, #1
 800c544:	e000      	b.n	800c548 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	08015118 	.word	0x08015118
 800c554:	080152e8 	.word	0x080152e8
 800c558:	08015164 	.word	0x08015164
 800c55c:	24007365 	.word	0x24007365
 800c560:	2400732c 	.word	0x2400732c

0800c564 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b08b      	sub	sp, #44	; 0x2c
 800c568:	af04      	add	r7, sp, #16
 800c56a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c56c:	4b6f      	ldr	r3, [pc, #444]	; (800c72c <tcp_listen_input+0x1c8>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	f003 0304 	and.w	r3, r3, #4
 800c574:	2b00      	cmp	r3, #0
 800c576:	f040 80d2 	bne.w	800c71e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <tcp_listen_input+0x2a>
 800c580:	4b6b      	ldr	r3, [pc, #428]	; (800c730 <tcp_listen_input+0x1cc>)
 800c582:	f240 2281 	movw	r2, #641	; 0x281
 800c586:	496b      	ldr	r1, [pc, #428]	; (800c734 <tcp_listen_input+0x1d0>)
 800c588:	486b      	ldr	r0, [pc, #428]	; (800c738 <tcp_listen_input+0x1d4>)
 800c58a:	f006 fcc7 	bl	8012f1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c58e:	4b67      	ldr	r3, [pc, #412]	; (800c72c <tcp_listen_input+0x1c8>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	f003 0310 	and.w	r3, r3, #16
 800c596:	2b00      	cmp	r3, #0
 800c598:	d019      	beq.n	800c5ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c59a:	4b68      	ldr	r3, [pc, #416]	; (800c73c <tcp_listen_input+0x1d8>)
 800c59c:	6819      	ldr	r1, [r3, #0]
 800c59e:	4b68      	ldr	r3, [pc, #416]	; (800c740 <tcp_listen_input+0x1dc>)
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	4b67      	ldr	r3, [pc, #412]	; (800c744 <tcp_listen_input+0x1e0>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5aa:	4b67      	ldr	r3, [pc, #412]	; (800c748 <tcp_listen_input+0x1e4>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5ae:	885b      	ldrh	r3, [r3, #2]
 800c5b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5b2:	4a65      	ldr	r2, [pc, #404]	; (800c748 <tcp_listen_input+0x1e4>)
 800c5b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5b6:	8812      	ldrh	r2, [r2, #0]
 800c5b8:	b292      	uxth	r2, r2
 800c5ba:	9202      	str	r2, [sp, #8]
 800c5bc:	9301      	str	r3, [sp, #4]
 800c5be:	4b63      	ldr	r3, [pc, #396]	; (800c74c <tcp_listen_input+0x1e8>)
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4b63      	ldr	r3, [pc, #396]	; (800c750 <tcp_listen_input+0x1ec>)
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f002 ff80 	bl	800f4cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c5cc:	e0a9      	b.n	800c722 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c5ce:	4b57      	ldr	r3, [pc, #348]	; (800c72c <tcp_listen_input+0x1c8>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f000 80a3 	beq.w	800c722 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7d5b      	ldrb	r3, [r3, #21]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7ff f927 	bl	800b834 <tcp_alloc>
 800c5e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d111      	bne.n	800c612 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00a      	beq.n	800c60c <tcp_listen_input+0xa8>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6910      	ldr	r0, [r2, #16]
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	2100      	movs	r1, #0
 800c604:	4798      	blx	r3
 800c606:	4603      	mov	r3, r0
 800c608:	73bb      	strb	r3, [r7, #14]
      return;
 800c60a:	e08b      	b.n	800c724 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c60c:	23f0      	movs	r3, #240	; 0xf0
 800c60e:	73bb      	strb	r3, [r7, #14]
      return;
 800c610:	e088      	b.n	800c724 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c612:	4b50      	ldr	r3, [pc, #320]	; (800c754 <tcp_listen_input+0x1f0>)
 800c614:	695a      	ldr	r2, [r3, #20]
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c61a:	4b4e      	ldr	r3, [pc, #312]	; (800c754 <tcp_listen_input+0x1f0>)
 800c61c:	691a      	ldr	r2, [r3, #16]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8ada      	ldrh	r2, [r3, #22]
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c62a:	4b47      	ldr	r3, [pc, #284]	; (800c748 <tcp_listen_input+0x1e4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	b29a      	uxth	r2, r3
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2203      	movs	r2, #3
 800c63a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c63c:	4b41      	ldr	r3, [pc, #260]	; (800c744 <tcp_listen_input+0x1e0>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c64e:	6978      	ldr	r0, [r7, #20]
 800c650:	f7ff fa58 	bl	800bb04 <tcp_next_iss>
 800c654:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c66e:	4b35      	ldr	r3, [pc, #212]	; (800c744 <tcp_listen_input+0x1e0>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	691a      	ldr	r2, [r3, #16]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7a5b      	ldrb	r3, [r3, #9]
 800c68a:	f003 030c 	and.w	r3, r3, #12
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	7a1a      	ldrb	r2, [r3, #8]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c69c:	4b2e      	ldr	r3, [pc, #184]	; (800c758 <tcp_listen_input+0x1f4>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	60da      	str	r2, [r3, #12]
 800c6a4:	4a2c      	ldr	r2, [pc, #176]	; (800c758 <tcp_listen_input+0x1f4>)
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	f003 f8d1 	bl	800f850 <tcp_timer_needed>
 800c6ae:	4b2b      	ldr	r3, [pc, #172]	; (800c75c <tcp_listen_input+0x1f8>)
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c6b4:	6978      	ldr	r0, [r7, #20]
 800c6b6:	f001 fd8f 	bl	800e1d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c6ba:	4b23      	ldr	r3, [pc, #140]	; (800c748 <tcp_listen_input+0x1e4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	89db      	ldrh	r3, [r3, #14]
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f005 f81b 	bl	8011718 <ip4_route>
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f7ff fa30 	bl	800bb50 <tcp_eff_send_mss_netif>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c6f8:	2112      	movs	r1, #18
 800c6fa:	6978      	ldr	r0, [r7, #20]
 800c6fc:	f002 f844 	bl	800e788 <tcp_enqueue_flags>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d004      	beq.n	800c716 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c70c:	2100      	movs	r1, #0
 800c70e:	6978      	ldr	r0, [r7, #20]
 800c710:	f7fe f97e 	bl	800aa10 <tcp_abandon>
      return;
 800c714:	e006      	b.n	800c724 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c716:	6978      	ldr	r0, [r7, #20]
 800c718:	f002 f924 	bl	800e964 <tcp_output>
  return;
 800c71c:	e001      	b.n	800c722 <tcp_listen_input+0x1be>
    return;
 800c71e:	bf00      	nop
 800c720:	e000      	b.n	800c724 <tcp_listen_input+0x1c0>
  return;
 800c722:	bf00      	nop
}
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	bd90      	pop	{r4, r7, pc}
 800c72a:	bf00      	nop
 800c72c:	24007364 	.word	0x24007364
 800c730:	08015118 	.word	0x08015118
 800c734:	08015310 	.word	0x08015310
 800c738:	08015164 	.word	0x08015164
 800c73c:	2400735c 	.word	0x2400735c
 800c740:	24007362 	.word	0x24007362
 800c744:	24007358 	.word	0x24007358
 800c748:	24007348 	.word	0x24007348
 800c74c:	24004230 	.word	0x24004230
 800c750:	24004234 	.word	0x24004234
 800c754:	24004220 	.word	0x24004220
 800c758:	2400732c 	.word	0x2400732c
 800c75c:	24007334 	.word	0x24007334

0800c760 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af04      	add	r7, sp, #16
 800c766:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c768:	4b2f      	ldr	r3, [pc, #188]	; (800c828 <tcp_timewait_input+0xc8>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d153      	bne.n	800c81c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <tcp_timewait_input+0x28>
 800c77a:	4b2c      	ldr	r3, [pc, #176]	; (800c82c <tcp_timewait_input+0xcc>)
 800c77c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c780:	492b      	ldr	r1, [pc, #172]	; (800c830 <tcp_timewait_input+0xd0>)
 800c782:	482c      	ldr	r0, [pc, #176]	; (800c834 <tcp_timewait_input+0xd4>)
 800c784:	f006 fbca 	bl	8012f1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c788:	4b27      	ldr	r3, [pc, #156]	; (800c828 <tcp_timewait_input+0xc8>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	f003 0302 	and.w	r3, r3, #2
 800c790:	2b00      	cmp	r3, #0
 800c792:	d02a      	beq.n	800c7ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c794:	4b28      	ldr	r3, [pc, #160]	; (800c838 <tcp_timewait_input+0xd8>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	db2d      	blt.n	800c7fe <tcp_timewait_input+0x9e>
 800c7a2:	4b25      	ldr	r3, [pc, #148]	; (800c838 <tcp_timewait_input+0xd8>)
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c7ae:	440b      	add	r3, r1
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	dc23      	bgt.n	800c7fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7b6:	4b21      	ldr	r3, [pc, #132]	; (800c83c <tcp_timewait_input+0xdc>)
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	4b21      	ldr	r3, [pc, #132]	; (800c840 <tcp_timewait_input+0xe0>)
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	4b1d      	ldr	r3, [pc, #116]	; (800c838 <tcp_timewait_input+0xd8>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7c6:	4b1f      	ldr	r3, [pc, #124]	; (800c844 <tcp_timewait_input+0xe4>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7ce:	4a1d      	ldr	r2, [pc, #116]	; (800c844 <tcp_timewait_input+0xe4>)
 800c7d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7d2:	8812      	ldrh	r2, [r2, #0]
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	9202      	str	r2, [sp, #8]
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	4b1b      	ldr	r3, [pc, #108]	; (800c848 <tcp_timewait_input+0xe8>)
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	4b1b      	ldr	r3, [pc, #108]	; (800c84c <tcp_timewait_input+0xec>)
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f002 fe72 	bl	800f4cc <tcp_rst>
      return;
 800c7e8:	e01b      	b.n	800c822 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <tcp_timewait_input+0xc8>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c7f6:	4b16      	ldr	r3, [pc, #88]	; (800c850 <tcp_timewait_input+0xf0>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c7fe:	4b10      	ldr	r3, [pc, #64]	; (800c840 <tcp_timewait_input+0xe0>)
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00c      	beq.n	800c820 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	8b5b      	ldrh	r3, [r3, #26]
 800c80a:	f043 0302 	orr.w	r3, r3, #2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f002 f8a5 	bl	800e964 <tcp_output>
  }
  return;
 800c81a:	e001      	b.n	800c820 <tcp_timewait_input+0xc0>
    return;
 800c81c:	bf00      	nop
 800c81e:	e000      	b.n	800c822 <tcp_timewait_input+0xc2>
  return;
 800c820:	bf00      	nop
}
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	24007364 	.word	0x24007364
 800c82c:	08015118 	.word	0x08015118
 800c830:	08015330 	.word	0x08015330
 800c834:	08015164 	.word	0x08015164
 800c838:	24007358 	.word	0x24007358
 800c83c:	2400735c 	.word	0x2400735c
 800c840:	24007362 	.word	0x24007362
 800c844:	24007348 	.word	0x24007348
 800c848:	24004230 	.word	0x24004230
 800c84c:	24004234 	.word	0x24004234
 800c850:	24007320 	.word	0x24007320

0800c854 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b08d      	sub	sp, #52	; 0x34
 800c858:	af04      	add	r7, sp, #16
 800c85a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <tcp_process+0x24>
 800c86a:	4b9d      	ldr	r3, [pc, #628]	; (800cae0 <tcp_process+0x28c>)
 800c86c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c870:	499c      	ldr	r1, [pc, #624]	; (800cae4 <tcp_process+0x290>)
 800c872:	489d      	ldr	r0, [pc, #628]	; (800cae8 <tcp_process+0x294>)
 800c874:	f006 fb52 	bl	8012f1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c878:	4b9c      	ldr	r3, [pc, #624]	; (800caec <tcp_process+0x298>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d04e      	beq.n	800c922 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	7d1b      	ldrb	r3, [r3, #20]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d108      	bne.n	800c89e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c890:	4b97      	ldr	r3, [pc, #604]	; (800caf0 <tcp_process+0x29c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d123      	bne.n	800c8e0 <tcp_process+0x8c>
        acceptable = 1;
 800c898:	2301      	movs	r3, #1
 800c89a:	76fb      	strb	r3, [r7, #27]
 800c89c:	e020      	b.n	800c8e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8a2:	4b94      	ldr	r3, [pc, #592]	; (800caf4 <tcp_process+0x2a0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d102      	bne.n	800c8b0 <tcp_process+0x5c>
        acceptable = 1;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	76fb      	strb	r3, [r7, #27]
 800c8ae:	e017      	b.n	800c8e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8b0:	4b90      	ldr	r3, [pc, #576]	; (800caf4 <tcp_process+0x2a0>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	db10      	blt.n	800c8e0 <tcp_process+0x8c>
 800c8be:	4b8d      	ldr	r3, [pc, #564]	; (800caf4 <tcp_process+0x2a0>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8ca:	440b      	add	r3, r1
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dc06      	bgt.n	800c8e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	8b5b      	ldrh	r3, [r3, #26]
 800c8d6:	f043 0302 	orr.w	r3, r3, #2
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c8e0:	7efb      	ldrb	r3, [r7, #27]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01b      	beq.n	800c91e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_process+0xa8>
 800c8ee:	4b7c      	ldr	r3, [pc, #496]	; (800cae0 <tcp_process+0x28c>)
 800c8f0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c8f4:	4980      	ldr	r1, [pc, #512]	; (800caf8 <tcp_process+0x2a4>)
 800c8f6:	487c      	ldr	r0, [pc, #496]	; (800cae8 <tcp_process+0x294>)
 800c8f8:	f006 fb10 	bl	8012f1c <iprintf>
      recv_flags |= TF_RESET;
 800c8fc:	4b7f      	ldr	r3, [pc, #508]	; (800cafc <tcp_process+0x2a8>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	f043 0308 	orr.w	r3, r3, #8
 800c904:	b2da      	uxtb	r2, r3
 800c906:	4b7d      	ldr	r3, [pc, #500]	; (800cafc <tcp_process+0x2a8>)
 800c908:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	8b5b      	ldrh	r3, [r3, #26]
 800c90e:	f023 0301 	bic.w	r3, r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c918:	f06f 030d 	mvn.w	r3, #13
 800c91c:	e37a      	b.n	800d014 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e378      	b.n	800d014 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c922:	4b72      	ldr	r3, [pc, #456]	; (800caec <tcp_process+0x298>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d010      	beq.n	800c950 <tcp_process+0xfc>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7d1b      	ldrb	r3, [r3, #20]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d00c      	beq.n	800c950 <tcp_process+0xfc>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7d1b      	ldrb	r3, [r3, #20]
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d008      	beq.n	800c950 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	8b5b      	ldrh	r3, [r3, #26]
 800c942:	f043 0302 	orr.w	r3, r3, #2
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	e361      	b.n	800d014 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8b5b      	ldrh	r3, [r3, #26]
 800c954:	f003 0310 	and.w	r3, r3, #16
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c95c:	4b68      	ldr	r3, [pc, #416]	; (800cb00 <tcp_process+0x2ac>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 fc2f 	bl	800e1d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	7d1b      	ldrb	r3, [r3, #20]
 800c97e:	3b02      	subs	r3, #2
 800c980:	2b07      	cmp	r3, #7
 800c982:	f200 8337 	bhi.w	800cff4 <tcp_process+0x7a0>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <tcp_process+0x138>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c9ad 	.word	0x0800c9ad
 800c990:	0800cbdd 	.word	0x0800cbdd
 800c994:	0800cd55 	.word	0x0800cd55
 800c998:	0800cd7f 	.word	0x0800cd7f
 800c99c:	0800cea3 	.word	0x0800cea3
 800c9a0:	0800cd55 	.word	0x0800cd55
 800c9a4:	0800cf2f 	.word	0x0800cf2f
 800c9a8:	0800cfbf 	.word	0x0800cfbf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c9ac:	4b4f      	ldr	r3, [pc, #316]	; (800caec <tcp_process+0x298>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	f003 0310 	and.w	r3, r3, #16
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 80e4 	beq.w	800cb82 <tcp_process+0x32e>
 800c9ba:	4b4c      	ldr	r3, [pc, #304]	; (800caec <tcp_process+0x298>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f000 80dd 	beq.w	800cb82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	4b48      	ldr	r3, [pc, #288]	; (800caf0 <tcp_process+0x29c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	f040 80d5 	bne.w	800cb82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c9d8:	4b46      	ldr	r3, [pc, #280]	; (800caf4 <tcp_process+0x2a0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c9ea:	4b41      	ldr	r3, [pc, #260]	; (800caf0 <tcp_process+0x29c>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c9f2:	4b44      	ldr	r3, [pc, #272]	; (800cb04 <tcp_process+0x2b0>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	89db      	ldrh	r3, [r3, #14]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ca0c:	4b39      	ldr	r3, [pc, #228]	; (800caf4 <tcp_process+0x2a0>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	1e5a      	subs	r2, r3, #1
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2204      	movs	r2, #4
 800ca1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f004 fe77 	bl	8011718 <ip4_route>
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	461a      	mov	r2, r3
 800ca32:	4620      	mov	r0, r4
 800ca34:	f7ff f88c 	bl	800bb50 <tcp_eff_send_mss_netif>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca44:	009a      	lsls	r2, r3, #2
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ca50:	428b      	cmp	r3, r1
 800ca52:	bf38      	it	cc
 800ca54:	460b      	movcc	r3, r1
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d204      	bcs.n	800ca64 <tcp_process+0x210>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	e00d      	b.n	800ca80 <tcp_process+0x22c>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d904      	bls.n	800ca7c <tcp_process+0x228>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	e001      	b.n	800ca80 <tcp_process+0x22c>
 800ca7c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <tcp_process+0x24a>
 800ca90:	4b13      	ldr	r3, [pc, #76]	; (800cae0 <tcp_process+0x28c>)
 800ca92:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ca96:	491c      	ldr	r1, [pc, #112]	; (800cb08 <tcp_process+0x2b4>)
 800ca98:	4813      	ldr	r0, [pc, #76]	; (800cae8 <tcp_process+0x294>)
 800ca9a:	f006 fa3f 	bl	8012f1c <iprintf>
        --pcb->snd_queuelen;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800caa4:	3b01      	subs	r3, #1
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d12a      	bne.n	800cb10 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cabe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d106      	bne.n	800cad4 <tcp_process+0x280>
 800cac6:	4b06      	ldr	r3, [pc, #24]	; (800cae0 <tcp_process+0x28c>)
 800cac8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cacc:	490f      	ldr	r1, [pc, #60]	; (800cb0c <tcp_process+0x2b8>)
 800cace:	4806      	ldr	r0, [pc, #24]	; (800cae8 <tcp_process+0x294>)
 800cad0:	f006 fa24 	bl	8012f1c <iprintf>
          pcb->unsent = rseg->next;
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	66da      	str	r2, [r3, #108]	; 0x6c
 800cadc:	e01c      	b.n	800cb18 <tcp_process+0x2c4>
 800cade:	bf00      	nop
 800cae0:	08015118 	.word	0x08015118
 800cae4:	08015350 	.word	0x08015350
 800cae8:	08015164 	.word	0x08015164
 800caec:	24007364 	.word	0x24007364
 800caf0:	2400735c 	.word	0x2400735c
 800caf4:	24007358 	.word	0x24007358
 800caf8:	0801536c 	.word	0x0801536c
 800cafc:	24007365 	.word	0x24007365
 800cb00:	24007320 	.word	0x24007320
 800cb04:	24007348 	.word	0x24007348
 800cb08:	0801538c 	.word	0x0801538c
 800cb0c:	080153a4 	.word	0x080153a4
        } else {
          pcb->unacked = rseg->next;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cb18:	69f8      	ldr	r0, [r7, #28]
 800cb1a:	f7fe fd22 	bl	800b562 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d104      	bne.n	800cb30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb2c:	861a      	strh	r2, [r3, #48]	; 0x30
 800cb2e:	e006      	b.n	800cb3e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00a      	beq.n	800cb5e <tcp_process+0x30a>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	6910      	ldr	r0, [r2, #16]
 800cb52:	2200      	movs	r2, #0
 800cb54:	6879      	ldr	r1, [r7, #4]
 800cb56:	4798      	blx	r3
 800cb58:	4603      	mov	r3, r0
 800cb5a:	76bb      	strb	r3, [r7, #26]
 800cb5c:	e001      	b.n	800cb62 <tcp_process+0x30e>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cb62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cb66:	f113 0f0d 	cmn.w	r3, #13
 800cb6a:	d102      	bne.n	800cb72 <tcp_process+0x31e>
          return ERR_ABRT;
 800cb6c:	f06f 030c 	mvn.w	r3, #12
 800cb70:	e250      	b.n	800d014 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8b5b      	ldrh	r3, [r3, #26]
 800cb76:	f043 0302 	orr.w	r3, r3, #2
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cb80:	e23a      	b.n	800cff8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cb82:	4b98      	ldr	r3, [pc, #608]	; (800cde4 <tcp_process+0x590>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	f003 0310 	and.w	r3, r3, #16
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 8234 	beq.w	800cff8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb90:	4b95      	ldr	r3, [pc, #596]	; (800cde8 <tcp_process+0x594>)
 800cb92:	6819      	ldr	r1, [r3, #0]
 800cb94:	4b95      	ldr	r3, [pc, #596]	; (800cdec <tcp_process+0x598>)
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4b95      	ldr	r3, [pc, #596]	; (800cdf0 <tcp_process+0x59c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cba0:	4b94      	ldr	r3, [pc, #592]	; (800cdf4 <tcp_process+0x5a0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cba4:	885b      	ldrh	r3, [r3, #2]
 800cba6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cba8:	4a92      	ldr	r2, [pc, #584]	; (800cdf4 <tcp_process+0x5a0>)
 800cbaa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbac:	8812      	ldrh	r2, [r2, #0]
 800cbae:	b292      	uxth	r2, r2
 800cbb0:	9202      	str	r2, [sp, #8]
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	4b90      	ldr	r3, [pc, #576]	; (800cdf8 <tcp_process+0x5a4>)
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	4b90      	ldr	r3, [pc, #576]	; (800cdfc <tcp_process+0x5a8>)
 800cbba:	4602      	mov	r2, r0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f002 fc85 	bl	800f4cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbc8:	2b05      	cmp	r3, #5
 800cbca:	f200 8215 	bhi.w	800cff8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f002 fa51 	bl	800f07c <tcp_rexmit_rto>
      break;
 800cbda:	e20d      	b.n	800cff8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cbdc:	4b81      	ldr	r3, [pc, #516]	; (800cde4 <tcp_process+0x590>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	f003 0310 	and.w	r3, r3, #16
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 80a1 	beq.w	800cd2c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cbea:	4b7f      	ldr	r3, [pc, #508]	; (800cde8 <tcp_process+0x594>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	db7e      	blt.n	800ccf8 <tcp_process+0x4a4>
 800cbfa:	4b7b      	ldr	r3, [pc, #492]	; (800cde8 <tcp_process+0x594>)
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc77      	bgt.n	800ccf8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2204      	movs	r2, #4
 800cc0c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d102      	bne.n	800cc1c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cc16:	23fa      	movs	r3, #250	; 0xfa
 800cc18:	76bb      	strb	r3, [r7, #26]
 800cc1a:	e01d      	b.n	800cc58 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <tcp_process+0x3e0>
 800cc26:	4b76      	ldr	r3, [pc, #472]	; (800ce00 <tcp_process+0x5ac>)
 800cc28:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800cc2c:	4975      	ldr	r1, [pc, #468]	; (800ce04 <tcp_process+0x5b0>)
 800cc2e:	4876      	ldr	r0, [pc, #472]	; (800ce08 <tcp_process+0x5b4>)
 800cc30:	f006 f974 	bl	8012f1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00a      	beq.n	800cc54 <tcp_process+0x400>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	6910      	ldr	r0, [r2, #16]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	4798      	blx	r3
 800cc4e:	4603      	mov	r3, r0
 800cc50:	76bb      	strb	r3, [r7, #26]
 800cc52:	e001      	b.n	800cc58 <tcp_process+0x404>
 800cc54:	23f0      	movs	r3, #240	; 0xf0
 800cc56:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cc58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cc60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cc64:	f113 0f0d 	cmn.w	r3, #13
 800cc68:	d002      	beq.n	800cc70 <tcp_process+0x41c>
              tcp_abort(pcb);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7fd ff8e 	bl	800ab8c <tcp_abort>
            }
            return ERR_ABRT;
 800cc70:	f06f 030c 	mvn.w	r3, #12
 800cc74:	e1ce      	b.n	800d014 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fae0 	bl	800d23c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cc7c:	4b63      	ldr	r3, [pc, #396]	; (800ce0c <tcp_process+0x5b8>)
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <tcp_process+0x43c>
            recv_acked--;
 800cc84:	4b61      	ldr	r3, [pc, #388]	; (800ce0c <tcp_process+0x5b8>)
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	4b5f      	ldr	r3, [pc, #380]	; (800ce0c <tcp_process+0x5b8>)
 800cc8e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc94:	009a      	lsls	r2, r3, #2
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	f241 111c 	movw	r1, #4380	; 0x111c
 800cca0:	428b      	cmp	r3, r1
 800cca2:	bf38      	it	cc
 800cca4:	460b      	movcc	r3, r1
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d204      	bcs.n	800ccb4 <tcp_process+0x460>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	e00d      	b.n	800ccd0 <tcp_process+0x47c>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	f241 121c 	movw	r2, #4380	; 0x111c
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d904      	bls.n	800cccc <tcp_process+0x478>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	e001      	b.n	800ccd0 <tcp_process+0x47c>
 800cccc:	f241 131c 	movw	r3, #4380	; 0x111c
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ccd6:	4b4e      	ldr	r3, [pc, #312]	; (800ce10 <tcp_process+0x5bc>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d037      	beq.n	800cd52 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	8b5b      	ldrh	r3, [r3, #26]
 800cce6:	f043 0302 	orr.w	r3, r3, #2
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2207      	movs	r2, #7
 800ccf4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ccf6:	e02c      	b.n	800cd52 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccf8:	4b3b      	ldr	r3, [pc, #236]	; (800cde8 <tcp_process+0x594>)
 800ccfa:	6819      	ldr	r1, [r3, #0]
 800ccfc:	4b3b      	ldr	r3, [pc, #236]	; (800cdec <tcp_process+0x598>)
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b3b      	ldr	r3, [pc, #236]	; (800cdf0 <tcp_process+0x59c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd08:	4b3a      	ldr	r3, [pc, #232]	; (800cdf4 <tcp_process+0x5a0>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd0c:	885b      	ldrh	r3, [r3, #2]
 800cd0e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd10:	4a38      	ldr	r2, [pc, #224]	; (800cdf4 <tcp_process+0x5a0>)
 800cd12:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd14:	8812      	ldrh	r2, [r2, #0]
 800cd16:	b292      	uxth	r2, r2
 800cd18:	9202      	str	r2, [sp, #8]
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	4b36      	ldr	r3, [pc, #216]	; (800cdf8 <tcp_process+0x5a4>)
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4b36      	ldr	r3, [pc, #216]	; (800cdfc <tcp_process+0x5a8>)
 800cd22:	4602      	mov	r2, r0
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f002 fbd1 	bl	800f4cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cd2a:	e167      	b.n	800cffc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cd2c:	4b2d      	ldr	r3, [pc, #180]	; (800cde4 <tcp_process+0x590>)
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 8161 	beq.w	800cffc <tcp_process+0x7a8>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3e:	1e5a      	subs	r2, r3, #1
 800cd40:	4b2b      	ldr	r3, [pc, #172]	; (800cdf0 <tcp_process+0x59c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	f040 8159 	bne.w	800cffc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f002 f9b8 	bl	800f0c0 <tcp_rexmit>
      break;
 800cd50:	e154      	b.n	800cffc <tcp_process+0x7a8>
 800cd52:	e153      	b.n	800cffc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fa71 	bl	800d23c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cd5a:	4b2d      	ldr	r3, [pc, #180]	; (800ce10 <tcp_process+0x5bc>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 814c 	beq.w	800d000 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8b5b      	ldrh	r3, [r3, #26]
 800cd6c:	f043 0302 	orr.w	r3, r3, #2
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2207      	movs	r2, #7
 800cd7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd7c:	e140      	b.n	800d000 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa5c 	bl	800d23c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cd84:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <tcp_process+0x5bc>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d071      	beq.n	800ce74 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cd90:	4b14      	ldr	r3, [pc, #80]	; (800cde4 <tcp_process+0x590>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f003 0310 	and.w	r3, r3, #16
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d060      	beq.n	800ce5e <tcp_process+0x60a>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cda0:	4b11      	ldr	r3, [pc, #68]	; (800cde8 <tcp_process+0x594>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d15a      	bne.n	800ce5e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d156      	bne.n	800ce5e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	8b5b      	ldrh	r3, [r3, #26]
 800cdb4:	f043 0302 	orr.w	r3, r3, #2
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fe fdbc 	bl	800b93c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cdc4:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <tcp_process+0x5c0>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d105      	bne.n	800cdda <tcp_process+0x586>
 800cdce:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <tcp_process+0x5c0>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	4a0f      	ldr	r2, [pc, #60]	; (800ce14 <tcp_process+0x5c0>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	e02e      	b.n	800ce38 <tcp_process+0x5e4>
 800cdda:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <tcp_process+0x5c0>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	e027      	b.n	800ce32 <tcp_process+0x5de>
 800cde2:	bf00      	nop
 800cde4:	24007364 	.word	0x24007364
 800cde8:	2400735c 	.word	0x2400735c
 800cdec:	24007362 	.word	0x24007362
 800cdf0:	24007358 	.word	0x24007358
 800cdf4:	24007348 	.word	0x24007348
 800cdf8:	24004230 	.word	0x24004230
 800cdfc:	24004234 	.word	0x24004234
 800ce00:	08015118 	.word	0x08015118
 800ce04:	080153b8 	.word	0x080153b8
 800ce08:	08015164 	.word	0x08015164
 800ce0c:	24007360 	.word	0x24007360
 800ce10:	24007365 	.word	0x24007365
 800ce14:	2400732c 	.word	0x2400732c
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d104      	bne.n	800ce2c <tcp_process+0x5d8>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	60da      	str	r2, [r3, #12]
 800ce2a:	e005      	b.n	800ce38 <tcp_process+0x5e4>
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	617b      	str	r3, [r7, #20]
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1ef      	bne.n	800ce18 <tcp_process+0x5c4>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	60da      	str	r2, [r3, #12]
 800ce3e:	4b77      	ldr	r3, [pc, #476]	; (800d01c <tcp_process+0x7c8>)
 800ce40:	2201      	movs	r2, #1
 800ce42:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	220a      	movs	r2, #10
 800ce48:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ce4a:	4b75      	ldr	r3, [pc, #468]	; (800d020 <tcp_process+0x7cc>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	60da      	str	r2, [r3, #12]
 800ce52:	4a73      	ldr	r2, [pc, #460]	; (800d020 <tcp_process+0x7cc>)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	f002 fcfa 	bl	800f850 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ce5c:	e0d2      	b.n	800d004 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	8b5b      	ldrh	r3, [r3, #26]
 800ce62:	f043 0302 	orr.w	r3, r3, #2
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2208      	movs	r2, #8
 800ce70:	751a      	strb	r2, [r3, #20]
      break;
 800ce72:	e0c7      	b.n	800d004 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce74:	4b6b      	ldr	r3, [pc, #428]	; (800d024 <tcp_process+0x7d0>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f000 80c1 	beq.w	800d004 <tcp_process+0x7b0>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce86:	4b68      	ldr	r3, [pc, #416]	; (800d028 <tcp_process+0x7d4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	f040 80ba 	bne.w	800d004 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f040 80b5 	bne.w	800d004 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2206      	movs	r2, #6
 800ce9e:	751a      	strb	r2, [r3, #20]
      break;
 800cea0:	e0b0      	b.n	800d004 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9ca 	bl	800d23c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cea8:	4b60      	ldr	r3, [pc, #384]	; (800d02c <tcp_process+0x7d8>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 80a9 	beq.w	800d008 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	8b5b      	ldrh	r3, [r3, #26]
 800ceba:	f043 0302 	orr.w	r3, r3, #2
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f7fe fd39 	bl	800b93c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ceca:	4b59      	ldr	r3, [pc, #356]	; (800d030 <tcp_process+0x7dc>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d105      	bne.n	800cee0 <tcp_process+0x68c>
 800ced4:	4b56      	ldr	r3, [pc, #344]	; (800d030 <tcp_process+0x7dc>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	4a55      	ldr	r2, [pc, #340]	; (800d030 <tcp_process+0x7dc>)
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	e013      	b.n	800cf08 <tcp_process+0x6b4>
 800cee0:	4b53      	ldr	r3, [pc, #332]	; (800d030 <tcp_process+0x7dc>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	613b      	str	r3, [r7, #16]
 800cee6:	e00c      	b.n	800cf02 <tcp_process+0x6ae>
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d104      	bne.n	800cefc <tcp_process+0x6a8>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68da      	ldr	r2, [r3, #12]
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	60da      	str	r2, [r3, #12]
 800cefa:	e005      	b.n	800cf08 <tcp_process+0x6b4>
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	613b      	str	r3, [r7, #16]
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1ef      	bne.n	800cee8 <tcp_process+0x694>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	4b43      	ldr	r3, [pc, #268]	; (800d01c <tcp_process+0x7c8>)
 800cf10:	2201      	movs	r2, #1
 800cf12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	220a      	movs	r2, #10
 800cf18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf1a:	4b41      	ldr	r3, [pc, #260]	; (800d020 <tcp_process+0x7cc>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	60da      	str	r2, [r3, #12]
 800cf22:	4a3f      	ldr	r2, [pc, #252]	; (800d020 <tcp_process+0x7cc>)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	f002 fc92 	bl	800f850 <tcp_timer_needed>
      }
      break;
 800cf2c:	e06c      	b.n	800d008 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f984 	bl	800d23c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cf34:	4b3b      	ldr	r3, [pc, #236]	; (800d024 <tcp_process+0x7d0>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	f003 0310 	and.w	r3, r3, #16
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d065      	beq.n	800d00c <tcp_process+0x7b8>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf44:	4b38      	ldr	r3, [pc, #224]	; (800d028 <tcp_process+0x7d4>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d15f      	bne.n	800d00c <tcp_process+0x7b8>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d15b      	bne.n	800d00c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7fe fcf1 	bl	800b93c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cf5a:	4b35      	ldr	r3, [pc, #212]	; (800d030 <tcp_process+0x7dc>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d105      	bne.n	800cf70 <tcp_process+0x71c>
 800cf64:	4b32      	ldr	r3, [pc, #200]	; (800d030 <tcp_process+0x7dc>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	4a31      	ldr	r2, [pc, #196]	; (800d030 <tcp_process+0x7dc>)
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	e013      	b.n	800cf98 <tcp_process+0x744>
 800cf70:	4b2f      	ldr	r3, [pc, #188]	; (800d030 <tcp_process+0x7dc>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	e00c      	b.n	800cf92 <tcp_process+0x73e>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d104      	bne.n	800cf8c <tcp_process+0x738>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	60da      	str	r2, [r3, #12]
 800cf8a:	e005      	b.n	800cf98 <tcp_process+0x744>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1ef      	bne.n	800cf78 <tcp_process+0x724>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	4b1f      	ldr	r3, [pc, #124]	; (800d01c <tcp_process+0x7c8>)
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	220a      	movs	r2, #10
 800cfa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cfaa:	4b1d      	ldr	r3, [pc, #116]	; (800d020 <tcp_process+0x7cc>)
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	60da      	str	r2, [r3, #12]
 800cfb2:	4a1b      	ldr	r2, [pc, #108]	; (800d020 <tcp_process+0x7cc>)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	f002 fc4a 	bl	800f850 <tcp_timer_needed>
      }
      break;
 800cfbc:	e026      	b.n	800d00c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f93c 	bl	800d23c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfc4:	4b17      	ldr	r3, [pc, #92]	; (800d024 <tcp_process+0x7d0>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	f003 0310 	and.w	r3, r3, #16
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01f      	beq.n	800d010 <tcp_process+0x7bc>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfd4:	4b14      	ldr	r3, [pc, #80]	; (800d028 <tcp_process+0x7d4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d119      	bne.n	800d010 <tcp_process+0x7bc>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d115      	bne.n	800d010 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cfe4:	4b11      	ldr	r3, [pc, #68]	; (800d02c <tcp_process+0x7d8>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	f043 0310 	orr.w	r3, r3, #16
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <tcp_process+0x7d8>)
 800cff0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cff2:	e00d      	b.n	800d010 <tcp_process+0x7bc>
    default:
      break;
 800cff4:	bf00      	nop
 800cff6:	e00c      	b.n	800d012 <tcp_process+0x7be>
      break;
 800cff8:	bf00      	nop
 800cffa:	e00a      	b.n	800d012 <tcp_process+0x7be>
      break;
 800cffc:	bf00      	nop
 800cffe:	e008      	b.n	800d012 <tcp_process+0x7be>
      break;
 800d000:	bf00      	nop
 800d002:	e006      	b.n	800d012 <tcp_process+0x7be>
      break;
 800d004:	bf00      	nop
 800d006:	e004      	b.n	800d012 <tcp_process+0x7be>
      break;
 800d008:	bf00      	nop
 800d00a:	e002      	b.n	800d012 <tcp_process+0x7be>
      break;
 800d00c:	bf00      	nop
 800d00e:	e000      	b.n	800d012 <tcp_process+0x7be>
      break;
 800d010:	bf00      	nop
  }
  return ERR_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3724      	adds	r7, #36	; 0x24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd90      	pop	{r4, r7, pc}
 800d01c:	24007334 	.word	0x24007334
 800d020:	24007330 	.word	0x24007330
 800d024:	24007364 	.word	0x24007364
 800d028:	2400735c 	.word	0x2400735c
 800d02c:	24007365 	.word	0x24007365
 800d030:	2400732c 	.word	0x2400732c

0800d034 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d034:	b590      	push	{r4, r7, lr}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d106      	bne.n	800d052 <tcp_oos_insert_segment+0x1e>
 800d044:	4b3b      	ldr	r3, [pc, #236]	; (800d134 <tcp_oos_insert_segment+0x100>)
 800d046:	f240 421f 	movw	r2, #1055	; 0x41f
 800d04a:	493b      	ldr	r1, [pc, #236]	; (800d138 <tcp_oos_insert_segment+0x104>)
 800d04c:	483b      	ldr	r0, [pc, #236]	; (800d13c <tcp_oos_insert_segment+0x108>)
 800d04e:	f005 ff65 	bl	8012f1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	899b      	ldrh	r3, [r3, #12]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fb fb48 	bl	80086f0 <lwip_htons>
 800d060:	4603      	mov	r3, r0
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d028      	beq.n	800d0be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d06c:	6838      	ldr	r0, [r7, #0]
 800d06e:	f7fe fa63 	bl	800b538 <tcp_segs_free>
    next = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	603b      	str	r3, [r7, #0]
 800d076:	e056      	b.n	800d126 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	899b      	ldrh	r3, [r3, #12]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4618      	mov	r0, r3
 800d082:	f7fb fb35 	bl	80086f0 <lwip_htons>
 800d086:	4603      	mov	r3, r0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00d      	beq.n	800d0ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	899b      	ldrh	r3, [r3, #12]
 800d098:	b29c      	uxth	r4, r3
 800d09a:	2001      	movs	r0, #1
 800d09c:	f7fb fb28 	bl	80086f0 <lwip_htons>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	4322      	orrs	r2, r4
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7fe fa52 	bl	800b562 <tcp_seg_free>
    while (next &&
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00e      	beq.n	800d0e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	891b      	ldrh	r3, [r3, #8]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <tcp_oos_insert_segment+0x10c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	441a      	add	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	8909      	ldrh	r1, [r1, #8]
 800d0da:	440b      	add	r3, r1
 800d0dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	daca      	bge.n	800d078 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d01e      	beq.n	800d126 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	891b      	ldrh	r3, [r3, #8]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	4b14      	ldr	r3, [pc, #80]	; (800d140 <tcp_oos_insert_segment+0x10c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	441a      	add	r2, r3
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	dd12      	ble.n	800d126 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	b29a      	uxth	r2, r3
 800d108:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <tcp_oos_insert_segment+0x10c>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	891b      	ldrh	r3, [r3, #8]
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fc fe09 	bl	8009d38 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	601a      	str	r2, [r3, #0]
}
 800d12c:	bf00      	nop
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	bd90      	pop	{r4, r7, pc}
 800d134:	08015118 	.word	0x08015118
 800d138:	080153d8 	.word	0x080153d8
 800d13c:	08015164 	.word	0x08015164
 800d140:	24007358 	.word	0x24007358

0800d144 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d144:	b5b0      	push	{r4, r5, r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d152:	e03e      	b.n	800d1d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4618      	mov	r0, r3
 800d164:	f7fc fffc 	bl	800a160 <pbuf_clen>
 800d168:	4603      	mov	r3, r0
 800d16a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d172:	8a7a      	ldrh	r2, [r7, #18]
 800d174:	429a      	cmp	r2, r3
 800d176:	d906      	bls.n	800d186 <tcp_free_acked_segments+0x42>
 800d178:	4b2a      	ldr	r3, [pc, #168]	; (800d224 <tcp_free_acked_segments+0xe0>)
 800d17a:	f240 4257 	movw	r2, #1111	; 0x457
 800d17e:	492a      	ldr	r1, [pc, #168]	; (800d228 <tcp_free_acked_segments+0xe4>)
 800d180:	482a      	ldr	r0, [pc, #168]	; (800d22c <tcp_free_acked_segments+0xe8>)
 800d182:	f005 fecb 	bl	8012f1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d18c:	8a7b      	ldrh	r3, [r7, #18]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	b29a      	uxth	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	891a      	ldrh	r2, [r3, #8]
 800d19c:	4b24      	ldr	r3, [pc, #144]	; (800d230 <tcp_free_acked_segments+0xec>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	4b22      	ldr	r3, [pc, #136]	; (800d230 <tcp_free_acked_segments+0xec>)
 800d1a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	f7fe f9da 	bl	800b562 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00c      	beq.n	800d1d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <tcp_free_acked_segments+0x8e>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d106      	bne.n	800d1d2 <tcp_free_acked_segments+0x8e>
 800d1c4:	4b17      	ldr	r3, [pc, #92]	; (800d224 <tcp_free_acked_segments+0xe0>)
 800d1c6:	f240 4261 	movw	r2, #1121	; 0x461
 800d1ca:	491a      	ldr	r1, [pc, #104]	; (800d234 <tcp_free_acked_segments+0xf0>)
 800d1cc:	4817      	ldr	r0, [pc, #92]	; (800d22c <tcp_free_acked_segments+0xe8>)
 800d1ce:	f005 fea5 	bl	8012f1c <iprintf>
  while (seg_list != NULL &&
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d020      	beq.n	800d21a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fb fa9b 	bl	800871a <lwip_htonl>
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	891b      	ldrh	r3, [r3, #8]
 800d1ea:	461d      	mov	r5, r3
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	899b      	ldrh	r3, [r3, #12]
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fb fa7b 	bl	80086f0 <lwip_htons>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0303 	and.w	r3, r3, #3
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <tcp_free_acked_segments+0xc6>
 800d206:	2301      	movs	r3, #1
 800d208:	e000      	b.n	800d20c <tcp_free_acked_segments+0xc8>
 800d20a:	2300      	movs	r3, #0
 800d20c:	442b      	add	r3, r5
 800d20e:	18e2      	adds	r2, r4, r3
 800d210:	4b09      	ldr	r3, [pc, #36]	; (800d238 <tcp_free_acked_segments+0xf4>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d216:	2b00      	cmp	r3, #0
 800d218:	dd9c      	ble.n	800d154 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d21a:	68bb      	ldr	r3, [r7, #8]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bdb0      	pop	{r4, r5, r7, pc}
 800d224:	08015118 	.word	0x08015118
 800d228:	08015400 	.word	0x08015400
 800d22c:	08015164 	.word	0x08015164
 800d230:	24007360 	.word	0x24007360
 800d234:	08015428 	.word	0x08015428
 800d238:	2400735c 	.word	0x2400735c

0800d23c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d23c:	b5b0      	push	{r4, r5, r7, lr}
 800d23e:	b094      	sub	sp, #80	; 0x50
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d106      	bne.n	800d25c <tcp_receive+0x20>
 800d24e:	4b91      	ldr	r3, [pc, #580]	; (800d494 <tcp_receive+0x258>)
 800d250:	f240 427b 	movw	r2, #1147	; 0x47b
 800d254:	4990      	ldr	r1, [pc, #576]	; (800d498 <tcp_receive+0x25c>)
 800d256:	4891      	ldr	r0, [pc, #580]	; (800d49c <tcp_receive+0x260>)
 800d258:	f005 fe60 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7d1b      	ldrb	r3, [r3, #20]
 800d260:	2b03      	cmp	r3, #3
 800d262:	d806      	bhi.n	800d272 <tcp_receive+0x36>
 800d264:	4b8b      	ldr	r3, [pc, #556]	; (800d494 <tcp_receive+0x258>)
 800d266:	f240 427c 	movw	r2, #1148	; 0x47c
 800d26a:	498d      	ldr	r1, [pc, #564]	; (800d4a0 <tcp_receive+0x264>)
 800d26c:	488b      	ldr	r0, [pc, #556]	; (800d49c <tcp_receive+0x260>)
 800d26e:	f005 fe55 	bl	8012f1c <iprintf>

  if (flags & TCP_ACK) {
 800d272:	4b8c      	ldr	r3, [pc, #560]	; (800d4a4 <tcp_receive+0x268>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	f003 0310 	and.w	r3, r3, #16
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 8264 	beq.w	800d748 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d286:	461a      	mov	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d28c:	4413      	add	r3, r2
 800d28e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d294:	4b84      	ldr	r3, [pc, #528]	; (800d4a8 <tcp_receive+0x26c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	db1b      	blt.n	800d2d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2a2:	4b81      	ldr	r3, [pc, #516]	; (800d4a8 <tcp_receive+0x26c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d106      	bne.n	800d2b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2ae:	4b7f      	ldr	r3, [pc, #508]	; (800d4ac <tcp_receive+0x270>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	db0e      	blt.n	800d2d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2bc:	4b7b      	ldr	r3, [pc, #492]	; (800d4ac <tcp_receive+0x270>)
 800d2be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d125      	bne.n	800d310 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d2c4:	4b7a      	ldr	r3, [pc, #488]	; (800d4b0 <tcp_receive+0x274>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	89db      	ldrh	r3, [r3, #14]
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d91c      	bls.n	800d310 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d2d6:	4b76      	ldr	r3, [pc, #472]	; (800d4b0 <tcp_receive+0x274>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	89db      	ldrh	r3, [r3, #14]
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d205      	bcs.n	800d300 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d300:	4b69      	ldr	r3, [pc, #420]	; (800d4a8 <tcp_receive+0x26c>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d308:	4b68      	ldr	r3, [pc, #416]	; (800d4ac <tcp_receive+0x270>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d310:	4b66      	ldr	r3, [pc, #408]	; (800d4ac <tcp_receive+0x270>)
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	dc58      	bgt.n	800d3d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d31e:	4b65      	ldr	r3, [pc, #404]	; (800d4b4 <tcp_receive+0x278>)
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d14b      	bne.n	800d3be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d330:	4413      	add	r3, r2
 800d332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d334:	429a      	cmp	r2, r3
 800d336:	d142      	bne.n	800d3be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d33e:	2b00      	cmp	r3, #0
 800d340:	db3d      	blt.n	800d3be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d346:	4b59      	ldr	r3, [pc, #356]	; (800d4ac <tcp_receive+0x270>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d137      	bne.n	800d3be <tcp_receive+0x182>
              found_dupack = 1;
 800d34e:	2301      	movs	r3, #1
 800d350:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d358:	2bff      	cmp	r3, #255	; 0xff
 800d35a:	d007      	beq.n	800d36c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d362:	3301      	adds	r3, #1
 800d364:	b2da      	uxtb	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d372:	2b03      	cmp	r3, #3
 800d374:	d91b      	bls.n	800d3ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d380:	4413      	add	r3, r2
 800d382:	b29a      	uxth	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d30a      	bcc.n	800d3a4 <tcp_receive+0x168>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d398:	4413      	add	r3, r2
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d3a2:	e004      	b.n	800d3ae <tcp_receive+0x172>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d902      	bls.n	800d3be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f001 feed 	bl	800f198 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 8161 	bne.w	800d688 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3ce:	e15b      	b.n	800d688 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3d0:	4b36      	ldr	r3, [pc, #216]	; (800d4ac <tcp_receive+0x270>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f2c0 814e 	blt.w	800d67e <tcp_receive+0x442>
 800d3e2:	4b32      	ldr	r3, [pc, #200]	; (800d4ac <tcp_receive+0x270>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f300 8146 	bgt.w	800d67e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	8b5b      	ldrh	r3, [r3, #26]
 800d3f6:	f003 0304 	and.w	r3, r3, #4
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d010      	beq.n	800d420 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	8b5b      	ldrh	r3, [r3, #26]
 800d402:	f023 0304 	bic.w	r3, r3, #4
 800d406:	b29a      	uxth	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d42e:	10db      	asrs	r3, r3, #3
 800d430:	b21b      	sxth	r3, r3
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	4413      	add	r3, r2
 800d43e:	b29b      	uxth	r3, r3
 800d440:	b21a      	sxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d448:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <tcp_receive+0x270>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d452:	b29b      	uxth	r3, r3
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d460:	4b12      	ldr	r3, [pc, #72]	; (800d4ac <tcp_receive+0x270>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	7d1b      	ldrb	r3, [r3, #20]
 800d46c:	2b03      	cmp	r3, #3
 800d46e:	f240 8097 	bls.w	800d5a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d47e:	429a      	cmp	r2, r3
 800d480:	d245      	bcs.n	800d50e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8b5b      	ldrh	r3, [r3, #26]
 800d486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d014      	beq.n	800d4b8 <tcp_receive+0x27c>
 800d48e:	2301      	movs	r3, #1
 800d490:	e013      	b.n	800d4ba <tcp_receive+0x27e>
 800d492:	bf00      	nop
 800d494:	08015118 	.word	0x08015118
 800d498:	08015448 	.word	0x08015448
 800d49c:	08015164 	.word	0x08015164
 800d4a0:	08015464 	.word	0x08015464
 800d4a4:	24007364 	.word	0x24007364
 800d4a8:	24007358 	.word	0x24007358
 800d4ac:	2400735c 	.word	0x2400735c
 800d4b0:	24007348 	.word	0x24007348
 800d4b4:	24007362 	.word	0x24007362
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d4be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4c8:	fb12 f303 	smulbb	r3, r2, r3
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	bf28      	it	cs
 800d4d4:	4613      	movcs	r3, r2
 800d4d6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d4e0:	4413      	add	r3, r2
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d309      	bcc.n	800d502 <tcp_receive+0x2c6>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d4f6:	4413      	add	r3, r2
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d500:	e04e      	b.n	800d5a0 <tcp_receive+0x364>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d508:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d50c:	e048      	b.n	800d5a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d516:	4413      	add	r3, r2
 800d518:	b29a      	uxth	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d520:	429a      	cmp	r2, r3
 800d522:	d309      	bcc.n	800d538 <tcp_receive+0x2fc>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d52c:	4413      	add	r3, r2
 800d52e:	b29a      	uxth	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d536:	e004      	b.n	800d542 <tcp_receive+0x306>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d53e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d54e:	429a      	cmp	r2, r3
 800d550:	d326      	bcc.n	800d5a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	b29a      	uxth	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d572:	4413      	add	r3, r2
 800d574:	b29a      	uxth	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d30a      	bcc.n	800d596 <tcp_receive+0x35a>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d58a:	4413      	add	r3, r2
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d594:	e004      	b.n	800d5a0 <tcp_receive+0x364>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d59c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a8:	4a98      	ldr	r2, [pc, #608]	; (800d80c <tcp_receive+0x5d0>)
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fdca 	bl	800d144 <tcp_free_acked_segments>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5be:	4a94      	ldr	r2, [pc, #592]	; (800d810 <tcp_receive+0x5d4>)
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff fdbf 	bl	800d144 <tcp_free_acked_segments>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d104      	bne.n	800d5de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5da:	861a      	strh	r2, [r3, #48]	; 0x30
 800d5dc:	e002      	b.n	800d5e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d600:	4b84      	ldr	r3, [pc, #528]	; (800d814 <tcp_receive+0x5d8>)
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	4413      	add	r3, r2
 800d606:	b29a      	uxth	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	8b5b      	ldrh	r3, [r3, #26]
 800d612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d616:	2b00      	cmp	r3, #0
 800d618:	d035      	beq.n	800d686 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d118      	bne.n	800d654 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00c      	beq.n	800d644 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	f7fb f86f 	bl	800871a <lwip_htonl>
 800d63c:	4603      	mov	r3, r0
 800d63e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d640:	2b00      	cmp	r3, #0
 800d642:	dc20      	bgt.n	800d686 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8b5b      	ldrh	r3, [r3, #26]
 800d648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d652:	e018      	b.n	800d686 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7fb f85a 	bl	800871a <lwip_htonl>
 800d666:	4603      	mov	r3, r0
 800d668:	1ae3      	subs	r3, r4, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dc0b      	bgt.n	800d686 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	8b5b      	ldrh	r3, [r3, #26]
 800d672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d676:	b29a      	uxth	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d67c:	e003      	b.n	800d686 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f001 ff76 	bl	800f570 <tcp_send_empty_ack>
 800d684:	e000      	b.n	800d688 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d686:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d05b      	beq.n	800d748 <tcp_receive+0x50c>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d694:	4b60      	ldr	r3, [pc, #384]	; (800d818 <tcp_receive+0x5dc>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	da54      	bge.n	800d748 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d69e:	4b5f      	ldr	r3, [pc, #380]	; (800d81c <tcp_receive+0x5e0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d6b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6bc:	10db      	asrs	r3, r3, #3
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d6d6:	4413      	add	r3, r2
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	b21a      	sxth	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d6e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	da05      	bge.n	800d6f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d6e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d6ec:	425b      	negs	r3, r3
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d6f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d6fe:	109b      	asrs	r3, r3, #2
 800d700:	b21b      	sxth	r3, r3
 800d702:	b29b      	uxth	r3, r3
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	b29b      	uxth	r3, r3
 800d708:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d712:	b29a      	uxth	r2, r3
 800d714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d718:	4413      	add	r3, r2
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	b21a      	sxth	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d728:	10db      	asrs	r3, r3, #3
 800d72a:	b21b      	sxth	r3, r3
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d734:	b29b      	uxth	r3, r3
 800d736:	4413      	add	r3, r2
 800d738:	b29b      	uxth	r3, r3
 800d73a:	b21a      	sxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d748:	4b35      	ldr	r3, [pc, #212]	; (800d820 <tcp_receive+0x5e4>)
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 84e2 	beq.w	800e116 <tcp_receive+0xeda>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	7d1b      	ldrb	r3, [r3, #20]
 800d756:	2b06      	cmp	r3, #6
 800d758:	f200 84dd 	bhi.w	800e116 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d760:	4b30      	ldr	r3, [pc, #192]	; (800d824 <tcp_receive+0x5e8>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f2c0 808f 	blt.w	800d88c <tcp_receive+0x650>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d772:	4b2b      	ldr	r3, [pc, #172]	; (800d820 <tcp_receive+0x5e4>)
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	4619      	mov	r1, r3
 800d778:	4b2a      	ldr	r3, [pc, #168]	; (800d824 <tcp_receive+0x5e8>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	440b      	add	r3, r1
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	3301      	adds	r3, #1
 800d782:	2b00      	cmp	r3, #0
 800d784:	f300 8082 	bgt.w	800d88c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d788:	4b27      	ldr	r3, [pc, #156]	; (800d828 <tcp_receive+0x5ec>)
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d792:	4b24      	ldr	r3, [pc, #144]	; (800d824 <tcp_receive+0x5e8>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d79a:	4b23      	ldr	r3, [pc, #140]	; (800d828 <tcp_receive+0x5ec>)
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <tcp_receive+0x574>
 800d7a2:	4b22      	ldr	r3, [pc, #136]	; (800d82c <tcp_receive+0x5f0>)
 800d7a4:	f240 5294 	movw	r2, #1428	; 0x594
 800d7a8:	4921      	ldr	r1, [pc, #132]	; (800d830 <tcp_receive+0x5f4>)
 800d7aa:	4822      	ldr	r0, [pc, #136]	; (800d834 <tcp_receive+0x5f8>)
 800d7ac:	f005 fbb6 	bl	8012f1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d906      	bls.n	800d7c8 <tcp_receive+0x58c>
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <tcp_receive+0x5f0>)
 800d7bc:	f240 5295 	movw	r2, #1429	; 0x595
 800d7c0:	491d      	ldr	r1, [pc, #116]	; (800d838 <tcp_receive+0x5fc>)
 800d7c2:	481c      	ldr	r0, [pc, #112]	; (800d834 <tcp_receive+0x5f8>)
 800d7c4:	f005 fbaa 	bl	8012f1c <iprintf>
      off = (u16_t)off32;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d7ce:	4b16      	ldr	r3, [pc, #88]	; (800d828 <tcp_receive+0x5ec>)
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	891b      	ldrh	r3, [r3, #8]
 800d7d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d906      	bls.n	800d7ea <tcp_receive+0x5ae>
 800d7dc:	4b13      	ldr	r3, [pc, #76]	; (800d82c <tcp_receive+0x5f0>)
 800d7de:	f240 5297 	movw	r2, #1431	; 0x597
 800d7e2:	4916      	ldr	r1, [pc, #88]	; (800d83c <tcp_receive+0x600>)
 800d7e4:	4813      	ldr	r0, [pc, #76]	; (800d834 <tcp_receive+0x5f8>)
 800d7e6:	f005 fb99 	bl	8012f1c <iprintf>
      inseg.len -= off;
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	; (800d828 <tcp_receive+0x5ec>)
 800d7ec:	891a      	ldrh	r2, [r3, #8]
 800d7ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <tcp_receive+0x5ec>)
 800d7f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <tcp_receive+0x5ec>)
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	891a      	ldrh	r2, [r3, #8]
 800d800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d808:	e02a      	b.n	800d860 <tcp_receive+0x624>
 800d80a:	bf00      	nop
 800d80c:	08015480 	.word	0x08015480
 800d810:	08015488 	.word	0x08015488
 800d814:	24007360 	.word	0x24007360
 800d818:	2400735c 	.word	0x2400735c
 800d81c:	24007320 	.word	0x24007320
 800d820:	24007362 	.word	0x24007362
 800d824:	24007358 	.word	0x24007358
 800d828:	24007338 	.word	0x24007338
 800d82c:	08015118 	.word	0x08015118
 800d830:	08015490 	.word	0x08015490
 800d834:	08015164 	.word	0x08015164
 800d838:	080154a0 	.word	0x080154a0
 800d83c:	080154b0 	.word	0x080154b0
        off -= p->len;
 800d840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d842:	895b      	ldrh	r3, [r3, #10]
 800d844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d850:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d852:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d856:	2200      	movs	r2, #0
 800d858:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d862:	895b      	ldrh	r3, [r3, #10]
 800d864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d868:	429a      	cmp	r2, r3
 800d86a:	d8e9      	bhi.n	800d840 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d86c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d870:	4619      	mov	r1, r3
 800d872:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d874:	f7fc fb60 	bl	8009f38 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87c:	4a91      	ldr	r2, [pc, #580]	; (800dac4 <tcp_receive+0x888>)
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	4b91      	ldr	r3, [pc, #580]	; (800dac8 <tcp_receive+0x88c>)
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	4a8f      	ldr	r2, [pc, #572]	; (800dac4 <tcp_receive+0x888>)
 800d886:	6812      	ldr	r2, [r2, #0]
 800d888:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d88a:	e00d      	b.n	800d8a8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d88c:	4b8d      	ldr	r3, [pc, #564]	; (800dac4 <tcp_receive+0x888>)
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	da06      	bge.n	800d8a8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	8b5b      	ldrh	r3, [r3, #26]
 800d89e:	f043 0302 	orr.w	r3, r3, #2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d8a8:	4b86      	ldr	r3, [pc, #536]	; (800dac4 <tcp_receive+0x888>)
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f2c0 842a 	blt.w	800e10c <tcp_receive+0xed0>
 800d8b8:	4b82      	ldr	r3, [pc, #520]	; (800dac4 <tcp_receive+0x888>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d8c4:	440b      	add	r3, r1
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f300 841e 	bgt.w	800e10c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d4:	4b7b      	ldr	r3, [pc, #492]	; (800dac4 <tcp_receive+0x888>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	f040 829a 	bne.w	800de12 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d8de:	4b7a      	ldr	r3, [pc, #488]	; (800dac8 <tcp_receive+0x88c>)
 800d8e0:	891c      	ldrh	r4, [r3, #8]
 800d8e2:	4b79      	ldr	r3, [pc, #484]	; (800dac8 <tcp_receive+0x88c>)
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	899b      	ldrh	r3, [r3, #12]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fa ff00 	bl	80086f0 <lwip_htons>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 0303 	and.w	r3, r3, #3
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <tcp_receive+0x6c4>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e000      	b.n	800d902 <tcp_receive+0x6c6>
 800d900:	2300      	movs	r3, #0
 800d902:	4423      	add	r3, r4
 800d904:	b29a      	uxth	r2, r3
 800d906:	4b71      	ldr	r3, [pc, #452]	; (800dacc <tcp_receive+0x890>)
 800d908:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d90e:	4b6f      	ldr	r3, [pc, #444]	; (800dacc <tcp_receive+0x890>)
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	429a      	cmp	r2, r3
 800d914:	d275      	bcs.n	800da02 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d916:	4b6c      	ldr	r3, [pc, #432]	; (800dac8 <tcp_receive+0x88c>)
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	899b      	ldrh	r3, [r3, #12]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fa fee6 	bl	80086f0 <lwip_htons>
 800d924:	4603      	mov	r3, r0
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d01f      	beq.n	800d970 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d930:	4b65      	ldr	r3, [pc, #404]	; (800dac8 <tcp_receive+0x88c>)
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	899b      	ldrh	r3, [r3, #12]
 800d936:	b29b      	uxth	r3, r3
 800d938:	b21b      	sxth	r3, r3
 800d93a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d93e:	b21c      	sxth	r4, r3
 800d940:	4b61      	ldr	r3, [pc, #388]	; (800dac8 <tcp_receive+0x88c>)
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	899b      	ldrh	r3, [r3, #12]
 800d946:	b29b      	uxth	r3, r3
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fa fed1 	bl	80086f0 <lwip_htons>
 800d94e:	4603      	mov	r3, r0
 800d950:	b2db      	uxtb	r3, r3
 800d952:	b29b      	uxth	r3, r3
 800d954:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d958:	b29b      	uxth	r3, r3
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fa fec8 	bl	80086f0 <lwip_htons>
 800d960:	4603      	mov	r3, r0
 800d962:	b21b      	sxth	r3, r3
 800d964:	4323      	orrs	r3, r4
 800d966:	b21a      	sxth	r2, r3
 800d968:	4b57      	ldr	r3, [pc, #348]	; (800dac8 <tcp_receive+0x88c>)
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	b292      	uxth	r2, r2
 800d96e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d974:	4b54      	ldr	r3, [pc, #336]	; (800dac8 <tcp_receive+0x88c>)
 800d976:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d978:	4b53      	ldr	r3, [pc, #332]	; (800dac8 <tcp_receive+0x88c>)
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	899b      	ldrh	r3, [r3, #12]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4618      	mov	r0, r3
 800d982:	f7fa feb5 	bl	80086f0 <lwip_htons>
 800d986:	4603      	mov	r3, r0
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d005      	beq.n	800d99e <tcp_receive+0x762>
            inseg.len -= 1;
 800d992:	4b4d      	ldr	r3, [pc, #308]	; (800dac8 <tcp_receive+0x88c>)
 800d994:	891b      	ldrh	r3, [r3, #8]
 800d996:	3b01      	subs	r3, #1
 800d998:	b29a      	uxth	r2, r3
 800d99a:	4b4b      	ldr	r3, [pc, #300]	; (800dac8 <tcp_receive+0x88c>)
 800d99c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d99e:	4b4a      	ldr	r3, [pc, #296]	; (800dac8 <tcp_receive+0x88c>)
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	4a49      	ldr	r2, [pc, #292]	; (800dac8 <tcp_receive+0x88c>)
 800d9a4:	8912      	ldrh	r2, [r2, #8]
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fc f9c5 	bl	8009d38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d9ae:	4b46      	ldr	r3, [pc, #280]	; (800dac8 <tcp_receive+0x88c>)
 800d9b0:	891c      	ldrh	r4, [r3, #8]
 800d9b2:	4b45      	ldr	r3, [pc, #276]	; (800dac8 <tcp_receive+0x88c>)
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	899b      	ldrh	r3, [r3, #12]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fa fe98 	bl	80086f0 <lwip_htons>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <tcp_receive+0x794>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <tcp_receive+0x796>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4423      	add	r3, r4
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	; (800dacc <tcp_receive+0x890>)
 800d9d8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d9da:	4b3c      	ldr	r3, [pc, #240]	; (800dacc <tcp_receive+0x890>)
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	4b38      	ldr	r3, [pc, #224]	; (800dac4 <tcp_receive+0x888>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	441a      	add	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ea:	6879      	ldr	r1, [r7, #4]
 800d9ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9ee:	440b      	add	r3, r1
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d006      	beq.n	800da02 <tcp_receive+0x7c6>
 800d9f4:	4b36      	ldr	r3, [pc, #216]	; (800dad0 <tcp_receive+0x894>)
 800d9f6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d9fa:	4936      	ldr	r1, [pc, #216]	; (800dad4 <tcp_receive+0x898>)
 800d9fc:	4836      	ldr	r0, [pc, #216]	; (800dad8 <tcp_receive+0x89c>)
 800d9fe:	f005 fa8d 	bl	8012f1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da06:	2b00      	cmp	r3, #0
 800da08:	f000 80e7 	beq.w	800dbda <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da0c:	4b2e      	ldr	r3, [pc, #184]	; (800dac8 <tcp_receive+0x88c>)
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	899b      	ldrh	r3, [r3, #12]
 800da12:	b29b      	uxth	r3, r3
 800da14:	4618      	mov	r0, r3
 800da16:	f7fa fe6b 	bl	80086f0 <lwip_htons>
 800da1a:	4603      	mov	r3, r0
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d010      	beq.n	800da48 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800da26:	e00a      	b.n	800da3e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da2c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7fd fd92 	bl	800b562 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1f0      	bne.n	800da28 <tcp_receive+0x7ec>
 800da46:	e0c8      	b.n	800dbda <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800da4e:	e052      	b.n	800daf6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800da50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	899b      	ldrh	r3, [r3, #12]
 800da56:	b29b      	uxth	r3, r3
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fa fe49 	bl	80086f0 <lwip_htons>
 800da5e:	4603      	mov	r3, r0
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d03d      	beq.n	800dae6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800da6a:	4b17      	ldr	r3, [pc, #92]	; (800dac8 <tcp_receive+0x88c>)
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	899b      	ldrh	r3, [r3, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4618      	mov	r0, r3
 800da74:	f7fa fe3c 	bl	80086f0 <lwip_htons>
 800da78:	4603      	mov	r3, r0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800da80:	2b00      	cmp	r3, #0
 800da82:	d130      	bne.n	800dae6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800da84:	4b10      	ldr	r3, [pc, #64]	; (800dac8 <tcp_receive+0x88c>)
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	899b      	ldrh	r3, [r3, #12]
 800da8a:	b29c      	uxth	r4, r3
 800da8c:	2001      	movs	r0, #1
 800da8e:	f7fa fe2f 	bl	80086f0 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	4b0c      	ldr	r3, [pc, #48]	; (800dac8 <tcp_receive+0x88c>)
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	4322      	orrs	r2, r4
 800da9c:	b292      	uxth	r2, r2
 800da9e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800daa0:	4b09      	ldr	r3, [pc, #36]	; (800dac8 <tcp_receive+0x88c>)
 800daa2:	891c      	ldrh	r4, [r3, #8]
 800daa4:	4b08      	ldr	r3, [pc, #32]	; (800dac8 <tcp_receive+0x88c>)
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	899b      	ldrh	r3, [r3, #12]
 800daaa:	b29b      	uxth	r3, r3
 800daac:	4618      	mov	r0, r3
 800daae:	f7fa fe1f 	bl	80086f0 <lwip_htons>
 800dab2:	4603      	mov	r3, r0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	f003 0303 	and.w	r3, r3, #3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00e      	beq.n	800dadc <tcp_receive+0x8a0>
 800dabe:	2301      	movs	r3, #1
 800dac0:	e00d      	b.n	800dade <tcp_receive+0x8a2>
 800dac2:	bf00      	nop
 800dac4:	24007358 	.word	0x24007358
 800dac8:	24007338 	.word	0x24007338
 800dacc:	24007362 	.word	0x24007362
 800dad0:	08015118 	.word	0x08015118
 800dad4:	080154c0 	.word	0x080154c0
 800dad8:	08015164 	.word	0x08015164
 800dadc:	2300      	movs	r3, #0
 800dade:	4423      	add	r3, r4
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	4b98      	ldr	r3, [pc, #608]	; (800dd44 <tcp_receive+0xb08>)
 800dae4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800dae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800daea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800daf0:	6938      	ldr	r0, [r7, #16]
 800daf2:	f7fd fd36 	bl	800b562 <tcp_seg_free>
            while (next &&
 800daf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00e      	beq.n	800db1a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dafc:	4b91      	ldr	r3, [pc, #580]	; (800dd44 <tcp_receive+0xb08>)
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	461a      	mov	r2, r3
 800db02:	4b91      	ldr	r3, [pc, #580]	; (800dd48 <tcp_receive+0xb0c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	441a      	add	r2, r3
 800db08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db10:	8909      	ldrh	r1, [r1, #8]
 800db12:	440b      	add	r3, r1
 800db14:	1ad3      	subs	r3, r2, r3
            while (next &&
 800db16:	2b00      	cmp	r3, #0
 800db18:	da9a      	bge.n	800da50 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800db1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d059      	beq.n	800dbd4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800db20:	4b88      	ldr	r3, [pc, #544]	; (800dd44 <tcp_receive+0xb08>)
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	4b88      	ldr	r3, [pc, #544]	; (800dd48 <tcp_receive+0xb0c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	441a      	add	r2, r3
 800db2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	1ad3      	subs	r3, r2, r3
            if (next &&
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd4d      	ble.n	800dbd4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	b29a      	uxth	r2, r3
 800db40:	4b81      	ldr	r3, [pc, #516]	; (800dd48 <tcp_receive+0xb0c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	4b80      	ldr	r3, [pc, #512]	; (800dd4c <tcp_receive+0xb10>)
 800db4c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800db4e:	4b7f      	ldr	r3, [pc, #508]	; (800dd4c <tcp_receive+0xb10>)
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	899b      	ldrh	r3, [r3, #12]
 800db54:	b29b      	uxth	r3, r3
 800db56:	4618      	mov	r0, r3
 800db58:	f7fa fdca 	bl	80086f0 <lwip_htons>
 800db5c:	4603      	mov	r3, r0
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 0302 	and.w	r3, r3, #2
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <tcp_receive+0x938>
                inseg.len -= 1;
 800db68:	4b78      	ldr	r3, [pc, #480]	; (800dd4c <tcp_receive+0xb10>)
 800db6a:	891b      	ldrh	r3, [r3, #8]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	b29a      	uxth	r2, r3
 800db70:	4b76      	ldr	r3, [pc, #472]	; (800dd4c <tcp_receive+0xb10>)
 800db72:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800db74:	4b75      	ldr	r3, [pc, #468]	; (800dd4c <tcp_receive+0xb10>)
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	4a74      	ldr	r2, [pc, #464]	; (800dd4c <tcp_receive+0xb10>)
 800db7a:	8912      	ldrh	r2, [r2, #8]
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fc f8da 	bl	8009d38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800db84:	4b71      	ldr	r3, [pc, #452]	; (800dd4c <tcp_receive+0xb10>)
 800db86:	891c      	ldrh	r4, [r3, #8]
 800db88:	4b70      	ldr	r3, [pc, #448]	; (800dd4c <tcp_receive+0xb10>)
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	899b      	ldrh	r3, [r3, #12]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4618      	mov	r0, r3
 800db92:	f7fa fdad 	bl	80086f0 <lwip_htons>
 800db96:	4603      	mov	r3, r0
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0303 	and.w	r3, r3, #3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <tcp_receive+0x96a>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <tcp_receive+0x96c>
 800dba6:	2300      	movs	r3, #0
 800dba8:	4423      	add	r3, r4
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	4b65      	ldr	r3, [pc, #404]	; (800dd44 <tcp_receive+0xb08>)
 800dbae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dbb0:	4b64      	ldr	r3, [pc, #400]	; (800dd44 <tcp_receive+0xb08>)
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4b64      	ldr	r3, [pc, #400]	; (800dd48 <tcp_receive+0xb0c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	441a      	add	r2, r3
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d006      	beq.n	800dbd4 <tcp_receive+0x998>
 800dbc6:	4b62      	ldr	r3, [pc, #392]	; (800dd50 <tcp_receive+0xb14>)
 800dbc8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dbcc:	4961      	ldr	r1, [pc, #388]	; (800dd54 <tcp_receive+0xb18>)
 800dbce:	4862      	ldr	r0, [pc, #392]	; (800dd58 <tcp_receive+0xb1c>)
 800dbd0:	f005 f9a4 	bl	8012f1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbd8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dbda:	4b5a      	ldr	r3, [pc, #360]	; (800dd44 <tcp_receive+0xb08>)
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	4b59      	ldr	r3, [pc, #356]	; (800dd48 <tcp_receive+0xb0c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	441a      	add	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dbee:	4b55      	ldr	r3, [pc, #340]	; (800dd44 <tcp_receive+0xb08>)
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d206      	bcs.n	800dc04 <tcp_receive+0x9c8>
 800dbf6:	4b56      	ldr	r3, [pc, #344]	; (800dd50 <tcp_receive+0xb14>)
 800dbf8:	f240 6207 	movw	r2, #1543	; 0x607
 800dbfc:	4957      	ldr	r1, [pc, #348]	; (800dd5c <tcp_receive+0xb20>)
 800dbfe:	4856      	ldr	r0, [pc, #344]	; (800dd58 <tcp_receive+0xb1c>)
 800dc00:	f005 f98c 	bl	8012f1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc08:	4b4e      	ldr	r3, [pc, #312]	; (800dd44 <tcp_receive+0xb08>)
 800dc0a:	881b      	ldrh	r3, [r3, #0]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7fc ffc5 	bl	800aba4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dc1a:	4b4c      	ldr	r3, [pc, #304]	; (800dd4c <tcp_receive+0xb10>)
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	891b      	ldrh	r3, [r3, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d006      	beq.n	800dc32 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800dc24:	4b49      	ldr	r3, [pc, #292]	; (800dd4c <tcp_receive+0xb10>)
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a4d      	ldr	r2, [pc, #308]	; (800dd60 <tcp_receive+0xb24>)
 800dc2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dc2c:	4b47      	ldr	r3, [pc, #284]	; (800dd4c <tcp_receive+0xb10>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc32:	4b46      	ldr	r3, [pc, #280]	; (800dd4c <tcp_receive+0xb10>)
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	899b      	ldrh	r3, [r3, #12]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fa fd58 	bl	80086f0 <lwip_htons>
 800dc40:	4603      	mov	r3, r0
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 80b8 	beq.w	800ddbe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dc4e:	4b45      	ldr	r3, [pc, #276]	; (800dd64 <tcp_receive+0xb28>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f043 0320 	orr.w	r3, r3, #32
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	4b42      	ldr	r3, [pc, #264]	; (800dd64 <tcp_receive+0xb28>)
 800dc5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dc5c:	e0af      	b.n	800ddbe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	4a36      	ldr	r2, [pc, #216]	; (800dd48 <tcp_receive+0xb0c>)
 800dc6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	891b      	ldrh	r3, [r3, #8]
 800dc74:	461c      	mov	r4, r3
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	899b      	ldrh	r3, [r3, #12]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fa fd36 	bl	80086f0 <lwip_htons>
 800dc84:	4603      	mov	r3, r0
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	f003 0303 	and.w	r3, r3, #3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <tcp_receive+0xa58>
 800dc90:	2301      	movs	r3, #1
 800dc92:	e000      	b.n	800dc96 <tcp_receive+0xa5a>
 800dc94:	2300      	movs	r3, #0
 800dc96:	191a      	adds	r2, r3, r4
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	441a      	add	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dca6:	461c      	mov	r4, r3
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	891b      	ldrh	r3, [r3, #8]
 800dcac:	461d      	mov	r5, r3
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	899b      	ldrh	r3, [r3, #12]
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fa fd1a 	bl	80086f0 <lwip_htons>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 0303 	and.w	r3, r3, #3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <tcp_receive+0xa90>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e000      	b.n	800dcce <tcp_receive+0xa92>
 800dccc:	2300      	movs	r3, #0
 800dcce:	442b      	add	r3, r5
 800dcd0:	429c      	cmp	r4, r3
 800dcd2:	d206      	bcs.n	800dce2 <tcp_receive+0xaa6>
 800dcd4:	4b1e      	ldr	r3, [pc, #120]	; (800dd50 <tcp_receive+0xb14>)
 800dcd6:	f240 622b 	movw	r2, #1579	; 0x62b
 800dcda:	4923      	ldr	r1, [pc, #140]	; (800dd68 <tcp_receive+0xb2c>)
 800dcdc:	481e      	ldr	r0, [pc, #120]	; (800dd58 <tcp_receive+0xb1c>)
 800dcde:	f005 f91d 	bl	8012f1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	891b      	ldrh	r3, [r3, #8]
 800dce6:	461c      	mov	r4, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	899b      	ldrh	r3, [r3, #12]
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fa fcfd 	bl	80086f0 <lwip_htons>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	f003 0303 	and.w	r3, r3, #3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <tcp_receive+0xaca>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e000      	b.n	800dd08 <tcp_receive+0xacc>
 800dd06:	2300      	movs	r3, #0
 800dd08:	1919      	adds	r1, r3, r4
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd0e:	b28b      	uxth	r3, r1
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7fc ff43 	bl	800aba4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	891b      	ldrh	r3, [r3, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d028      	beq.n	800dd7a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <tcp_receive+0xb24>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01d      	beq.n	800dd6c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800dd30:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <tcp_receive+0xb24>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	f7fc fa50 	bl	800a1e0 <pbuf_cat>
 800dd40:	e018      	b.n	800dd74 <tcp_receive+0xb38>
 800dd42:	bf00      	nop
 800dd44:	24007362 	.word	0x24007362
 800dd48:	24007358 	.word	0x24007358
 800dd4c:	24007338 	.word	0x24007338
 800dd50:	08015118 	.word	0x08015118
 800dd54:	080154f8 	.word	0x080154f8
 800dd58:	08015164 	.word	0x08015164
 800dd5c:	08015534 	.word	0x08015534
 800dd60:	24007368 	.word	0x24007368
 800dd64:	24007365 	.word	0x24007365
 800dd68:	08015554 	.word	0x08015554
            } else {
              recv_data = cseg->p;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	4a70      	ldr	r2, [pc, #448]	; (800df34 <tcp_receive+0xcf8>)
 800dd72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fa fcb4 	bl	80086f0 <lwip_htons>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00d      	beq.n	800ddb0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800dd94:	4b68      	ldr	r3, [pc, #416]	; (800df38 <tcp_receive+0xcfc>)
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	f043 0320 	orr.w	r3, r3, #32
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	4b66      	ldr	r3, [pc, #408]	; (800df38 <tcp_receive+0xcfc>)
 800dda0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	7d1b      	ldrb	r3, [r3, #20]
 800dda6:	2b04      	cmp	r3, #4
 800dda8:	d102      	bne.n	800ddb0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2207      	movs	r2, #7
 800ddae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ddb8:	68b8      	ldr	r0, [r7, #8]
 800ddba:	f7fd fbd2 	bl	800b562 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d008      	beq.n	800ddd8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	f43f af43 	beq.w	800dc5e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	8b5b      	ldrh	r3, [r3, #26]
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00e      	beq.n	800de02 <tcp_receive+0xbc6>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	8b5b      	ldrh	r3, [r3, #26]
 800dde8:	f023 0301 	bic.w	r3, r3, #1
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	835a      	strh	r2, [r3, #26]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	8b5b      	ldrh	r3, [r3, #26]
 800ddf6:	f043 0302 	orr.w	r3, r3, #2
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de00:	e188      	b.n	800e114 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	8b5b      	ldrh	r3, [r3, #26]
 800de06:	f043 0301 	orr.w	r3, r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de10:	e180      	b.n	800e114 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800de1a:	4848      	ldr	r0, [pc, #288]	; (800df3c <tcp_receive+0xd00>)
 800de1c:	f7fd fbba 	bl	800b594 <tcp_seg_copy>
 800de20:	4602      	mov	r2, r0
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	675a      	str	r2, [r3, #116]	; 0x74
 800de26:	e16d      	b.n	800e104 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800de28:	2300      	movs	r3, #0
 800de2a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de30:	63bb      	str	r3, [r7, #56]	; 0x38
 800de32:	e157      	b.n	800e0e4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	685a      	ldr	r2, [r3, #4]
 800de3a:	4b41      	ldr	r3, [pc, #260]	; (800df40 <tcp_receive+0xd04>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d11d      	bne.n	800de7e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800de42:	4b3e      	ldr	r3, [pc, #248]	; (800df3c <tcp_receive+0xd00>)
 800de44:	891a      	ldrh	r2, [r3, #8]
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	891b      	ldrh	r3, [r3, #8]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	f240 814f 	bls.w	800e0ee <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800de50:	483a      	ldr	r0, [pc, #232]	; (800df3c <tcp_receive+0xd00>)
 800de52:	f7fd fb9f 	bl	800b594 <tcp_seg_copy>
 800de56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 8149 	beq.w	800e0f2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <tcp_receive+0xc32>
                    prev->next = cseg;
 800de66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	e002      	b.n	800de74 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800de74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de76:	6978      	ldr	r0, [r7, #20]
 800de78:	f7ff f8dc 	bl	800d034 <tcp_oos_insert_segment>
                }
                break;
 800de7c:	e139      	b.n	800e0f2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800de7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de80:	2b00      	cmp	r3, #0
 800de82:	d117      	bne.n	800deb4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800de84:	4b2e      	ldr	r3, [pc, #184]	; (800df40 <tcp_receive+0xd04>)
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	2b00      	cmp	r3, #0
 800de92:	da57      	bge.n	800df44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800de94:	4829      	ldr	r0, [pc, #164]	; (800df3c <tcp_receive+0xd00>)
 800de96:	f7fd fb7d 	bl	800b594 <tcp_seg_copy>
 800de9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 8129 	beq.w	800e0f6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	69ba      	ldr	r2, [r7, #24]
 800dea8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800deaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800deac:	69b8      	ldr	r0, [r7, #24]
 800deae:	f7ff f8c1 	bl	800d034 <tcp_oos_insert_segment>
                  }
                  break;
 800deb2:	e120      	b.n	800e0f6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800deb4:	4b22      	ldr	r3, [pc, #136]	; (800df40 <tcp_receive+0xd04>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	3b01      	subs	r3, #1
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	db3e      	blt.n	800df44 <tcp_receive+0xd08>
 800dec6:	4b1e      	ldr	r3, [pc, #120]	; (800df40 <tcp_receive+0xd04>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	3301      	adds	r3, #1
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dc35      	bgt.n	800df44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ded8:	4818      	ldr	r0, [pc, #96]	; (800df3c <tcp_receive+0xd00>)
 800deda:	f7fd fb5b 	bl	800b594 <tcp_seg_copy>
 800dede:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f000 8109 	beq.w	800e0fa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def0:	8912      	ldrh	r2, [r2, #8]
 800def2:	441a      	add	r2, r3
 800def4:	4b12      	ldr	r3, [pc, #72]	; (800df40 <tcp_receive+0xd04>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	dd12      	ble.n	800df24 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800defe:	4b10      	ldr	r3, [pc, #64]	; (800df40 <tcp_receive+0xd04>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	b29a      	uxth	r2, r3
 800df04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	b29a      	uxth	r2, r3
 800df10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800df14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df1a:	891b      	ldrh	r3, [r3, #8]
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f7fb ff0a 	bl	8009d38 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800df24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df26:	69fa      	ldr	r2, [r7, #28]
 800df28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800df2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df2c:	69f8      	ldr	r0, [r7, #28]
 800df2e:	f7ff f881 	bl	800d034 <tcp_oos_insert_segment>
                  }
                  break;
 800df32:	e0e2      	b.n	800e0fa <tcp_receive+0xebe>
 800df34:	24007368 	.word	0x24007368
 800df38:	24007365 	.word	0x24007365
 800df3c:	24007338 	.word	0x24007338
 800df40:	24007358 	.word	0x24007358
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df46:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f040 80c6 	bne.w	800e0de <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800df52:	4b80      	ldr	r3, [pc, #512]	; (800e154 <tcp_receive+0xf18>)
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f340 80bd 	ble.w	800e0de <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	899b      	ldrh	r3, [r3, #12]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fa fbbf 	bl	80086f0 <lwip_htons>
 800df72:	4603      	mov	r3, r0
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f040 80bf 	bne.w	800e0fe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800df80:	4875      	ldr	r0, [pc, #468]	; (800e158 <tcp_receive+0xf1c>)
 800df82:	f7fd fb07 	bl	800b594 <tcp_seg_copy>
 800df86:	4602      	mov	r2, r0
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 80b6 	beq.w	800e102 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800df96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df9e:	8912      	ldrh	r2, [r2, #8]
 800dfa0:	441a      	add	r2, r3
 800dfa2:	4b6c      	ldr	r3, [pc, #432]	; (800e154 <tcp_receive+0xf18>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	dd12      	ble.n	800dfd2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dfac:	4b69      	ldr	r3, [pc, #420]	; (800e154 <tcp_receive+0xf18>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc8:	891b      	ldrh	r3, [r3, #8]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4610      	mov	r0, r2
 800dfce:	f7fb feb3 	bl	8009d38 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dfd2:	4b62      	ldr	r3, [pc, #392]	; (800e15c <tcp_receive+0xf20>)
 800dfd4:	881b      	ldrh	r3, [r3, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	4b5e      	ldr	r3, [pc, #376]	; (800e154 <tcp_receive+0xf18>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	441a      	add	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dfe6:	440b      	add	r3, r1
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f340 8089 	ble.w	800e102 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	899b      	ldrh	r3, [r3, #12]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fa fb78 	bl	80086f0 <lwip_htons>
 800e000:	4603      	mov	r3, r0
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d022      	beq.n	800e052 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	899b      	ldrh	r3, [r3, #12]
 800e014:	b29b      	uxth	r3, r3
 800e016:	b21b      	sxth	r3, r3
 800e018:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e01c:	b21c      	sxth	r4, r3
 800e01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	899b      	ldrh	r3, [r3, #12]
 800e026:	b29b      	uxth	r3, r3
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fa fb61 	bl	80086f0 <lwip_htons>
 800e02e:	4603      	mov	r3, r0
 800e030:	b2db      	uxtb	r3, r3
 800e032:	b29b      	uxth	r3, r3
 800e034:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e038:	b29b      	uxth	r3, r3
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fa fb58 	bl	80086f0 <lwip_htons>
 800e040:	4603      	mov	r3, r0
 800e042:	b21b      	sxth	r3, r3
 800e044:	4323      	orrs	r3, r4
 800e046:	b21a      	sxth	r2, r3
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	b292      	uxth	r2, r2
 800e050:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	b29a      	uxth	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e05c:	4413      	add	r3, r2
 800e05e:	b299      	uxth	r1, r3
 800e060:	4b3c      	ldr	r3, [pc, #240]	; (800e154 <tcp_receive+0xf18>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	b29a      	uxth	r2, r3
 800e066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	1a8a      	subs	r2, r1, r2
 800e06c:	b292      	uxth	r2, r2
 800e06e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	891b      	ldrh	r3, [r3, #8]
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	f7fb fe5a 	bl	8009d38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	891c      	ldrh	r4, [r3, #8]
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	899b      	ldrh	r3, [r3, #12]
 800e092:	b29b      	uxth	r3, r3
 800e094:	4618      	mov	r0, r3
 800e096:	f7fa fb2b 	bl	80086f0 <lwip_htons>
 800e09a:	4603      	mov	r3, r0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 0303 	and.w	r3, r3, #3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <tcp_receive+0xe6e>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e000      	b.n	800e0ac <tcp_receive+0xe70>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4423      	add	r3, r4
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	4b2a      	ldr	r3, [pc, #168]	; (800e15c <tcp_receive+0xf20>)
 800e0b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e0b4:	4b29      	ldr	r3, [pc, #164]	; (800e15c <tcp_receive+0xf20>)
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4b26      	ldr	r3, [pc, #152]	; (800e154 <tcp_receive+0xf18>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	441a      	add	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e0c8:	440b      	add	r3, r1
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d019      	beq.n	800e102 <tcp_receive+0xec6>
 800e0ce:	4b24      	ldr	r3, [pc, #144]	; (800e160 <tcp_receive+0xf24>)
 800e0d0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e0d4:	4923      	ldr	r1, [pc, #140]	; (800e164 <tcp_receive+0xf28>)
 800e0d6:	4824      	ldr	r0, [pc, #144]	; (800e168 <tcp_receive+0xf2c>)
 800e0d8:	f004 ff20 	bl	8012f1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e0dc:	e011      	b.n	800e102 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f47f aea4 	bne.w	800de34 <tcp_receive+0xbf8>
 800e0ec:	e00a      	b.n	800e104 <tcp_receive+0xec8>
                break;
 800e0ee:	bf00      	nop
 800e0f0:	e008      	b.n	800e104 <tcp_receive+0xec8>
                break;
 800e0f2:	bf00      	nop
 800e0f4:	e006      	b.n	800e104 <tcp_receive+0xec8>
                  break;
 800e0f6:	bf00      	nop
 800e0f8:	e004      	b.n	800e104 <tcp_receive+0xec8>
                  break;
 800e0fa:	bf00      	nop
 800e0fc:	e002      	b.n	800e104 <tcp_receive+0xec8>
                  break;
 800e0fe:	bf00      	nop
 800e100:	e000      	b.n	800e104 <tcp_receive+0xec8>
                break;
 800e102:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 fa33 	bl	800f570 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e10a:	e003      	b.n	800e114 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 fa2f 	bl	800f570 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e112:	e01a      	b.n	800e14a <tcp_receive+0xf0e>
 800e114:	e019      	b.n	800e14a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e116:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <tcp_receive+0xf18>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	2b00      	cmp	r3, #0
 800e122:	db0a      	blt.n	800e13a <tcp_receive+0xefe>
 800e124:	4b0b      	ldr	r3, [pc, #44]	; (800e154 <tcp_receive+0xf18>)
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12c:	6879      	ldr	r1, [r7, #4]
 800e12e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e130:	440b      	add	r3, r1
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	3301      	adds	r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	dd07      	ble.n	800e14a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	8b5b      	ldrh	r3, [r3, #26]
 800e13e:	f043 0302 	orr.w	r3, r3, #2
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e148:	e7ff      	b.n	800e14a <tcp_receive+0xf0e>
 800e14a:	bf00      	nop
 800e14c:	3750      	adds	r7, #80	; 0x50
 800e14e:	46bd      	mov	sp, r7
 800e150:	bdb0      	pop	{r4, r5, r7, pc}
 800e152:	bf00      	nop
 800e154:	24007358 	.word	0x24007358
 800e158:	24007338 	.word	0x24007338
 800e15c:	24007362 	.word	0x24007362
 800e160:	08015118 	.word	0x08015118
 800e164:	080154c0 	.word	0x080154c0
 800e168:	08015164 	.word	0x08015164

0800e16c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e172:	4b15      	ldr	r3, [pc, #84]	; (800e1c8 <tcp_get_next_optbyte+0x5c>)
 800e174:	881b      	ldrh	r3, [r3, #0]
 800e176:	1c5a      	adds	r2, r3, #1
 800e178:	b291      	uxth	r1, r2
 800e17a:	4a13      	ldr	r2, [pc, #76]	; (800e1c8 <tcp_get_next_optbyte+0x5c>)
 800e17c:	8011      	strh	r1, [r2, #0]
 800e17e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e180:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <tcp_get_next_optbyte+0x60>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <tcp_get_next_optbyte+0x26>
 800e188:	4b11      	ldr	r3, [pc, #68]	; (800e1d0 <tcp_get_next_optbyte+0x64>)
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	88fa      	ldrh	r2, [r7, #6]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d208      	bcs.n	800e1a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e192:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <tcp_get_next_optbyte+0x68>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3314      	adds	r3, #20
 800e198:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	4413      	add	r3, r2
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	e00b      	b.n	800e1bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e1a4:	88fb      	ldrh	r3, [r7, #6]
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	4b09      	ldr	r3, [pc, #36]	; (800e1d0 <tcp_get_next_optbyte+0x64>)
 800e1aa:	881b      	ldrh	r3, [r3, #0]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e1b2:	4b06      	ldr	r3, [pc, #24]	; (800e1cc <tcp_get_next_optbyte+0x60>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	797b      	ldrb	r3, [r7, #5]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr
 800e1c8:	24007354 	.word	0x24007354
 800e1cc:	24007350 	.word	0x24007350
 800e1d0:	2400734e 	.word	0x2400734e
 800e1d4:	24007348 	.word	0x24007348

0800e1d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <tcp_parseopt+0x1c>
 800e1e6:	4b32      	ldr	r3, [pc, #200]	; (800e2b0 <tcp_parseopt+0xd8>)
 800e1e8:	f240 727d 	movw	r2, #1917	; 0x77d
 800e1ec:	4931      	ldr	r1, [pc, #196]	; (800e2b4 <tcp_parseopt+0xdc>)
 800e1ee:	4832      	ldr	r0, [pc, #200]	; (800e2b8 <tcp_parseopt+0xe0>)
 800e1f0:	f004 fe94 	bl	8012f1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e1f4:	4b31      	ldr	r3, [pc, #196]	; (800e2bc <tcp_parseopt+0xe4>)
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d055      	beq.n	800e2a8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e1fc:	4b30      	ldr	r3, [pc, #192]	; (800e2c0 <tcp_parseopt+0xe8>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	801a      	strh	r2, [r3, #0]
 800e202:	e045      	b.n	800e290 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e204:	f7ff ffb2 	bl	800e16c <tcp_get_next_optbyte>
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e20c:	7bfb      	ldrb	r3, [r7, #15]
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d006      	beq.n	800e220 <tcp_parseopt+0x48>
 800e212:	2b02      	cmp	r3, #2
 800e214:	dc2b      	bgt.n	800e26e <tcp_parseopt+0x96>
 800e216:	2b00      	cmp	r3, #0
 800e218:	d041      	beq.n	800e29e <tcp_parseopt+0xc6>
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d127      	bne.n	800e26e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e21e:	e037      	b.n	800e290 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e220:	f7ff ffa4 	bl	800e16c <tcp_get_next_optbyte>
 800e224:	4603      	mov	r3, r0
 800e226:	2b04      	cmp	r3, #4
 800e228:	d13b      	bne.n	800e2a2 <tcp_parseopt+0xca>
 800e22a:	4b25      	ldr	r3, [pc, #148]	; (800e2c0 <tcp_parseopt+0xe8>)
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	3301      	adds	r3, #1
 800e230:	4a22      	ldr	r2, [pc, #136]	; (800e2bc <tcp_parseopt+0xe4>)
 800e232:	8812      	ldrh	r2, [r2, #0]
 800e234:	4293      	cmp	r3, r2
 800e236:	da34      	bge.n	800e2a2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e238:	f7ff ff98 	bl	800e16c <tcp_get_next_optbyte>
 800e23c:	4603      	mov	r3, r0
 800e23e:	b29b      	uxth	r3, r3
 800e240:	021b      	lsls	r3, r3, #8
 800e242:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e244:	f7ff ff92 	bl	800e16c <tcp_get_next_optbyte>
 800e248:	4603      	mov	r3, r0
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	89bb      	ldrh	r3, [r7, #12]
 800e24e:	4313      	orrs	r3, r2
 800e250:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e252:	89bb      	ldrh	r3, [r7, #12]
 800e254:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e258:	d804      	bhi.n	800e264 <tcp_parseopt+0x8c>
 800e25a:	89bb      	ldrh	r3, [r7, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <tcp_parseopt+0x8c>
 800e260:	89ba      	ldrh	r2, [r7, #12]
 800e262:	e001      	b.n	800e268 <tcp_parseopt+0x90>
 800e264:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e26c:	e010      	b.n	800e290 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e26e:	f7ff ff7d 	bl	800e16c <tcp_get_next_optbyte>
 800e272:	4603      	mov	r3, r0
 800e274:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e276:	7afb      	ldrb	r3, [r7, #11]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d914      	bls.n	800e2a6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e27c:	7afb      	ldrb	r3, [r7, #11]
 800e27e:	b29a      	uxth	r2, r3
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <tcp_parseopt+0xe8>)
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	4413      	add	r3, r2
 800e286:	b29b      	uxth	r3, r3
 800e288:	3b02      	subs	r3, #2
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	4b0c      	ldr	r3, [pc, #48]	; (800e2c0 <tcp_parseopt+0xe8>)
 800e28e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e290:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <tcp_parseopt+0xe8>)
 800e292:	881a      	ldrh	r2, [r3, #0]
 800e294:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <tcp_parseopt+0xe4>)
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d3b3      	bcc.n	800e204 <tcp_parseopt+0x2c>
 800e29c:	e004      	b.n	800e2a8 <tcp_parseopt+0xd0>
          return;
 800e29e:	bf00      	nop
 800e2a0:	e002      	b.n	800e2a8 <tcp_parseopt+0xd0>
            return;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <tcp_parseopt+0xd0>
            return;
 800e2a6:	bf00      	nop
      }
    }
  }
}
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	08015118 	.word	0x08015118
 800e2b4:	0801557c 	.word	0x0801557c
 800e2b8:	08015164 	.word	0x08015164
 800e2bc:	2400734c 	.word	0x2400734c
 800e2c0:	24007354 	.word	0x24007354

0800e2c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <tcp_trigger_input_pcb_close+0x1c>)
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	f043 0310 	orr.w	r3, r3, #16
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	4b03      	ldr	r3, [pc, #12]	; (800e2e0 <tcp_trigger_input_pcb_close+0x1c>)
 800e2d4:	701a      	strb	r2, [r3, #0]
}
 800e2d6:	bf00      	nop
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	24007365 	.word	0x24007365

0800e2e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <tcp_route+0x28>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	7a1b      	ldrb	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d006      	beq.n	800e30c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7a1b      	ldrb	r3, [r3, #8]
 800e302:	4618      	mov	r0, r3
 800e304:	f7fb fb10 	bl	8009928 <netif_get_by_index>
 800e308:	4603      	mov	r3, r0
 800e30a:	e003      	b.n	800e314 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f003 fa03 	bl	8011718 <ip4_route>
 800e312:	4603      	mov	r3, r0
  }
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e31c:	b590      	push	{r4, r7, lr}
 800e31e:	b087      	sub	sp, #28
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	4613      	mov	r3, r2
 800e32a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d105      	bne.n	800e33e <tcp_create_segment+0x22>
 800e332:	4b44      	ldr	r3, [pc, #272]	; (800e444 <tcp_create_segment+0x128>)
 800e334:	22a3      	movs	r2, #163	; 0xa3
 800e336:	4944      	ldr	r1, [pc, #272]	; (800e448 <tcp_create_segment+0x12c>)
 800e338:	4844      	ldr	r0, [pc, #272]	; (800e44c <tcp_create_segment+0x130>)
 800e33a:	f004 fdef 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d105      	bne.n	800e350 <tcp_create_segment+0x34>
 800e344:	4b3f      	ldr	r3, [pc, #252]	; (800e444 <tcp_create_segment+0x128>)
 800e346:	22a4      	movs	r2, #164	; 0xa4
 800e348:	4941      	ldr	r1, [pc, #260]	; (800e450 <tcp_create_segment+0x134>)
 800e34a:	4840      	ldr	r0, [pc, #256]	; (800e44c <tcp_create_segment+0x130>)
 800e34c:	f004 fde6 	bl	8012f1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e350:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	b2db      	uxtb	r3, r3
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e35e:	2003      	movs	r0, #3
 800e360:	f7fa ff56 	bl	8009210 <memp_malloc>
 800e364:	6138      	str	r0, [r7, #16]
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d104      	bne.n	800e376 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7fb fe69 	bl	800a044 <pbuf_free>
    return NULL;
 800e372:	2300      	movs	r3, #0
 800e374:	e061      	b.n	800e43a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e37c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	891a      	ldrh	r2, [r3, #8]
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
 800e390:	b29b      	uxth	r3, r3
 800e392:	429a      	cmp	r2, r3
 800e394:	d205      	bcs.n	800e3a2 <tcp_create_segment+0x86>
 800e396:	4b2b      	ldr	r3, [pc, #172]	; (800e444 <tcp_create_segment+0x128>)
 800e398:	22b0      	movs	r2, #176	; 0xb0
 800e39a:	492e      	ldr	r1, [pc, #184]	; (800e454 <tcp_create_segment+0x138>)
 800e39c:	482b      	ldr	r0, [pc, #172]	; (800e44c <tcp_create_segment+0x130>)
 800e39e:	f004 fdbd 	bl	8012f1c <iprintf>
  seg->len = p->tot_len - optlen;
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	891a      	ldrh	r2, [r3, #8]
 800e3a6:	7dfb      	ldrb	r3, [r7, #23]
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e3b2:	2114      	movs	r1, #20
 800e3b4:	68b8      	ldr	r0, [r7, #8]
 800e3b6:	f7fb fdaf 	bl	8009f18 <pbuf_add_header>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e3c0:	6938      	ldr	r0, [r7, #16]
 800e3c2:	f7fd f8ce 	bl	800b562 <tcp_seg_free>
    return NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e037      	b.n	800e43a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	8ada      	ldrh	r2, [r3, #22]
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	68dc      	ldr	r4, [r3, #12]
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f7fa f987 	bl	80086f0 <lwip_htons>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8b1a      	ldrh	r2, [r3, #24]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	68dc      	ldr	r4, [r3, #12]
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	f7fa f97e 	bl	80086f0 <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	68dc      	ldr	r4, [r3, #12]
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7fa f98c 	bl	800871a <lwip_htonl>
 800e402:	4603      	mov	r3, r0
 800e404:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e406:	7dfb      	ldrb	r3, [r7, #23]
 800e408:	089b      	lsrs	r3, r3, #2
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3305      	adds	r3, #5
 800e410:	b29b      	uxth	r3, r3
 800e412:	031b      	lsls	r3, r3, #12
 800e414:	b29a      	uxth	r2, r3
 800e416:	79fb      	ldrb	r3, [r7, #7]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4313      	orrs	r3, r2
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	68dc      	ldr	r4, [r3, #12]
 800e422:	4610      	mov	r0, r2
 800e424:	f7fa f964 	bl	80086f0 <lwip_htons>
 800e428:	4603      	mov	r3, r0
 800e42a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	749a      	strb	r2, [r3, #18]
 800e434:	2200      	movs	r2, #0
 800e436:	74da      	strb	r2, [r3, #19]
  return seg;
 800e438:	693b      	ldr	r3, [r7, #16]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd90      	pop	{r4, r7, pc}
 800e442:	bf00      	nop
 800e444:	08015598 	.word	0x08015598
 800e448:	080155cc 	.word	0x080155cc
 800e44c:	080155ec 	.word	0x080155ec
 800e450:	08015614 	.word	0x08015614
 800e454:	08015638 	.word	0x08015638

0800e458 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b08b      	sub	sp, #44	; 0x2c
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	460b      	mov	r3, r1
 800e462:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e464:	2300      	movs	r3, #0
 800e466:	61fb      	str	r3, [r7, #28]
 800e468:	2300      	movs	r3, #0
 800e46a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e46c:	2300      	movs	r3, #0
 800e46e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <tcp_split_unsent_seg+0x2c>
 800e476:	4b95      	ldr	r3, [pc, #596]	; (800e6cc <tcp_split_unsent_seg+0x274>)
 800e478:	f240 324b 	movw	r2, #843	; 0x34b
 800e47c:	4994      	ldr	r1, [pc, #592]	; (800e6d0 <tcp_split_unsent_seg+0x278>)
 800e47e:	4895      	ldr	r0, [pc, #596]	; (800e6d4 <tcp_split_unsent_seg+0x27c>)
 800e480:	f004 fd4c 	bl	8012f1c <iprintf>

  useg = pcb->unsent;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e488:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e490:	f04f 33ff 	mov.w	r3, #4294967295
 800e494:	e116      	b.n	800e6c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e496:	887b      	ldrh	r3, [r7, #2]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d109      	bne.n	800e4b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e49c:	4b8b      	ldr	r3, [pc, #556]	; (800e6cc <tcp_split_unsent_seg+0x274>)
 800e49e:	f240 3253 	movw	r2, #851	; 0x353
 800e4a2:	498d      	ldr	r1, [pc, #564]	; (800e6d8 <tcp_split_unsent_seg+0x280>)
 800e4a4:	488b      	ldr	r0, [pc, #556]	; (800e6d4 <tcp_split_unsent_seg+0x27c>)
 800e4a6:	f004 fd39 	bl	8012f1c <iprintf>
    return ERR_VAL;
 800e4aa:	f06f 0305 	mvn.w	r3, #5
 800e4ae:	e109      	b.n	800e6c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	891b      	ldrh	r3, [r3, #8]
 800e4b4:	887a      	ldrh	r2, [r7, #2]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d301      	bcc.n	800e4be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e102      	b.n	800e6c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4c2:	887a      	ldrh	r2, [r7, #2]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d906      	bls.n	800e4d6 <tcp_split_unsent_seg+0x7e>
 800e4c8:	4b80      	ldr	r3, [pc, #512]	; (800e6cc <tcp_split_unsent_seg+0x274>)
 800e4ca:	f240 325b 	movw	r2, #859	; 0x35b
 800e4ce:	4983      	ldr	r1, [pc, #524]	; (800e6dc <tcp_split_unsent_seg+0x284>)
 800e4d0:	4880      	ldr	r0, [pc, #512]	; (800e6d4 <tcp_split_unsent_seg+0x27c>)
 800e4d2:	f004 fd23 	bl	8012f1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	891b      	ldrh	r3, [r3, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <tcp_split_unsent_seg+0x94>
 800e4de:	4b7b      	ldr	r3, [pc, #492]	; (800e6cc <tcp_split_unsent_seg+0x274>)
 800e4e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e4e4:	497e      	ldr	r1, [pc, #504]	; (800e6e0 <tcp_split_unsent_seg+0x288>)
 800e4e6:	487b      	ldr	r0, [pc, #492]	; (800e6d4 <tcp_split_unsent_seg+0x27c>)
 800e4e8:	f004 fd18 	bl	8012f1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	7a9b      	ldrb	r3, [r3, #10]
 800e4f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	891a      	ldrh	r2, [r3, #8]
 800e502:	887b      	ldrh	r3, [r7, #2]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e508:	7bbb      	ldrb	r3, [r7, #14]
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	89bb      	ldrh	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	b29b      	uxth	r3, r3
 800e512:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e516:	4619      	mov	r1, r3
 800e518:	2036      	movs	r0, #54	; 0x36
 800e51a:	f7fb faaf 	bl	8009a7c <pbuf_alloc>
 800e51e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 80b7 	beq.w	800e696 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	891a      	ldrh	r2, [r3, #8]
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	891b      	ldrh	r3, [r3, #8]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	b29a      	uxth	r2, r3
 800e536:	887b      	ldrh	r3, [r7, #2]
 800e538:	4413      	add	r3, r2
 800e53a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	6858      	ldr	r0, [r3, #4]
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	18d1      	adds	r1, r2, r3
 800e548:	897b      	ldrh	r3, [r7, #10]
 800e54a:	89ba      	ldrh	r2, [r7, #12]
 800e54c:	f7fb ff80 	bl	800a450 <pbuf_copy_partial>
 800e550:	4603      	mov	r3, r0
 800e552:	461a      	mov	r2, r3
 800e554:	89bb      	ldrh	r3, [r7, #12]
 800e556:	4293      	cmp	r3, r2
 800e558:	f040 809f 	bne.w	800e69a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	899b      	ldrh	r3, [r3, #12]
 800e562:	b29b      	uxth	r3, r3
 800e564:	4618      	mov	r0, r3
 800e566:	f7fa f8c3 	bl	80086f0 <lwip_htons>
 800e56a:	4603      	mov	r3, r0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e572:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e574:	2300      	movs	r3, #0
 800e576:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e578:	7efb      	ldrb	r3, [r7, #27]
 800e57a:	f003 0308 	and.w	r3, r3, #8
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d007      	beq.n	800e592 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e582:	7efb      	ldrb	r3, [r7, #27]
 800e584:	f023 0308 	bic.w	r3, r3, #8
 800e588:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e58a:	7ebb      	ldrb	r3, [r7, #26]
 800e58c:	f043 0308 	orr.w	r3, r3, #8
 800e590:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e592:	7efb      	ldrb	r3, [r7, #27]
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d007      	beq.n	800e5ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e59c:	7efb      	ldrb	r3, [r7, #27]
 800e59e:	f023 0301 	bic.w	r3, r3, #1
 800e5a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e5a4:	7ebb      	ldrb	r3, [r7, #26]
 800e5a6:	f043 0301 	orr.w	r3, r3, #1
 800e5aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fa f8b1 	bl	800871a <lwip_htonl>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	887b      	ldrh	r3, [r7, #2]
 800e5bc:	18d1      	adds	r1, r2, r3
 800e5be:	7eba      	ldrb	r2, [r7, #26]
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	6939      	ldr	r1, [r7, #16]
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7ff fea7 	bl	800e31c <tcp_create_segment>
 800e5ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d063      	beq.n	800e69e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb fdc0 	bl	800a160 <pbuf_clen>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e5ea:	1a9b      	subs	r3, r3, r2
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	6858      	ldr	r0, [r3, #4]
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	891a      	ldrh	r2, [r3, #8]
 800e5fe:	89bb      	ldrh	r3, [r7, #12]
 800e600:	1ad3      	subs	r3, r2, r3
 800e602:	b29b      	uxth	r3, r3
 800e604:	4619      	mov	r1, r3
 800e606:	f7fb fb97 	bl	8009d38 <pbuf_realloc>
  useg->len -= remainder;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	891a      	ldrh	r2, [r3, #8]
 800e60e:	89bb      	ldrh	r3, [r7, #12]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	b29a      	uxth	r2, r3
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	899b      	ldrh	r3, [r3, #12]
 800e61e:	b29c      	uxth	r4, r3
 800e620:	7efb      	ldrb	r3, [r7, #27]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f7fa f863 	bl	80086f0 <lwip_htons>
 800e62a:	4603      	mov	r3, r0
 800e62c:	461a      	mov	r2, r3
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	4322      	orrs	r2, r4
 800e634:	b292      	uxth	r2, r2
 800e636:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fb fd8f 	bl	800a160 <pbuf_clen>
 800e642:	4603      	mov	r3, r0
 800e644:	461a      	mov	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e64c:	4413      	add	r3, r2
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fb fd80 	bl	800a160 <pbuf_clen>
 800e660:	4603      	mov	r3, r0
 800e662:	461a      	mov	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e66a:	4413      	add	r3, r2
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	69fa      	ldr	r2, [r7, #28]
 800e680:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d103      	bne.n	800e692 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e692:	2300      	movs	r3, #0
 800e694:	e016      	b.n	800e6c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e696:	bf00      	nop
 800e698:	e002      	b.n	800e6a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e69a:	bf00      	nop
 800e69c:	e000      	b.n	800e6a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e69e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <tcp_split_unsent_seg+0x25c>
 800e6a6:	4b09      	ldr	r3, [pc, #36]	; (800e6cc <tcp_split_unsent_seg+0x274>)
 800e6a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e6ac:	490d      	ldr	r1, [pc, #52]	; (800e6e4 <tcp_split_unsent_seg+0x28c>)
 800e6ae:	4809      	ldr	r0, [pc, #36]	; (800e6d4 <tcp_split_unsent_seg+0x27c>)
 800e6b0:	f004 fc34 	bl	8012f1c <iprintf>
  if (p != NULL) {
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e6ba:	6938      	ldr	r0, [r7, #16]
 800e6bc:	f7fb fcc2 	bl	800a044 <pbuf_free>
  }

  return ERR_MEM;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3724      	adds	r7, #36	; 0x24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd90      	pop	{r4, r7, pc}
 800e6cc:	08015598 	.word	0x08015598
 800e6d0:	0801592c 	.word	0x0801592c
 800e6d4:	080155ec 	.word	0x080155ec
 800e6d8:	08015950 	.word	0x08015950
 800e6dc:	08015974 	.word	0x08015974
 800e6e0:	08015984 	.word	0x08015984
 800e6e4:	08015994 	.word	0x08015994

0800e6e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e6e8:	b590      	push	{r4, r7, lr}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d106      	bne.n	800e704 <tcp_send_fin+0x1c>
 800e6f6:	4b21      	ldr	r3, [pc, #132]	; (800e77c <tcp_send_fin+0x94>)
 800e6f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e6fc:	4920      	ldr	r1, [pc, #128]	; (800e780 <tcp_send_fin+0x98>)
 800e6fe:	4821      	ldr	r0, [pc, #132]	; (800e784 <tcp_send_fin+0x9c>)
 800e700:	f004 fc0c 	bl	8012f1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d02e      	beq.n	800e76a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e710:	60fb      	str	r3, [r7, #12]
 800e712:	e002      	b.n	800e71a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1f8      	bne.n	800e714 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	899b      	ldrh	r3, [r3, #12]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f9 ffe0 	bl	80086f0 <lwip_htons>
 800e730:	4603      	mov	r3, r0
 800e732:	b2db      	uxtb	r3, r3
 800e734:	f003 0307 	and.w	r3, r3, #7
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d116      	bne.n	800e76a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	899b      	ldrh	r3, [r3, #12]
 800e742:	b29c      	uxth	r4, r3
 800e744:	2001      	movs	r0, #1
 800e746:	f7f9 ffd3 	bl	80086f0 <lwip_htons>
 800e74a:	4603      	mov	r3, r0
 800e74c:	461a      	mov	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	4322      	orrs	r2, r4
 800e754:	b292      	uxth	r2, r2
 800e756:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	8b5b      	ldrh	r3, [r3, #26]
 800e75c:	f043 0320 	orr.w	r3, r3, #32
 800e760:	b29a      	uxth	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	e004      	b.n	800e774 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e76a:	2101      	movs	r1, #1
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f80b 	bl	800e788 <tcp_enqueue_flags>
 800e772:	4603      	mov	r3, r0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3714      	adds	r7, #20
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd90      	pop	{r4, r7, pc}
 800e77c:	08015598 	.word	0x08015598
 800e780:	080159a0 	.word	0x080159a0
 800e784:	080155ec 	.word	0x080155ec

0800e788 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08a      	sub	sp, #40	; 0x28
 800e78c:	af02      	add	r7, sp, #8
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e79c:	78fb      	ldrb	r3, [r7, #3]
 800e79e:	f003 0303 	and.w	r3, r3, #3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d106      	bne.n	800e7b4 <tcp_enqueue_flags+0x2c>
 800e7a6:	4b67      	ldr	r3, [pc, #412]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e7a8:	f240 4211 	movw	r2, #1041	; 0x411
 800e7ac:	4966      	ldr	r1, [pc, #408]	; (800e948 <tcp_enqueue_flags+0x1c0>)
 800e7ae:	4867      	ldr	r0, [pc, #412]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e7b0:	f004 fbb4 	bl	8012f1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <tcp_enqueue_flags+0x40>
 800e7ba:	4b62      	ldr	r3, [pc, #392]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e7bc:	f240 4213 	movw	r2, #1043	; 0x413
 800e7c0:	4963      	ldr	r1, [pc, #396]	; (800e950 <tcp_enqueue_flags+0x1c8>)
 800e7c2:	4862      	ldr	r0, [pc, #392]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e7c4:	f004 fbaa 	bl	8012f1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e7c8:	78fb      	ldrb	r3, [r7, #3]
 800e7ca:	f003 0302 	and.w	r3, r3, #2
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e7d6:	7ffb      	ldrb	r3, [r7, #31]
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	f003 0304 	and.w	r3, r3, #4
 800e7e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e7e2:	7dfb      	ldrb	r3, [r7, #23]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	2036      	movs	r0, #54	; 0x36
 800e7ee:	f7fb f945 	bl	8009a7c <pbuf_alloc>
 800e7f2:	6138      	str	r0, [r7, #16]
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d109      	bne.n	800e80e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8b5b      	ldrh	r3, [r3, #26]
 800e7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e802:	b29a      	uxth	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e808:	f04f 33ff 	mov.w	r3, #4294967295
 800e80c:	e095      	b.n	800e93a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	895a      	ldrh	r2, [r3, #10]
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	b29b      	uxth	r3, r3
 800e816:	429a      	cmp	r2, r3
 800e818:	d206      	bcs.n	800e828 <tcp_enqueue_flags+0xa0>
 800e81a:	4b4a      	ldr	r3, [pc, #296]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e81c:	f240 4239 	movw	r2, #1081	; 0x439
 800e820:	494c      	ldr	r1, [pc, #304]	; (800e954 <tcp_enqueue_flags+0x1cc>)
 800e822:	484a      	ldr	r0, [pc, #296]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e824:	f004 fb7a 	bl	8012f1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	7ffb      	ldrb	r3, [r7, #31]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	460b      	mov	r3, r1
 800e834:	6939      	ldr	r1, [r7, #16]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff fd70 	bl	800e31c <tcp_create_segment>
 800e83c:	60f8      	str	r0, [r7, #12]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d109      	bne.n	800e858 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	8b5b      	ldrh	r3, [r3, #26]
 800e848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e852:	f04f 33ff 	mov.w	r3, #4294967295
 800e856:	e070      	b.n	800e93a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	f003 0303 	and.w	r3, r3, #3
 800e860:	2b00      	cmp	r3, #0
 800e862:	d006      	beq.n	800e872 <tcp_enqueue_flags+0xea>
 800e864:	4b37      	ldr	r3, [pc, #220]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e866:	f240 4242 	movw	r2, #1090	; 0x442
 800e86a:	493b      	ldr	r1, [pc, #236]	; (800e958 <tcp_enqueue_flags+0x1d0>)
 800e86c:	4837      	ldr	r0, [pc, #220]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e86e:	f004 fb55 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	891b      	ldrh	r3, [r3, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d006      	beq.n	800e888 <tcp_enqueue_flags+0x100>
 800e87a:	4b32      	ldr	r3, [pc, #200]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e87c:	f240 4243 	movw	r2, #1091	; 0x443
 800e880:	4936      	ldr	r1, [pc, #216]	; (800e95c <tcp_enqueue_flags+0x1d4>)
 800e882:	4832      	ldr	r0, [pc, #200]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e884:	f004 fb4a 	bl	8012f1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d103      	bne.n	800e898 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	66da      	str	r2, [r3, #108]	; 0x6c
 800e896:	e00d      	b.n	800e8b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89c:	61bb      	str	r3, [r7, #24]
 800e89e:	e002      	b.n	800e8a6 <tcp_enqueue_flags+0x11e>
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	61bb      	str	r3, [r7, #24]
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1f8      	bne.n	800e8a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	f003 0302 	and.w	r3, r3, #2
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d104      	bne.n	800e8d0 <tcp_enqueue_flags+0x148>
 800e8c6:	78fb      	ldrb	r3, [r7, #3]
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d004      	beq.n	800e8da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e8da:	78fb      	ldrb	r3, [r7, #3]
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d006      	beq.n	800e8f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8b5b      	ldrh	r3, [r3, #26]
 800e8e8:	f043 0320 	orr.w	r3, r3, #32
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fb fc32 	bl	800a160 <pbuf_clen>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	461a      	mov	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e906:	4413      	add	r3, r2
 800e908:	b29a      	uxth	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00e      	beq.n	800e938 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <tcp_enqueue_flags+0x1b0>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <tcp_enqueue_flags+0x1b0>
 800e92a:	4b06      	ldr	r3, [pc, #24]	; (800e944 <tcp_enqueue_flags+0x1bc>)
 800e92c:	f240 4265 	movw	r2, #1125	; 0x465
 800e930:	490b      	ldr	r1, [pc, #44]	; (800e960 <tcp_enqueue_flags+0x1d8>)
 800e932:	4806      	ldr	r0, [pc, #24]	; (800e94c <tcp_enqueue_flags+0x1c4>)
 800e934:	f004 faf2 	bl	8012f1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3720      	adds	r7, #32
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	08015598 	.word	0x08015598
 800e948:	080159bc 	.word	0x080159bc
 800e94c:	080155ec 	.word	0x080155ec
 800e950:	08015a14 	.word	0x08015a14
 800e954:	08015a34 	.word	0x08015a34
 800e958:	08015a70 	.word	0x08015a70
 800e95c:	08015a88 	.word	0x08015a88
 800e960:	08015ab4 	.word	0x08015ab4

0800e964 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e964:	b5b0      	push	{r4, r5, r7, lr}
 800e966:	b08a      	sub	sp, #40	; 0x28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <tcp_output+0x1c>
 800e972:	4b8a      	ldr	r3, [pc, #552]	; (800eb9c <tcp_output+0x238>)
 800e974:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e978:	4989      	ldr	r1, [pc, #548]	; (800eba0 <tcp_output+0x23c>)
 800e97a:	488a      	ldr	r0, [pc, #552]	; (800eba4 <tcp_output+0x240>)
 800e97c:	f004 face 	bl	8012f1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	7d1b      	ldrb	r3, [r3, #20]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d106      	bne.n	800e996 <tcp_output+0x32>
 800e988:	4b84      	ldr	r3, [pc, #528]	; (800eb9c <tcp_output+0x238>)
 800e98a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e98e:	4986      	ldr	r1, [pc, #536]	; (800eba8 <tcp_output+0x244>)
 800e990:	4884      	ldr	r0, [pc, #528]	; (800eba4 <tcp_output+0x240>)
 800e992:	f004 fac3 	bl	8012f1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e996:	4b85      	ldr	r3, [pc, #532]	; (800ebac <tcp_output+0x248>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d101      	bne.n	800e9a4 <tcp_output+0x40>
    return ERR_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e1ce      	b.n	800ed42 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	bf28      	it	cs
 800e9b4:	4613      	movcs	r3, r2
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10b      	bne.n	800e9de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ca:	f003 0302 	and.w	r3, r3, #2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f000 81aa 	beq.w	800ed28 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 fdcb 	bl	800f570 <tcp_send_empty_ack>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	e1b1      	b.n	800ed42 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e9de:	6879      	ldr	r1, [r7, #4]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fc7c 	bl	800e2e4 <tcp_route>
 800e9ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <tcp_output+0x96>
    return ERR_RTE;
 800e9f4:	f06f 0303 	mvn.w	r3, #3
 800e9f8:	e1a3      	b.n	800ed42 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d003      	beq.n	800ea08 <tcp_output+0xa4>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d111      	bne.n	800ea2c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d002      	beq.n	800ea14 <tcp_output+0xb0>
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	3304      	adds	r3, #4
 800ea12:	e000      	b.n	800ea16 <tcp_output+0xb2>
 800ea14:	2300      	movs	r3, #0
 800ea16:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d102      	bne.n	800ea24 <tcp_output+0xc0>
      return ERR_RTE;
 800ea1e:	f06f 0303 	mvn.w	r3, #3
 800ea22:	e18e      	b.n	800ed42 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f9 fe71 	bl	800871a <lwip_htonl>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea42:	8912      	ldrh	r2, [r2, #8]
 800ea44:	4413      	add	r3, r2
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d227      	bcs.n	800ea9c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea52:	461a      	mov	r2, r3
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d114      	bne.n	800ea84 <tcp_output+0x120>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d110      	bne.n	800ea84 <tcp_output+0x120>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10b      	bne.n	800ea84 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	8b5b      	ldrh	r3, [r3, #26]
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 814d 	beq.w	800ed2c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fd6c 	bl	800f570 <tcp_send_empty_ack>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	e152      	b.n	800ed42 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 811c 	beq.w	800ecea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800eab2:	e002      	b.n	800eaba <tcp_output+0x156>
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	623b      	str	r3, [r7, #32]
 800eaba:	6a3b      	ldr	r3, [r7, #32]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1f8      	bne.n	800eab4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800eac2:	e112      	b.n	800ecea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	899b      	ldrh	r3, [r3, #12]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4618      	mov	r0, r3
 800eace:	f7f9 fe0f 	bl	80086f0 <lwip_htons>
 800ead2:	4603      	mov	r3, r0
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 0304 	and.w	r3, r3, #4
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d006      	beq.n	800eaec <tcp_output+0x188>
 800eade:	4b2f      	ldr	r3, [pc, #188]	; (800eb9c <tcp_output+0x238>)
 800eae0:	f240 5236 	movw	r2, #1334	; 0x536
 800eae4:	4932      	ldr	r1, [pc, #200]	; (800ebb0 <tcp_output+0x24c>)
 800eae6:	482f      	ldr	r0, [pc, #188]	; (800eba4 <tcp_output+0x240>)
 800eae8:	f004 fa18 	bl	8012f1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d01f      	beq.n	800eb34 <tcp_output+0x1d0>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	8b5b      	ldrh	r3, [r3, #26]
 800eaf8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d119      	bne.n	800eb34 <tcp_output+0x1d0>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00b      	beq.n	800eb20 <tcp_output+0x1bc>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d110      	bne.n	800eb34 <tcp_output+0x1d0>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb16:	891a      	ldrh	r2, [r3, #8]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d209      	bcs.n	800eb34 <tcp_output+0x1d0>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d004      	beq.n	800eb34 <tcp_output+0x1d0>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb30:	2b08      	cmp	r3, #8
 800eb32:	d901      	bls.n	800eb38 <tcp_output+0x1d4>
 800eb34:	2301      	movs	r3, #1
 800eb36:	e000      	b.n	800eb3a <tcp_output+0x1d6>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d106      	bne.n	800eb4c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8b5b      	ldrh	r3, [r3, #26]
 800eb42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 80e4 	beq.w	800ed14 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	7d1b      	ldrb	r3, [r3, #20]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d00d      	beq.n	800eb70 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29c      	uxth	r4, r3
 800eb5c:	2010      	movs	r0, #16
 800eb5e:	f7f9 fdc7 	bl	80086f0 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	461a      	mov	r2, r3
 800eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	4322      	orrs	r2, r4
 800eb6c:	b292      	uxth	r2, r2
 800eb6e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800eb70:	697a      	ldr	r2, [r7, #20]
 800eb72:	6879      	ldr	r1, [r7, #4]
 800eb74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb76:	f000 f909 	bl	800ed8c <tcp_output_segment>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800eb7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d016      	beq.n	800ebb4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8b5b      	ldrh	r3, [r3, #26]
 800eb8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	835a      	strh	r2, [r3, #26]
      return err;
 800eb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb98:	e0d3      	b.n	800ed42 <tcp_output+0x3de>
 800eb9a:	bf00      	nop
 800eb9c:	08015598 	.word	0x08015598
 800eba0:	08015adc 	.word	0x08015adc
 800eba4:	080155ec 	.word	0x080155ec
 800eba8:	08015af4 	.word	0x08015af4
 800ebac:	2400736c 	.word	0x2400736c
 800ebb0:	08015b1c 	.word	0x08015b1c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	7d1b      	ldrb	r3, [r3, #20]
 800ebc0:	2b02      	cmp	r3, #2
 800ebc2:	d006      	beq.n	800ebd2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	8b5b      	ldrh	r3, [r3, #26]
 800ebc8:	f023 0303 	bic.w	r3, r3, #3
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7f9 fd9e 	bl	800871a <lwip_htonl>
 800ebde:	4604      	mov	r4, r0
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	891b      	ldrh	r3, [r3, #8]
 800ebe4:	461d      	mov	r5, r3
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	899b      	ldrh	r3, [r3, #12]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f9 fd7e 	bl	80086f0 <lwip_htons>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	f003 0303 	and.w	r3, r3, #3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <tcp_output+0x2a0>
 800ec00:	2301      	movs	r3, #1
 800ec02:	e000      	b.n	800ec06 <tcp_output+0x2a2>
 800ec04:	2300      	movs	r3, #0
 800ec06:	442b      	add	r3, r5
 800ec08:	4423      	add	r3, r4
 800ec0a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	da02      	bge.n	800ec1e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ec1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec20:	891b      	ldrh	r3, [r3, #8]
 800ec22:	461c      	mov	r4, r3
 800ec24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	899b      	ldrh	r3, [r3, #12]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f9 fd5f 	bl	80086f0 <lwip_htons>
 800ec32:	4603      	mov	r3, r0
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	f003 0303 	and.w	r3, r3, #3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <tcp_output+0x2de>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e000      	b.n	800ec44 <tcp_output+0x2e0>
 800ec42:	2300      	movs	r3, #0
 800ec44:	4423      	add	r3, r4
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d049      	beq.n	800ecde <tcp_output+0x37a>
      seg->next = NULL;
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <tcp_output+0x300>
        pcb->unacked = seg;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec5c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec60:	623b      	str	r3, [r7, #32]
 800ec62:	e03f      	b.n	800ece4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f9 fd55 	bl	800871a <lwip_htonl>
 800ec70:	4604      	mov	r4, r0
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f9 fd4e 	bl	800871a <lwip_htonl>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	1ae3      	subs	r3, r4, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	da24      	bge.n	800ecd0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	3370      	adds	r3, #112	; 0x70
 800ec8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ec8c:	e002      	b.n	800ec94 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d011      	beq.n	800ecc0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7f9 fd38 	bl	800871a <lwip_htonl>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7f9 fd31 	bl	800871a <lwip_htonl>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dbe6      	blt.n	800ec8e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	e009      	b.n	800ece4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecd4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	623b      	str	r3, [r7, #32]
 800ecdc:	e002      	b.n	800ece4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ecde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ece0:	f7fc fc3f 	bl	800b562 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ece8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d012      	beq.n	800ed16 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7f9 fd0f 	bl	800871a <lwip_htonl>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed06:	8912      	ldrh	r2, [r2, #8]
 800ed08:	4413      	add	r3, r2
  while (seg != NULL &&
 800ed0a:	69ba      	ldr	r2, [r7, #24]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f4bf aed9 	bcs.w	800eac4 <tcp_output+0x160>
 800ed12:	e000      	b.n	800ed16 <tcp_output+0x3b2>
      break;
 800ed14:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d108      	bne.n	800ed30 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ed26:	e004      	b.n	800ed32 <tcp_output+0x3ce>
    goto output_done;
 800ed28:	bf00      	nop
 800ed2a:	e002      	b.n	800ed32 <tcp_output+0x3ce>
    goto output_done;
 800ed2c:	bf00      	nop
 800ed2e:	e000      	b.n	800ed32 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ed30:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	8b5b      	ldrh	r3, [r3, #26]
 800ed36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3728      	adds	r7, #40	; 0x28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bdb0      	pop	{r4, r5, r7, pc}
 800ed4a:	bf00      	nop

0800ed4c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <tcp_output_segment_busy+0x1c>
 800ed5a:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <tcp_output_segment_busy+0x34>)
 800ed5c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ed60:	4908      	ldr	r1, [pc, #32]	; (800ed84 <tcp_output_segment_busy+0x38>)
 800ed62:	4809      	ldr	r0, [pc, #36]	; (800ed88 <tcp_output_segment_busy+0x3c>)
 800ed64:	f004 f8da 	bl	8012f1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	7b9b      	ldrb	r3, [r3, #14]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d001      	beq.n	800ed76 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e000      	b.n	800ed78 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	08015598 	.word	0x08015598
 800ed84:	08015b34 	.word	0x08015b34
 800ed88:	080155ec 	.word	0x080155ec

0800ed8c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ed8c:	b5b0      	push	{r4, r5, r7, lr}
 800ed8e:	b08c      	sub	sp, #48	; 0x30
 800ed90:	af04      	add	r7, sp, #16
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d106      	bne.n	800edac <tcp_output_segment+0x20>
 800ed9e:	4b64      	ldr	r3, [pc, #400]	; (800ef30 <tcp_output_segment+0x1a4>)
 800eda0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800eda4:	4963      	ldr	r1, [pc, #396]	; (800ef34 <tcp_output_segment+0x1a8>)
 800eda6:	4864      	ldr	r0, [pc, #400]	; (800ef38 <tcp_output_segment+0x1ac>)
 800eda8:	f004 f8b8 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <tcp_output_segment+0x34>
 800edb2:	4b5f      	ldr	r3, [pc, #380]	; (800ef30 <tcp_output_segment+0x1a4>)
 800edb4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800edb8:	4960      	ldr	r1, [pc, #384]	; (800ef3c <tcp_output_segment+0x1b0>)
 800edba:	485f      	ldr	r0, [pc, #380]	; (800ef38 <tcp_output_segment+0x1ac>)
 800edbc:	f004 f8ae 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <tcp_output_segment+0x48>
 800edc6:	4b5a      	ldr	r3, [pc, #360]	; (800ef30 <tcp_output_segment+0x1a4>)
 800edc8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800edcc:	495c      	ldr	r1, [pc, #368]	; (800ef40 <tcp_output_segment+0x1b4>)
 800edce:	485a      	ldr	r0, [pc, #360]	; (800ef38 <tcp_output_segment+0x1ac>)
 800edd0:	f004 f8a4 	bl	8012f1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff ffb9 	bl	800ed4c <tcp_output_segment_busy>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e0a1      	b.n	800ef28 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	68dc      	ldr	r4, [r3, #12]
 800edec:	4610      	mov	r0, r2
 800edee:	f7f9 fc94 	bl	800871a <lwip_htonl>
 800edf2:	4603      	mov	r3, r0
 800edf4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	68dc      	ldr	r4, [r3, #12]
 800edfe:	4610      	mov	r0, r2
 800ee00:	f7f9 fc76 	bl	80086f0 <lwip_htons>
 800ee04:	4603      	mov	r3, r0
 800ee06:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ee10:	441a      	add	r2, r3
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	3314      	adds	r3, #20
 800ee1c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	7a9b      	ldrb	r3, [r3, #10]
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d015      	beq.n	800ee56 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	461a      	mov	r2, r3
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ee36:	f7fc fe8b 	bl	800bb50 <tcp_eff_send_mss_netif>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ee3e:	8b7b      	ldrh	r3, [r7, #26]
 800ee40:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7f9 fc68 	bl	800871a <lwip_htonl>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	3304      	adds	r3, #4
 800ee54:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	da02      	bge.n	800ee66 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	2200      	movs	r2, #0
 800ee64:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d10c      	bne.n	800ee88 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ee6e:	4b35      	ldr	r3, [pc, #212]	; (800ef44 <tcp_output_segment+0x1b8>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7f9 fc4c 	bl	800871a <lwip_htonl>
 800ee82:	4602      	mov	r2, r0
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	68da      	ldr	r2, [r3, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	8959      	ldrh	r1, [r3, #10]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	8b3a      	ldrh	r2, [r7, #24]
 800eea2:	1a8a      	subs	r2, r1, r2
 800eea4:	b292      	uxth	r2, r2
 800eea6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	8919      	ldrh	r1, [r3, #8]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	8b3a      	ldrh	r2, [r7, #24]
 800eeb4:	1a8a      	subs	r2, r1, r2
 800eeb6:	b292      	uxth	r2, r2
 800eeb8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	68d2      	ldr	r2, [r2, #12]
 800eec2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	741a      	strb	r2, [r3, #16]
 800eecc:	2200      	movs	r2, #0
 800eece:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	68da      	ldr	r2, [r3, #12]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	7a9b      	ldrb	r3, [r3, #10]
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <tcp_output_segment+0x158>
 800eee0:	2318      	movs	r3, #24
 800eee2:	e000      	b.n	800eee6 <tcp_output_segment+0x15a>
 800eee4:	2314      	movs	r3, #20
 800eee6:	4413      	add	r3, r2
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d006      	beq.n	800eefc <tcp_output_segment+0x170>
 800eeee:	4b10      	ldr	r3, [pc, #64]	; (800ef30 <tcp_output_segment+0x1a4>)
 800eef0:	f240 621c 	movw	r2, #1564	; 0x61c
 800eef4:	4914      	ldr	r1, [pc, #80]	; (800ef48 <tcp_output_segment+0x1bc>)
 800eef6:	4810      	ldr	r0, [pc, #64]	; (800ef38 <tcp_output_segment+0x1ac>)
 800eef8:	f004 f810 	bl	8012f1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6858      	ldr	r0, [r3, #4]
 800ef00:	68b9      	ldr	r1, [r7, #8]
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	1d1c      	adds	r4, r3, #4
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	7add      	ldrb	r5, [r3, #11]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	7a9b      	ldrb	r3, [r3, #10]
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	9202      	str	r2, [sp, #8]
 800ef12:	2206      	movs	r2, #6
 800ef14:	9201      	str	r2, [sp, #4]
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	462b      	mov	r3, r5
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	f002 fdba 	bl	8011a94 <ip4_output_if>
 800ef20:	4603      	mov	r3, r0
 800ef22:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ef24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef30:	08015598 	.word	0x08015598
 800ef34:	08015b5c 	.word	0x08015b5c
 800ef38:	080155ec 	.word	0x080155ec
 800ef3c:	08015b7c 	.word	0x08015b7c
 800ef40:	08015b9c 	.word	0x08015b9c
 800ef44:	24007320 	.word	0x24007320
 800ef48:	08015bc0 	.word	0x08015bc0

0800ef4c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ef4c:	b5b0      	push	{r4, r5, r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <tcp_rexmit_rto_prepare+0x1c>
 800ef5a:	4b31      	ldr	r3, [pc, #196]	; (800f020 <tcp_rexmit_rto_prepare+0xd4>)
 800ef5c:	f240 6263 	movw	r2, #1635	; 0x663
 800ef60:	4930      	ldr	r1, [pc, #192]	; (800f024 <tcp_rexmit_rto_prepare+0xd8>)
 800ef62:	4831      	ldr	r0, [pc, #196]	; (800f028 <tcp_rexmit_rto_prepare+0xdc>)
 800ef64:	f003 ffda 	bl	8012f1c <iprintf>

  if (pcb->unacked == NULL) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d102      	bne.n	800ef76 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ef70:	f06f 0305 	mvn.w	r3, #5
 800ef74:	e050      	b.n	800f018 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef7a:	60fb      	str	r3, [r7, #12]
 800ef7c:	e00b      	b.n	800ef96 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff fee4 	bl	800ed4c <tcp_output_segment_busy>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d002      	beq.n	800ef90 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ef8a:	f06f 0305 	mvn.w	r3, #5
 800ef8e:	e043      	b.n	800f018 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1ef      	bne.n	800ef7e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f7ff fed4 	bl	800ed4c <tcp_output_segment_busy>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d002      	beq.n	800efb0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800efaa:	f06f 0305 	mvn.w	r3, #5
 800efae:	e033      	b.n	800f018 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	8b5b      	ldrh	r3, [r3, #26]
 800efca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800efce:	b29a      	uxth	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7f9 fb9d 	bl	800871a <lwip_htonl>
 800efe0:	4604      	mov	r4, r0
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	891b      	ldrh	r3, [r3, #8]
 800efe6:	461d      	mov	r5, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	899b      	ldrh	r3, [r3, #12]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7f9 fb7d 	bl	80086f0 <lwip_htons>
 800eff6:	4603      	mov	r3, r0
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	f003 0303 	and.w	r3, r3, #3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <tcp_rexmit_rto_prepare+0xba>
 800f002:	2301      	movs	r3, #1
 800f004:	e000      	b.n	800f008 <tcp_rexmit_rto_prepare+0xbc>
 800f006:	2300      	movs	r3, #0
 800f008:	442b      	add	r3, r5
 800f00a:	18e2      	adds	r2, r4, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bdb0      	pop	{r4, r5, r7, pc}
 800f020:	08015598 	.word	0x08015598
 800f024:	08015bd4 	.word	0x08015bd4
 800f028:	080155ec 	.word	0x080155ec

0800f02c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <tcp_rexmit_rto_commit+0x1c>
 800f03a:	4b0d      	ldr	r3, [pc, #52]	; (800f070 <tcp_rexmit_rto_commit+0x44>)
 800f03c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f040:	490c      	ldr	r1, [pc, #48]	; (800f074 <tcp_rexmit_rto_commit+0x48>)
 800f042:	480d      	ldr	r0, [pc, #52]	; (800f078 <tcp_rexmit_rto_commit+0x4c>)
 800f044:	f003 ff6a 	bl	8012f1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f04e:	2bff      	cmp	r3, #255	; 0xff
 800f050:	d007      	beq.n	800f062 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f058:	3301      	adds	r3, #1
 800f05a:	b2da      	uxtb	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff fc7e 	bl	800e964 <tcp_output>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	08015598 	.word	0x08015598
 800f074:	08015bf8 	.word	0x08015bf8
 800f078:	080155ec 	.word	0x080155ec

0800f07c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d106      	bne.n	800f098 <tcp_rexmit_rto+0x1c>
 800f08a:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <tcp_rexmit_rto+0x38>)
 800f08c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f090:	4909      	ldr	r1, [pc, #36]	; (800f0b8 <tcp_rexmit_rto+0x3c>)
 800f092:	480a      	ldr	r0, [pc, #40]	; (800f0bc <tcp_rexmit_rto+0x40>)
 800f094:	f003 ff42 	bl	8012f1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7ff ff57 	bl	800ef4c <tcp_rexmit_rto_prepare>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7ff ffc1 	bl	800f02c <tcp_rexmit_rto_commit>
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	08015598 	.word	0x08015598
 800f0b8:	08015c1c 	.word	0x08015c1c
 800f0bc:	080155ec 	.word	0x080155ec

0800f0c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f0c0:	b590      	push	{r4, r7, lr}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d106      	bne.n	800f0dc <tcp_rexmit+0x1c>
 800f0ce:	4b2f      	ldr	r3, [pc, #188]	; (800f18c <tcp_rexmit+0xcc>)
 800f0d0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f0d4:	492e      	ldr	r1, [pc, #184]	; (800f190 <tcp_rexmit+0xd0>)
 800f0d6:	482f      	ldr	r0, [pc, #188]	; (800f194 <tcp_rexmit+0xd4>)
 800f0d8:	f003 ff20 	bl	8012f1c <iprintf>

  if (pcb->unacked == NULL) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d102      	bne.n	800f0ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f0e4:	f06f 0305 	mvn.w	r3, #5
 800f0e8:	e04c      	b.n	800f184 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f0f0:	68b8      	ldr	r0, [r7, #8]
 800f0f2:	f7ff fe2b 	bl	800ed4c <tcp_output_segment_busy>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f0fc:	f06f 0305 	mvn.w	r3, #5
 800f100:	e040      	b.n	800f184 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	336c      	adds	r3, #108	; 0x6c
 800f10e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f110:	e002      	b.n	800f118 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d011      	beq.n	800f144 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	f7f9 faf6 	bl	800871a <lwip_htonl>
 800f12e:	4604      	mov	r4, r0
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	f7f9 faef 	bl	800871a <lwip_htonl>
 800f13c:	4603      	mov	r3, r0
 800f13e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f140:	2b00      	cmp	r3, #0
 800f142:	dbe6      	blt.n	800f112 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d103      	bne.n	800f162 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f168:	2bff      	cmp	r3, #255	; 0xff
 800f16a:	d007      	beq.n	800f17c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f172:	3301      	adds	r3, #1
 800f174:	b2da      	uxtb	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3714      	adds	r7, #20
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd90      	pop	{r4, r7, pc}
 800f18c:	08015598 	.word	0x08015598
 800f190:	08015c38 	.word	0x08015c38
 800f194:	080155ec 	.word	0x080155ec

0800f198 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d106      	bne.n	800f1b4 <tcp_rexmit_fast+0x1c>
 800f1a6:	4b2a      	ldr	r3, [pc, #168]	; (800f250 <tcp_rexmit_fast+0xb8>)
 800f1a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f1ac:	4929      	ldr	r1, [pc, #164]	; (800f254 <tcp_rexmit_fast+0xbc>)
 800f1ae:	482a      	ldr	r0, [pc, #168]	; (800f258 <tcp_rexmit_fast+0xc0>)
 800f1b0:	f003 feb4 	bl	8012f1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d045      	beq.n	800f248 <tcp_rexmit_fast+0xb0>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	8b5b      	ldrh	r3, [r3, #26]
 800f1c0:	f003 0304 	and.w	r3, r3, #4
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d13f      	bne.n	800f248 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7ff ff79 	bl	800f0c0 <tcp_rexmit>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d139      	bne.n	800f248 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	bf28      	it	cs
 800f1e4:	4613      	movcs	r3, r2
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	da00      	bge.n	800f1ee <tcp_rexmit_fast+0x56>
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	105b      	asrs	r3, r3, #1
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f1fe:	461a      	mov	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	429a      	cmp	r2, r3
 800f208:	d206      	bcs.n	800f218 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f20e:	005b      	lsls	r3, r3, #1
 800f210:	b29a      	uxth	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f222:	4619      	mov	r1, r3
 800f224:	0049      	lsls	r1, r1, #1
 800f226:	440b      	add	r3, r1
 800f228:	b29b      	uxth	r3, r3
 800f22a:	4413      	add	r3, r2
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	8b5b      	ldrh	r3, [r3, #26]
 800f238:	f043 0304 	orr.w	r3, r3, #4
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f248:	bf00      	nop
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	08015598 	.word	0x08015598
 800f254:	08015c50 	.word	0x08015c50
 800f258:	080155ec 	.word	0x080155ec

0800f25c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	607b      	str	r3, [r7, #4]
 800f266:	460b      	mov	r3, r1
 800f268:	817b      	strh	r3, [r7, #10]
 800f26a:	4613      	mov	r3, r2
 800f26c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f26e:	897a      	ldrh	r2, [r7, #10]
 800f270:	893b      	ldrh	r3, [r7, #8]
 800f272:	4413      	add	r3, r2
 800f274:	b29b      	uxth	r3, r3
 800f276:	3314      	adds	r3, #20
 800f278:	b29b      	uxth	r3, r3
 800f27a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f27e:	4619      	mov	r1, r3
 800f280:	2022      	movs	r0, #34	; 0x22
 800f282:	f7fa fbfb 	bl	8009a7c <pbuf_alloc>
 800f286:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d04d      	beq.n	800f32a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f28e:	897b      	ldrh	r3, [r7, #10]
 800f290:	3313      	adds	r3, #19
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	8952      	ldrh	r2, [r2, #10]
 800f296:	4293      	cmp	r3, r2
 800f298:	db06      	blt.n	800f2a8 <tcp_output_alloc_header_common+0x4c>
 800f29a:	4b26      	ldr	r3, [pc, #152]	; (800f334 <tcp_output_alloc_header_common+0xd8>)
 800f29c:	f240 7223 	movw	r2, #1827	; 0x723
 800f2a0:	4925      	ldr	r1, [pc, #148]	; (800f338 <tcp_output_alloc_header_common+0xdc>)
 800f2a2:	4826      	ldr	r0, [pc, #152]	; (800f33c <tcp_output_alloc_header_common+0xe0>)
 800f2a4:	f003 fe3a 	bl	8012f1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f2ae:	8c3b      	ldrh	r3, [r7, #32]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7f9 fa1d 	bl	80086f0 <lwip_htons>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7f9 fa15 	bl	80086f0 <lwip_htons>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f7f9 fa20 	bl	800871a <lwip_htonl>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f2e0:	897b      	ldrh	r3, [r7, #10]
 800f2e2:	089b      	lsrs	r3, r3, #2
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	3305      	adds	r3, #5
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	031b      	lsls	r3, r3, #12
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f9 f9f9 	bl	80086f0 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	461a      	mov	r2, r3
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f306:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f308:	4618      	mov	r0, r3
 800f30a:	f7f9 f9f1 	bl	80086f0 <lwip_htons>
 800f30e:	4603      	mov	r3, r0
 800f310:	461a      	mov	r2, r3
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2200      	movs	r2, #0
 800f31a:	741a      	strb	r2, [r3, #16]
 800f31c:	2200      	movs	r2, #0
 800f31e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	2200      	movs	r2, #0
 800f324:	749a      	strb	r2, [r3, #18]
 800f326:	2200      	movs	r2, #0
 800f328:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f32a:	697b      	ldr	r3, [r7, #20]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3718      	adds	r7, #24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	08015598 	.word	0x08015598
 800f338:	08015c70 	.word	0x08015c70
 800f33c:	080155ec 	.word	0x080155ec

0800f340 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f340:	b5b0      	push	{r4, r5, r7, lr}
 800f342:	b08a      	sub	sp, #40	; 0x28
 800f344:	af04      	add	r7, sp, #16
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	607b      	str	r3, [r7, #4]
 800f34a:	460b      	mov	r3, r1
 800f34c:	817b      	strh	r3, [r7, #10]
 800f34e:	4613      	mov	r3, r2
 800f350:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <tcp_output_alloc_header+0x26>
 800f358:	4b15      	ldr	r3, [pc, #84]	; (800f3b0 <tcp_output_alloc_header+0x70>)
 800f35a:	f240 7242 	movw	r2, #1858	; 0x742
 800f35e:	4915      	ldr	r1, [pc, #84]	; (800f3b4 <tcp_output_alloc_header+0x74>)
 800f360:	4815      	ldr	r0, [pc, #84]	; (800f3b8 <tcp_output_alloc_header+0x78>)
 800f362:	f003 fddb 	bl	8012f1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8adb      	ldrh	r3, [r3, #22]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	8b12      	ldrh	r2, [r2, #24]
 800f372:	68f9      	ldr	r1, [r7, #12]
 800f374:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f376:	893d      	ldrh	r5, [r7, #8]
 800f378:	897c      	ldrh	r4, [r7, #10]
 800f37a:	9103      	str	r1, [sp, #12]
 800f37c:	2110      	movs	r1, #16
 800f37e:	9102      	str	r1, [sp, #8]
 800f380:	9201      	str	r2, [sp, #4]
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	462a      	mov	r2, r5
 800f388:	4621      	mov	r1, r4
 800f38a:	f7ff ff67 	bl	800f25c <tcp_output_alloc_header_common>
 800f38e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d006      	beq.n	800f3a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f39e:	441a      	add	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f3a4:	697b      	ldr	r3, [r7, #20]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3718      	adds	r7, #24
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	08015598 	.word	0x08015598
 800f3b4:	08015ca0 	.word	0x08015ca0
 800f3b8:	080155ec 	.word	0x080155ec

0800f3bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b088      	sub	sp, #32
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	71fb      	strb	r3, [r7, #7]
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d106      	bne.n	800f3ea <tcp_output_fill_options+0x2e>
 800f3dc:	4b12      	ldr	r3, [pc, #72]	; (800f428 <tcp_output_fill_options+0x6c>)
 800f3de:	f240 7256 	movw	r2, #1878	; 0x756
 800f3e2:	4912      	ldr	r1, [pc, #72]	; (800f42c <tcp_output_fill_options+0x70>)
 800f3e4:	4812      	ldr	r0, [pc, #72]	; (800f430 <tcp_output_fill_options+0x74>)
 800f3e6:	f003 fd99 	bl	8012f1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	3314      	adds	r3, #20
 800f3f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f3f6:	8bfb      	ldrh	r3, [r7, #30]
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	f003 0304 	and.w	r3, r3, #4
 800f404:	4413      	add	r3, r2
 800f406:	3314      	adds	r3, #20
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	4413      	add	r3, r2
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d006      	beq.n	800f420 <tcp_output_fill_options+0x64>
 800f412:	4b05      	ldr	r3, [pc, #20]	; (800f428 <tcp_output_fill_options+0x6c>)
 800f414:	f240 7275 	movw	r2, #1909	; 0x775
 800f418:	4906      	ldr	r1, [pc, #24]	; (800f434 <tcp_output_fill_options+0x78>)
 800f41a:	4805      	ldr	r0, [pc, #20]	; (800f430 <tcp_output_fill_options+0x74>)
 800f41c:	f003 fd7e 	bl	8012f1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f420:	bf00      	nop
 800f422:	3720      	adds	r7, #32
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	08015598 	.word	0x08015598
 800f42c:	08015cc8 	.word	0x08015cc8
 800f430:	080155ec 	.word	0x080155ec
 800f434:	08015bc0 	.word	0x08015bc0

0800f438 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08a      	sub	sp, #40	; 0x28
 800f43c:	af04      	add	r7, sp, #16
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
 800f444:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d106      	bne.n	800f45a <tcp_output_control_segment+0x22>
 800f44c:	4b1c      	ldr	r3, [pc, #112]	; (800f4c0 <tcp_output_control_segment+0x88>)
 800f44e:	f240 7287 	movw	r2, #1927	; 0x787
 800f452:	491c      	ldr	r1, [pc, #112]	; (800f4c4 <tcp_output_control_segment+0x8c>)
 800f454:	481c      	ldr	r0, [pc, #112]	; (800f4c8 <tcp_output_control_segment+0x90>)
 800f456:	f003 fd61 	bl	8012f1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	6879      	ldr	r1, [r7, #4]
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7fe ff40 	bl	800e2e4 <tcp_route>
 800f464:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f46c:	23fc      	movs	r3, #252	; 0xfc
 800f46e:	75fb      	strb	r3, [r7, #23]
 800f470:	e01c      	b.n	800f4ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d006      	beq.n	800f486 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	7adb      	ldrb	r3, [r3, #11]
 800f47c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	7a9b      	ldrb	r3, [r3, #10]
 800f482:	757b      	strb	r3, [r7, #21]
 800f484:	e003      	b.n	800f48e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f486:	23ff      	movs	r3, #255	; 0xff
 800f488:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f48e:	7dba      	ldrb	r2, [r7, #22]
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	9302      	str	r3, [sp, #8]
 800f494:	2306      	movs	r3, #6
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	7d7b      	ldrb	r3, [r7, #21]
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	4613      	mov	r3, r2
 800f49e:	683a      	ldr	r2, [r7, #0]
 800f4a0:	6879      	ldr	r1, [r7, #4]
 800f4a2:	68b8      	ldr	r0, [r7, #8]
 800f4a4:	f002 faf6 	bl	8011a94 <ip4_output_if>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f4ac:	68b8      	ldr	r0, [r7, #8]
 800f4ae:	f7fa fdc9 	bl	800a044 <pbuf_free>
  return err;
 800f4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	08015598 	.word	0x08015598
 800f4c4:	08015cf0 	.word	0x08015cf0
 800f4c8:	080155ec 	.word	0x080155ec

0800f4cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b08b      	sub	sp, #44	; 0x2c
 800f4d0:	af04      	add	r7, sp, #16
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d106      	bne.n	800f4ee <tcp_rst+0x22>
 800f4e0:	4b1f      	ldr	r3, [pc, #124]	; (800f560 <tcp_rst+0x94>)
 800f4e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f4e6:	491f      	ldr	r1, [pc, #124]	; (800f564 <tcp_rst+0x98>)
 800f4e8:	481f      	ldr	r0, [pc, #124]	; (800f568 <tcp_rst+0x9c>)
 800f4ea:	f003 fd17 	bl	8012f1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d106      	bne.n	800f502 <tcp_rst+0x36>
 800f4f4:	4b1a      	ldr	r3, [pc, #104]	; (800f560 <tcp_rst+0x94>)
 800f4f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f4fa:	491c      	ldr	r1, [pc, #112]	; (800f56c <tcp_rst+0xa0>)
 800f4fc:	481a      	ldr	r0, [pc, #104]	; (800f568 <tcp_rst+0x9c>)
 800f4fe:	f003 fd0d 	bl	8012f1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f506:	f246 0308 	movw	r3, #24584	; 0x6008
 800f50a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f50c:	7dfb      	ldrb	r3, [r7, #23]
 800f50e:	b29c      	uxth	r4, r3
 800f510:	68b8      	ldr	r0, [r7, #8]
 800f512:	f7f9 f902 	bl	800871a <lwip_htonl>
 800f516:	4602      	mov	r2, r0
 800f518:	8abb      	ldrh	r3, [r7, #20]
 800f51a:	9303      	str	r3, [sp, #12]
 800f51c:	2314      	movs	r3, #20
 800f51e:	9302      	str	r3, [sp, #8]
 800f520:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f522:	9301      	str	r3, [sp, #4]
 800f524:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	4613      	mov	r3, r2
 800f52a:	2200      	movs	r2, #0
 800f52c:	4621      	mov	r1, r4
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff fe94 	bl	800f25c <tcp_output_alloc_header_common>
 800f534:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00c      	beq.n	800f556 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	2200      	movs	r2, #0
 800f540:	6939      	ldr	r1, [r7, #16]
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7ff ff3a 	bl	800f3bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	6939      	ldr	r1, [r7, #16]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f7ff ff72 	bl	800f438 <tcp_output_control_segment>
 800f554:	e000      	b.n	800f558 <tcp_rst+0x8c>
    return;
 800f556:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f558:	371c      	adds	r7, #28
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd90      	pop	{r4, r7, pc}
 800f55e:	bf00      	nop
 800f560:	08015598 	.word	0x08015598
 800f564:	08015d1c 	.word	0x08015d1c
 800f568:	080155ec 	.word	0x080155ec
 800f56c:	08015d38 	.word	0x08015d38

0800f570 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f570:	b590      	push	{r4, r7, lr}
 800f572:	b087      	sub	sp, #28
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f578:	2300      	movs	r3, #0
 800f57a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d106      	bne.n	800f594 <tcp_send_empty_ack+0x24>
 800f586:	4b28      	ldr	r3, [pc, #160]	; (800f628 <tcp_send_empty_ack+0xb8>)
 800f588:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f58c:	4927      	ldr	r1, [pc, #156]	; (800f62c <tcp_send_empty_ack+0xbc>)
 800f58e:	4828      	ldr	r0, [pc, #160]	; (800f630 <tcp_send_empty_ack+0xc0>)
 800f590:	f003 fcc4 	bl	8012f1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	f003 0304 	and.w	r3, r3, #4
 800f59e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f5a0:	7d7b      	ldrb	r3, [r7, #21]
 800f5a2:	b29c      	uxth	r4, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7f9 f8b6 	bl	800871a <lwip_htonl>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7ff fec3 	bl	800f340 <tcp_output_alloc_header>
 800f5ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d109      	bne.n	800f5d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8b5b      	ldrh	r3, [r3, #26]
 800f5c6:	f043 0303 	orr.w	r3, r3, #3
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f5d0:	f06f 0301 	mvn.w	r3, #1
 800f5d4:	e023      	b.n	800f61e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f5d6:	7dbb      	ldrb	r3, [r7, #22]
 800f5d8:	7dfa      	ldrb	r2, [r7, #23]
 800f5da:	6939      	ldr	r1, [r7, #16]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff feed 	bl	800f3bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	6939      	ldr	r1, [r7, #16]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7ff ff24 	bl	800f438 <tcp_output_control_segment>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	8b5b      	ldrh	r3, [r3, #26]
 800f600:	f043 0303 	orr.w	r3, r3, #3
 800f604:	b29a      	uxth	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	835a      	strh	r2, [r3, #26]
 800f60a:	e006      	b.n	800f61a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8b5b      	ldrh	r3, [r3, #26]
 800f610:	f023 0303 	bic.w	r3, r3, #3
 800f614:	b29a      	uxth	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	371c      	adds	r7, #28
 800f622:	46bd      	mov	sp, r7
 800f624:	bd90      	pop	{r4, r7, pc}
 800f626:	bf00      	nop
 800f628:	08015598 	.word	0x08015598
 800f62c:	08015d54 	.word	0x08015d54
 800f630:	080155ec 	.word	0x080155ec

0800f634 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f634:	b590      	push	{r4, r7, lr}
 800f636:	b087      	sub	sp, #28
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f63c:	2300      	movs	r3, #0
 800f63e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d106      	bne.n	800f654 <tcp_keepalive+0x20>
 800f646:	4b18      	ldr	r3, [pc, #96]	; (800f6a8 <tcp_keepalive+0x74>)
 800f648:	f640 0224 	movw	r2, #2084	; 0x824
 800f64c:	4917      	ldr	r1, [pc, #92]	; (800f6ac <tcp_keepalive+0x78>)
 800f64e:	4818      	ldr	r0, [pc, #96]	; (800f6b0 <tcp_keepalive+0x7c>)
 800f650:	f003 fc64 	bl	8012f1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	b29c      	uxth	r4, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f65c:	3b01      	subs	r3, #1
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f9 f85b 	bl	800871a <lwip_htonl>
 800f664:	4603      	mov	r3, r0
 800f666:	2200      	movs	r2, #0
 800f668:	4621      	mov	r1, r4
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7ff fe68 	bl	800f340 <tcp_output_alloc_header>
 800f670:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d102      	bne.n	800f67e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f678:	f04f 33ff 	mov.w	r3, #4294967295
 800f67c:	e010      	b.n	800f6a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
 800f680:	2200      	movs	r2, #0
 800f682:	6939      	ldr	r1, [r7, #16]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff fe99 	bl	800f3bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3304      	adds	r3, #4
 800f690:	6939      	ldr	r1, [r7, #16]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7ff fed0 	bl	800f438 <tcp_output_control_segment>
 800f698:	4603      	mov	r3, r0
 800f69a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	371c      	adds	r7, #28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd90      	pop	{r4, r7, pc}
 800f6a8:	08015598 	.word	0x08015598
 800f6ac:	08015d74 	.word	0x08015d74
 800f6b0:	080155ec 	.word	0x080155ec

0800f6b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b08b      	sub	sp, #44	; 0x2c
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d106      	bne.n	800f6d6 <tcp_zero_window_probe+0x22>
 800f6c8:	4b4c      	ldr	r3, [pc, #304]	; (800f7fc <tcp_zero_window_probe+0x148>)
 800f6ca:	f640 024f 	movw	r2, #2127	; 0x84f
 800f6ce:	494c      	ldr	r1, [pc, #304]	; (800f800 <tcp_zero_window_probe+0x14c>)
 800f6d0:	484c      	ldr	r0, [pc, #304]	; (800f804 <tcp_zero_window_probe+0x150>)
 800f6d2:	f003 fc23 	bl	8012f1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6da:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e086      	b.n	800f7f4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f6ec:	2bff      	cmp	r3, #255	; 0xff
 800f6ee:	d007      	beq.n	800f700 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	899b      	ldrh	r3, [r3, #12]
 800f706:	b29b      	uxth	r3, r3
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f8 fff1 	bl	80086f0 <lwip_htons>
 800f70e:	4603      	mov	r3, r0
 800f710:	b2db      	uxtb	r3, r3
 800f712:	f003 0301 	and.w	r3, r3, #1
 800f716:	2b00      	cmp	r3, #0
 800f718:	d005      	beq.n	800f726 <tcp_zero_window_probe+0x72>
 800f71a:	6a3b      	ldr	r3, [r7, #32]
 800f71c:	891b      	ldrh	r3, [r3, #8]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <tcp_zero_window_probe+0x72>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <tcp_zero_window_probe+0x74>
 800f726:	2300      	movs	r3, #0
 800f728:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f72a:	7ffb      	ldrb	r3, [r7, #31]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	bf0c      	ite	eq
 800f730:	2301      	moveq	r3, #1
 800f732:	2300      	movne	r3, #0
 800f734:	b2db      	uxtb	r3, r3
 800f736:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f73c:	b299      	uxth	r1, r3
 800f73e:	6a3b      	ldr	r3, [r7, #32]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	8bba      	ldrh	r2, [r7, #28]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff fdfa 	bl	800f340 <tcp_output_alloc_header>
 800f74c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d102      	bne.n	800f75a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f754:	f04f 33ff 	mov.w	r3, #4294967295
 800f758:	e04c      	b.n	800f7f4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f760:	7ffb      	ldrb	r3, [r7, #31]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d011      	beq.n	800f78a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	899b      	ldrh	r3, [r3, #12]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	b21b      	sxth	r3, r3
 800f76e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f772:	b21c      	sxth	r4, r3
 800f774:	2011      	movs	r0, #17
 800f776:	f7f8 ffbb 	bl	80086f0 <lwip_htons>
 800f77a:	4603      	mov	r3, r0
 800f77c:	b21b      	sxth	r3, r3
 800f77e:	4323      	orrs	r3, r4
 800f780:	b21b      	sxth	r3, r3
 800f782:	b29a      	uxth	r2, r3
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	819a      	strh	r2, [r3, #12]
 800f788:	e010      	b.n	800f7ac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	3314      	adds	r3, #20
 800f790:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	6858      	ldr	r0, [r3, #4]
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	891a      	ldrh	r2, [r3, #8]
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	891b      	ldrh	r3, [r3, #8]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	6939      	ldr	r1, [r7, #16]
 800f7a8:	f7fa fe52 	bl	800a450 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7f8 ffb1 	bl	800871a <lwip_htonl>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	da02      	bge.n	800f7d0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	69b9      	ldr	r1, [r7, #24]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fdef 	bl	800f3bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	69b9      	ldr	r1, [r7, #24]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff fe26 	bl	800f438 <tcp_output_control_segment>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f7f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	372c      	adds	r7, #44	; 0x2c
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd90      	pop	{r4, r7, pc}
 800f7fc:	08015598 	.word	0x08015598
 800f800:	08015d90 	.word	0x08015d90
 800f804:	080155ec 	.word	0x080155ec

0800f808 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f810:	f7fa ff0c 	bl	800a62c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f814:	4b0a      	ldr	r3, [pc, #40]	; (800f840 <tcpip_tcp_timer+0x38>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d103      	bne.n	800f824 <tcpip_tcp_timer+0x1c>
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <tcpip_tcp_timer+0x3c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d005      	beq.n	800f830 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f824:	2200      	movs	r2, #0
 800f826:	4908      	ldr	r1, [pc, #32]	; (800f848 <tcpip_tcp_timer+0x40>)
 800f828:	20fa      	movs	r0, #250	; 0xfa
 800f82a:	f000 f8f3 	bl	800fa14 <sys_timeout>
 800f82e:	e003      	b.n	800f838 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f830:	4b06      	ldr	r3, [pc, #24]	; (800f84c <tcpip_tcp_timer+0x44>)
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
  }
}
 800f836:	bf00      	nop
 800f838:	bf00      	nop
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	2400732c 	.word	0x2400732c
 800f844:	24007330 	.word	0x24007330
 800f848:	0800f809 	.word	0x0800f809
 800f84c:	24007378 	.word	0x24007378

0800f850 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f854:	4b0a      	ldr	r3, [pc, #40]	; (800f880 <tcp_timer_needed+0x30>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10f      	bne.n	800f87c <tcp_timer_needed+0x2c>
 800f85c:	4b09      	ldr	r3, [pc, #36]	; (800f884 <tcp_timer_needed+0x34>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d103      	bne.n	800f86c <tcp_timer_needed+0x1c>
 800f864:	4b08      	ldr	r3, [pc, #32]	; (800f888 <tcp_timer_needed+0x38>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d007      	beq.n	800f87c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f86c:	4b04      	ldr	r3, [pc, #16]	; (800f880 <tcp_timer_needed+0x30>)
 800f86e:	2201      	movs	r2, #1
 800f870:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f872:	2200      	movs	r2, #0
 800f874:	4905      	ldr	r1, [pc, #20]	; (800f88c <tcp_timer_needed+0x3c>)
 800f876:	20fa      	movs	r0, #250	; 0xfa
 800f878:	f000 f8cc 	bl	800fa14 <sys_timeout>
  }
}
 800f87c:	bf00      	nop
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	24007378 	.word	0x24007378
 800f884:	2400732c 	.word	0x2400732c
 800f888:	24007330 	.word	0x24007330
 800f88c:	0800f809 	.word	0x0800f809

0800f890 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f89c:	200a      	movs	r0, #10
 800f89e:	f7f9 fcb7 	bl	8009210 <memp_malloc>
 800f8a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d109      	bne.n	800f8be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d151      	bne.n	800f954 <sys_timeout_abs+0xc4>
 800f8b0:	4b2a      	ldr	r3, [pc, #168]	; (800f95c <sys_timeout_abs+0xcc>)
 800f8b2:	22be      	movs	r2, #190	; 0xbe
 800f8b4:	492a      	ldr	r1, [pc, #168]	; (800f960 <sys_timeout_abs+0xd0>)
 800f8b6:	482b      	ldr	r0, [pc, #172]	; (800f964 <sys_timeout_abs+0xd4>)
 800f8b8:	f003 fb30 	bl	8012f1c <iprintf>
    return;
 800f8bc:	e04a      	b.n	800f954 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f8d6:	4b24      	ldr	r3, [pc, #144]	; (800f968 <sys_timeout_abs+0xd8>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d103      	bne.n	800f8e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f8de:	4a22      	ldr	r2, [pc, #136]	; (800f968 <sys_timeout_abs+0xd8>)
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	6013      	str	r3, [r2, #0]
    return;
 800f8e4:	e037      	b.n	800f956 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	4b1f      	ldr	r3, [pc, #124]	; (800f968 <sys_timeout_abs+0xd8>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	0fdb      	lsrs	r3, r3, #31
 800f8f4:	f003 0301 	and.w	r3, r3, #1
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d007      	beq.n	800f90e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f8fe:	4b1a      	ldr	r3, [pc, #104]	; (800f968 <sys_timeout_abs+0xd8>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f906:	4a18      	ldr	r2, [pc, #96]	; (800f968 <sys_timeout_abs+0xd8>)
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6013      	str	r3, [r2, #0]
 800f90c:	e023      	b.n	800f956 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f90e:	4b16      	ldr	r3, [pc, #88]	; (800f968 <sys_timeout_abs+0xd8>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	617b      	str	r3, [r7, #20]
 800f914:	e01a      	b.n	800f94c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00b      	beq.n	800f936 <sys_timeout_abs+0xa6>
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	0fdb      	lsrs	r3, r3, #31
 800f92c:	f003 0301 	and.w	r3, r3, #1
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d007      	beq.n	800f946 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	601a      	str	r2, [r3, #0]
        break;
 800f944:	e007      	b.n	800f956 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	617b      	str	r3, [r7, #20]
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1e1      	bne.n	800f916 <sys_timeout_abs+0x86>
 800f952:	e000      	b.n	800f956 <sys_timeout_abs+0xc6>
    return;
 800f954:	bf00      	nop
      }
    }
  }
}
 800f956:	3718      	adds	r7, #24
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	08015db4 	.word	0x08015db4
 800f960:	08015de8 	.word	0x08015de8
 800f964:	08015e28 	.word	0x08015e28
 800f968:	24007370 	.word	0x24007370

0800f96c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	4798      	blx	r3

  now = sys_now();
 800f97e:	f7f5 fb9b 	bl	80050b8 <sys_now>
 800f982:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <lwip_cyclic_timer+0x5c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4413      	add	r3, r2
 800f98e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	0fdb      	lsrs	r3, r3, #31
 800f998:	f003 0301 	and.w	r3, r3, #1
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d009      	beq.n	800f9b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	4907      	ldr	r1, [pc, #28]	; (800f9cc <lwip_cyclic_timer+0x60>)
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff ff6e 	bl	800f890 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f9b4:	e004      	b.n	800f9c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	4904      	ldr	r1, [pc, #16]	; (800f9cc <lwip_cyclic_timer+0x60>)
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7ff ff68 	bl	800f890 <sys_timeout_abs>
}
 800f9c0:	bf00      	nop
 800f9c2:	3718      	adds	r7, #24
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	24007374 	.word	0x24007374
 800f9cc:	0800f96d 	.word	0x0800f96d

0800f9d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	607b      	str	r3, [r7, #4]
 800f9da:	e00e      	b.n	800f9fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f9dc:	4a0b      	ldr	r2, [pc, #44]	; (800fa0c <sys_timeouts_init+0x3c>)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	00db      	lsls	r3, r3, #3
 800f9e8:	4a08      	ldr	r2, [pc, #32]	; (800fa0c <sys_timeouts_init+0x3c>)
 800f9ea:	4413      	add	r3, r2
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4908      	ldr	r1, [pc, #32]	; (800fa10 <sys_timeouts_init+0x40>)
 800f9f0:	f000 f810 	bl	800fa14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	607b      	str	r3, [r7, #4]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d9ed      	bls.n	800f9dc <sys_timeouts_init+0xc>
  }
}
 800fa00:	bf00      	nop
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	080169d8 	.word	0x080169d8
 800fa10:	0800f96d 	.word	0x0800f96d

0800fa14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa26:	d306      	bcc.n	800fa36 <sys_timeout+0x22>
 800fa28:	4b0a      	ldr	r3, [pc, #40]	; (800fa54 <sys_timeout+0x40>)
 800fa2a:	f240 1229 	movw	r2, #297	; 0x129
 800fa2e:	490a      	ldr	r1, [pc, #40]	; (800fa58 <sys_timeout+0x44>)
 800fa30:	480a      	ldr	r0, [pc, #40]	; (800fa5c <sys_timeout+0x48>)
 800fa32:	f003 fa73 	bl	8012f1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fa36:	f7f5 fb3f 	bl	80050b8 <sys_now>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	4413      	add	r3, r2
 800fa40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	68b9      	ldr	r1, [r7, #8]
 800fa46:	6978      	ldr	r0, [r7, #20]
 800fa48:	f7ff ff22 	bl	800f890 <sys_timeout_abs>
#endif
}
 800fa4c:	bf00      	nop
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	08015db4 	.word	0x08015db4
 800fa58:	08015e50 	.word	0x08015e50
 800fa5c:	08015e28 	.word	0x08015e28

0800fa60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fa66:	f7f5 fb27 	bl	80050b8 <sys_now>
 800fa6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800fa6c:	4b17      	ldr	r3, [pc, #92]	; (800facc <sys_check_timeouts+0x6c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d022      	beq.n	800fabe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	0fdb      	lsrs	r3, r3, #31
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d11a      	bne.n	800fac2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a0e      	ldr	r2, [pc, #56]	; (800facc <sys_check_timeouts+0x6c>)
 800fa92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <sys_check_timeouts+0x70>)
 800faa6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800faa8:	68b9      	ldr	r1, [r7, #8]
 800faaa:	200a      	movs	r0, #10
 800faac:	f7f9 fc26 	bl	80092fc <memp_free>
    if (handler != NULL) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d0da      	beq.n	800fa6c <sys_check_timeouts+0xc>
      handler(arg);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6838      	ldr	r0, [r7, #0]
 800faba:	4798      	blx	r3
  do {
 800fabc:	e7d6      	b.n	800fa6c <sys_check_timeouts+0xc>
      return;
 800fabe:	bf00      	nop
 800fac0:	e000      	b.n	800fac4 <sys_check_timeouts+0x64>
      return;
 800fac2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	24007370 	.word	0x24007370
 800fad0:	24007374 	.word	0x24007374

0800fad4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800fada:	4b16      	ldr	r3, [pc, #88]	; (800fb34 <sys_timeouts_sleeptime+0x60>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d102      	bne.n	800fae8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800fae2:	f04f 33ff 	mov.w	r3, #4294967295
 800fae6:	e020      	b.n	800fb2a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800fae8:	f7f5 fae6 	bl	80050b8 <sys_now>
 800faec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800faee:	4b11      	ldr	r3, [pc, #68]	; (800fb34 <sys_timeouts_sleeptime+0x60>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	0fdb      	lsrs	r3, r3, #31
 800fafa:	f003 0301 	and.w	r3, r3, #1
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d001      	beq.n	800fb08 <sys_timeouts_sleeptime+0x34>
    return 0;
 800fb04:	2300      	movs	r3, #0
 800fb06:	e010      	b.n	800fb2a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800fb08:	4b0a      	ldr	r3, [pc, #40]	; (800fb34 <sys_timeouts_sleeptime+0x60>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	da06      	bge.n	800fb28 <sys_timeouts_sleeptime+0x54>
 800fb1a:	4b07      	ldr	r3, [pc, #28]	; (800fb38 <sys_timeouts_sleeptime+0x64>)
 800fb1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fb20:	4906      	ldr	r1, [pc, #24]	; (800fb3c <sys_timeouts_sleeptime+0x68>)
 800fb22:	4807      	ldr	r0, [pc, #28]	; (800fb40 <sys_timeouts_sleeptime+0x6c>)
 800fb24:	f003 f9fa 	bl	8012f1c <iprintf>
    return ret;
 800fb28:	683b      	ldr	r3, [r7, #0]
  }
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	24007370 	.word	0x24007370
 800fb38:	08015db4 	.word	0x08015db4
 800fb3c:	08015e88 	.word	0x08015e88
 800fb40:	08015e28 	.word	0x08015e28

0800fb44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb48:	f003 f8e8 	bl	8012d1c <rand>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	4b01      	ldr	r3, [pc, #4]	; (800fb64 <udp_init+0x20>)
 800fb5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fb60:	bf00      	nop
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	24000030 	.word	0x24000030

0800fb68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fb72:	4b17      	ldr	r3, [pc, #92]	; (800fbd0 <udp_new_port+0x68>)
 800fb74:	881b      	ldrh	r3, [r3, #0]
 800fb76:	1c5a      	adds	r2, r3, #1
 800fb78:	b291      	uxth	r1, r2
 800fb7a:	4a15      	ldr	r2, [pc, #84]	; (800fbd0 <udp_new_port+0x68>)
 800fb7c:	8011      	strh	r1, [r2, #0]
 800fb7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d103      	bne.n	800fb8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fb86:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <udp_new_port+0x68>)
 800fb88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fb8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb8e:	4b11      	ldr	r3, [pc, #68]	; (800fbd4 <udp_new_port+0x6c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	e011      	b.n	800fbba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	8a5a      	ldrh	r2, [r3, #18]
 800fb9a:	4b0d      	ldr	r3, [pc, #52]	; (800fbd0 <udp_new_port+0x68>)
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d108      	bne.n	800fbb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fba2:	88fb      	ldrh	r3, [r7, #6]
 800fba4:	3301      	adds	r3, #1
 800fba6:	80fb      	strh	r3, [r7, #6]
 800fba8:	88fb      	ldrh	r3, [r7, #6]
 800fbaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbae:	d3e0      	bcc.n	800fb72 <udp_new_port+0xa>
        return 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e007      	b.n	800fbc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	603b      	str	r3, [r7, #0]
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1ea      	bne.n	800fb96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fbc0:	4b03      	ldr	r3, [pc, #12]	; (800fbd0 <udp_new_port+0x68>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	24000030 	.word	0x24000030
 800fbd4:	2400737c 	.word	0x2400737c

0800fbd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d105      	bne.n	800fbf8 <udp_input_local_match+0x20>
 800fbec:	4b27      	ldr	r3, [pc, #156]	; (800fc8c <udp_input_local_match+0xb4>)
 800fbee:	2287      	movs	r2, #135	; 0x87
 800fbf0:	4927      	ldr	r1, [pc, #156]	; (800fc90 <udp_input_local_match+0xb8>)
 800fbf2:	4828      	ldr	r0, [pc, #160]	; (800fc94 <udp_input_local_match+0xbc>)
 800fbf4:	f003 f992 	bl	8012f1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d105      	bne.n	800fc0a <udp_input_local_match+0x32>
 800fbfe:	4b23      	ldr	r3, [pc, #140]	; (800fc8c <udp_input_local_match+0xb4>)
 800fc00:	2288      	movs	r2, #136	; 0x88
 800fc02:	4925      	ldr	r1, [pc, #148]	; (800fc98 <udp_input_local_match+0xc0>)
 800fc04:	4823      	ldr	r0, [pc, #140]	; (800fc94 <udp_input_local_match+0xbc>)
 800fc06:	f003 f989 	bl	8012f1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	7a1b      	ldrb	r3, [r3, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00b      	beq.n	800fc2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	7a1a      	ldrb	r2, [r3, #8]
 800fc16:	4b21      	ldr	r3, [pc, #132]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc1e:	3301      	adds	r3, #1
 800fc20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d001      	beq.n	800fc2a <udp_input_local_match+0x52>
    return 0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e02b      	b.n	800fc82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d018      	beq.n	800fc62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d013      	beq.n	800fc5e <udp_input_local_match+0x86>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00f      	beq.n	800fc5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fc3e:	4b17      	ldr	r3, [pc, #92]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc46:	d00a      	beq.n	800fc5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	4b13      	ldr	r3, [pc, #76]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	405a      	eors	r2, r3
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	3308      	adds	r3, #8
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d110      	bne.n	800fc80 <udp_input_local_match+0xa8>
          return 1;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e00f      	b.n	800fc82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <udp_input_local_match+0xa4>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <udp_input_local_match+0xa4>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <udp_input_local_match+0xc4>)
 800fc76:	695b      	ldr	r3, [r3, #20]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d101      	bne.n	800fc80 <udp_input_local_match+0xa8>
        return 1;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e000      	b.n	800fc82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08015e9c 	.word	0x08015e9c
 800fc90:	08015ecc 	.word	0x08015ecc
 800fc94:	08015ef0 	.word	0x08015ef0
 800fc98:	08015f18 	.word	0x08015f18
 800fc9c:	24004220 	.word	0x24004220

0800fca0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b08d      	sub	sp, #52	; 0x34
 800fca4:	af02      	add	r7, sp, #8
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d105      	bne.n	800fcc0 <udp_input+0x20>
 800fcb4:	4b7c      	ldr	r3, [pc, #496]	; (800fea8 <udp_input+0x208>)
 800fcb6:	22cf      	movs	r2, #207	; 0xcf
 800fcb8:	497c      	ldr	r1, [pc, #496]	; (800feac <udp_input+0x20c>)
 800fcba:	487d      	ldr	r0, [pc, #500]	; (800feb0 <udp_input+0x210>)
 800fcbc:	f003 f92e 	bl	8012f1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d105      	bne.n	800fcd2 <udp_input+0x32>
 800fcc6:	4b78      	ldr	r3, [pc, #480]	; (800fea8 <udp_input+0x208>)
 800fcc8:	22d0      	movs	r2, #208	; 0xd0
 800fcca:	497a      	ldr	r1, [pc, #488]	; (800feb4 <udp_input+0x214>)
 800fccc:	4878      	ldr	r0, [pc, #480]	; (800feb0 <udp_input+0x210>)
 800fcce:	f003 f925 	bl	8012f1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	895b      	ldrh	r3, [r3, #10]
 800fcd6:	2b07      	cmp	r3, #7
 800fcd8:	d803      	bhi.n	800fce2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7fa f9b2 	bl	800a044 <pbuf_free>
    goto end;
 800fce0:	e0de      	b.n	800fea0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fce8:	4b73      	ldr	r3, [pc, #460]	; (800feb8 <udp_input+0x218>)
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	4a72      	ldr	r2, [pc, #456]	; (800feb8 <udp_input+0x218>)
 800fcee:	6812      	ldr	r2, [r2, #0]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f001 ffa6 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f8 fcf4 	bl	80086f0 <lwip_htons>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	885b      	ldrh	r3, [r3, #2]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7f8 fcec 	bl	80086f0 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fd20:	2300      	movs	r3, #0
 800fd22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd28:	4b64      	ldr	r3, [pc, #400]	; (800febc <udp_input+0x21c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	627b      	str	r3, [r7, #36]	; 0x24
 800fd2e:	e054      	b.n	800fdda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	8a5b      	ldrh	r3, [r3, #18]
 800fd34:	89fa      	ldrh	r2, [r7, #14]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d14a      	bne.n	800fdd0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fd3a:	7cfb      	ldrb	r3, [r7, #19]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd42:	f7ff ff49 	bl	800fbd8 <udp_input_local_match>
 800fd46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d041      	beq.n	800fdd0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	7c1b      	ldrb	r3, [r3, #16]
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d11d      	bne.n	800fd94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	61fb      	str	r3, [r7, #28]
 800fd62:	e017      	b.n	800fd94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fd64:	7cfb      	ldrb	r3, [r7, #19]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <udp_input+0xf4>
 800fd6a:	4b53      	ldr	r3, [pc, #332]	; (800feb8 <udp_input+0x218>)
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd72:	d10f      	bne.n	800fd94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d008      	beq.n	800fd94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d101      	bne.n	800fd94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	8a9b      	ldrh	r3, [r3, #20]
 800fd98:	8a3a      	ldrh	r2, [r7, #16]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d118      	bne.n	800fdd0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	4b43      	ldr	r3, [pc, #268]	; (800feb8 <udp_input+0x218>)
 800fdac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d10e      	bne.n	800fdd0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d014      	beq.n	800fde2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdba:	68da      	ldr	r2, [r3, #12]
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fdc0:	4b3e      	ldr	r3, [pc, #248]	; (800febc <udp_input+0x21c>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fdc8:	4a3c      	ldr	r2, [pc, #240]	; (800febc <udp_input+0x21c>)
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fdce:	e008      	b.n	800fde2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	627b      	str	r3, [r7, #36]	; 0x24
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1a7      	bne.n	800fd30 <udp_input+0x90>
 800fde0:	e000      	b.n	800fde4 <udp_input+0x144>
        break;
 800fde2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d101      	bne.n	800fdee <udp_input+0x14e>
    pcb = uncon_pcb;
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <udp_input+0x15a>
    for_us = 1;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	76fb      	strb	r3, [r7, #27]
 800fdf8:	e00a      	b.n	800fe10 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	4b2d      	ldr	r3, [pc, #180]	; (800feb8 <udp_input+0x218>)
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	bf0c      	ite	eq
 800fe08:	2301      	moveq	r3, #1
 800fe0a:	2300      	movne	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fe10:	7efb      	ldrb	r3, [r7, #27]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d041      	beq.n	800fe9a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fe16:	2108      	movs	r1, #8
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7fa f88d 	bl	8009f38 <pbuf_remove_header>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00a      	beq.n	800fe3a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fe24:	4b20      	ldr	r3, [pc, #128]	; (800fea8 <udp_input+0x208>)
 800fe26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fe2a:	4925      	ldr	r1, [pc, #148]	; (800fec0 <udp_input+0x220>)
 800fe2c:	4820      	ldr	r0, [pc, #128]	; (800feb0 <udp_input+0x210>)
 800fe2e:	f003 f875 	bl	8012f1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f7fa f906 	bl	800a044 <pbuf_free>
      goto end;
 800fe38:	e032      	b.n	800fea0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d012      	beq.n	800fe66 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	699b      	ldr	r3, [r3, #24]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00a      	beq.n	800fe5e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	699c      	ldr	r4, [r3, #24]
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	69d8      	ldr	r0, [r3, #28]
 800fe50:	8a3b      	ldrh	r3, [r7, #16]
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	4b1b      	ldr	r3, [pc, #108]	; (800fec4 <udp_input+0x224>)
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fe5c:	e021      	b.n	800fea2 <udp_input+0x202>
        pbuf_free(p);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7fa f8f0 	bl	800a044 <pbuf_free>
        goto end;
 800fe64:	e01c      	b.n	800fea0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe66:	7cfb      	ldrb	r3, [r7, #19]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d112      	bne.n	800fe92 <udp_input+0x1f2>
 800fe6c:	4b12      	ldr	r3, [pc, #72]	; (800feb8 <udp_input+0x218>)
 800fe6e:	695b      	ldr	r3, [r3, #20]
 800fe70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe74:	2be0      	cmp	r3, #224	; 0xe0
 800fe76:	d00c      	beq.n	800fe92 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fe78:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <udp_input+0x218>)
 800fe7a:	899b      	ldrh	r3, [r3, #12]
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	b21b      	sxth	r3, r3
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7fa f8ca 	bl	800a01e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fe8a:	2103      	movs	r1, #3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f001 fbaf 	bl	80115f0 <icmp_dest_unreach>
      pbuf_free(p);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7fa f8d6 	bl	800a044 <pbuf_free>
  return;
 800fe98:	e003      	b.n	800fea2 <udp_input+0x202>
    pbuf_free(p);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7fa f8d2 	bl	800a044 <pbuf_free>
  return;
 800fea0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fea2:	372c      	adds	r7, #44	; 0x2c
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd90      	pop	{r4, r7, pc}
 800fea8:	08015e9c 	.word	0x08015e9c
 800feac:	08015f40 	.word	0x08015f40
 800feb0:	08015ef0 	.word	0x08015ef0
 800feb4:	08015f58 	.word	0x08015f58
 800feb8:	24004220 	.word	0x24004220
 800febc:	2400737c 	.word	0x2400737c
 800fec0:	08015f74 	.word	0x08015f74
 800fec4:	24004230 	.word	0x24004230

0800fec8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d109      	bne.n	800feec <udp_send+0x24>
 800fed8:	4b11      	ldr	r3, [pc, #68]	; (800ff20 <udp_send+0x58>)
 800feda:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fede:	4911      	ldr	r1, [pc, #68]	; (800ff24 <udp_send+0x5c>)
 800fee0:	4811      	ldr	r0, [pc, #68]	; (800ff28 <udp_send+0x60>)
 800fee2:	f003 f81b 	bl	8012f1c <iprintf>
 800fee6:	f06f 030f 	mvn.w	r3, #15
 800feea:	e015      	b.n	800ff18 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d109      	bne.n	800ff06 <udp_send+0x3e>
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <udp_send+0x58>)
 800fef4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fef8:	490c      	ldr	r1, [pc, #48]	; (800ff2c <udp_send+0x64>)
 800fefa:	480b      	ldr	r0, [pc, #44]	; (800ff28 <udp_send+0x60>)
 800fefc:	f003 f80e 	bl	8012f1c <iprintf>
 800ff00:	f06f 030f 	mvn.w	r3, #15
 800ff04:	e008      	b.n	800ff18 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	1d1a      	adds	r2, r3, #4
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8a9b      	ldrh	r3, [r3, #20]
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f80d 	bl	800ff30 <udp_sendto>
 800ff16:	4603      	mov	r3, r0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	08015e9c 	.word	0x08015e9c
 800ff24:	08015f90 	.word	0x08015f90
 800ff28:	08015ef0 	.word	0x08015ef0
 800ff2c:	08015fa8 	.word	0x08015fa8

0800ff30 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b088      	sub	sp, #32
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d109      	bne.n	800ff58 <udp_sendto+0x28>
 800ff44:	4b23      	ldr	r3, [pc, #140]	; (800ffd4 <udp_sendto+0xa4>)
 800ff46:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff4a:	4923      	ldr	r1, [pc, #140]	; (800ffd8 <udp_sendto+0xa8>)
 800ff4c:	4823      	ldr	r0, [pc, #140]	; (800ffdc <udp_sendto+0xac>)
 800ff4e:	f002 ffe5 	bl	8012f1c <iprintf>
 800ff52:	f06f 030f 	mvn.w	r3, #15
 800ff56:	e038      	b.n	800ffca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <udp_sendto+0x42>
 800ff5e:	4b1d      	ldr	r3, [pc, #116]	; (800ffd4 <udp_sendto+0xa4>)
 800ff60:	f240 2219 	movw	r2, #537	; 0x219
 800ff64:	491e      	ldr	r1, [pc, #120]	; (800ffe0 <udp_sendto+0xb0>)
 800ff66:	481d      	ldr	r0, [pc, #116]	; (800ffdc <udp_sendto+0xac>)
 800ff68:	f002 ffd8 	bl	8012f1c <iprintf>
 800ff6c:	f06f 030f 	mvn.w	r3, #15
 800ff70:	e02b      	b.n	800ffca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d109      	bne.n	800ff8c <udp_sendto+0x5c>
 800ff78:	4b16      	ldr	r3, [pc, #88]	; (800ffd4 <udp_sendto+0xa4>)
 800ff7a:	f240 221a 	movw	r2, #538	; 0x21a
 800ff7e:	4919      	ldr	r1, [pc, #100]	; (800ffe4 <udp_sendto+0xb4>)
 800ff80:	4816      	ldr	r0, [pc, #88]	; (800ffdc <udp_sendto+0xac>)
 800ff82:	f002 ffcb 	bl	8012f1c <iprintf>
 800ff86:	f06f 030f 	mvn.w	r3, #15
 800ff8a:	e01e      	b.n	800ffca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	7a1b      	ldrb	r3, [r3, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d006      	beq.n	800ffa2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	7a1b      	ldrb	r3, [r3, #8]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7f9 fcc5 	bl	8009928 <netif_get_by_index>
 800ff9e:	6178      	str	r0, [r7, #20]
 800ffa0:	e003      	b.n	800ffaa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f001 fbb8 	bl	8011718 <ip4_route>
 800ffa8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ffb0:	f06f 0303 	mvn.w	r3, #3
 800ffb4:	e009      	b.n	800ffca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ffb6:	887a      	ldrh	r2, [r7, #2]
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	68b9      	ldr	r1, [r7, #8]
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f000 f810 	bl	800ffe8 <udp_sendto_if>
 800ffc8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	08015e9c 	.word	0x08015e9c
 800ffd8:	08015fc0 	.word	0x08015fc0
 800ffdc:	08015ef0 	.word	0x08015ef0
 800ffe0:	08015fd8 	.word	0x08015fd8
 800ffe4:	08015ff4 	.word	0x08015ff4

0800ffe8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af02      	add	r7, sp, #8
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <udp_sendto_if+0x28>
 800fffc:	4b2e      	ldr	r3, [pc, #184]	; (80100b8 <udp_sendto_if+0xd0>)
 800fffe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010002:	492e      	ldr	r1, [pc, #184]	; (80100bc <udp_sendto_if+0xd4>)
 8010004:	482e      	ldr	r0, [pc, #184]	; (80100c0 <udp_sendto_if+0xd8>)
 8010006:	f002 ff89 	bl	8012f1c <iprintf>
 801000a:	f06f 030f 	mvn.w	r3, #15
 801000e:	e04f      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d109      	bne.n	801002a <udp_sendto_if+0x42>
 8010016:	4b28      	ldr	r3, [pc, #160]	; (80100b8 <udp_sendto_if+0xd0>)
 8010018:	f240 2281 	movw	r2, #641	; 0x281
 801001c:	4929      	ldr	r1, [pc, #164]	; (80100c4 <udp_sendto_if+0xdc>)
 801001e:	4828      	ldr	r0, [pc, #160]	; (80100c0 <udp_sendto_if+0xd8>)
 8010020:	f002 ff7c 	bl	8012f1c <iprintf>
 8010024:	f06f 030f 	mvn.w	r3, #15
 8010028:	e042      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d109      	bne.n	8010044 <udp_sendto_if+0x5c>
 8010030:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <udp_sendto_if+0xd0>)
 8010032:	f240 2282 	movw	r2, #642	; 0x282
 8010036:	4924      	ldr	r1, [pc, #144]	; (80100c8 <udp_sendto_if+0xe0>)
 8010038:	4821      	ldr	r0, [pc, #132]	; (80100c0 <udp_sendto_if+0xd8>)
 801003a:	f002 ff6f 	bl	8012f1c <iprintf>
 801003e:	f06f 030f 	mvn.w	r3, #15
 8010042:	e035      	b.n	80100b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d109      	bne.n	801005e <udp_sendto_if+0x76>
 801004a:	4b1b      	ldr	r3, [pc, #108]	; (80100b8 <udp_sendto_if+0xd0>)
 801004c:	f240 2283 	movw	r2, #643	; 0x283
 8010050:	491e      	ldr	r1, [pc, #120]	; (80100cc <udp_sendto_if+0xe4>)
 8010052:	481b      	ldr	r0, [pc, #108]	; (80100c0 <udp_sendto_if+0xd8>)
 8010054:	f002 ff62 	bl	8012f1c <iprintf>
 8010058:	f06f 030f 	mvn.w	r3, #15
 801005c:	e028      	b.n	80100b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <udp_sendto_if+0x90>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d005      	beq.n	8010078 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010074:	2be0      	cmp	r3, #224	; 0xe0
 8010076:	d103      	bne.n	8010080 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	3304      	adds	r3, #4
 801007c:	617b      	str	r3, [r7, #20]
 801007e:	e00b      	b.n	8010098 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	3304      	adds	r3, #4
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d002      	beq.n	8010094 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801008e:	f06f 0303 	mvn.w	r3, #3
 8010092:	e00d      	b.n	80100b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010098:	887a      	ldrh	r2, [r7, #2]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	4613      	mov	r3, r2
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f000 f811 	bl	80100d0 <udp_sendto_if_src>
 80100ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3718      	adds	r7, #24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	08015e9c 	.word	0x08015e9c
 80100bc:	08016010 	.word	0x08016010
 80100c0:	08015ef0 	.word	0x08015ef0
 80100c4:	0801602c 	.word	0x0801602c
 80100c8:	08016048 	.word	0x08016048
 80100cc:	08016068 	.word	0x08016068

080100d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b08c      	sub	sp, #48	; 0x30
 80100d4:	af04      	add	r7, sp, #16
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
 80100dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d109      	bne.n	80100f8 <udp_sendto_if_src+0x28>
 80100e4:	4b65      	ldr	r3, [pc, #404]	; (801027c <udp_sendto_if_src+0x1ac>)
 80100e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80100ea:	4965      	ldr	r1, [pc, #404]	; (8010280 <udp_sendto_if_src+0x1b0>)
 80100ec:	4865      	ldr	r0, [pc, #404]	; (8010284 <udp_sendto_if_src+0x1b4>)
 80100ee:	f002 ff15 	bl	8012f1c <iprintf>
 80100f2:	f06f 030f 	mvn.w	r3, #15
 80100f6:	e0bc      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d109      	bne.n	8010112 <udp_sendto_if_src+0x42>
 80100fe:	4b5f      	ldr	r3, [pc, #380]	; (801027c <udp_sendto_if_src+0x1ac>)
 8010100:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010104:	4960      	ldr	r1, [pc, #384]	; (8010288 <udp_sendto_if_src+0x1b8>)
 8010106:	485f      	ldr	r0, [pc, #380]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010108:	f002 ff08 	bl	8012f1c <iprintf>
 801010c:	f06f 030f 	mvn.w	r3, #15
 8010110:	e0af      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d109      	bne.n	801012c <udp_sendto_if_src+0x5c>
 8010118:	4b58      	ldr	r3, [pc, #352]	; (801027c <udp_sendto_if_src+0x1ac>)
 801011a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801011e:	495b      	ldr	r1, [pc, #364]	; (801028c <udp_sendto_if_src+0x1bc>)
 8010120:	4858      	ldr	r0, [pc, #352]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010122:	f002 fefb 	bl	8012f1c <iprintf>
 8010126:	f06f 030f 	mvn.w	r3, #15
 801012a:	e0a2      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d109      	bne.n	8010146 <udp_sendto_if_src+0x76>
 8010132:	4b52      	ldr	r3, [pc, #328]	; (801027c <udp_sendto_if_src+0x1ac>)
 8010134:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010138:	4955      	ldr	r1, [pc, #340]	; (8010290 <udp_sendto_if_src+0x1c0>)
 801013a:	4852      	ldr	r0, [pc, #328]	; (8010284 <udp_sendto_if_src+0x1b4>)
 801013c:	f002 feee 	bl	8012f1c <iprintf>
 8010140:	f06f 030f 	mvn.w	r3, #15
 8010144:	e095      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010148:	2b00      	cmp	r3, #0
 801014a:	d109      	bne.n	8010160 <udp_sendto_if_src+0x90>
 801014c:	4b4b      	ldr	r3, [pc, #300]	; (801027c <udp_sendto_if_src+0x1ac>)
 801014e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010152:	4950      	ldr	r1, [pc, #320]	; (8010294 <udp_sendto_if_src+0x1c4>)
 8010154:	484b      	ldr	r0, [pc, #300]	; (8010284 <udp_sendto_if_src+0x1b4>)
 8010156:	f002 fee1 	bl	8012f1c <iprintf>
 801015a:	f06f 030f 	mvn.w	r3, #15
 801015e:	e088      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8a5b      	ldrh	r3, [r3, #18]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d10f      	bne.n	8010188 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	8a5b      	ldrh	r3, [r3, #18]
 801016e:	461a      	mov	r2, r3
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f000 f893 	bl	801029c <udp_bind>
 8010176:	4603      	mov	r3, r0
 8010178:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801017a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010182:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010186:	e074      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	891b      	ldrh	r3, [r3, #8]
 801018c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010190:	4293      	cmp	r3, r2
 8010192:	d902      	bls.n	801019a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	e06b      	b.n	8010272 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801019a:	2108      	movs	r1, #8
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f7f9 febb 	bl	8009f18 <pbuf_add_header>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d015      	beq.n	80101d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80101a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101ac:	2108      	movs	r1, #8
 80101ae:	2022      	movs	r0, #34	; 0x22
 80101b0:	f7f9 fc64 	bl	8009a7c <pbuf_alloc>
 80101b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d102      	bne.n	80101c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80101bc:	f04f 33ff 	mov.w	r3, #4294967295
 80101c0:	e057      	b.n	8010272 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	891b      	ldrh	r3, [r3, #8]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d006      	beq.n	80101d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80101ca:	68b9      	ldr	r1, [r7, #8]
 80101cc:	69f8      	ldr	r0, [r7, #28]
 80101ce:	f7fa f85d 	bl	800a28c <pbuf_chain>
 80101d2:	e001      	b.n	80101d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	895b      	ldrh	r3, [r3, #10]
 80101dc:	2b07      	cmp	r3, #7
 80101de:	d806      	bhi.n	80101ee <udp_sendto_if_src+0x11e>
 80101e0:	4b26      	ldr	r3, [pc, #152]	; (801027c <udp_sendto_if_src+0x1ac>)
 80101e2:	f240 320d 	movw	r2, #781	; 0x30d
 80101e6:	492c      	ldr	r1, [pc, #176]	; (8010298 <udp_sendto_if_src+0x1c8>)
 80101e8:	4826      	ldr	r0, [pc, #152]	; (8010284 <udp_sendto_if_src+0x1b4>)
 80101ea:	f002 fe97 	bl	8012f1c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	8a5b      	ldrh	r3, [r3, #18]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f8 fa79 	bl	80086f0 <lwip_htons>
 80101fe:	4603      	mov	r3, r0
 8010200:	461a      	mov	r2, r3
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010206:	887b      	ldrh	r3, [r7, #2]
 8010208:	4618      	mov	r0, r3
 801020a:	f7f8 fa71 	bl	80086f0 <lwip_htons>
 801020e:	4603      	mov	r3, r0
 8010210:	461a      	mov	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	2200      	movs	r2, #0
 801021a:	719a      	strb	r2, [r3, #6]
 801021c:	2200      	movs	r2, #0
 801021e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	4618      	mov	r0, r3
 8010226:	f7f8 fa63 	bl	80086f0 <lwip_htons>
 801022a:	4603      	mov	r3, r0
 801022c:	461a      	mov	r2, r3
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010232:	2311      	movs	r3, #17
 8010234:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	7adb      	ldrb	r3, [r3, #11]
 801023a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	7a9b      	ldrb	r3, [r3, #10]
 8010240:	7cb9      	ldrb	r1, [r7, #18]
 8010242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010244:	9202      	str	r2, [sp, #8]
 8010246:	7cfa      	ldrb	r2, [r7, #19]
 8010248:	9201      	str	r2, [sp, #4]
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	460b      	mov	r3, r1
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010252:	69f8      	ldr	r0, [r7, #28]
 8010254:	f001 fc48 	bl	8011ae8 <ip4_output_if_src>
 8010258:	4603      	mov	r3, r0
 801025a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	429a      	cmp	r2, r3
 8010262:	d004      	beq.n	801026e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010264:	69f8      	ldr	r0, [r7, #28]
 8010266:	f7f9 feed 	bl	800a044 <pbuf_free>
    q = NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801026e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	08015e9c 	.word	0x08015e9c
 8010280:	08016088 	.word	0x08016088
 8010284:	08015ef0 	.word	0x08015ef0
 8010288:	080160a8 	.word	0x080160a8
 801028c:	080160c8 	.word	0x080160c8
 8010290:	080160ec 	.word	0x080160ec
 8010294:	08016110 	.word	0x08016110
 8010298:	08016134 	.word	0x08016134

0801029c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b086      	sub	sp, #24
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	4613      	mov	r3, r2
 80102a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80102b0:	4b39      	ldr	r3, [pc, #228]	; (8010398 <udp_bind+0xfc>)
 80102b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d109      	bne.n	80102ce <udp_bind+0x32>
 80102ba:	4b38      	ldr	r3, [pc, #224]	; (801039c <udp_bind+0x100>)
 80102bc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80102c0:	4937      	ldr	r1, [pc, #220]	; (80103a0 <udp_bind+0x104>)
 80102c2:	4838      	ldr	r0, [pc, #224]	; (80103a4 <udp_bind+0x108>)
 80102c4:	f002 fe2a 	bl	8012f1c <iprintf>
 80102c8:	f06f 030f 	mvn.w	r3, #15
 80102cc:	e060      	b.n	8010390 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80102d2:	4b35      	ldr	r3, [pc, #212]	; (80103a8 <udp_bind+0x10c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e009      	b.n	80102ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d102      	bne.n	80102e8 <udp_bind+0x4c>
      rebind = 1;
 80102e2:	2301      	movs	r3, #1
 80102e4:	74fb      	strb	r3, [r7, #19]
      break;
 80102e6:	e005      	b.n	80102f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1f2      	bne.n	80102da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80102f4:	88fb      	ldrh	r3, [r7, #6]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d109      	bne.n	801030e <udp_bind+0x72>
    port = udp_new_port();
 80102fa:	f7ff fc35 	bl	800fb68 <udp_new_port>
 80102fe:	4603      	mov	r3, r0
 8010300:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010302:	88fb      	ldrh	r3, [r7, #6]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d12c      	bne.n	8010362 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010308:	f06f 0307 	mvn.w	r3, #7
 801030c:	e040      	b.n	8010390 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801030e:	4b26      	ldr	r3, [pc, #152]	; (80103a8 <udp_bind+0x10c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	617b      	str	r3, [r7, #20]
 8010314:	e022      	b.n	801035c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	429a      	cmp	r2, r3
 801031c:	d01b      	beq.n	8010356 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	8a5b      	ldrh	r3, [r3, #18]
 8010322:	88fa      	ldrh	r2, [r7, #6]
 8010324:	429a      	cmp	r2, r3
 8010326:	d116      	bne.n	8010356 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d00d      	beq.n	8010350 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <udp_bind+0xb4>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d006      	beq.n	8010350 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010342:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010350:	f06f 0307 	mvn.w	r3, #7
 8010354:	e01c      	b.n	8010390 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	617b      	str	r3, [r7, #20]
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1d9      	bne.n	8010316 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <udp_bind+0xd2>
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	e000      	b.n	8010370 <udp_bind+0xd4>
 801036e:	2300      	movs	r3, #0
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	88fa      	ldrh	r2, [r7, #6]
 8010378:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801037a:	7cfb      	ldrb	r3, [r7, #19]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d106      	bne.n	801038e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010380:	4b09      	ldr	r3, [pc, #36]	; (80103a8 <udp_bind+0x10c>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010388:	4a07      	ldr	r2, [pc, #28]	; (80103a8 <udp_bind+0x10c>)
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3718      	adds	r7, #24
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	080169f0 	.word	0x080169f0
 801039c:	08015e9c 	.word	0x08015e9c
 80103a0:	08016164 	.word	0x08016164
 80103a4:	08015ef0 	.word	0x08015ef0
 80103a8:	2400737c 	.word	0x2400737c

080103ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	4613      	mov	r3, r2
 80103b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d109      	bne.n	80103d4 <udp_connect+0x28>
 80103c0:	4b2c      	ldr	r3, [pc, #176]	; (8010474 <udp_connect+0xc8>)
 80103c2:	f240 4235 	movw	r2, #1077	; 0x435
 80103c6:	492c      	ldr	r1, [pc, #176]	; (8010478 <udp_connect+0xcc>)
 80103c8:	482c      	ldr	r0, [pc, #176]	; (801047c <udp_connect+0xd0>)
 80103ca:	f002 fda7 	bl	8012f1c <iprintf>
 80103ce:	f06f 030f 	mvn.w	r3, #15
 80103d2:	e04b      	b.n	801046c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d109      	bne.n	80103ee <udp_connect+0x42>
 80103da:	4b26      	ldr	r3, [pc, #152]	; (8010474 <udp_connect+0xc8>)
 80103dc:	f240 4236 	movw	r2, #1078	; 0x436
 80103e0:	4927      	ldr	r1, [pc, #156]	; (8010480 <udp_connect+0xd4>)
 80103e2:	4826      	ldr	r0, [pc, #152]	; (801047c <udp_connect+0xd0>)
 80103e4:	f002 fd9a 	bl	8012f1c <iprintf>
 80103e8:	f06f 030f 	mvn.w	r3, #15
 80103ec:	e03e      	b.n	801046c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8a5b      	ldrh	r3, [r3, #18]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d10f      	bne.n	8010416 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80103f6:	68f9      	ldr	r1, [r7, #12]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	8a5b      	ldrh	r3, [r3, #18]
 80103fc:	461a      	mov	r2, r3
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff ff4c 	bl	801029c <udp_bind>
 8010404:	4603      	mov	r3, r0
 8010406:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <udp_connect+0x6a>
      return err;
 8010410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010414:	e02a      	b.n	801046c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <udp_connect+0x76>
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	e000      	b.n	8010424 <udp_connect+0x78>
 8010422:	2300      	movs	r3, #0
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	88fa      	ldrh	r2, [r7, #6]
 801042c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	7c1b      	ldrb	r3, [r3, #16]
 8010432:	f043 0304 	orr.w	r3, r3, #4
 8010436:	b2da      	uxtb	r2, r3
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801043c:	4b11      	ldr	r3, [pc, #68]	; (8010484 <udp_connect+0xd8>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	617b      	str	r3, [r7, #20]
 8010442:	e008      	b.n	8010456 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	429a      	cmp	r2, r3
 801044a:	d101      	bne.n	8010450 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	e00d      	b.n	801046c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	617b      	str	r3, [r7, #20]
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1f3      	bne.n	8010444 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <udp_connect+0xd8>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010464:	4a07      	ldr	r2, [pc, #28]	; (8010484 <udp_connect+0xd8>)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	08015e9c 	.word	0x08015e9c
 8010478:	0801617c 	.word	0x0801617c
 801047c:	08015ef0 	.word	0x08015ef0
 8010480:	08016198 	.word	0x08016198
 8010484:	2400737c 	.word	0x2400737c

08010488 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801048e:	2000      	movs	r0, #0
 8010490:	f7f8 febe 	bl	8009210 <memp_malloc>
 8010494:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d007      	beq.n	80104ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801049c:	2220      	movs	r2, #32
 801049e:	2100      	movs	r1, #0
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f002 fda0 	bl	8012fe6 <memset>
    pcb->ttl = UDP_TTL;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	22ff      	movs	r2, #255	; 0xff
 80104aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80104ac:	687b      	ldr	r3, [r7, #4]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
	...

080104b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d01e      	beq.n	8010506 <udp_netif_ip_addr_changed+0x4e>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d01a      	beq.n	8010506 <udp_netif_ip_addr_changed+0x4e>
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d017      	beq.n	8010506 <udp_netif_ip_addr_changed+0x4e>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d013      	beq.n	8010506 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80104de:	4b0d      	ldr	r3, [pc, #52]	; (8010514 <udp_netif_ip_addr_changed+0x5c>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	60fb      	str	r3, [r7, #12]
 80104e4:	e00c      	b.n	8010500 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d103      	bne.n	80104fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	60fb      	str	r3, [r7, #12]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1ef      	bne.n	80104e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010506:	bf00      	nop
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	2400737c 	.word	0x2400737c

08010518 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010520:	4915      	ldr	r1, [pc, #84]	; (8010578 <etharp_free_entry+0x60>)
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	4613      	mov	r3, r2
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	4413      	add	r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	440b      	add	r3, r1
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d013      	beq.n	801055c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010534:	4910      	ldr	r1, [pc, #64]	; (8010578 <etharp_free_entry+0x60>)
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	4613      	mov	r3, r2
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	4413      	add	r3, r2
 801053e:	00db      	lsls	r3, r3, #3
 8010540:	440b      	add	r3, r1
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4618      	mov	r0, r3
 8010546:	f7f9 fd7d 	bl	800a044 <pbuf_free>
    arp_table[i].q = NULL;
 801054a:	490b      	ldr	r1, [pc, #44]	; (8010578 <etharp_free_entry+0x60>)
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	2200      	movs	r2, #0
 801055a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801055c:	4906      	ldr	r1, [pc, #24]	; (8010578 <etharp_free_entry+0x60>)
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	4613      	mov	r3, r2
 8010562:	005b      	lsls	r3, r3, #1
 8010564:	4413      	add	r3, r2
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	440b      	add	r3, r1
 801056a:	3314      	adds	r3, #20
 801056c:	2200      	movs	r2, #0
 801056e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010570:	bf00      	nop
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	24007380 	.word	0x24007380

0801057c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010582:	2300      	movs	r3, #0
 8010584:	607b      	str	r3, [r7, #4]
 8010586:	e096      	b.n	80106b6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010588:	494f      	ldr	r1, [pc, #316]	; (80106c8 <etharp_tmr+0x14c>)
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	4613      	mov	r3, r2
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	4413      	add	r3, r2
 8010592:	00db      	lsls	r3, r3, #3
 8010594:	440b      	add	r3, r1
 8010596:	3314      	adds	r3, #20
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801059c:	78fb      	ldrb	r3, [r7, #3]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 8086 	beq.w	80106b0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80105a4:	4948      	ldr	r1, [pc, #288]	; (80106c8 <etharp_tmr+0x14c>)
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	4613      	mov	r3, r2
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	4413      	add	r3, r2
 80105ae:	00db      	lsls	r3, r3, #3
 80105b0:	440b      	add	r3, r1
 80105b2:	3312      	adds	r3, #18
 80105b4:	881b      	ldrh	r3, [r3, #0]
 80105b6:	3301      	adds	r3, #1
 80105b8:	b298      	uxth	r0, r3
 80105ba:	4943      	ldr	r1, [pc, #268]	; (80106c8 <etharp_tmr+0x14c>)
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	4613      	mov	r3, r2
 80105c0:	005b      	lsls	r3, r3, #1
 80105c2:	4413      	add	r3, r2
 80105c4:	00db      	lsls	r3, r3, #3
 80105c6:	440b      	add	r3, r1
 80105c8:	3312      	adds	r3, #18
 80105ca:	4602      	mov	r2, r0
 80105cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80105ce:	493e      	ldr	r1, [pc, #248]	; (80106c8 <etharp_tmr+0x14c>)
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	4613      	mov	r3, r2
 80105d4:	005b      	lsls	r3, r3, #1
 80105d6:	4413      	add	r3, r2
 80105d8:	00db      	lsls	r3, r3, #3
 80105da:	440b      	add	r3, r1
 80105dc:	3312      	adds	r3, #18
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80105e4:	d215      	bcs.n	8010612 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80105e6:	4938      	ldr	r1, [pc, #224]	; (80106c8 <etharp_tmr+0x14c>)
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	4613      	mov	r3, r2
 80105ec:	005b      	lsls	r3, r3, #1
 80105ee:	4413      	add	r3, r2
 80105f0:	00db      	lsls	r3, r3, #3
 80105f2:	440b      	add	r3, r1
 80105f4:	3314      	adds	r3, #20
 80105f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d10e      	bne.n	801061a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80105fc:	4932      	ldr	r1, [pc, #200]	; (80106c8 <etharp_tmr+0x14c>)
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	4613      	mov	r3, r2
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	4413      	add	r3, r2
 8010606:	00db      	lsls	r3, r3, #3
 8010608:	440b      	add	r3, r1
 801060a:	3312      	adds	r3, #18
 801060c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801060e:	2b04      	cmp	r3, #4
 8010610:	d903      	bls.n	801061a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff ff80 	bl	8010518 <etharp_free_entry>
 8010618:	e04a      	b.n	80106b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801061a:	492b      	ldr	r1, [pc, #172]	; (80106c8 <etharp_tmr+0x14c>)
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	4613      	mov	r3, r2
 8010620:	005b      	lsls	r3, r3, #1
 8010622:	4413      	add	r3, r2
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	440b      	add	r3, r1
 8010628:	3314      	adds	r3, #20
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b03      	cmp	r3, #3
 801062e:	d10a      	bne.n	8010646 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010630:	4925      	ldr	r1, [pc, #148]	; (80106c8 <etharp_tmr+0x14c>)
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	440b      	add	r3, r1
 801063e:	3314      	adds	r3, #20
 8010640:	2204      	movs	r2, #4
 8010642:	701a      	strb	r2, [r3, #0]
 8010644:	e034      	b.n	80106b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010646:	4920      	ldr	r1, [pc, #128]	; (80106c8 <etharp_tmr+0x14c>)
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	00db      	lsls	r3, r3, #3
 8010652:	440b      	add	r3, r1
 8010654:	3314      	adds	r3, #20
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	2b04      	cmp	r3, #4
 801065a:	d10a      	bne.n	8010672 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801065c:	491a      	ldr	r1, [pc, #104]	; (80106c8 <etharp_tmr+0x14c>)
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	4613      	mov	r3, r2
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	4413      	add	r3, r2
 8010666:	00db      	lsls	r3, r3, #3
 8010668:	440b      	add	r3, r1
 801066a:	3314      	adds	r3, #20
 801066c:	2202      	movs	r2, #2
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	e01e      	b.n	80106b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010672:	4915      	ldr	r1, [pc, #84]	; (80106c8 <etharp_tmr+0x14c>)
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	4613      	mov	r3, r2
 8010678:	005b      	lsls	r3, r3, #1
 801067a:	4413      	add	r3, r2
 801067c:	00db      	lsls	r3, r3, #3
 801067e:	440b      	add	r3, r1
 8010680:	3314      	adds	r3, #20
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d113      	bne.n	80106b0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010688:	490f      	ldr	r1, [pc, #60]	; (80106c8 <etharp_tmr+0x14c>)
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	4613      	mov	r3, r2
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	4413      	add	r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	440b      	add	r3, r1
 8010696:	3308      	adds	r3, #8
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	4613      	mov	r3, r2
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	4413      	add	r3, r2
 80106a2:	00db      	lsls	r3, r3, #3
 80106a4:	4a08      	ldr	r2, [pc, #32]	; (80106c8 <etharp_tmr+0x14c>)
 80106a6:	4413      	add	r3, r2
 80106a8:	3304      	adds	r3, #4
 80106aa:	4619      	mov	r1, r3
 80106ac:	f000 fe6e 	bl	801138c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	3301      	adds	r3, #1
 80106b4:	607b      	str	r3, [r7, #4]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	f77f af65 	ble.w	8010588 <etharp_tmr+0xc>
      }
    }
  }
}
 80106be:	bf00      	nop
 80106c0:	bf00      	nop
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	24007380 	.word	0x24007380

080106cc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08a      	sub	sp, #40	; 0x28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	460b      	mov	r3, r1
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80106da:	230a      	movs	r3, #10
 80106dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80106de:	230a      	movs	r3, #10
 80106e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80106e2:	230a      	movs	r3, #10
 80106e4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80106e6:	2300      	movs	r3, #0
 80106e8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80106ea:	230a      	movs	r3, #10
 80106ec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	83bb      	strh	r3, [r7, #28]
 80106f2:	2300      	movs	r3, #0
 80106f4:	837b      	strh	r3, [r7, #26]
 80106f6:	2300      	movs	r3, #0
 80106f8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106fa:	2300      	movs	r3, #0
 80106fc:	843b      	strh	r3, [r7, #32]
 80106fe:	e0ae      	b.n	801085e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010704:	49a6      	ldr	r1, [pc, #664]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010706:	4613      	mov	r3, r2
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	4413      	add	r3, r2
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	440b      	add	r3, r1
 8010710:	3314      	adds	r3, #20
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010716:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801071a:	2b0a      	cmp	r3, #10
 801071c:	d105      	bne.n	801072a <etharp_find_entry+0x5e>
 801071e:	7dfb      	ldrb	r3, [r7, #23]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d102      	bne.n	801072a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010724:	8c3b      	ldrh	r3, [r7, #32]
 8010726:	847b      	strh	r3, [r7, #34]	; 0x22
 8010728:	e095      	b.n	8010856 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801072a:	7dfb      	ldrb	r3, [r7, #23]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 8092 	beq.w	8010856 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010732:	7dfb      	ldrb	r3, [r7, #23]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d009      	beq.n	801074c <etharp_find_entry+0x80>
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d806      	bhi.n	801074c <etharp_find_entry+0x80>
 801073e:	4b99      	ldr	r3, [pc, #612]	; (80109a4 <etharp_find_entry+0x2d8>)
 8010740:	f240 1223 	movw	r2, #291	; 0x123
 8010744:	4998      	ldr	r1, [pc, #608]	; (80109a8 <etharp_find_entry+0x2dc>)
 8010746:	4899      	ldr	r0, [pc, #612]	; (80109ac <etharp_find_entry+0x2e0>)
 8010748:	f002 fbe8 	bl	8012f1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d020      	beq.n	8010794 <etharp_find_entry+0xc8>
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6819      	ldr	r1, [r3, #0]
 8010756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801075a:	4891      	ldr	r0, [pc, #580]	; (80109a0 <etharp_find_entry+0x2d4>)
 801075c:	4613      	mov	r3, r2
 801075e:	005b      	lsls	r3, r3, #1
 8010760:	4413      	add	r3, r2
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	4403      	add	r3, r0
 8010766:	3304      	adds	r3, #4
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4299      	cmp	r1, r3
 801076c:	d112      	bne.n	8010794 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00c      	beq.n	801078e <etharp_find_entry+0xc2>
 8010774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010778:	4989      	ldr	r1, [pc, #548]	; (80109a0 <etharp_find_entry+0x2d4>)
 801077a:	4613      	mov	r3, r2
 801077c:	005b      	lsls	r3, r3, #1
 801077e:	4413      	add	r3, r2
 8010780:	00db      	lsls	r3, r3, #3
 8010782:	440b      	add	r3, r1
 8010784:	3308      	adds	r3, #8
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	429a      	cmp	r2, r3
 801078c:	d102      	bne.n	8010794 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801078e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010792:	e100      	b.n	8010996 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d140      	bne.n	801081c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801079a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801079e:	4980      	ldr	r1, [pc, #512]	; (80109a0 <etharp_find_entry+0x2d4>)
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	440b      	add	r3, r1
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d01a      	beq.n	80107e6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80107b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107b4:	497a      	ldr	r1, [pc, #488]	; (80109a0 <etharp_find_entry+0x2d4>)
 80107b6:	4613      	mov	r3, r2
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	4413      	add	r3, r2
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	440b      	add	r3, r1
 80107c0:	3312      	adds	r3, #18
 80107c2:	881b      	ldrh	r3, [r3, #0]
 80107c4:	8bba      	ldrh	r2, [r7, #28]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d845      	bhi.n	8010856 <etharp_find_entry+0x18a>
            old_queue = i;
 80107ca:	8c3b      	ldrh	r3, [r7, #32]
 80107cc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80107ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107d2:	4973      	ldr	r1, [pc, #460]	; (80109a0 <etharp_find_entry+0x2d4>)
 80107d4:	4613      	mov	r3, r2
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	4413      	add	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	440b      	add	r3, r1
 80107de:	3312      	adds	r3, #18
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	83bb      	strh	r3, [r7, #28]
 80107e4:	e037      	b.n	8010856 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80107e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107ea:	496d      	ldr	r1, [pc, #436]	; (80109a0 <etharp_find_entry+0x2d4>)
 80107ec:	4613      	mov	r3, r2
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	4413      	add	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	440b      	add	r3, r1
 80107f6:	3312      	adds	r3, #18
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	8b7a      	ldrh	r2, [r7, #26]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d82a      	bhi.n	8010856 <etharp_find_entry+0x18a>
            old_pending = i;
 8010800:	8c3b      	ldrh	r3, [r7, #32]
 8010802:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010808:	4965      	ldr	r1, [pc, #404]	; (80109a0 <etharp_find_entry+0x2d4>)
 801080a:	4613      	mov	r3, r2
 801080c:	005b      	lsls	r3, r3, #1
 801080e:	4413      	add	r3, r2
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	440b      	add	r3, r1
 8010814:	3312      	adds	r3, #18
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	837b      	strh	r3, [r7, #26]
 801081a:	e01c      	b.n	8010856 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801081c:	7dfb      	ldrb	r3, [r7, #23]
 801081e:	2b01      	cmp	r3, #1
 8010820:	d919      	bls.n	8010856 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010826:	495e      	ldr	r1, [pc, #376]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010828:	4613      	mov	r3, r2
 801082a:	005b      	lsls	r3, r3, #1
 801082c:	4413      	add	r3, r2
 801082e:	00db      	lsls	r3, r3, #3
 8010830:	440b      	add	r3, r1
 8010832:	3312      	adds	r3, #18
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	8b3a      	ldrh	r2, [r7, #24]
 8010838:	429a      	cmp	r2, r3
 801083a:	d80c      	bhi.n	8010856 <etharp_find_entry+0x18a>
            old_stable = i;
 801083c:	8c3b      	ldrh	r3, [r7, #32]
 801083e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010844:	4956      	ldr	r1, [pc, #344]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010846:	4613      	mov	r3, r2
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4413      	add	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	440b      	add	r3, r1
 8010850:	3312      	adds	r3, #18
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010856:	8c3b      	ldrh	r3, [r7, #32]
 8010858:	3301      	adds	r3, #1
 801085a:	b29b      	uxth	r3, r3
 801085c:	843b      	strh	r3, [r7, #32]
 801085e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010862:	2b09      	cmp	r3, #9
 8010864:	f77f af4c 	ble.w	8010700 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	f003 0302 	and.w	r3, r3, #2
 801086e:	2b00      	cmp	r3, #0
 8010870:	d108      	bne.n	8010884 <etharp_find_entry+0x1b8>
 8010872:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010876:	2b0a      	cmp	r3, #10
 8010878:	d107      	bne.n	801088a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801087a:	7afb      	ldrb	r3, [r7, #11]
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	e085      	b.n	8010996 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801088a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801088e:	2b09      	cmp	r3, #9
 8010890:	dc02      	bgt.n	8010898 <etharp_find_entry+0x1cc>
    i = empty;
 8010892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010894:	843b      	strh	r3, [r7, #32]
 8010896:	e039      	b.n	801090c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010898:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801089c:	2b09      	cmp	r3, #9
 801089e:	dc14      	bgt.n	80108ca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80108a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108a2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80108a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108a8:	493d      	ldr	r1, [pc, #244]	; (80109a0 <etharp_find_entry+0x2d4>)
 80108aa:	4613      	mov	r3, r2
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	4413      	add	r3, r2
 80108b0:	00db      	lsls	r3, r3, #3
 80108b2:	440b      	add	r3, r1
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d018      	beq.n	80108ec <etharp_find_entry+0x220>
 80108ba:	4b3a      	ldr	r3, [pc, #232]	; (80109a4 <etharp_find_entry+0x2d8>)
 80108bc:	f240 126d 	movw	r2, #365	; 0x16d
 80108c0:	493b      	ldr	r1, [pc, #236]	; (80109b0 <etharp_find_entry+0x2e4>)
 80108c2:	483a      	ldr	r0, [pc, #232]	; (80109ac <etharp_find_entry+0x2e0>)
 80108c4:	f002 fb2a 	bl	8012f1c <iprintf>
 80108c8:	e010      	b.n	80108ec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80108ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80108ce:	2b09      	cmp	r3, #9
 80108d0:	dc02      	bgt.n	80108d8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80108d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108d4:	843b      	strh	r3, [r7, #32]
 80108d6:	e009      	b.n	80108ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80108d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80108dc:	2b09      	cmp	r3, #9
 80108de:	dc02      	bgt.n	80108e6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80108e0:	8bfb      	ldrh	r3, [r7, #30]
 80108e2:	843b      	strh	r3, [r7, #32]
 80108e4:	e002      	b.n	80108ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80108e6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ea:	e054      	b.n	8010996 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80108ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80108f0:	2b09      	cmp	r3, #9
 80108f2:	dd06      	ble.n	8010902 <etharp_find_entry+0x236>
 80108f4:	4b2b      	ldr	r3, [pc, #172]	; (80109a4 <etharp_find_entry+0x2d8>)
 80108f6:	f240 127f 	movw	r2, #383	; 0x17f
 80108fa:	492e      	ldr	r1, [pc, #184]	; (80109b4 <etharp_find_entry+0x2e8>)
 80108fc:	482b      	ldr	r0, [pc, #172]	; (80109ac <etharp_find_entry+0x2e0>)
 80108fe:	f002 fb0d 	bl	8012f1c <iprintf>
    etharp_free_entry(i);
 8010902:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010906:	4618      	mov	r0, r3
 8010908:	f7ff fe06 	bl	8010518 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801090c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010910:	2b09      	cmp	r3, #9
 8010912:	dd06      	ble.n	8010922 <etharp_find_entry+0x256>
 8010914:	4b23      	ldr	r3, [pc, #140]	; (80109a4 <etharp_find_entry+0x2d8>)
 8010916:	f240 1283 	movw	r2, #387	; 0x183
 801091a:	4926      	ldr	r1, [pc, #152]	; (80109b4 <etharp_find_entry+0x2e8>)
 801091c:	4823      	ldr	r0, [pc, #140]	; (80109ac <etharp_find_entry+0x2e0>)
 801091e:	f002 fafd 	bl	8012f1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010926:	491e      	ldr	r1, [pc, #120]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010928:	4613      	mov	r3, r2
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	4413      	add	r3, r2
 801092e:	00db      	lsls	r3, r3, #3
 8010930:	440b      	add	r3, r1
 8010932:	3314      	adds	r3, #20
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d006      	beq.n	8010948 <etharp_find_entry+0x27c>
 801093a:	4b1a      	ldr	r3, [pc, #104]	; (80109a4 <etharp_find_entry+0x2d8>)
 801093c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010940:	491d      	ldr	r1, [pc, #116]	; (80109b8 <etharp_find_entry+0x2ec>)
 8010942:	481a      	ldr	r0, [pc, #104]	; (80109ac <etharp_find_entry+0x2e0>)
 8010944:	f002 faea 	bl	8012f1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00b      	beq.n	8010966 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801094e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6819      	ldr	r1, [r3, #0]
 8010956:	4812      	ldr	r0, [pc, #72]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010958:	4613      	mov	r3, r2
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4413      	add	r3, r2
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	4403      	add	r3, r0
 8010962:	3304      	adds	r3, #4
 8010964:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010966:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801096a:	490d      	ldr	r1, [pc, #52]	; (80109a0 <etharp_find_entry+0x2d4>)
 801096c:	4613      	mov	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	440b      	add	r3, r1
 8010976:	3312      	adds	r3, #18
 8010978:	2200      	movs	r2, #0
 801097a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801097c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010980:	4907      	ldr	r1, [pc, #28]	; (80109a0 <etharp_find_entry+0x2d4>)
 8010982:	4613      	mov	r3, r2
 8010984:	005b      	lsls	r3, r3, #1
 8010986:	4413      	add	r3, r2
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	440b      	add	r3, r1
 801098c:	3308      	adds	r3, #8
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010992:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010996:	4618      	mov	r0, r3
 8010998:	3728      	adds	r7, #40	; 0x28
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	24007380 	.word	0x24007380
 80109a4:	08016200 	.word	0x08016200
 80109a8:	08016238 	.word	0x08016238
 80109ac:	08016278 	.word	0x08016278
 80109b0:	080162a0 	.word	0x080162a0
 80109b4:	080162b8 	.word	0x080162b8
 80109b8:	080162cc 	.word	0x080162cc

080109bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b088      	sub	sp, #32
 80109c0:	af02      	add	r7, sp, #8
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
 80109c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80109d0:	2b06      	cmp	r3, #6
 80109d2:	d006      	beq.n	80109e2 <etharp_update_arp_entry+0x26>
 80109d4:	4b48      	ldr	r3, [pc, #288]	; (8010af8 <etharp_update_arp_entry+0x13c>)
 80109d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80109da:	4948      	ldr	r1, [pc, #288]	; (8010afc <etharp_update_arp_entry+0x140>)
 80109dc:	4848      	ldr	r0, [pc, #288]	; (8010b00 <etharp_update_arp_entry+0x144>)
 80109de:	f002 fa9d 	bl	8012f1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d012      	beq.n	8010a0e <etharp_update_arp_entry+0x52>
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00e      	beq.n	8010a0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	68f9      	ldr	r1, [r7, #12]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f001 f924 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 80109fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d105      	bne.n	8010a0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a0a:	2be0      	cmp	r3, #224	; 0xe0
 8010a0c:	d102      	bne.n	8010a14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a0e:	f06f 030f 	mvn.w	r3, #15
 8010a12:	e06c      	b.n	8010aee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010a14:	78fb      	ldrb	r3, [r7, #3]
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	68b8      	ldr	r0, [r7, #8]
 8010a1c:	f7ff fe56 	bl	80106cc <etharp_find_entry>
 8010a20:	4603      	mov	r3, r0
 8010a22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010a24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	da02      	bge.n	8010a32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010a2c:	8afb      	ldrh	r3, [r7, #22]
 8010a2e:	b25b      	sxtb	r3, r3
 8010a30:	e05d      	b.n	8010aee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010a32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a36:	4933      	ldr	r1, [pc, #204]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010a38:	4613      	mov	r3, r2
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	440b      	add	r3, r1
 8010a42:	3314      	adds	r3, #20
 8010a44:	2202      	movs	r2, #2
 8010a46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010a48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a4c:	492d      	ldr	r1, [pc, #180]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	3308      	adds	r3, #8
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010a5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a62:	4613      	mov	r3, r2
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	3308      	adds	r3, #8
 8010a6c:	4a25      	ldr	r2, [pc, #148]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010a6e:	4413      	add	r3, r2
 8010a70:	3304      	adds	r3, #4
 8010a72:	2206      	movs	r2, #6
 8010a74:	6879      	ldr	r1, [r7, #4]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f002 fb2b 	bl	80130d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010a7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a80:	4920      	ldr	r1, [pc, #128]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010a82:	4613      	mov	r3, r2
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	4413      	add	r3, r2
 8010a88:	00db      	lsls	r3, r3, #3
 8010a8a:	440b      	add	r3, r1
 8010a8c:	3312      	adds	r3, #18
 8010a8e:	2200      	movs	r2, #0
 8010a90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010a92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a96:	491b      	ldr	r1, [pc, #108]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010a98:	4613      	mov	r3, r2
 8010a9a:	005b      	lsls	r3, r3, #1
 8010a9c:	4413      	add	r3, r2
 8010a9e:	00db      	lsls	r3, r3, #3
 8010aa0:	440b      	add	r3, r1
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d021      	beq.n	8010aec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010aa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010aac:	4915      	ldr	r1, [pc, #84]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010aae:	4613      	mov	r3, r2
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	4413      	add	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	440b      	add	r3, r1
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010abc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ac0:	4910      	ldr	r1, [pc, #64]	; (8010b04 <etharp_update_arp_entry+0x148>)
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	4413      	add	r3, r2
 8010ac8:	00db      	lsls	r3, r3, #3
 8010aca:	440b      	add	r3, r1
 8010acc:	2200      	movs	r2, #0
 8010ace:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6939      	ldr	r1, [r7, #16]
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f001 ffbd 	bl	8012a60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010ae6:	6938      	ldr	r0, [r7, #16]
 8010ae8:	f7f9 faac 	bl	800a044 <pbuf_free>
  }
  return ERR_OK;
 8010aec:	2300      	movs	r3, #0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	08016200 	.word	0x08016200
 8010afc:	080162f8 	.word	0x080162f8
 8010b00:	08016278 	.word	0x08016278
 8010b04:	24007380 	.word	0x24007380

08010b08 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b10:	2300      	movs	r3, #0
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	e01e      	b.n	8010b54 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010b16:	4913      	ldr	r1, [pc, #76]	; (8010b64 <etharp_cleanup_netif+0x5c>)
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	4413      	add	r3, r2
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	440b      	add	r3, r1
 8010b24:	3314      	adds	r3, #20
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010b2a:	7afb      	ldrb	r3, [r7, #11]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00e      	beq.n	8010b4e <etharp_cleanup_netif+0x46>
 8010b30:	490c      	ldr	r1, [pc, #48]	; (8010b64 <etharp_cleanup_netif+0x5c>)
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	4613      	mov	r3, r2
 8010b36:	005b      	lsls	r3, r3, #1
 8010b38:	4413      	add	r3, r2
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	440b      	add	r3, r1
 8010b3e:	3308      	adds	r3, #8
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d102      	bne.n	8010b4e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f7ff fce5 	bl	8010518 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3301      	adds	r3, #1
 8010b52:	60fb      	str	r3, [r7, #12]
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2b09      	cmp	r3, #9
 8010b58:	dddd      	ble.n	8010b16 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010b5a:	bf00      	nop
 8010b5c:	bf00      	nop
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	24007380 	.word	0x24007380

08010b68 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010b68:	b5b0      	push	{r4, r5, r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af04      	add	r7, sp, #16
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d107      	bne.n	8010b88 <etharp_input+0x20>
 8010b78:	4b3d      	ldr	r3, [pc, #244]	; (8010c70 <etharp_input+0x108>)
 8010b7a:	f240 228a 	movw	r2, #650	; 0x28a
 8010b7e:	493d      	ldr	r1, [pc, #244]	; (8010c74 <etharp_input+0x10c>)
 8010b80:	483d      	ldr	r0, [pc, #244]	; (8010c78 <etharp_input+0x110>)
 8010b82:	f002 f9cb 	bl	8012f1c <iprintf>
 8010b86:	e06f      	b.n	8010c68 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	881b      	ldrh	r3, [r3, #0]
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b98:	d10c      	bne.n	8010bb4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010b9e:	2b06      	cmp	r3, #6
 8010ba0:	d108      	bne.n	8010bb4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010ba6:	2b04      	cmp	r3, #4
 8010ba8:	d104      	bne.n	8010bb4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	885b      	ldrh	r3, [r3, #2]
 8010bae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010bb0:	2b08      	cmp	r3, #8
 8010bb2:	d003      	beq.n	8010bbc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7f9 fa45 	bl	800a044 <pbuf_free>
    return;
 8010bba:	e055      	b.n	8010c68 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	330e      	adds	r3, #14
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	3318      	adds	r3, #24
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	3304      	adds	r3, #4
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d102      	bne.n	8010bdc <etharp_input+0x74>
    for_us = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
 8010bda:	e009      	b.n	8010bf0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	3304      	adds	r3, #4
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	bf0c      	ite	eq
 8010be8:	2301      	moveq	r3, #1
 8010bea:	2300      	movne	r3, #0
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	f103 0208 	add.w	r2, r3, #8
 8010bf6:	7dfb      	ldrb	r3, [r7, #23]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <etharp_input+0x98>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e000      	b.n	8010c02 <etharp_input+0x9a>
 8010c00:	2302      	movs	r3, #2
 8010c02:	f107 010c 	add.w	r1, r7, #12
 8010c06:	6838      	ldr	r0, [r7, #0]
 8010c08:	f7ff fed8 	bl	80109bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	88db      	ldrh	r3, [r3, #6]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c16:	d003      	beq.n	8010c20 <etharp_input+0xb8>
 8010c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c1c:	d01e      	beq.n	8010c5c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010c1e:	e020      	b.n	8010c62 <etharp_input+0xfa>
      if (for_us) {
 8010c20:	7dfb      	ldrb	r3, [r7, #23]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d01c      	beq.n	8010c60 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010c3c:	693a      	ldr	r2, [r7, #16]
 8010c3e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010c40:	2102      	movs	r1, #2
 8010c42:	9103      	str	r1, [sp, #12]
 8010c44:	f107 010c 	add.w	r1, r7, #12
 8010c48:	9102      	str	r1, [sp, #8]
 8010c4a:	9201      	str	r2, [sp, #4]
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	462b      	mov	r3, r5
 8010c50:	4622      	mov	r2, r4
 8010c52:	4601      	mov	r1, r0
 8010c54:	6838      	ldr	r0, [r7, #0]
 8010c56:	f000 faeb 	bl	8011230 <etharp_raw>
      break;
 8010c5a:	e001      	b.n	8010c60 <etharp_input+0xf8>
      break;
 8010c5c:	bf00      	nop
 8010c5e:	e000      	b.n	8010c62 <etharp_input+0xfa>
      break;
 8010c60:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7f9 f9ee 	bl	800a044 <pbuf_free>
}
 8010c68:	3718      	adds	r7, #24
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	08016200 	.word	0x08016200
 8010c74:	08016350 	.word	0x08016350
 8010c78:	08016278 	.word	0x08016278

08010c7c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af02      	add	r7, sp, #8
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	4613      	mov	r3, r2
 8010c88:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010c8a:	79fa      	ldrb	r2, [r7, #7]
 8010c8c:	4944      	ldr	r1, [pc, #272]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010c8e:	4613      	mov	r3, r2
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	4413      	add	r3, r2
 8010c94:	00db      	lsls	r3, r3, #3
 8010c96:	440b      	add	r3, r1
 8010c98:	3314      	adds	r3, #20
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d806      	bhi.n	8010cae <etharp_output_to_arp_index+0x32>
 8010ca0:	4b40      	ldr	r3, [pc, #256]	; (8010da4 <etharp_output_to_arp_index+0x128>)
 8010ca2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010ca6:	4940      	ldr	r1, [pc, #256]	; (8010da8 <etharp_output_to_arp_index+0x12c>)
 8010ca8:	4840      	ldr	r0, [pc, #256]	; (8010dac <etharp_output_to_arp_index+0x130>)
 8010caa:	f002 f937 	bl	8012f1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010cae:	79fa      	ldrb	r2, [r7, #7]
 8010cb0:	493b      	ldr	r1, [pc, #236]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	4413      	add	r3, r2
 8010cb8:	00db      	lsls	r3, r3, #3
 8010cba:	440b      	add	r3, r1
 8010cbc:	3314      	adds	r3, #20
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d153      	bne.n	8010d6c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010cc4:	79fa      	ldrb	r2, [r7, #7]
 8010cc6:	4936      	ldr	r1, [pc, #216]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010cc8:	4613      	mov	r3, r2
 8010cca:	005b      	lsls	r3, r3, #1
 8010ccc:	4413      	add	r3, r2
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	440b      	add	r3, r1
 8010cd2:	3312      	adds	r3, #18
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010cda:	d919      	bls.n	8010d10 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010cdc:	79fa      	ldrb	r2, [r7, #7]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	4413      	add	r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	4a2e      	ldr	r2, [pc, #184]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010ce8:	4413      	add	r3, r2
 8010cea:	3304      	adds	r3, #4
 8010cec:	4619      	mov	r1, r3
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f000 fb4c 	bl	801138c <etharp_request>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d138      	bne.n	8010d6c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010cfa:	79fa      	ldrb	r2, [r7, #7]
 8010cfc:	4928      	ldr	r1, [pc, #160]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010cfe:	4613      	mov	r3, r2
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4413      	add	r3, r2
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	440b      	add	r3, r1
 8010d08:	3314      	adds	r3, #20
 8010d0a:	2203      	movs	r2, #3
 8010d0c:	701a      	strb	r2, [r3, #0]
 8010d0e:	e02d      	b.n	8010d6c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	4923      	ldr	r1, [pc, #140]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010d14:	4613      	mov	r3, r2
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	4413      	add	r3, r2
 8010d1a:	00db      	lsls	r3, r3, #3
 8010d1c:	440b      	add	r3, r1
 8010d1e:	3312      	adds	r3, #18
 8010d20:	881b      	ldrh	r3, [r3, #0]
 8010d22:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010d26:	d321      	bcc.n	8010d6c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010d28:	79fa      	ldrb	r2, [r7, #7]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	005b      	lsls	r3, r3, #1
 8010d2e:	4413      	add	r3, r2
 8010d30:	00db      	lsls	r3, r3, #3
 8010d32:	4a1b      	ldr	r2, [pc, #108]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010d34:	4413      	add	r3, r2
 8010d36:	1d19      	adds	r1, r3, #4
 8010d38:	79fa      	ldrb	r2, [r7, #7]
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	3308      	adds	r3, #8
 8010d44:	4a16      	ldr	r2, [pc, #88]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010d46:	4413      	add	r3, r2
 8010d48:	3304      	adds	r3, #4
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f000 fafb 	bl	8011348 <etharp_request_dst>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d109      	bne.n	8010d6c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d58:	79fa      	ldrb	r2, [r7, #7]
 8010d5a:	4911      	ldr	r1, [pc, #68]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	4413      	add	r3, r2
 8010d62:	00db      	lsls	r3, r3, #3
 8010d64:	440b      	add	r3, r1
 8010d66:	3314      	adds	r3, #20
 8010d68:	2203      	movs	r2, #3
 8010d6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010d72:	79fa      	ldrb	r2, [r7, #7]
 8010d74:	4613      	mov	r3, r2
 8010d76:	005b      	lsls	r3, r3, #1
 8010d78:	4413      	add	r3, r2
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	4a08      	ldr	r2, [pc, #32]	; (8010da0 <etharp_output_to_arp_index+0x124>)
 8010d80:	4413      	add	r3, r2
 8010d82:	3304      	adds	r3, #4
 8010d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d88:	9200      	str	r2, [sp, #0]
 8010d8a:	460a      	mov	r2, r1
 8010d8c:	68b9      	ldr	r1, [r7, #8]
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f001 fe66 	bl	8012a60 <ethernet_output>
 8010d94:	4603      	mov	r3, r0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	24007380 	.word	0x24007380
 8010da4:	08016200 	.word	0x08016200
 8010da8:	08016370 	.word	0x08016370
 8010dac:	08016278 	.word	0x08016278

08010db0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b08a      	sub	sp, #40	; 0x28
 8010db4:	af02      	add	r7, sp, #8
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d106      	bne.n	8010dd4 <etharp_output+0x24>
 8010dc6:	4b73      	ldr	r3, [pc, #460]	; (8010f94 <etharp_output+0x1e4>)
 8010dc8:	f240 321e 	movw	r2, #798	; 0x31e
 8010dcc:	4972      	ldr	r1, [pc, #456]	; (8010f98 <etharp_output+0x1e8>)
 8010dce:	4873      	ldr	r0, [pc, #460]	; (8010f9c <etharp_output+0x1ec>)
 8010dd0:	f002 f8a4 	bl	8012f1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <etharp_output+0x38>
 8010dda:	4b6e      	ldr	r3, [pc, #440]	; (8010f94 <etharp_output+0x1e4>)
 8010ddc:	f240 321f 	movw	r2, #799	; 0x31f
 8010de0:	496f      	ldr	r1, [pc, #444]	; (8010fa0 <etharp_output+0x1f0>)
 8010de2:	486e      	ldr	r0, [pc, #440]	; (8010f9c <etharp_output+0x1ec>)
 8010de4:	f002 f89a 	bl	8012f1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d106      	bne.n	8010dfc <etharp_output+0x4c>
 8010dee:	4b69      	ldr	r3, [pc, #420]	; (8010f94 <etharp_output+0x1e4>)
 8010df0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010df4:	496b      	ldr	r1, [pc, #428]	; (8010fa4 <etharp_output+0x1f4>)
 8010df6:	4869      	ldr	r0, [pc, #420]	; (8010f9c <etharp_output+0x1ec>)
 8010df8:	f002 f890 	bl	8012f1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	68f9      	ldr	r1, [r7, #12]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 ff1e 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d002      	beq.n	8010e14 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010e0e:	4b66      	ldr	r3, [pc, #408]	; (8010fa8 <etharp_output+0x1f8>)
 8010e10:	61fb      	str	r3, [r7, #28]
 8010e12:	e0af      	b.n	8010f74 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e1c:	2be0      	cmp	r3, #224	; 0xe0
 8010e1e:	d118      	bne.n	8010e52 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010e20:	2301      	movs	r3, #1
 8010e22:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010e24:	2300      	movs	r3, #0
 8010e26:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010e28:	235e      	movs	r3, #94	; 0x5e
 8010e2a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	3302      	adds	r3, #2
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	3303      	adds	r3, #3
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010e4a:	f107 0310 	add.w	r3, r7, #16
 8010e4e:	61fb      	str	r3, [r7, #28]
 8010e50:	e090      	b.n	8010f74 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	3304      	adds	r3, #4
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	405a      	eors	r2, r3
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3308      	adds	r3, #8
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4013      	ands	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d012      	beq.n	8010e90 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e70:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d00b      	beq.n	8010e90 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	330c      	adds	r3, #12
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d003      	beq.n	8010e8a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	330c      	adds	r3, #12
 8010e86:	61bb      	str	r3, [r7, #24]
 8010e88:	e002      	b.n	8010e90 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010e8a:	f06f 0303 	mvn.w	r3, #3
 8010e8e:	e07d      	b.n	8010f8c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010e90:	4b46      	ldr	r3, [pc, #280]	; (8010fac <etharp_output+0x1fc>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	4619      	mov	r1, r3
 8010e96:	4a46      	ldr	r2, [pc, #280]	; (8010fb0 <etharp_output+0x200>)
 8010e98:	460b      	mov	r3, r1
 8010e9a:	005b      	lsls	r3, r3, #1
 8010e9c:	440b      	add	r3, r1
 8010e9e:	00db      	lsls	r3, r3, #3
 8010ea0:	4413      	add	r3, r2
 8010ea2:	3314      	adds	r3, #20
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d925      	bls.n	8010ef6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010eaa:	4b40      	ldr	r3, [pc, #256]	; (8010fac <etharp_output+0x1fc>)
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	4a3f      	ldr	r2, [pc, #252]	; (8010fb0 <etharp_output+0x200>)
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	440b      	add	r3, r1
 8010eb8:	00db      	lsls	r3, r3, #3
 8010eba:	4413      	add	r3, r2
 8010ebc:	3308      	adds	r3, #8
 8010ebe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d117      	bne.n	8010ef6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	4b38      	ldr	r3, [pc, #224]	; (8010fac <etharp_output+0x1fc>)
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	4937      	ldr	r1, [pc, #220]	; (8010fb0 <etharp_output+0x200>)
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4403      	add	r3, r0
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	440b      	add	r3, r1
 8010edc:	3304      	adds	r3, #4
 8010ede:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d108      	bne.n	8010ef6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010ee4:	4b31      	ldr	r3, [pc, #196]	; (8010fac <etharp_output+0x1fc>)
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	461a      	mov	r2, r3
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f7ff fec5 	bl	8010c7c <etharp_output_to_arp_index>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	e04a      	b.n	8010f8c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	75fb      	strb	r3, [r7, #23]
 8010efa:	e031      	b.n	8010f60 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010efc:	7dfa      	ldrb	r2, [r7, #23]
 8010efe:	492c      	ldr	r1, [pc, #176]	; (8010fb0 <etharp_output+0x200>)
 8010f00:	4613      	mov	r3, r2
 8010f02:	005b      	lsls	r3, r3, #1
 8010f04:	4413      	add	r3, r2
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	440b      	add	r3, r1
 8010f0a:	3314      	adds	r3, #20
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d923      	bls.n	8010f5a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010f12:	7dfa      	ldrb	r2, [r7, #23]
 8010f14:	4926      	ldr	r1, [pc, #152]	; (8010fb0 <etharp_output+0x200>)
 8010f16:	4613      	mov	r3, r2
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	4413      	add	r3, r2
 8010f1c:	00db      	lsls	r3, r3, #3
 8010f1e:	440b      	add	r3, r1
 8010f20:	3308      	adds	r3, #8
 8010f22:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d117      	bne.n	8010f5a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	6819      	ldr	r1, [r3, #0]
 8010f2e:	7dfa      	ldrb	r2, [r7, #23]
 8010f30:	481f      	ldr	r0, [pc, #124]	; (8010fb0 <etharp_output+0x200>)
 8010f32:	4613      	mov	r3, r2
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	4413      	add	r3, r2
 8010f38:	00db      	lsls	r3, r3, #3
 8010f3a:	4403      	add	r3, r0
 8010f3c:	3304      	adds	r3, #4
 8010f3e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010f40:	4299      	cmp	r1, r3
 8010f42:	d10a      	bne.n	8010f5a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010f44:	4a19      	ldr	r2, [pc, #100]	; (8010fac <etharp_output+0x1fc>)
 8010f46:	7dfb      	ldrb	r3, [r7, #23]
 8010f48:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010f4a:	7dfb      	ldrb	r3, [r7, #23]
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	68b9      	ldr	r1, [r7, #8]
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f7ff fe93 	bl	8010c7c <etharp_output_to_arp_index>
 8010f56:	4603      	mov	r3, r0
 8010f58:	e018      	b.n	8010f8c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f5a:	7dfb      	ldrb	r3, [r7, #23]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	75fb      	strb	r3, [r7, #23]
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	2b09      	cmp	r3, #9
 8010f64:	d9ca      	bls.n	8010efc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	69b9      	ldr	r1, [r7, #24]
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	f000 f822 	bl	8010fb4 <etharp_query>
 8010f70:	4603      	mov	r3, r0
 8010f72:	e00b      	b.n	8010f8c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	68b9      	ldr	r1, [r7, #8]
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f001 fd6b 	bl	8012a60 <ethernet_output>
 8010f8a:	4603      	mov	r3, r0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3720      	adds	r7, #32
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	08016200 	.word	0x08016200
 8010f98:	08016350 	.word	0x08016350
 8010f9c:	08016278 	.word	0x08016278
 8010fa0:	080163a0 	.word	0x080163a0
 8010fa4:	08016340 	.word	0x08016340
 8010fa8:	080169f4 	.word	0x080169f4
 8010fac:	24007470 	.word	0x24007470
 8010fb0:	24007380 	.word	0x24007380

08010fb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b08c      	sub	sp, #48	; 0x30
 8010fb8:	af02      	add	r7, sp, #8
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	3326      	adds	r3, #38	; 0x26
 8010fc4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010fc6:	23ff      	movs	r3, #255	; 0xff
 8010fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	68f9      	ldr	r1, [r7, #12]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 fe34 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d10c      	bne.n	8010ffc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fea:	2be0      	cmp	r3, #224	; 0xe0
 8010fec:	d006      	beq.n	8010ffc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d003      	beq.n	8010ffc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ffc:	f06f 030f 	mvn.w	r3, #15
 8011000:	e101      	b.n	8011206 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	2101      	movs	r1, #1
 8011006:	68b8      	ldr	r0, [r7, #8]
 8011008:	f7ff fb60 	bl	80106cc <etharp_find_entry>
 801100c:	4603      	mov	r3, r0
 801100e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011010:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011014:	2b00      	cmp	r3, #0
 8011016:	da02      	bge.n	801101e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011018:	8a7b      	ldrh	r3, [r7, #18]
 801101a:	b25b      	sxtb	r3, r3
 801101c:	e0f3      	b.n	8011206 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801101e:	8a7b      	ldrh	r3, [r7, #18]
 8011020:	2b7e      	cmp	r3, #126	; 0x7e
 8011022:	d906      	bls.n	8011032 <etharp_query+0x7e>
 8011024:	4b7a      	ldr	r3, [pc, #488]	; (8011210 <etharp_query+0x25c>)
 8011026:	f240 32c1 	movw	r2, #961	; 0x3c1
 801102a:	497a      	ldr	r1, [pc, #488]	; (8011214 <etharp_query+0x260>)
 801102c:	487a      	ldr	r0, [pc, #488]	; (8011218 <etharp_query+0x264>)
 801102e:	f001 ff75 	bl	8012f1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011032:	8a7b      	ldrh	r3, [r7, #18]
 8011034:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011036:	7c7a      	ldrb	r2, [r7, #17]
 8011038:	4978      	ldr	r1, [pc, #480]	; (801121c <etharp_query+0x268>)
 801103a:	4613      	mov	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	4413      	add	r3, r2
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	440b      	add	r3, r1
 8011044:	3314      	adds	r3, #20
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d115      	bne.n	8011078 <etharp_query+0xc4>
    is_new_entry = 1;
 801104c:	2301      	movs	r3, #1
 801104e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011050:	7c7a      	ldrb	r2, [r7, #17]
 8011052:	4972      	ldr	r1, [pc, #456]	; (801121c <etharp_query+0x268>)
 8011054:	4613      	mov	r3, r2
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	4413      	add	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	440b      	add	r3, r1
 801105e:	3314      	adds	r3, #20
 8011060:	2201      	movs	r2, #1
 8011062:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011064:	7c7a      	ldrb	r2, [r7, #17]
 8011066:	496d      	ldr	r1, [pc, #436]	; (801121c <etharp_query+0x268>)
 8011068:	4613      	mov	r3, r2
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	4413      	add	r3, r2
 801106e:	00db      	lsls	r3, r3, #3
 8011070:	440b      	add	r3, r1
 8011072:	3308      	adds	r3, #8
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011078:	7c7a      	ldrb	r2, [r7, #17]
 801107a:	4968      	ldr	r1, [pc, #416]	; (801121c <etharp_query+0x268>)
 801107c:	4613      	mov	r3, r2
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	4413      	add	r3, r2
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	440b      	add	r3, r1
 8011086:	3314      	adds	r3, #20
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d011      	beq.n	80110b2 <etharp_query+0xfe>
 801108e:	7c7a      	ldrb	r2, [r7, #17]
 8011090:	4962      	ldr	r1, [pc, #392]	; (801121c <etharp_query+0x268>)
 8011092:	4613      	mov	r3, r2
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	4413      	add	r3, r2
 8011098:	00db      	lsls	r3, r3, #3
 801109a:	440b      	add	r3, r1
 801109c:	3314      	adds	r3, #20
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d806      	bhi.n	80110b2 <etharp_query+0xfe>
 80110a4:	4b5a      	ldr	r3, [pc, #360]	; (8011210 <etharp_query+0x25c>)
 80110a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80110aa:	495d      	ldr	r1, [pc, #372]	; (8011220 <etharp_query+0x26c>)
 80110ac:	485a      	ldr	r0, [pc, #360]	; (8011218 <etharp_query+0x264>)
 80110ae:	f001 ff35 	bl	8012f1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <etharp_query+0x10a>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10c      	bne.n	80110d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80110be:	68b9      	ldr	r1, [r7, #8]
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f000 f963 	bl	801138c <etharp_request>
 80110c6:	4603      	mov	r3, r0
 80110c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d102      	bne.n	80110d8 <etharp_query+0x124>
      return result;
 80110d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80110d6:	e096      	b.n	8011206 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <etharp_query+0x138>
 80110de:	4b4c      	ldr	r3, [pc, #304]	; (8011210 <etharp_query+0x25c>)
 80110e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80110e4:	494f      	ldr	r1, [pc, #316]	; (8011224 <etharp_query+0x270>)
 80110e6:	484c      	ldr	r0, [pc, #304]	; (8011218 <etharp_query+0x264>)
 80110e8:	f001 ff18 	bl	8012f1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80110ec:	7c7a      	ldrb	r2, [r7, #17]
 80110ee:	494b      	ldr	r1, [pc, #300]	; (801121c <etharp_query+0x268>)
 80110f0:	4613      	mov	r3, r2
 80110f2:	005b      	lsls	r3, r3, #1
 80110f4:	4413      	add	r3, r2
 80110f6:	00db      	lsls	r3, r3, #3
 80110f8:	440b      	add	r3, r1
 80110fa:	3314      	adds	r3, #20
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d917      	bls.n	8011132 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011102:	4a49      	ldr	r2, [pc, #292]	; (8011228 <etharp_query+0x274>)
 8011104:	7c7b      	ldrb	r3, [r7, #17]
 8011106:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011108:	7c7a      	ldrb	r2, [r7, #17]
 801110a:	4613      	mov	r3, r2
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	4413      	add	r3, r2
 8011110:	00db      	lsls	r3, r3, #3
 8011112:	3308      	adds	r3, #8
 8011114:	4a41      	ldr	r2, [pc, #260]	; (801121c <etharp_query+0x268>)
 8011116:	4413      	add	r3, r2
 8011118:	3304      	adds	r3, #4
 801111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801111e:	9200      	str	r2, [sp, #0]
 8011120:	697a      	ldr	r2, [r7, #20]
 8011122:	6879      	ldr	r1, [r7, #4]
 8011124:	68f8      	ldr	r0, [r7, #12]
 8011126:	f001 fc9b 	bl	8012a60 <ethernet_output>
 801112a:	4603      	mov	r3, r0
 801112c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011130:	e067      	b.n	8011202 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011132:	7c7a      	ldrb	r2, [r7, #17]
 8011134:	4939      	ldr	r1, [pc, #228]	; (801121c <etharp_query+0x268>)
 8011136:	4613      	mov	r3, r2
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	4413      	add	r3, r2
 801113c:	00db      	lsls	r3, r3, #3
 801113e:	440b      	add	r3, r1
 8011140:	3314      	adds	r3, #20
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d15c      	bne.n	8011202 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011148:	2300      	movs	r3, #0
 801114a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011150:	e01c      	b.n	801118c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	895a      	ldrh	r2, [r3, #10]
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	891b      	ldrh	r3, [r3, #8]
 801115a:	429a      	cmp	r2, r3
 801115c:	d10a      	bne.n	8011174 <etharp_query+0x1c0>
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <etharp_query+0x1c0>
 8011166:	4b2a      	ldr	r3, [pc, #168]	; (8011210 <etharp_query+0x25c>)
 8011168:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801116c:	492f      	ldr	r1, [pc, #188]	; (801122c <etharp_query+0x278>)
 801116e:	482a      	ldr	r0, [pc, #168]	; (8011218 <etharp_query+0x264>)
 8011170:	f001 fed4 	bl	8012f1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	7b1b      	ldrb	r3, [r3, #12]
 8011178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <etharp_query+0x1d2>
        copy_needed = 1;
 8011180:	2301      	movs	r3, #1
 8011182:	61bb      	str	r3, [r7, #24]
        break;
 8011184:	e005      	b.n	8011192 <etharp_query+0x1de>
      }
      p = p->next;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1df      	bne.n	8011152 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d007      	beq.n	80111a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801119e:	200e      	movs	r0, #14
 80111a0:	f7f9 f9c8 	bl	800a534 <pbuf_clone>
 80111a4:	61f8      	str	r0, [r7, #28]
 80111a6:	e004      	b.n	80111b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80111ac:	69f8      	ldr	r0, [r7, #28]
 80111ae:	f7f8 ffef 	bl	800a190 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d021      	beq.n	80111fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80111b8:	7c7a      	ldrb	r2, [r7, #17]
 80111ba:	4918      	ldr	r1, [pc, #96]	; (801121c <etharp_query+0x268>)
 80111bc:	4613      	mov	r3, r2
 80111be:	005b      	lsls	r3, r3, #1
 80111c0:	4413      	add	r3, r2
 80111c2:	00db      	lsls	r3, r3, #3
 80111c4:	440b      	add	r3, r1
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00a      	beq.n	80111e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80111cc:	7c7a      	ldrb	r2, [r7, #17]
 80111ce:	4913      	ldr	r1, [pc, #76]	; (801121c <etharp_query+0x268>)
 80111d0:	4613      	mov	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	4413      	add	r3, r2
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	440b      	add	r3, r1
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4618      	mov	r0, r3
 80111de:	f7f8 ff31 	bl	800a044 <pbuf_free>
      }
      arp_table[i].q = p;
 80111e2:	7c7a      	ldrb	r2, [r7, #17]
 80111e4:	490d      	ldr	r1, [pc, #52]	; (801121c <etharp_query+0x268>)
 80111e6:	4613      	mov	r3, r2
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4413      	add	r3, r2
 80111ec:	00db      	lsls	r3, r3, #3
 80111ee:	440b      	add	r3, r1
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80111f4:	2300      	movs	r3, #0
 80111f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111fa:	e002      	b.n	8011202 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80111fc:	23ff      	movs	r3, #255	; 0xff
 80111fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011202:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011206:	4618      	mov	r0, r3
 8011208:	3728      	adds	r7, #40	; 0x28
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	08016200 	.word	0x08016200
 8011214:	080163ac 	.word	0x080163ac
 8011218:	08016278 	.word	0x08016278
 801121c:	24007380 	.word	0x24007380
 8011220:	080163bc 	.word	0x080163bc
 8011224:	080163a0 	.word	0x080163a0
 8011228:	24007470 	.word	0x24007470
 801122c:	080163e4 	.word	0x080163e4

08011230 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b08a      	sub	sp, #40	; 0x28
 8011234:	af02      	add	r7, sp, #8
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]
 801123c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d106      	bne.n	8011256 <etharp_raw+0x26>
 8011248:	4b3a      	ldr	r3, [pc, #232]	; (8011334 <etharp_raw+0x104>)
 801124a:	f240 4257 	movw	r2, #1111	; 0x457
 801124e:	493a      	ldr	r1, [pc, #232]	; (8011338 <etharp_raw+0x108>)
 8011250:	483a      	ldr	r0, [pc, #232]	; (801133c <etharp_raw+0x10c>)
 8011252:	f001 fe63 	bl	8012f1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011256:	f44f 7220 	mov.w	r2, #640	; 0x280
 801125a:	211c      	movs	r1, #28
 801125c:	200e      	movs	r0, #14
 801125e:	f7f8 fc0d 	bl	8009a7c <pbuf_alloc>
 8011262:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d102      	bne.n	8011270 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801126a:	f04f 33ff 	mov.w	r3, #4294967295
 801126e:	e05d      	b.n	801132c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	895b      	ldrh	r3, [r3, #10]
 8011274:	2b1b      	cmp	r3, #27
 8011276:	d806      	bhi.n	8011286 <etharp_raw+0x56>
 8011278:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <etharp_raw+0x104>)
 801127a:	f240 4262 	movw	r2, #1122	; 0x462
 801127e:	4930      	ldr	r1, [pc, #192]	; (8011340 <etharp_raw+0x110>)
 8011280:	482e      	ldr	r0, [pc, #184]	; (801133c <etharp_raw+0x10c>)
 8011282:	f001 fe4b 	bl	8012f1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801128c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801128e:	4618      	mov	r0, r3
 8011290:	f7f7 fa2e 	bl	80086f0 <lwip_htons>
 8011294:	4603      	mov	r3, r0
 8011296:	461a      	mov	r2, r3
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112a2:	2b06      	cmp	r3, #6
 80112a4:	d006      	beq.n	80112b4 <etharp_raw+0x84>
 80112a6:	4b23      	ldr	r3, [pc, #140]	; (8011334 <etharp_raw+0x104>)
 80112a8:	f240 4269 	movw	r2, #1129	; 0x469
 80112ac:	4925      	ldr	r1, [pc, #148]	; (8011344 <etharp_raw+0x114>)
 80112ae:	4823      	ldr	r0, [pc, #140]	; (801133c <etharp_raw+0x10c>)
 80112b0:	f001 fe34 	bl	8012f1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	3308      	adds	r3, #8
 80112b8:	2206      	movs	r2, #6
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	4618      	mov	r0, r3
 80112be:	f001 ff08 	bl	80130d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	3312      	adds	r3, #18
 80112c6:	2206      	movs	r2, #6
 80112c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112ca:	4618      	mov	r0, r3
 80112cc:	f001 ff01 	bl	80130d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	330e      	adds	r3, #14
 80112d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112d6:	6812      	ldr	r2, [r2, #0]
 80112d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	3318      	adds	r3, #24
 80112de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112e0:	6812      	ldr	r2, [r2, #0]
 80112e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2200      	movs	r2, #0
 80112e8:	701a      	strb	r2, [r3, #0]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f042 0201 	orr.w	r2, r2, #1
 80112f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	2200      	movs	r2, #0
 80112f6:	f042 0208 	orr.w	r2, r2, #8
 80112fa:	709a      	strb	r2, [r3, #2]
 80112fc:	2200      	movs	r2, #0
 80112fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2206      	movs	r2, #6
 8011304:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	2204      	movs	r2, #4
 801130a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801130c:	f640 0306 	movw	r3, #2054	; 0x806
 8011310:	9300      	str	r3, [sp, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	68ba      	ldr	r2, [r7, #8]
 8011316:	69b9      	ldr	r1, [r7, #24]
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f001 fba1 	bl	8012a60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801131e:	69b8      	ldr	r0, [r7, #24]
 8011320:	f7f8 fe90 	bl	800a044 <pbuf_free>
  p = NULL;
 8011324:	2300      	movs	r3, #0
 8011326:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011328:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801132c:	4618      	mov	r0, r3
 801132e:	3720      	adds	r7, #32
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	08016200 	.word	0x08016200
 8011338:	08016350 	.word	0x08016350
 801133c:	08016278 	.word	0x08016278
 8011340:	08016400 	.word	0x08016400
 8011344:	08016434 	.word	0x08016434

08011348 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b088      	sub	sp, #32
 801134c:	af04      	add	r7, sp, #16
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011364:	2201      	movs	r2, #1
 8011366:	9203      	str	r2, [sp, #12]
 8011368:	68ba      	ldr	r2, [r7, #8]
 801136a:	9202      	str	r2, [sp, #8]
 801136c:	4a06      	ldr	r2, [pc, #24]	; (8011388 <etharp_request_dst+0x40>)
 801136e:	9201      	str	r2, [sp, #4]
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	4603      	mov	r3, r0
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f7ff ff5a 	bl	8011230 <etharp_raw>
 801137c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	080169fc 	.word	0x080169fc

0801138c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011396:	4a05      	ldr	r2, [pc, #20]	; (80113ac <etharp_request+0x20>)
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7ff ffd4 	bl	8011348 <etharp_request_dst>
 80113a0:	4603      	mov	r3, r0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	080169f4 	.word	0x080169f4

080113b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08e      	sub	sp, #56	; 0x38
 80113b4:	af04      	add	r7, sp, #16
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80113ba:	4b87      	ldr	r3, [pc, #540]	; (80115d8 <icmp_input+0x228>)
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f003 030f 	and.w	r3, r3, #15
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80113d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113d2:	2b13      	cmp	r3, #19
 80113d4:	f240 80e8 	bls.w	80115a8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	895b      	ldrh	r3, [r3, #10]
 80113dc:	2b03      	cmp	r3, #3
 80113de:	f240 80e5 	bls.w	80115ac <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80113ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 80d2 	beq.w	801159a <icmp_input+0x1ea>
 80113f6:	2b08      	cmp	r3, #8
 80113f8:	f040 80d2 	bne.w	80115a0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80113fc:	4b77      	ldr	r3, [pc, #476]	; (80115dc <icmp_input+0x22c>)
 80113fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011400:	4b75      	ldr	r3, [pc, #468]	; (80115d8 <icmp_input+0x228>)
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011408:	2be0      	cmp	r3, #224	; 0xe0
 801140a:	f000 80d6 	beq.w	80115ba <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801140e:	4b72      	ldr	r3, [pc, #456]	; (80115d8 <icmp_input+0x228>)
 8011410:	695b      	ldr	r3, [r3, #20]
 8011412:	4a71      	ldr	r2, [pc, #452]	; (80115d8 <icmp_input+0x228>)
 8011414:	6812      	ldr	r2, [r2, #0]
 8011416:	4611      	mov	r1, r2
 8011418:	4618      	mov	r0, r3
 801141a:	f000 fc13 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 80cc 	bne.w	80115be <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	891b      	ldrh	r3, [r3, #8]
 801142a:	2b07      	cmp	r3, #7
 801142c:	f240 80c0 	bls.w	80115b0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7f7 f9fa 	bl	800882a <inet_chksum_pbuf>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d003      	beq.n	8011444 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7f8 fe01 	bl	800a044 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011442:	e0c5      	b.n	80115d0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011446:	330e      	adds	r3, #14
 8011448:	4619      	mov	r1, r3
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7f8 fd64 	bl	8009f18 <pbuf_add_header>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d04b      	beq.n	80114ee <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	891a      	ldrh	r2, [r3, #8]
 801145a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801145c:	4413      	add	r3, r2
 801145e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	891b      	ldrh	r3, [r3, #8]
 8011464:	8b7a      	ldrh	r2, [r7, #26]
 8011466:	429a      	cmp	r2, r3
 8011468:	f0c0 80ab 	bcc.w	80115c2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801146c:	8b7b      	ldrh	r3, [r7, #26]
 801146e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011472:	4619      	mov	r1, r3
 8011474:	200e      	movs	r0, #14
 8011476:	f7f8 fb01 	bl	8009a7c <pbuf_alloc>
 801147a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80a1 	beq.w	80115c6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	895b      	ldrh	r3, [r3, #10]
 8011488:	461a      	mov	r2, r3
 801148a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801148c:	3308      	adds	r3, #8
 801148e:	429a      	cmp	r2, r3
 8011490:	d203      	bcs.n	801149a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011492:	6978      	ldr	r0, [r7, #20]
 8011494:	f7f8 fdd6 	bl	800a044 <pbuf_free>
          goto icmperr;
 8011498:	e096      	b.n	80115c8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114a2:	4618      	mov	r0, r3
 80114a4:	f001 fe15 	bl	80130d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80114a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114aa:	4619      	mov	r1, r3
 80114ac:	6978      	ldr	r0, [r7, #20]
 80114ae:	f7f8 fd43 	bl	8009f38 <pbuf_remove_header>
 80114b2:	4603      	mov	r3, r0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d009      	beq.n	80114cc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80114b8:	4b49      	ldr	r3, [pc, #292]	; (80115e0 <icmp_input+0x230>)
 80114ba:	22b6      	movs	r2, #182	; 0xb6
 80114bc:	4949      	ldr	r1, [pc, #292]	; (80115e4 <icmp_input+0x234>)
 80114be:	484a      	ldr	r0, [pc, #296]	; (80115e8 <icmp_input+0x238>)
 80114c0:	f001 fd2c 	bl	8012f1c <iprintf>
          pbuf_free(r);
 80114c4:	6978      	ldr	r0, [r7, #20]
 80114c6:	f7f8 fdbd 	bl	800a044 <pbuf_free>
          goto icmperr;
 80114ca:	e07d      	b.n	80115c8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80114cc:	6879      	ldr	r1, [r7, #4]
 80114ce:	6978      	ldr	r0, [r7, #20]
 80114d0:	f7f8 feec 	bl	800a2ac <pbuf_copy>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d003      	beq.n	80114e2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80114da:	6978      	ldr	r0, [r7, #20]
 80114dc:	f7f8 fdb2 	bl	800a044 <pbuf_free>
          goto icmperr;
 80114e0:	e072      	b.n	80115c8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7f8 fdae 	bl	800a044 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	607b      	str	r3, [r7, #4]
 80114ec:	e00f      	b.n	801150e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80114ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114f0:	330e      	adds	r3, #14
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7f8 fd1f 	bl	8009f38 <pbuf_remove_header>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d006      	beq.n	801150e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011500:	4b37      	ldr	r3, [pc, #220]	; (80115e0 <icmp_input+0x230>)
 8011502:	22c7      	movs	r2, #199	; 0xc7
 8011504:	4939      	ldr	r1, [pc, #228]	; (80115ec <icmp_input+0x23c>)
 8011506:	4838      	ldr	r0, [pc, #224]	; (80115e8 <icmp_input+0x238>)
 8011508:	f001 fd08 	bl	8012f1c <iprintf>
          goto icmperr;
 801150c:	e05c      	b.n	80115c8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011516:	4619      	mov	r1, r3
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7f8 fcfd 	bl	8009f18 <pbuf_add_header>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d13c      	bne.n	801159e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011532:	4b29      	ldr	r3, [pc, #164]	; (80115d8 <icmp_input+0x228>)
 8011534:	691a      	ldr	r2, [r3, #16]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	2200      	movs	r2, #0
 801153e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	885b      	ldrh	r3, [r3, #2]
 8011544:	b29b      	uxth	r3, r3
 8011546:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801154a:	4293      	cmp	r3, r2
 801154c:	d907      	bls.n	801155e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	885b      	ldrh	r3, [r3, #2]
 8011552:	b29b      	uxth	r3, r3
 8011554:	3309      	adds	r3, #9
 8011556:	b29a      	uxth	r2, r3
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	805a      	strh	r2, [r3, #2]
 801155c:	e006      	b.n	801156c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	885b      	ldrh	r3, [r3, #2]
 8011562:	b29b      	uxth	r3, r3
 8011564:	3308      	adds	r3, #8
 8011566:	b29a      	uxth	r2, r3
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	22ff      	movs	r2, #255	; 0xff
 8011570:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2200      	movs	r2, #0
 8011576:	729a      	strb	r2, [r3, #10]
 8011578:	2200      	movs	r2, #0
 801157a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	9302      	str	r3, [sp, #8]
 8011580:	2301      	movs	r3, #1
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	2300      	movs	r3, #0
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	23ff      	movs	r3, #255	; 0xff
 801158a:	2200      	movs	r2, #0
 801158c:	69f9      	ldr	r1, [r7, #28]
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 fa80 	bl	8011a94 <ip4_output_if>
 8011594:	4603      	mov	r3, r0
 8011596:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011598:	e001      	b.n	801159e <icmp_input+0x1ee>
      break;
 801159a:	bf00      	nop
 801159c:	e000      	b.n	80115a0 <icmp_input+0x1f0>
      break;
 801159e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7f8 fd4f 	bl	800a044 <pbuf_free>
  return;
 80115a6:	e013      	b.n	80115d0 <icmp_input+0x220>
    goto lenerr;
 80115a8:	bf00      	nop
 80115aa:	e002      	b.n	80115b2 <icmp_input+0x202>
    goto lenerr;
 80115ac:	bf00      	nop
 80115ae:	e000      	b.n	80115b2 <icmp_input+0x202>
        goto lenerr;
 80115b0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f7f8 fd46 	bl	800a044 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80115b8:	e00a      	b.n	80115d0 <icmp_input+0x220>
        goto icmperr;
 80115ba:	bf00      	nop
 80115bc:	e004      	b.n	80115c8 <icmp_input+0x218>
        goto icmperr;
 80115be:	bf00      	nop
 80115c0:	e002      	b.n	80115c8 <icmp_input+0x218>
          goto icmperr;
 80115c2:	bf00      	nop
 80115c4:	e000      	b.n	80115c8 <icmp_input+0x218>
          goto icmperr;
 80115c6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7f8 fd3b 	bl	800a044 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80115ce:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80115d0:	3728      	adds	r7, #40	; 0x28
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	24004220 	.word	0x24004220
 80115dc:	24004234 	.word	0x24004234
 80115e0:	08016478 	.word	0x08016478
 80115e4:	080164b0 	.word	0x080164b0
 80115e8:	080164e8 	.word	0x080164e8
 80115ec:	08016510 	.word	0x08016510

080115f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	460b      	mov	r3, r1
 80115fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80115fc:	78fb      	ldrb	r3, [r7, #3]
 80115fe:	461a      	mov	r2, r3
 8011600:	2103      	movs	r1, #3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f814 	bl	8011630 <icmp_send_response>
}
 8011608:	bf00      	nop
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801161c:	78fb      	ldrb	r3, [r7, #3]
 801161e:	461a      	mov	r2, r3
 8011620:	210b      	movs	r1, #11
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f804 	bl	8011630 <icmp_send_response>
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b08c      	sub	sp, #48	; 0x30
 8011634:	af04      	add	r7, sp, #16
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	460b      	mov	r3, r1
 801163a:	70fb      	strb	r3, [r7, #3]
 801163c:	4613      	mov	r3, r2
 801163e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011640:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011644:	2124      	movs	r1, #36	; 0x24
 8011646:	2022      	movs	r0, #34	; 0x22
 8011648:	f7f8 fa18 	bl	8009a7c <pbuf_alloc>
 801164c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d056      	beq.n	8011702 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	895b      	ldrh	r3, [r3, #10]
 8011658:	2b23      	cmp	r3, #35	; 0x23
 801165a:	d806      	bhi.n	801166a <icmp_send_response+0x3a>
 801165c:	4b2b      	ldr	r3, [pc, #172]	; (801170c <icmp_send_response+0xdc>)
 801165e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011662:	492b      	ldr	r1, [pc, #172]	; (8011710 <icmp_send_response+0xe0>)
 8011664:	482b      	ldr	r0, [pc, #172]	; (8011714 <icmp_send_response+0xe4>)
 8011666:	f001 fc59 	bl	8012f1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	78fa      	ldrb	r2, [r7, #3]
 801167a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	78ba      	ldrb	r2, [r7, #2]
 8011680:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	2200      	movs	r2, #0
 8011686:	711a      	strb	r2, [r3, #4]
 8011688:	2200      	movs	r2, #0
 801168a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	2200      	movs	r2, #0
 8011690:	719a      	strb	r2, [r3, #6]
 8011692:	2200      	movs	r2, #0
 8011694:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	f103 0008 	add.w	r0, r3, #8
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	221c      	movs	r2, #28
 80116a4:	4619      	mov	r1, r3
 80116a6:	f001 fd14 	bl	80130d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80116b0:	f107 030c 	add.w	r3, r7, #12
 80116b4:	4618      	mov	r0, r3
 80116b6:	f000 f82f 	bl	8011718 <ip4_route>
 80116ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d01b      	beq.n	80116fa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	2200      	movs	r2, #0
 80116c6:	709a      	strb	r2, [r3, #2]
 80116c8:	2200      	movs	r2, #0
 80116ca:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	895b      	ldrh	r3, [r3, #10]
 80116d0:	4619      	mov	r1, r3
 80116d2:	6978      	ldr	r0, [r7, #20]
 80116d4:	f7f7 f897 	bl	8008806 <inet_chksum>
 80116d8:	4603      	mov	r3, r0
 80116da:	461a      	mov	r2, r3
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80116e0:	f107 020c 	add.w	r2, r7, #12
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	9302      	str	r3, [sp, #8]
 80116e8:	2301      	movs	r3, #1
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	2300      	movs	r3, #0
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	23ff      	movs	r3, #255	; 0xff
 80116f2:	2100      	movs	r1, #0
 80116f4:	69f8      	ldr	r0, [r7, #28]
 80116f6:	f000 f9cd 	bl	8011a94 <ip4_output_if>
  }
  pbuf_free(q);
 80116fa:	69f8      	ldr	r0, [r7, #28]
 80116fc:	f7f8 fca2 	bl	800a044 <pbuf_free>
 8011700:	e000      	b.n	8011704 <icmp_send_response+0xd4>
    return;
 8011702:	bf00      	nop
}
 8011704:	3720      	adds	r7, #32
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	08016478 	.word	0x08016478
 8011710:	08016544 	.word	0x08016544
 8011714:	080164e8 	.word	0x080164e8

08011718 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011718:	b480      	push	{r7}
 801171a:	b085      	sub	sp, #20
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011720:	4b33      	ldr	r3, [pc, #204]	; (80117f0 <ip4_route+0xd8>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	e036      	b.n	8011796 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d02b      	beq.n	8011790 <ip4_route+0x78>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801173e:	089b      	lsrs	r3, r3, #2
 8011740:	f003 0301 	and.w	r3, r3, #1
 8011744:	b2db      	uxtb	r3, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	d022      	beq.n	8011790 <ip4_route+0x78>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3304      	adds	r3, #4
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d01d      	beq.n	8011790 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	3304      	adds	r3, #4
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	405a      	eors	r2, r3
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	3308      	adds	r3, #8
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4013      	ands	r3, r2
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	e038      	b.n	80117e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011776:	f003 0302 	and.w	r3, r3, #2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d108      	bne.n	8011790 <ip4_route+0x78>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	330c      	adds	r3, #12
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	429a      	cmp	r2, r3
 801178a:	d101      	bne.n	8011790 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	e028      	b.n	80117e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	60fb      	str	r3, [r7, #12]
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1c5      	bne.n	8011728 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801179c:	4b15      	ldr	r3, [pc, #84]	; (80117f4 <ip4_route+0xdc>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d01a      	beq.n	80117da <ip4_route+0xc2>
 80117a4:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <ip4_route+0xdc>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d012      	beq.n	80117da <ip4_route+0xc2>
 80117b4:	4b0f      	ldr	r3, [pc, #60]	; (80117f4 <ip4_route+0xdc>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d00a      	beq.n	80117da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117c4:	4b0b      	ldr	r3, [pc, #44]	; (80117f4 <ip4_route+0xdc>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	3304      	adds	r3, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d004      	beq.n	80117da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b7f      	cmp	r3, #127	; 0x7f
 80117d8:	d101      	bne.n	80117de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80117da:	2300      	movs	r3, #0
 80117dc:	e001      	b.n	80117e2 <ip4_route+0xca>
  }

  return netif_default;
 80117de:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <ip4_route+0xdc>)
 80117e0:	681b      	ldr	r3, [r3, #0]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3714      	adds	r7, #20
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop
 80117f0:	24007314 	.word	0x24007314
 80117f4:	24007318 	.word	0x24007318

080117f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b00      	cmp	r3, #0
 801180e:	d016      	beq.n	801183e <ip4_input_accept+0x46>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d011      	beq.n	801183e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801181a:	4b0b      	ldr	r3, [pc, #44]	; (8011848 <ip4_input_accept+0x50>)
 801181c:	695a      	ldr	r2, [r3, #20]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	3304      	adds	r3, #4
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	429a      	cmp	r2, r3
 8011826:	d008      	beq.n	801183a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011828:	4b07      	ldr	r3, [pc, #28]	; (8011848 <ip4_input_accept+0x50>)
 801182a:	695b      	ldr	r3, [r3, #20]
 801182c:	6879      	ldr	r1, [r7, #4]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 fa08 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 8011834:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011836:	2b00      	cmp	r3, #0
 8011838:	d001      	beq.n	801183e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801183a:	2301      	movs	r3, #1
 801183c:	e000      	b.n	8011840 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801183e:	2300      	movs	r3, #0
}
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	24004220 	.word	0x24004220

0801184c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	091b      	lsrs	r3, r3, #4
 8011862:	b2db      	uxtb	r3, r3
 8011864:	2b04      	cmp	r3, #4
 8011866:	d004      	beq.n	8011872 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7f8 fbeb 	bl	800a044 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	e107      	b.n	8011a82 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 030f 	and.w	r3, r3, #15
 801187a:	b2db      	uxtb	r3, r3
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	b2db      	uxtb	r3, r3
 8011880:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	885b      	ldrh	r3, [r3, #2]
 8011886:	b29b      	uxth	r3, r3
 8011888:	4618      	mov	r0, r3
 801188a:	f7f6 ff31 	bl	80086f0 <lwip_htons>
 801188e:	4603      	mov	r3, r0
 8011890:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	891b      	ldrh	r3, [r3, #8]
 8011896:	89ba      	ldrh	r2, [r7, #12]
 8011898:	429a      	cmp	r2, r3
 801189a:	d204      	bcs.n	80118a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801189c:	89bb      	ldrh	r3, [r7, #12]
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7f8 fa49 	bl	8009d38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	895b      	ldrh	r3, [r3, #10]
 80118aa:	89fa      	ldrh	r2, [r7, #14]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d807      	bhi.n	80118c0 <ip4_input+0x74>
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	891b      	ldrh	r3, [r3, #8]
 80118b4:	89ba      	ldrh	r2, [r7, #12]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d802      	bhi.n	80118c0 <ip4_input+0x74>
 80118ba:	89fb      	ldrh	r3, [r7, #14]
 80118bc:	2b13      	cmp	r3, #19
 80118be:	d804      	bhi.n	80118ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7f8 fbbf 	bl	800a044 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80118c6:	2300      	movs	r3, #0
 80118c8:	e0db      	b.n	8011a82 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	691b      	ldr	r3, [r3, #16]
 80118ce:	4a6f      	ldr	r2, [pc, #444]	; (8011a8c <ip4_input+0x240>)
 80118d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	4a6d      	ldr	r2, [pc, #436]	; (8011a8c <ip4_input+0x240>)
 80118d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80118da:	4b6c      	ldr	r3, [pc, #432]	; (8011a8c <ip4_input+0x240>)
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118e2:	2be0      	cmp	r3, #224	; 0xe0
 80118e4:	d112      	bne.n	801190c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118ec:	f003 0301 	and.w	r3, r3, #1
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d007      	beq.n	8011906 <ip4_input+0xba>
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	3304      	adds	r3, #4
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <ip4_input+0xba>
      netif = inp;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	e02a      	b.n	801195c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011906:	2300      	movs	r3, #0
 8011908:	613b      	str	r3, [r7, #16]
 801190a:	e027      	b.n	801195c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801190c:	6838      	ldr	r0, [r7, #0]
 801190e:	f7ff ff73 	bl	80117f8 <ip4_input_accept>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	d002      	beq.n	801191e <ip4_input+0xd2>
      netif = inp;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	613b      	str	r3, [r7, #16]
 801191c:	e01e      	b.n	801195c <ip4_input+0x110>
    } else {
      netif = NULL;
 801191e:	2300      	movs	r3, #0
 8011920:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011922:	4b5a      	ldr	r3, [pc, #360]	; (8011a8c <ip4_input+0x240>)
 8011924:	695b      	ldr	r3, [r3, #20]
 8011926:	b2db      	uxtb	r3, r3
 8011928:	2b7f      	cmp	r3, #127	; 0x7f
 801192a:	d017      	beq.n	801195c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801192c:	4b58      	ldr	r3, [pc, #352]	; (8011a90 <ip4_input+0x244>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	613b      	str	r3, [r7, #16]
 8011932:	e00e      	b.n	8011952 <ip4_input+0x106>
          if (netif == inp) {
 8011934:	693a      	ldr	r2, [r7, #16]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d006      	beq.n	801194a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801193c:	6938      	ldr	r0, [r7, #16]
 801193e:	f7ff ff5b 	bl	80117f8 <ip4_input_accept>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d108      	bne.n	801195a <ip4_input+0x10e>
 8011948:	e000      	b.n	801194c <ip4_input+0x100>
            continue;
 801194a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	613b      	str	r3, [r7, #16]
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d1ed      	bne.n	8011934 <ip4_input+0xe8>
 8011958:	e000      	b.n	801195c <ip4_input+0x110>
            break;
 801195a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801195c:	4b4b      	ldr	r3, [pc, #300]	; (8011a8c <ip4_input+0x240>)
 801195e:	691b      	ldr	r3, [r3, #16]
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	4618      	mov	r0, r3
 8011964:	f000 f96e 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801196e:	4b47      	ldr	r3, [pc, #284]	; (8011a8c <ip4_input+0x240>)
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011976:	2be0      	cmp	r3, #224	; 0xe0
 8011978:	d104      	bne.n	8011984 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7f8 fb62 	bl	800a044 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011980:	2300      	movs	r3, #0
 8011982:	e07e      	b.n	8011a82 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d104      	bne.n	8011994 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7f8 fb5a 	bl	800a044 <pbuf_free>
    return ERR_OK;
 8011990:	2300      	movs	r3, #0
 8011992:	e076      	b.n	8011a82 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	88db      	ldrh	r3, [r3, #6]
 8011998:	b29b      	uxth	r3, r3
 801199a:	461a      	mov	r2, r3
 801199c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80119a0:	4013      	ands	r3, r2
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00b      	beq.n	80119be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 fc92 	bl	80122d0 <ip4_reass>
 80119ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <ip4_input+0x16c>
      return ERR_OK;
 80119b4:	2300      	movs	r3, #0
 80119b6:	e064      	b.n	8011a82 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80119be:	4a33      	ldr	r2, [pc, #204]	; (8011a8c <ip4_input+0x240>)
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80119c4:	4a31      	ldr	r2, [pc, #196]	; (8011a8c <ip4_input+0x240>)
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80119ca:	4a30      	ldr	r2, [pc, #192]	; (8011a8c <ip4_input+0x240>)
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	f003 030f 	and.w	r3, r3, #15
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	b29a      	uxth	r2, r3
 80119e0:	4b2a      	ldr	r3, [pc, #168]	; (8011a8c <ip4_input+0x240>)
 80119e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80119e4:	89fb      	ldrh	r3, [r7, #14]
 80119e6:	4619      	mov	r1, r3
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7f8 faa5 	bl	8009f38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	7a5b      	ldrb	r3, [r3, #9]
 80119f2:	2b11      	cmp	r3, #17
 80119f4:	d006      	beq.n	8011a04 <ip4_input+0x1b8>
 80119f6:	2b11      	cmp	r3, #17
 80119f8:	dc13      	bgt.n	8011a22 <ip4_input+0x1d6>
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d00c      	beq.n	8011a18 <ip4_input+0x1cc>
 80119fe:	2b06      	cmp	r3, #6
 8011a00:	d005      	beq.n	8011a0e <ip4_input+0x1c2>
 8011a02:	e00e      	b.n	8011a22 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7fe f94a 	bl	800fca0 <udp_input>
        break;
 8011a0c:	e026      	b.n	8011a5c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7fa f95b 	bl	800bccc <tcp_input>
        break;
 8011a16:	e021      	b.n	8011a5c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7ff fcc8 	bl	80113b0 <icmp_input>
        break;
 8011a20:	e01c      	b.n	8011a5c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a22:	4b1a      	ldr	r3, [pc, #104]	; (8011a8c <ip4_input+0x240>)
 8011a24:	695b      	ldr	r3, [r3, #20]
 8011a26:	6939      	ldr	r1, [r7, #16]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 f90b 	bl	8011c44 <ip4_addr_isbroadcast_u32>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d10f      	bne.n	8011a54 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a34:	4b15      	ldr	r3, [pc, #84]	; (8011a8c <ip4_input+0x240>)
 8011a36:	695b      	ldr	r3, [r3, #20]
 8011a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a3c:	2be0      	cmp	r3, #224	; 0xe0
 8011a3e:	d009      	beq.n	8011a54 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a44:	4619      	mov	r1, r3
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f7f8 fae9 	bl	800a01e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011a4c:	2102      	movs	r1, #2
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7ff fdce 	bl	80115f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7f8 faf5 	bl	800a044 <pbuf_free>
        break;
 8011a5a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011a5c:	4b0b      	ldr	r3, [pc, #44]	; (8011a8c <ip4_input+0x240>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011a62:	4b0a      	ldr	r3, [pc, #40]	; (8011a8c <ip4_input+0x240>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011a68:	4b08      	ldr	r3, [pc, #32]	; (8011a8c <ip4_input+0x240>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011a6e:	4b07      	ldr	r3, [pc, #28]	; (8011a8c <ip4_input+0x240>)
 8011a70:	2200      	movs	r2, #0
 8011a72:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011a74:	4b05      	ldr	r3, [pc, #20]	; (8011a8c <ip4_input+0x240>)
 8011a76:	2200      	movs	r2, #0
 8011a78:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011a7a:	4b04      	ldr	r3, [pc, #16]	; (8011a8c <ip4_input+0x240>)
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011a80:	2300      	movs	r3, #0
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3718      	adds	r7, #24
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	24004220 	.word	0x24004220
 8011a90:	24007314 	.word	0x24007314

08011a94 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b08a      	sub	sp, #40	; 0x28
 8011a98:	af04      	add	r7, sp, #16
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d003      	beq.n	8011aba <ip4_output_if+0x26>
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abc:	3304      	adds	r3, #4
 8011abe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011ac0:	78fa      	ldrb	r2, [r7, #3]
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	9302      	str	r3, [sp, #8]
 8011ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011aca:	9301      	str	r3, [sp, #4]
 8011acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	6979      	ldr	r1, [r7, #20]
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f000 f805 	bl	8011ae8 <ip4_output_if_src>
 8011ade:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3718      	adds	r7, #24
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
 8011af4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	7b9b      	ldrb	r3, [r3, #14]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d006      	beq.n	8011b0c <ip4_output_if_src+0x24>
 8011afe:	4b4b      	ldr	r3, [pc, #300]	; (8011c2c <ip4_output_if_src+0x144>)
 8011b00:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011b04:	494a      	ldr	r1, [pc, #296]	; (8011c30 <ip4_output_if_src+0x148>)
 8011b06:	484b      	ldr	r0, [pc, #300]	; (8011c34 <ip4_output_if_src+0x14c>)
 8011b08:	f001 fa08 	bl	8012f1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d060      	beq.n	8011bd4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011b12:	2314      	movs	r3, #20
 8011b14:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011b16:	2114      	movs	r1, #20
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f7f8 f9fd 	bl	8009f18 <pbuf_add_header>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d002      	beq.n	8011b2a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b24:	f06f 0301 	mvn.w	r3, #1
 8011b28:	e07c      	b.n	8011c24 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	895b      	ldrh	r3, [r3, #10]
 8011b34:	2b13      	cmp	r3, #19
 8011b36:	d806      	bhi.n	8011b46 <ip4_output_if_src+0x5e>
 8011b38:	4b3c      	ldr	r3, [pc, #240]	; (8011c2c <ip4_output_if_src+0x144>)
 8011b3a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011b3e:	493e      	ldr	r1, [pc, #248]	; (8011c38 <ip4_output_if_src+0x150>)
 8011b40:	483c      	ldr	r0, [pc, #240]	; (8011c34 <ip4_output_if_src+0x14c>)
 8011b42:	f001 f9eb 	bl	8012f1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	78fa      	ldrb	r2, [r7, #3]
 8011b4a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011b52:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011b5c:	8b7b      	ldrh	r3, [r7, #26]
 8011b5e:	089b      	lsrs	r3, r3, #2
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	891b      	ldrh	r3, [r3, #8]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7f6 fdb8 	bl	80086f0 <lwip_htons>
 8011b80:	4603      	mov	r3, r0
 8011b82:	461a      	mov	r2, r3
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	719a      	strb	r2, [r3, #6]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011b92:	4b2a      	ldr	r3, [pc, #168]	; (8011c3c <ip4_output_if_src+0x154>)
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f6 fdaa 	bl	80086f0 <lwip_htons>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	69fb      	ldr	r3, [r7, #28]
 8011ba2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011ba4:	4b25      	ldr	r3, [pc, #148]	; (8011c3c <ip4_output_if_src+0x154>)
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	4b23      	ldr	r3, [pc, #140]	; (8011c3c <ip4_output_if_src+0x154>)
 8011bae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011bb6:	4b22      	ldr	r3, [pc, #136]	; (8011c40 <ip4_output_if_src+0x158>)
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	60da      	str	r2, [r3, #12]
 8011bbe:	e003      	b.n	8011bc8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	729a      	strb	r2, [r3, #10]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	72da      	strb	r2, [r3, #11]
 8011bd2:	e00f      	b.n	8011bf4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	2b13      	cmp	r3, #19
 8011bda:	d802      	bhi.n	8011be2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bdc:	f06f 0301 	mvn.w	r3, #1
 8011be0:	e020      	b.n	8011c24 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011bee:	f107 0314 	add.w	r3, r7, #20
 8011bf2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00c      	beq.n	8011c16 <ip4_output_if_src+0x12e>
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	891a      	ldrh	r2, [r3, #8]
 8011c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d906      	bls.n	8011c16 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c0c:	68f8      	ldr	r0, [r7, #12]
 8011c0e:	f000 fd53 	bl	80126b8 <ip4_frag>
 8011c12:	4603      	mov	r3, r0
 8011c14:	e006      	b.n	8011c24 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c18:	695b      	ldr	r3, [r3, #20]
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	68f9      	ldr	r1, [r7, #12]
 8011c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c20:	4798      	blx	r3
 8011c22:	4603      	mov	r3, r0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3720      	adds	r7, #32
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	08016570 	.word	0x08016570
 8011c30:	080165a4 	.word	0x080165a4
 8011c34:	080165b0 	.word	0x080165b0
 8011c38:	080165d8 	.word	0x080165d8
 8011c3c:	24007472 	.word	0x24007472
 8011c40:	080169f0 	.word	0x080169f0

08011c44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c58:	d002      	beq.n	8011c60 <ip4_addr_isbroadcast_u32+0x1c>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011c60:	2301      	movs	r3, #1
 8011c62:	e02a      	b.n	8011cba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c6a:	f003 0302 	and.w	r3, r3, #2
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d101      	bne.n	8011c76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011c72:	2300      	movs	r3, #0
 8011c74:	e021      	b.n	8011cba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d101      	bne.n	8011c86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	e019      	b.n	8011cba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	3304      	adds	r3, #4
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	405a      	eors	r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	3308      	adds	r3, #8
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4013      	ands	r3, r2
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10d      	bne.n	8011cb8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	3308      	adds	r3, #8
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	43da      	mvns	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	3308      	adds	r3, #8
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d101      	bne.n	8011cb8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011cb8:	2300      	movs	r3, #0
  }
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3714      	adds	r7, #20
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
	...

08011cc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011cd2:	4b12      	ldr	r3, [pc, #72]	; (8011d1c <ip_reass_tmr+0x54>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011cd8:	e018      	b.n	8011d0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	7fdb      	ldrb	r3, [r3, #31]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00b      	beq.n	8011cfa <ip_reass_tmr+0x32>
      r->timer--;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	7fdb      	ldrb	r3, [r3, #31]
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	e008      	b.n	8011d0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011d04:	68b9      	ldr	r1, [r7, #8]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f80a 	bl	8011d20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d1e3      	bne.n	8011cda <ip_reass_tmr+0x12>
    }
  }
}
 8011d12:	bf00      	nop
 8011d14:	bf00      	nop
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	24007474 	.word	0x24007474

08011d20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b088      	sub	sp, #32
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011d2e:	683a      	ldr	r2, [r7, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d105      	bne.n	8011d42 <ip_reass_free_complete_datagram+0x22>
 8011d36:	4b45      	ldr	r3, [pc, #276]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011d38:	22ab      	movs	r2, #171	; 0xab
 8011d3a:	4945      	ldr	r1, [pc, #276]	; (8011e50 <ip_reass_free_complete_datagram+0x130>)
 8011d3c:	4845      	ldr	r0, [pc, #276]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011d3e:	f001 f8ed 	bl	8012f1c <iprintf>
  if (prev != NULL) {
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d00a      	beq.n	8011d5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d005      	beq.n	8011d5e <ip_reass_free_complete_datagram+0x3e>
 8011d52:	4b3e      	ldr	r3, [pc, #248]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011d54:	22ad      	movs	r2, #173	; 0xad
 8011d56:	4940      	ldr	r1, [pc, #256]	; (8011e58 <ip_reass_free_complete_datagram+0x138>)
 8011d58:	483e      	ldr	r0, [pc, #248]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011d5a:	f001 f8df 	bl	8012f1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	889b      	ldrh	r3, [r3, #4]
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d12a      	bne.n	8011dc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	6858      	ldr	r0, [r3, #4]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	3308      	adds	r3, #8
 8011d86:	2214      	movs	r2, #20
 8011d88:	4619      	mov	r1, r3
 8011d8a:	f001 f9a2 	bl	80130d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011d8e:	2101      	movs	r1, #1
 8011d90:	69b8      	ldr	r0, [r7, #24]
 8011d92:	f7ff fc3d 	bl	8011610 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011d96:	69b8      	ldr	r0, [r7, #24]
 8011d98:	f7f8 f9e2 	bl	800a160 <pbuf_clen>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011da0:	8bfa      	ldrh	r2, [r7, #30]
 8011da2:	8a7b      	ldrh	r3, [r7, #18]
 8011da4:	4413      	add	r3, r2
 8011da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011daa:	db05      	blt.n	8011db8 <ip_reass_free_complete_datagram+0x98>
 8011dac:	4b27      	ldr	r3, [pc, #156]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011dae:	22bc      	movs	r2, #188	; 0xbc
 8011db0:	492a      	ldr	r1, [pc, #168]	; (8011e5c <ip_reass_free_complete_datagram+0x13c>)
 8011db2:	4828      	ldr	r0, [pc, #160]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011db4:	f001 f8b2 	bl	8012f1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011db8:	8bfa      	ldrh	r2, [r7, #30]
 8011dba:	8a7b      	ldrh	r3, [r7, #18]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011dc0:	69b8      	ldr	r0, [r7, #24]
 8011dc2:	f7f8 f93f 	bl	800a044 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011dcc:	e01f      	b.n	8011e0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7f8 f9be 	bl	800a160 <pbuf_clen>
 8011de4:	4603      	mov	r3, r0
 8011de6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011de8:	8bfa      	ldrh	r2, [r7, #30]
 8011dea:	8a7b      	ldrh	r3, [r7, #18]
 8011dec:	4413      	add	r3, r2
 8011dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011df2:	db05      	blt.n	8011e00 <ip_reass_free_complete_datagram+0xe0>
 8011df4:	4b15      	ldr	r3, [pc, #84]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011df6:	22cc      	movs	r2, #204	; 0xcc
 8011df8:	4918      	ldr	r1, [pc, #96]	; (8011e5c <ip_reass_free_complete_datagram+0x13c>)
 8011dfa:	4816      	ldr	r0, [pc, #88]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011dfc:	f001 f88e 	bl	8012f1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e00:	8bfa      	ldrh	r2, [r7, #30]
 8011e02:	8a7b      	ldrh	r3, [r7, #18]
 8011e04:	4413      	add	r3, r2
 8011e06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f7f8 f91b 	bl	800a044 <pbuf_free>
  while (p != NULL) {
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1dc      	bne.n	8011dce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 f8c2 	bl	8011fa0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011e1c:	4b10      	ldr	r3, [pc, #64]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	8bfa      	ldrh	r2, [r7, #30]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d905      	bls.n	8011e32 <ip_reass_free_complete_datagram+0x112>
 8011e26:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011e28:	22d2      	movs	r2, #210	; 0xd2
 8011e2a:	490e      	ldr	r1, [pc, #56]	; (8011e64 <ip_reass_free_complete_datagram+0x144>)
 8011e2c:	4809      	ldr	r0, [pc, #36]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011e2e:	f001 f875 	bl	8012f1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011e32:	4b0b      	ldr	r3, [pc, #44]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e34:	881a      	ldrh	r2, [r3, #0]
 8011e36:	8bfb      	ldrh	r3, [r7, #30]
 8011e38:	1ad3      	subs	r3, r2, r3
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	4b08      	ldr	r3, [pc, #32]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011e40:	8bfb      	ldrh	r3, [r7, #30]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3720      	adds	r7, #32
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	08016608 	.word	0x08016608
 8011e50:	08016644 	.word	0x08016644
 8011e54:	08016650 	.word	0x08016650
 8011e58:	08016678 	.word	0x08016678
 8011e5c:	0801668c 	.word	0x0801668c
 8011e60:	24007478 	.word	0x24007478
 8011e64:	080166ac 	.word	0x080166ac

08011e68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08a      	sub	sp, #40	; 0x28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011e72:	2300      	movs	r3, #0
 8011e74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011e76:	2300      	movs	r3, #0
 8011e78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011e86:	4b28      	ldr	r3, [pc, #160]	; (8011f28 <ip_reass_remove_oldest_datagram+0xc0>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e8c:	e030      	b.n	8011ef0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e90:	695a      	ldr	r2, [r3, #20]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d10c      	bne.n	8011eb4 <ip_reass_remove_oldest_datagram+0x4c>
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	699a      	ldr	r2, [r3, #24]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d106      	bne.n	8011eb4 <ip_reass_remove_oldest_datagram+0x4c>
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	899a      	ldrh	r2, [r3, #12]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	889b      	ldrh	r3, [r3, #4]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d014      	beq.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011eba:	6a3b      	ldr	r3, [r7, #32]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d104      	bne.n	8011eca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	61bb      	str	r3, [r7, #24]
 8011ec8:	e009      	b.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	7fda      	ldrb	r2, [r3, #31]
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	7fdb      	ldrb	r3, [r3, #31]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d803      	bhi.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d001      	beq.n	8011eea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1cb      	bne.n	8011e8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d008      	beq.n	8011f0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011efc:	69b9      	ldr	r1, [r7, #24]
 8011efe:	6a38      	ldr	r0, [r7, #32]
 8011f00:	f7ff ff0e 	bl	8011d20 <ip_reass_free_complete_datagram>
 8011f04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011f06:	697a      	ldr	r2, [r7, #20]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011f0e:	697a      	ldr	r2, [r7, #20]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	da02      	bge.n	8011f1c <ip_reass_remove_oldest_datagram+0xb4>
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	dcac      	bgt.n	8011e76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011f1c:	697b      	ldr	r3, [r7, #20]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3728      	adds	r7, #40	; 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	24007474 	.word	0x24007474

08011f2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f36:	2004      	movs	r0, #4
 8011f38:	f7f7 f96a 	bl	8009210 <memp_malloc>
 8011f3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d110      	bne.n	8011f66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff ff8e 	bl	8011e68 <ip_reass_remove_oldest_datagram>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	4293      	cmp	r3, r2
 8011f52:	dc03      	bgt.n	8011f5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f54:	2004      	movs	r0, #4
 8011f56:	f7f7 f95b 	bl	8009210 <memp_malloc>
 8011f5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d101      	bne.n	8011f66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	e016      	b.n	8011f94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011f66:	2220      	movs	r2, #32
 8011f68:	2100      	movs	r1, #0
 8011f6a:	68f8      	ldr	r0, [r7, #12]
 8011f6c:	f001 f83b 	bl	8012fe6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	220f      	movs	r2, #15
 8011f74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011f76:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <ip_reass_enqueue_new_datagram+0x70>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011f7e:	4a07      	ldr	r2, [pc, #28]	; (8011f9c <ip_reass_enqueue_new_datagram+0x70>)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	3308      	adds	r3, #8
 8011f88:	2214      	movs	r2, #20
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f001 f8a0 	bl	80130d2 <memcpy>
  return ipr;
 8011f92:	68fb      	ldr	r3, [r7, #12]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	24007474 	.word	0x24007474

08011fa0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <ip_reass_dequeue_datagram+0x4c>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d104      	bne.n	8011fbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a0c      	ldr	r2, [pc, #48]	; (8011fec <ip_reass_dequeue_datagram+0x4c>)
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	e00d      	b.n	8011fda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d106      	bne.n	8011fd2 <ip_reass_dequeue_datagram+0x32>
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	; (8011ff0 <ip_reass_dequeue_datagram+0x50>)
 8011fc6:	f240 1245 	movw	r2, #325	; 0x145
 8011fca:	490a      	ldr	r1, [pc, #40]	; (8011ff4 <ip_reass_dequeue_datagram+0x54>)
 8011fcc:	480a      	ldr	r0, [pc, #40]	; (8011ff8 <ip_reass_dequeue_datagram+0x58>)
 8011fce:	f000 ffa5 	bl	8012f1c <iprintf>
    prev->next = ipr->next;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	2004      	movs	r0, #4
 8011fde:	f7f7 f98d 	bl	80092fc <memp_free>
}
 8011fe2:	bf00      	nop
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	24007474 	.word	0x24007474
 8011ff0:	08016608 	.word	0x08016608
 8011ff4:	080166d0 	.word	0x080166d0
 8011ff8:	08016650 	.word	0x08016650

08011ffc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08c      	sub	sp, #48	; 0x30
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012008:	2300      	movs	r3, #0
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801200c:	2301      	movs	r3, #1
 801200e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	885b      	ldrh	r3, [r3, #2]
 801201a:	b29b      	uxth	r3, r3
 801201c:	4618      	mov	r0, r3
 801201e:	f7f6 fb67 	bl	80086f0 <lwip_htons>
 8012022:	4603      	mov	r3, r0
 8012024:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	f003 030f 	and.w	r3, r3, #15
 801202e:	b2db      	uxtb	r3, r3
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012034:	7e7b      	ldrb	r3, [r7, #25]
 8012036:	b29b      	uxth	r3, r3
 8012038:	8b7a      	ldrh	r2, [r7, #26]
 801203a:	429a      	cmp	r2, r3
 801203c:	d202      	bcs.n	8012044 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801203e:	f04f 33ff 	mov.w	r3, #4294967295
 8012042:	e135      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012044:	7e7b      	ldrb	r3, [r7, #25]
 8012046:	b29b      	uxth	r3, r3
 8012048:	8b7a      	ldrh	r2, [r7, #26]
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	88db      	ldrh	r3, [r3, #6]
 8012052:	b29b      	uxth	r3, r3
 8012054:	4618      	mov	r0, r3
 8012056:	f7f6 fb4b 	bl	80086f0 <lwip_htons>
 801205a:	4603      	mov	r3, r0
 801205c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012060:	b29b      	uxth	r3, r3
 8012062:	00db      	lsls	r3, r3, #3
 8012064:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	2200      	movs	r2, #0
 8012070:	701a      	strb	r2, [r3, #0]
 8012072:	2200      	movs	r2, #0
 8012074:	705a      	strb	r2, [r3, #1]
 8012076:	2200      	movs	r2, #0
 8012078:	709a      	strb	r2, [r3, #2]
 801207a:	2200      	movs	r2, #0
 801207c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012080:	8afa      	ldrh	r2, [r7, #22]
 8012082:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012084:	8afa      	ldrh	r2, [r7, #22]
 8012086:	8b7b      	ldrh	r3, [r7, #26]
 8012088:	4413      	add	r3, r2
 801208a:	b29a      	uxth	r2, r3
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012092:	88db      	ldrh	r3, [r3, #6]
 8012094:	b29b      	uxth	r3, r3
 8012096:	8afa      	ldrh	r2, [r7, #22]
 8012098:	429a      	cmp	r2, r3
 801209a:	d902      	bls.n	80120a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801209c:	f04f 33ff 	mov.w	r3, #4294967295
 80120a0:	e106      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	627b      	str	r3, [r7, #36]	; 0x24
 80120a8:	e068      	b.n	801217c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	889b      	ldrh	r3, [r3, #4]
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	889b      	ldrh	r3, [r3, #4]
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	429a      	cmp	r2, r3
 80120be:	d235      	bcs.n	801212c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80120c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d020      	beq.n	801210e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	889b      	ldrh	r3, [r3, #4]
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	88db      	ldrh	r3, [r3, #6]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	429a      	cmp	r2, r3
 80120da:	d307      	bcc.n	80120ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120de:	88db      	ldrh	r3, [r3, #6]
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	889b      	ldrh	r3, [r3, #4]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d902      	bls.n	80120f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120ec:	f04f 33ff 	mov.w	r3, #4294967295
 80120f0:	e0de      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	88db      	ldrh	r3, [r3, #6]
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	889b      	ldrh	r3, [r3, #4]
 8012102:	b29b      	uxth	r3, r3
 8012104:	429a      	cmp	r2, r3
 8012106:	d03d      	beq.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801210c:	e03a      	b.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	88db      	ldrh	r3, [r3, #6]
 8012112:	b29a      	uxth	r2, r3
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	889b      	ldrh	r3, [r3, #4]
 8012118:	b29b      	uxth	r3, r3
 801211a:	429a      	cmp	r2, r3
 801211c:	d902      	bls.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801211e:	f04f 33ff 	mov.w	r3, #4294967295
 8012122:	e0c5      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	605a      	str	r2, [r3, #4]
      break;
 801212a:	e02b      	b.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212e:	889b      	ldrh	r3, [r3, #4]
 8012130:	b29a      	uxth	r2, r3
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	889b      	ldrh	r3, [r3, #4]
 8012136:	b29b      	uxth	r3, r3
 8012138:	429a      	cmp	r2, r3
 801213a:	d102      	bne.n	8012142 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801213c:	f04f 33ff 	mov.w	r3, #4294967295
 8012140:	e0b6      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012144:	889b      	ldrh	r3, [r3, #4]
 8012146:	b29a      	uxth	r2, r3
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	88db      	ldrh	r3, [r3, #6]
 801214c:	b29b      	uxth	r3, r3
 801214e:	429a      	cmp	r2, r3
 8012150:	d202      	bcs.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012152:	f04f 33ff 	mov.w	r3, #4294967295
 8012156:	e0ab      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	2b00      	cmp	r3, #0
 801215c:	d009      	beq.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	88db      	ldrh	r3, [r3, #6]
 8012162:	b29a      	uxth	r2, r3
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	889b      	ldrh	r3, [r3, #4]
 8012168:	b29b      	uxth	r3, r3
 801216a:	429a      	cmp	r2, r3
 801216c:	d001      	beq.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801216e:	2300      	movs	r3, #0
 8012170:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217e:	2b00      	cmp	r3, #0
 8012180:	d193      	bne.n	80120aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012182:	e000      	b.n	8012186 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012184:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	2b00      	cmp	r3, #0
 801218a:	d12d      	bne.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	2b00      	cmp	r3, #0
 8012190:	d01c      	beq.n	80121cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012194:	88db      	ldrh	r3, [r3, #6]
 8012196:	b29a      	uxth	r2, r3
 8012198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219a:	889b      	ldrh	r3, [r3, #4]
 801219c:	b29b      	uxth	r3, r3
 801219e:	429a      	cmp	r2, r3
 80121a0:	d906      	bls.n	80121b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80121a2:	4b45      	ldr	r3, [pc, #276]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80121a8:	4944      	ldr	r1, [pc, #272]	; (80122bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80121aa:	4845      	ldr	r0, [pc, #276]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121ac:	f000 feb6 	bl	8012f1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80121b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b8:	88db      	ldrh	r3, [r3, #6]
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	889b      	ldrh	r3, [r3, #4]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d010      	beq.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80121c6:	2300      	movs	r3, #0
 80121c8:	623b      	str	r3, [r7, #32]
 80121ca:	e00d      	b.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d006      	beq.n	80121e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80121d4:	4b38      	ldr	r3, [pc, #224]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80121da:	493a      	ldr	r1, [pc, #232]	; (80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80121dc:	4838      	ldr	r0, [pc, #224]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121de:	f000 fe9d 	bl	8012f1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d105      	bne.n	80121fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	7f9b      	ldrb	r3, [r3, #30]
 80121f2:	f003 0301 	and.w	r3, r3, #1
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d059      	beq.n	80122ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d04f      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	889b      	ldrh	r3, [r3, #4]
 8012210:	b29b      	uxth	r3, r3
 8012212:	2b00      	cmp	r3, #0
 8012214:	d002      	beq.n	801221c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	623b      	str	r3, [r7, #32]
 801221a:	e041      	b.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012226:	e012      	b.n	801224e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	88db      	ldrh	r3, [r3, #6]
 8012232:	b29a      	uxth	r2, r3
 8012234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012236:	889b      	ldrh	r3, [r3, #4]
 8012238:	b29b      	uxth	r3, r3
 801223a:	429a      	cmp	r2, r3
 801223c:	d002      	beq.n	8012244 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	623b      	str	r3, [r7, #32]
            break;
 8012242:	e007      	b.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012246:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1e9      	bne.n	8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d022      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d106      	bne.n	8012270 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012262:	4b15      	ldr	r3, [pc, #84]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012264:	f240 12df 	movw	r2, #479	; 0x1df
 8012268:	4917      	ldr	r1, [pc, #92]	; (80122c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801226a:	4815      	ldr	r0, [pc, #84]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801226c:	f000 fe56 	bl	8012f1c <iprintf>
          LWIP_ASSERT("sanity check",
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012278:	429a      	cmp	r2, r3
 801227a:	d106      	bne.n	801228a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801227c:	4b0e      	ldr	r3, [pc, #56]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801227e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012282:	4911      	ldr	r1, [pc, #68]	; (80122c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012284:	480e      	ldr	r0, [pc, #56]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012286:	f000 fe49 	bl	8012f1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d006      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012292:	4b09      	ldr	r3, [pc, #36]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012294:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012298:	490c      	ldr	r1, [pc, #48]	; (80122cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801229a:	4809      	ldr	r0, [pc, #36]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801229c:	f000 fe3e 	bl	8012f1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	bf14      	ite	ne
 80122a6:	2301      	movne	r3, #1
 80122a8:	2300      	moveq	r3, #0
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	e000      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3730      	adds	r7, #48	; 0x30
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	08016608 	.word	0x08016608
 80122bc:	080166ec 	.word	0x080166ec
 80122c0:	08016650 	.word	0x08016650
 80122c4:	0801670c 	.word	0x0801670c
 80122c8:	08016744 	.word	0x08016744
 80122cc:	08016754 	.word	0x08016754

080122d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08e      	sub	sp, #56	; 0x38
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f003 030f 	and.w	r3, r3, #15
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	2b14      	cmp	r3, #20
 80122ee:	f040 8171 	bne.w	80125d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80122f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f4:	88db      	ldrh	r3, [r3, #6]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7f6 f9f9 	bl	80086f0 <lwip_htons>
 80122fe:	4603      	mov	r3, r0
 8012300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012304:	b29b      	uxth	r3, r3
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230c:	885b      	ldrh	r3, [r3, #2]
 801230e:	b29b      	uxth	r3, r3
 8012310:	4618      	mov	r0, r3
 8012312:	f7f6 f9ed 	bl	80086f0 <lwip_htons>
 8012316:	4603      	mov	r3, r0
 8012318:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	f003 030f 	and.w	r3, r3, #15
 8012322:	b2db      	uxtb	r3, r3
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801232e:	b29b      	uxth	r3, r3
 8012330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012332:	429a      	cmp	r2, r3
 8012334:	f0c0 8150 	bcc.w	80125d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801233c:	b29b      	uxth	r3, r3
 801233e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7f7 ff0b 	bl	800a160 <pbuf_clen>
 801234a:	4603      	mov	r3, r0
 801234c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801234e:	4b8c      	ldr	r3, [pc, #560]	; (8012580 <ip4_reass+0x2b0>)
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	8c3b      	ldrh	r3, [r7, #32]
 8012356:	4413      	add	r3, r2
 8012358:	2b0a      	cmp	r3, #10
 801235a:	dd10      	ble.n	801237e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801235c:	8c3b      	ldrh	r3, [r7, #32]
 801235e:	4619      	mov	r1, r3
 8012360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012362:	f7ff fd81 	bl	8011e68 <ip_reass_remove_oldest_datagram>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 8137 	beq.w	80125dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801236e:	4b84      	ldr	r3, [pc, #528]	; (8012580 <ip4_reass+0x2b0>)
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	8c3b      	ldrh	r3, [r7, #32]
 8012376:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012378:	2b0a      	cmp	r3, #10
 801237a:	f300 812f 	bgt.w	80125dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801237e:	4b81      	ldr	r3, [pc, #516]	; (8012584 <ip4_reass+0x2b4>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	633b      	str	r3, [r7, #48]	; 0x30
 8012384:	e015      	b.n	80123b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	695a      	ldr	r2, [r3, #20]
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	429a      	cmp	r2, r3
 8012390:	d10c      	bne.n	80123ac <ip4_reass+0xdc>
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	699a      	ldr	r2, [r3, #24]
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	691b      	ldr	r3, [r3, #16]
 801239a:	429a      	cmp	r2, r3
 801239c:	d106      	bne.n	80123ac <ip4_reass+0xdc>
 801239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a0:	899a      	ldrh	r2, [r3, #12]
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	889b      	ldrh	r3, [r3, #4]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d006      	beq.n	80123ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	633b      	str	r3, [r7, #48]	; 0x30
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d1e6      	bne.n	8012386 <ip4_reass+0xb6>
 80123b8:	e000      	b.n	80123bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80123ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80123bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d109      	bne.n	80123d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80123c2:	8c3b      	ldrh	r3, [r7, #32]
 80123c4:	4619      	mov	r1, r3
 80123c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123c8:	f7ff fdb0 	bl	8011f2c <ip_reass_enqueue_new_datagram>
 80123cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d11c      	bne.n	801240e <ip4_reass+0x13e>
      goto nullreturn;
 80123d4:	e105      	b.n	80125e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d8:	88db      	ldrh	r3, [r3, #6]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	4618      	mov	r0, r3
 80123de:	f7f6 f987 	bl	80086f0 <lwip_htons>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d110      	bne.n	801240e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80123ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ee:	89db      	ldrh	r3, [r3, #14]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7f6 f97d 	bl	80086f0 <lwip_htons>
 80123f6:	4603      	mov	r3, r0
 80123f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d006      	beq.n	801240e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	3308      	adds	r3, #8
 8012404:	2214      	movs	r2, #20
 8012406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012408:	4618      	mov	r0, r3
 801240a:	f000 fe62 	bl	80130d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	88db      	ldrh	r3, [r3, #6]
 8012412:	b29b      	uxth	r3, r3
 8012414:	f003 0320 	and.w	r3, r3, #32
 8012418:	2b00      	cmp	r3, #0
 801241a:	bf0c      	ite	eq
 801241c:	2301      	moveq	r3, #1
 801241e:	2300      	movne	r3, #0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00e      	beq.n	8012448 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801242a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801242c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801242e:	4413      	add	r3, r2
 8012430:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012432:	8b7a      	ldrh	r2, [r7, #26]
 8012434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012436:	429a      	cmp	r2, r3
 8012438:	f0c0 80a0 	bcc.w	801257c <ip4_reass+0x2ac>
 801243c:	8b7b      	ldrh	r3, [r7, #26]
 801243e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012442:	4293      	cmp	r3, r2
 8012444:	f200 809a 	bhi.w	801257c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012448:	69fa      	ldr	r2, [r7, #28]
 801244a:	6879      	ldr	r1, [r7, #4]
 801244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244e:	f7ff fdd5 	bl	8011ffc <ip_reass_chain_frag_into_datagram_and_validate>
 8012452:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245a:	f000 809b 	beq.w	8012594 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801245e:	4b48      	ldr	r3, [pc, #288]	; (8012580 <ip4_reass+0x2b0>)
 8012460:	881a      	ldrh	r2, [r3, #0]
 8012462:	8c3b      	ldrh	r3, [r7, #32]
 8012464:	4413      	add	r3, r2
 8012466:	b29a      	uxth	r2, r3
 8012468:	4b45      	ldr	r3, [pc, #276]	; (8012580 <ip4_reass+0x2b0>)
 801246a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00d      	beq.n	801248e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012476:	4413      	add	r3, r2
 8012478:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	8a7a      	ldrh	r2, [r7, #18]
 801247e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	7f9b      	ldrb	r3, [r3, #30]
 8012484:	f043 0301 	orr.w	r3, r3, #1
 8012488:	b2da      	uxtb	r2, r3
 801248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d171      	bne.n	8012578 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	8b9b      	ldrh	r3, [r3, #28]
 8012498:	3314      	adds	r3, #20
 801249a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	3308      	adds	r3, #8
 80124b2:	2214      	movs	r2, #20
 80124b4:	4619      	mov	r1, r3
 80124b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124b8:	f000 fe0b 	bl	80130d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80124bc:	8a3b      	ldrh	r3, [r7, #16]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7f6 f916 	bl	80086f0 <lwip_htons>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	2200      	movs	r2, #0
 80124d0:	719a      	strb	r2, [r3, #6]
 80124d2:	2200      	movs	r2, #0
 80124d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	2200      	movs	r2, #0
 80124da:	729a      	strb	r2, [r3, #10]
 80124dc:	2200      	movs	r2, #0
 80124de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80124e6:	e00d      	b.n	8012504 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80124ee:	2114      	movs	r1, #20
 80124f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80124f2:	f7f7 fd21 	bl	8009f38 <pbuf_remove_header>
      pbuf_cat(p, r);
 80124f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7f7 fe71 	bl	800a1e0 <pbuf_cat>
      r = iprh->next_pbuf;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1ee      	bne.n	80124e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801250a:	4b1e      	ldr	r3, [pc, #120]	; (8012584 <ip4_reass+0x2b4>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012510:	429a      	cmp	r2, r3
 8012512:	d102      	bne.n	801251a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012514:	2300      	movs	r3, #0
 8012516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012518:	e010      	b.n	801253c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801251a:	4b1a      	ldr	r3, [pc, #104]	; (8012584 <ip4_reass+0x2b4>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012520:	e007      	b.n	8012532 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012528:	429a      	cmp	r2, r3
 801252a:	d006      	beq.n	801253a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1f4      	bne.n	8012522 <ip4_reass+0x252>
 8012538:	e000      	b.n	801253c <ip4_reass+0x26c>
          break;
 801253a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801253c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801253e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012540:	f7ff fd2e 	bl	8011fa0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f7f7 fe0b 	bl	800a160 <pbuf_clen>
 801254a:	4603      	mov	r3, r0
 801254c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801254e:	4b0c      	ldr	r3, [pc, #48]	; (8012580 <ip4_reass+0x2b0>)
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	8c3a      	ldrh	r2, [r7, #32]
 8012554:	429a      	cmp	r2, r3
 8012556:	d906      	bls.n	8012566 <ip4_reass+0x296>
 8012558:	4b0b      	ldr	r3, [pc, #44]	; (8012588 <ip4_reass+0x2b8>)
 801255a:	f240 229b 	movw	r2, #667	; 0x29b
 801255e:	490b      	ldr	r1, [pc, #44]	; (801258c <ip4_reass+0x2bc>)
 8012560:	480b      	ldr	r0, [pc, #44]	; (8012590 <ip4_reass+0x2c0>)
 8012562:	f000 fcdb 	bl	8012f1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012566:	4b06      	ldr	r3, [pc, #24]	; (8012580 <ip4_reass+0x2b0>)
 8012568:	881a      	ldrh	r2, [r3, #0]
 801256a:	8c3b      	ldrh	r3, [r7, #32]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	b29a      	uxth	r2, r3
 8012570:	4b03      	ldr	r3, [pc, #12]	; (8012580 <ip4_reass+0x2b0>)
 8012572:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	e038      	b.n	80125ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012578:	2300      	movs	r3, #0
 801257a:	e036      	b.n	80125ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801257c:	bf00      	nop
 801257e:	e00a      	b.n	8012596 <ip4_reass+0x2c6>
 8012580:	24007478 	.word	0x24007478
 8012584:	24007474 	.word	0x24007474
 8012588:	08016608 	.word	0x08016608
 801258c:	08016778 	.word	0x08016778
 8012590:	08016650 	.word	0x08016650
    goto nullreturn_ipr;
 8012594:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	2b00      	cmp	r3, #0
 801259a:	d106      	bne.n	80125aa <ip4_reass+0x2da>
 801259c:	4b15      	ldr	r3, [pc, #84]	; (80125f4 <ip4_reass+0x324>)
 801259e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80125a2:	4915      	ldr	r1, [pc, #84]	; (80125f8 <ip4_reass+0x328>)
 80125a4:	4815      	ldr	r0, [pc, #84]	; (80125fc <ip4_reass+0x32c>)
 80125a6:	f000 fcb9 	bl	8012f1c <iprintf>
  if (ipr->p == NULL) {
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d116      	bne.n	80125e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80125b2:	4b13      	ldr	r3, [pc, #76]	; (8012600 <ip4_reass+0x330>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d006      	beq.n	80125ca <ip4_reass+0x2fa>
 80125bc:	4b0d      	ldr	r3, [pc, #52]	; (80125f4 <ip4_reass+0x324>)
 80125be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80125c2:	4910      	ldr	r1, [pc, #64]	; (8012604 <ip4_reass+0x334>)
 80125c4:	480d      	ldr	r0, [pc, #52]	; (80125fc <ip4_reass+0x32c>)
 80125c6:	f000 fca9 	bl	8012f1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80125ca:	2100      	movs	r1, #0
 80125cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125ce:	f7ff fce7 	bl	8011fa0 <ip_reass_dequeue_datagram>
 80125d2:	e006      	b.n	80125e2 <ip4_reass+0x312>
    goto nullreturn;
 80125d4:	bf00      	nop
 80125d6:	e004      	b.n	80125e2 <ip4_reass+0x312>
    goto nullreturn;
 80125d8:	bf00      	nop
 80125da:	e002      	b.n	80125e2 <ip4_reass+0x312>
      goto nullreturn;
 80125dc:	bf00      	nop
 80125de:	e000      	b.n	80125e2 <ip4_reass+0x312>
  }

nullreturn:
 80125e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7f7 fd2e 	bl	800a044 <pbuf_free>
  return NULL;
 80125e8:	2300      	movs	r3, #0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3738      	adds	r7, #56	; 0x38
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	08016608 	.word	0x08016608
 80125f8:	08016794 	.word	0x08016794
 80125fc:	08016650 	.word	0x08016650
 8012600:	24007474 	.word	0x24007474
 8012604:	080167a0 	.word	0x080167a0

08012608 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801260c:	2005      	movs	r0, #5
 801260e:	f7f6 fdff 	bl	8009210 <memp_malloc>
 8012612:	4603      	mov	r3, r0
}
 8012614:	4618      	mov	r0, r3
 8012616:	bd80      	pop	{r7, pc}

08012618 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d106      	bne.n	8012634 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012626:	4b07      	ldr	r3, [pc, #28]	; (8012644 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012628:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801262c:	4906      	ldr	r1, [pc, #24]	; (8012648 <ip_frag_free_pbuf_custom_ref+0x30>)
 801262e:	4807      	ldr	r0, [pc, #28]	; (801264c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012630:	f000 fc74 	bl	8012f1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012634:	6879      	ldr	r1, [r7, #4]
 8012636:	2005      	movs	r0, #5
 8012638:	f7f6 fe60 	bl	80092fc <memp_free>
}
 801263c:	bf00      	nop
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	08016608 	.word	0x08016608
 8012648:	080167c0 	.word	0x080167c0
 801264c:	08016650 	.word	0x08016650

08012650 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d106      	bne.n	8012670 <ipfrag_free_pbuf_custom+0x20>
 8012662:	4b11      	ldr	r3, [pc, #68]	; (80126a8 <ipfrag_free_pbuf_custom+0x58>)
 8012664:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012668:	4910      	ldr	r1, [pc, #64]	; (80126ac <ipfrag_free_pbuf_custom+0x5c>)
 801266a:	4811      	ldr	r0, [pc, #68]	; (80126b0 <ipfrag_free_pbuf_custom+0x60>)
 801266c:	f000 fc56 	bl	8012f1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	429a      	cmp	r2, r3
 8012676:	d006      	beq.n	8012686 <ipfrag_free_pbuf_custom+0x36>
 8012678:	4b0b      	ldr	r3, [pc, #44]	; (80126a8 <ipfrag_free_pbuf_custom+0x58>)
 801267a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801267e:	490d      	ldr	r1, [pc, #52]	; (80126b4 <ipfrag_free_pbuf_custom+0x64>)
 8012680:	480b      	ldr	r0, [pc, #44]	; (80126b0 <ipfrag_free_pbuf_custom+0x60>)
 8012682:	f000 fc4b 	bl	8012f1c <iprintf>
  if (pcr->original != NULL) {
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	695b      	ldr	r3, [r3, #20]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d004      	beq.n	8012698 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	695b      	ldr	r3, [r3, #20]
 8012692:	4618      	mov	r0, r3
 8012694:	f7f7 fcd6 	bl	800a044 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012698:	68f8      	ldr	r0, [r7, #12]
 801269a:	f7ff ffbd 	bl	8012618 <ip_frag_free_pbuf_custom_ref>
}
 801269e:	bf00      	nop
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08016608 	.word	0x08016608
 80126ac:	080167cc 	.word	0x080167cc
 80126b0:	08016650 	.word	0x08016650
 80126b4:	080167d8 	.word	0x080167d8

080126b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b094      	sub	sp, #80	; 0x50
 80126bc:	af02      	add	r7, sp, #8
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126ce:	3b14      	subs	r3, #20
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	da00      	bge.n	80126d6 <ip4_frag+0x1e>
 80126d4:	3307      	adds	r3, #7
 80126d6:	10db      	asrs	r3, r3, #3
 80126d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126da:	2314      	movs	r3, #20
 80126dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80126e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80126e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	f003 030f 	and.w	r3, r3, #15
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b14      	cmp	r3, #20
 80126f8:	d002      	beq.n	8012700 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80126fa:	f06f 0305 	mvn.w	r3, #5
 80126fe:	e110      	b.n	8012922 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	895b      	ldrh	r3, [r3, #10]
 8012704:	2b13      	cmp	r3, #19
 8012706:	d809      	bhi.n	801271c <ip4_frag+0x64>
 8012708:	4b88      	ldr	r3, [pc, #544]	; (801292c <ip4_frag+0x274>)
 801270a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801270e:	4988      	ldr	r1, [pc, #544]	; (8012930 <ip4_frag+0x278>)
 8012710:	4888      	ldr	r0, [pc, #544]	; (8012934 <ip4_frag+0x27c>)
 8012712:	f000 fc03 	bl	8012f1c <iprintf>
 8012716:	f06f 0305 	mvn.w	r3, #5
 801271a:	e102      	b.n	8012922 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271e:	88db      	ldrh	r3, [r3, #6]
 8012720:	b29b      	uxth	r3, r3
 8012722:	4618      	mov	r0, r3
 8012724:	f7f5 ffe4 	bl	80086f0 <lwip_htons>
 8012728:	4603      	mov	r3, r0
 801272a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801272c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801272e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801273c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	891b      	ldrh	r3, [r3, #8]
 8012742:	3b14      	subs	r3, #20
 8012744:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012748:	e0e1      	b.n	801290e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801274a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801274c:	00db      	lsls	r3, r3, #3
 801274e:	b29b      	uxth	r3, r3
 8012750:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012754:	4293      	cmp	r3, r2
 8012756:	bf28      	it	cs
 8012758:	4613      	movcs	r3, r2
 801275a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801275c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012760:	2114      	movs	r1, #20
 8012762:	200e      	movs	r0, #14
 8012764:	f7f7 f98a 	bl	8009a7c <pbuf_alloc>
 8012768:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276c:	2b00      	cmp	r3, #0
 801276e:	f000 80d5 	beq.w	801291c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	895b      	ldrh	r3, [r3, #10]
 8012776:	2b13      	cmp	r3, #19
 8012778:	d806      	bhi.n	8012788 <ip4_frag+0xd0>
 801277a:	4b6c      	ldr	r3, [pc, #432]	; (801292c <ip4_frag+0x274>)
 801277c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012780:	496d      	ldr	r1, [pc, #436]	; (8012938 <ip4_frag+0x280>)
 8012782:	486c      	ldr	r0, [pc, #432]	; (8012934 <ip4_frag+0x27c>)
 8012784:	f000 fbca 	bl	8012f1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	2214      	movs	r2, #20
 801278e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012790:	4618      	mov	r0, r3
 8012792:	f000 fc9e 	bl	80130d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801279c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801279e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80127a2:	e064      	b.n	801286e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	895a      	ldrh	r2, [r3, #10]
 80127a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	895b      	ldrh	r3, [r3, #10]
 80127b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d906      	bls.n	80127c6 <ip4_frag+0x10e>
 80127b8:	4b5c      	ldr	r3, [pc, #368]	; (801292c <ip4_frag+0x274>)
 80127ba:	f240 322d 	movw	r2, #813	; 0x32d
 80127be:	495f      	ldr	r1, [pc, #380]	; (801293c <ip4_frag+0x284>)
 80127c0:	485c      	ldr	r0, [pc, #368]	; (8012934 <ip4_frag+0x27c>)
 80127c2:	f000 fbab 	bl	8012f1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80127c6:	8bfa      	ldrh	r2, [r7, #30]
 80127c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127cc:	4293      	cmp	r3, r2
 80127ce:	bf28      	it	cs
 80127d0:	4613      	movcs	r3, r2
 80127d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d105      	bne.n	80127ea <ip4_frag+0x132>
        poff = 0;
 80127de:	2300      	movs	r3, #0
 80127e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]
        continue;
 80127e8:	e041      	b.n	801286e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80127ea:	f7ff ff0d 	bl	8012608 <ip_frag_alloc_pbuf_custom_ref>
 80127ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 80127f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127f8:	f7f7 fc24 	bl	800a044 <pbuf_free>
        goto memerr;
 80127fc:	e08f      	b.n	801291e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012806:	4413      	add	r3, r2
 8012808:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801280c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012810:	9201      	str	r2, [sp, #4]
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	4603      	mov	r3, r0
 8012816:	2241      	movs	r2, #65	; 0x41
 8012818:	2000      	movs	r0, #0
 801281a:	f7f7 fa59 	bl	8009cd0 <pbuf_alloced_custom>
 801281e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d106      	bne.n	8012834 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012826:	69b8      	ldr	r0, [r7, #24]
 8012828:	f7ff fef6 	bl	8012618 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801282c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801282e:	f7f7 fc09 	bl	800a044 <pbuf_free>
        goto memerr;
 8012832:	e074      	b.n	801291e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f7f7 fcab 	bl	800a190 <pbuf_ref>
      pcr->original = p;
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	4a3f      	ldr	r2, [pc, #252]	; (8012940 <ip4_frag+0x288>)
 8012844:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012846:	6979      	ldr	r1, [r7, #20]
 8012848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801284a:	f7f7 fcc9 	bl	800a1e0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801284e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012856:	1ad3      	subs	r3, r2, r3
 8012858:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801285c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012860:	2b00      	cmp	r3, #0
 8012862:	d004      	beq.n	801286e <ip4_frag+0x1b6>
        poff = 0;
 8012864:	2300      	movs	r3, #0
 8012866:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801286e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012872:	2b00      	cmp	r3, #0
 8012874:	d196      	bne.n	80127a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012876:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012878:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801287c:	4413      	add	r3, r2
 801287e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012884:	f1a3 0213 	sub.w	r2, r3, #19
 8012888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801288c:	429a      	cmp	r2, r3
 801288e:	bfcc      	ite	gt
 8012890:	2301      	movgt	r3, #1
 8012892:	2300      	movle	r3, #0
 8012894:	b2db      	uxtb	r3, r3
 8012896:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801289c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80128a2:	6a3b      	ldr	r3, [r7, #32]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <ip4_frag+0x1f6>
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d003      	beq.n	80128b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80128ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80128b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80128b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7f5 ff19 	bl	80086f0 <lwip_htons>
 80128be:	4603      	mov	r3, r0
 80128c0:	461a      	mov	r2, r3
 80128c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80128c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128c8:	3314      	adds	r3, #20
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7f5 ff0f 	bl	80086f0 <lwip_htons>
 80128d2:	4603      	mov	r3, r0
 80128d4:	461a      	mov	r2, r3
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128dc:	2200      	movs	r2, #0
 80128de:	729a      	strb	r2, [r3, #10]
 80128e0:	2200      	movs	r2, #0
 80128e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	695b      	ldr	r3, [r3, #20]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128ec:	68b8      	ldr	r0, [r7, #8]
 80128ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80128f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128f2:	f7f7 fba7 	bl	800a044 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80128f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80128fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128fc:	1ad3      	subs	r3, r2, r3
 80128fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012902:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012906:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012908:	4413      	add	r3, r2
 801290a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801290e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012912:	2b00      	cmp	r3, #0
 8012914:	f47f af19 	bne.w	801274a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012918:	2300      	movs	r3, #0
 801291a:	e002      	b.n	8012922 <ip4_frag+0x26a>
      goto memerr;
 801291c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801291e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012922:	4618      	mov	r0, r3
 8012924:	3748      	adds	r7, #72	; 0x48
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	08016608 	.word	0x08016608
 8012930:	080167e4 	.word	0x080167e4
 8012934:	08016650 	.word	0x08016650
 8012938:	08016800 	.word	0x08016800
 801293c:	08016820 	.word	0x08016820
 8012940:	08012651 	.word	0x08012651

08012944 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b086      	sub	sp, #24
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801294e:	230e      	movs	r3, #14
 8012950:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	895b      	ldrh	r3, [r3, #10]
 8012956:	2b0e      	cmp	r3, #14
 8012958:	d96e      	bls.n	8012a38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	7bdb      	ldrb	r3, [r3, #15]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d106      	bne.n	8012970 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012968:	3301      	adds	r3, #1
 801296a:	b2da      	uxtb	r2, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	7b1a      	ldrb	r2, [r3, #12]
 801297a:	7b5b      	ldrb	r3, [r3, #13]
 801297c:	021b      	lsls	r3, r3, #8
 801297e:	4313      	orrs	r3, r2
 8012980:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b00      	cmp	r3, #0
 801298c:	d023      	beq.n	80129d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d10f      	bne.n	80129b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	785b      	ldrb	r3, [r3, #1]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d11b      	bne.n	80129d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80129a2:	2b5e      	cmp	r3, #94	; 0x5e
 80129a4:	d117      	bne.n	80129d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	7b5b      	ldrb	r3, [r3, #13]
 80129aa:	f043 0310 	orr.w	r3, r3, #16
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	735a      	strb	r2, [r3, #13]
 80129b4:	e00f      	b.n	80129d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	2206      	movs	r2, #6
 80129ba:	4928      	ldr	r1, [pc, #160]	; (8012a5c <ethernet_input+0x118>)
 80129bc:	4618      	mov	r0, r3
 80129be:	f000 fb02 	bl	8012fc6 <memcmp>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d106      	bne.n	80129d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	7b5b      	ldrb	r3, [r3, #13]
 80129cc:	f043 0308 	orr.w	r3, r3, #8
 80129d0:	b2da      	uxtb	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80129d6:	89fb      	ldrh	r3, [r7, #14]
 80129d8:	2b08      	cmp	r3, #8
 80129da:	d003      	beq.n	80129e4 <ethernet_input+0xa0>
 80129dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80129e0:	d014      	beq.n	8012a0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80129e2:	e032      	b.n	8012a4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129ea:	f003 0308 	and.w	r3, r3, #8
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d024      	beq.n	8012a3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80129f2:	8afb      	ldrh	r3, [r7, #22]
 80129f4:	4619      	mov	r1, r3
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7f7 fa9e 	bl	8009f38 <pbuf_remove_header>
 80129fc:	4603      	mov	r3, r0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d11e      	bne.n	8012a40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012a02:	6839      	ldr	r1, [r7, #0]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7fe ff21 	bl	801184c <ip4_input>
      break;
 8012a0a:	e013      	b.n	8012a34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a12:	f003 0308 	and.w	r3, r3, #8
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d014      	beq.n	8012a44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a1a:	8afb      	ldrh	r3, [r7, #22]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7f7 fa8a 	bl	8009f38 <pbuf_remove_header>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d10e      	bne.n	8012a48 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012a2a:	6839      	ldr	r1, [r7, #0]
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7fe f89b 	bl	8010b68 <etharp_input>
      break;
 8012a32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012a34:	2300      	movs	r3, #0
 8012a36:	e00c      	b.n	8012a52 <ethernet_input+0x10e>
    goto free_and_return;
 8012a38:	bf00      	nop
 8012a3a:	e006      	b.n	8012a4a <ethernet_input+0x106>
        goto free_and_return;
 8012a3c:	bf00      	nop
 8012a3e:	e004      	b.n	8012a4a <ethernet_input+0x106>
        goto free_and_return;
 8012a40:	bf00      	nop
 8012a42:	e002      	b.n	8012a4a <ethernet_input+0x106>
        goto free_and_return;
 8012a44:	bf00      	nop
 8012a46:	e000      	b.n	8012a4a <ethernet_input+0x106>
        goto free_and_return;
 8012a48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7f7 fafa 	bl	800a044 <pbuf_free>
  return ERR_OK;
 8012a50:	2300      	movs	r3, #0
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	080169f4 	.word	0x080169f4

08012a60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a6e:	8c3b      	ldrh	r3, [r7, #32]
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7f5 fe3d 	bl	80086f0 <lwip_htons>
 8012a76:	4603      	mov	r3, r0
 8012a78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a7a:	210e      	movs	r1, #14
 8012a7c:	68b8      	ldr	r0, [r7, #8]
 8012a7e:	f7f7 fa4b 	bl	8009f18 <pbuf_add_header>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d125      	bne.n	8012ad4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	8afa      	ldrh	r2, [r7, #22]
 8012a92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	2206      	movs	r2, #6
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f000 fb19 	bl	80130d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	3306      	adds	r3, #6
 8012aa4:	2206      	movs	r2, #6
 8012aa6:	6879      	ldr	r1, [r7, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fb12 	bl	80130d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ab4:	2b06      	cmp	r3, #6
 8012ab6:	d006      	beq.n	8012ac6 <ethernet_output+0x66>
 8012ab8:	4b0a      	ldr	r3, [pc, #40]	; (8012ae4 <ethernet_output+0x84>)
 8012aba:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012abe:	490a      	ldr	r1, [pc, #40]	; (8012ae8 <ethernet_output+0x88>)
 8012ac0:	480a      	ldr	r0, [pc, #40]	; (8012aec <ethernet_output+0x8c>)
 8012ac2:	f000 fa2b 	bl	8012f1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	68b9      	ldr	r1, [r7, #8]
 8012acc:	68f8      	ldr	r0, [r7, #12]
 8012ace:	4798      	blx	r3
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	e002      	b.n	8012ada <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012ad4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012ad6:	f06f 0301 	mvn.w	r3, #1
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	08016830 	.word	0x08016830
 8012ae8:	08016868 	.word	0x08016868
 8012aec:	0801689c 	.word	0x0801689c

08012af0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	60bb      	str	r3, [r7, #8]
 8012afe:	2304      	movs	r3, #4
 8012b00:	60fb      	str	r3, [r7, #12]
 8012b02:	2300      	movs	r3, #0
 8012b04:	613b      	str	r3, [r7, #16]
 8012b06:	2300      	movs	r3, #0
 8012b08:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012b0a:	f107 0308 	add.w	r3, r7, #8
 8012b0e:	2100      	movs	r1, #0
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7f2 ff39 	bl	8005988 <osMessageCreate>
 8012b16:	4602      	mov	r2, r0
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012b24:	f04f 33ff 	mov.w	r3, #4294967295
 8012b28:	e000      	b.n	8012b2c <sys_mbox_new+0x3c>

  return ERR_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	6839      	ldr	r1, [r7, #0]
 8012b44:	2200      	movs	r2, #0
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7f2 ff46 	bl	80059d8 <osMessagePut>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d102      	bne.n	8012b58 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	73fb      	strb	r3, [r7, #15]
 8012b56:	e001      	b.n	8012b5c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012b58:	23ff      	movs	r3, #255	; 0xff
 8012b5a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b08c      	sub	sp, #48	; 0x30
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	61f8      	str	r0, [r7, #28]
 8012b70:	61b9      	str	r1, [r7, #24]
 8012b72:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012b74:	f7f2 fd46 	bl	8005604 <osKernelSysTick>
 8012b78:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d017      	beq.n	8012bb0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	6819      	ldr	r1, [r3, #0]
 8012b84:	f107 0320 	add.w	r3, r7, #32
 8012b88:	697a      	ldr	r2, [r7, #20]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7f2 ff64 	bl	8005a58 <osMessageGet>

    if(event.status == osEventMessage)
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	2b10      	cmp	r3, #16
 8012b94:	d109      	bne.n	8012baa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b98:	461a      	mov	r2, r3
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012b9e:	f7f2 fd31 	bl	8005604 <osKernelSysTick>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	e019      	b.n	8012bde <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012baa:	f04f 33ff 	mov.w	r3, #4294967295
 8012bae:	e016      	b.n	8012bde <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	6819      	ldr	r1, [r3, #0]
 8012bb4:	463b      	mov	r3, r7
 8012bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f2 ff4c 	bl	8005a58 <osMessageGet>
 8012bc0:	f107 0320 	add.w	r3, r7, #32
 8012bc4:	463a      	mov	r2, r7
 8012bc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8012bc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	461a      	mov	r2, r3
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012bd4:	f7f2 fd16 	bl	8005604 <osKernelSysTick>
 8012bd8:	4602      	mov	r2, r0
 8012bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bdc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3730      	adds	r7, #48	; 0x30
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d101      	bne.n	8012bfa <sys_mbox_valid+0x14>
    return 0;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	e000      	b.n	8012bfc <sys_mbox_valid+0x16>
  else
    return 1;
 8012bfa:	2301      	movs	r3, #1
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012c0c:	4803      	ldr	r0, [pc, #12]	; (8012c1c <sys_init+0x14>)
 8012c0e:	f7f2 fd69 	bl	80056e4 <osMutexCreate>
 8012c12:	4603      	mov	r3, r0
 8012c14:	4a02      	ldr	r2, [pc, #8]	; (8012c20 <sys_init+0x18>)
 8012c16:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012c18:	bf00      	nop
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	08016a04 	.word	0x08016a04
 8012c20:	2400747c 	.word	0x2400747c

08012c24 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	60bb      	str	r3, [r7, #8]
 8012c30:	2300      	movs	r3, #0
 8012c32:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012c34:	f107 0308 	add.w	r3, r7, #8
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f2 fd53 	bl	80056e4 <osMutexCreate>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d102      	bne.n	8012c52 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c50:	e000      	b.n	8012c54 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f04f 31ff 	mov.w	r1, #4294967295
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7f2 fd51 	bl	8005714 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012c72:	bf00      	nop
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b082      	sub	sp, #8
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f2 fd92 	bl	80057b0 <osMutexRelease>
}
 8012c8c:	bf00      	nop
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b08c      	sub	sp, #48	; 0x30
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
 8012ca0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012ca2:	f107 0314 	add.w	r3, r7, #20
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	605a      	str	r2, [r3, #4]
 8012cac:	609a      	str	r2, [r3, #8]
 8012cae:	60da      	str	r2, [r3, #12]
 8012cb0:	611a      	str	r2, [r3, #16]
 8012cb2:	615a      	str	r2, [r3, #20]
 8012cb4:	619a      	str	r2, [r3, #24]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	617b      	str	r3, [r7, #20]
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	61bb      	str	r3, [r7, #24]
 8012cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc0:	b21b      	sxth	r3, r3
 8012cc2:	83bb      	strh	r3, [r7, #28]
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012cc8:	f107 0314 	add.w	r3, r7, #20
 8012ccc:	6879      	ldr	r1, [r7, #4]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f2 fca8 	bl	8005624 <osThreadCreate>
 8012cd4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3730      	adds	r7, #48	; 0x30
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
	...

08012ce0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012ce4:	4b04      	ldr	r3, [pc, #16]	; (8012cf8 <sys_arch_protect+0x18>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f2 fd11 	bl	8005714 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012cf2:	2301      	movs	r3, #1
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	2400747c 	.word	0x2400747c

08012cfc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <sys_arch_unprotect+0x1c>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7f2 fd51 	bl	80057b0 <osMutexRelease>
}
 8012d0e:	bf00      	nop
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	2400747c 	.word	0x2400747c

08012d1c <rand>:
 8012d1c:	4b16      	ldr	r3, [pc, #88]	; (8012d78 <rand+0x5c>)
 8012d1e:	b510      	push	{r4, lr}
 8012d20:	681c      	ldr	r4, [r3, #0]
 8012d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012d24:	b9b3      	cbnz	r3, 8012d54 <rand+0x38>
 8012d26:	2018      	movs	r0, #24
 8012d28:	f000 fa4c 	bl	80131c4 <malloc>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	6320      	str	r0, [r4, #48]	; 0x30
 8012d30:	b920      	cbnz	r0, 8012d3c <rand+0x20>
 8012d32:	4b12      	ldr	r3, [pc, #72]	; (8012d7c <rand+0x60>)
 8012d34:	4812      	ldr	r0, [pc, #72]	; (8012d80 <rand+0x64>)
 8012d36:	2152      	movs	r1, #82	; 0x52
 8012d38:	f000 f9da 	bl	80130f0 <__assert_func>
 8012d3c:	4911      	ldr	r1, [pc, #68]	; (8012d84 <rand+0x68>)
 8012d3e:	4b12      	ldr	r3, [pc, #72]	; (8012d88 <rand+0x6c>)
 8012d40:	e9c0 1300 	strd	r1, r3, [r0]
 8012d44:	4b11      	ldr	r3, [pc, #68]	; (8012d8c <rand+0x70>)
 8012d46:	6083      	str	r3, [r0, #8]
 8012d48:	230b      	movs	r3, #11
 8012d4a:	8183      	strh	r3, [r0, #12]
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	2001      	movs	r0, #1
 8012d50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012d54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012d56:	480e      	ldr	r0, [pc, #56]	; (8012d90 <rand+0x74>)
 8012d58:	690b      	ldr	r3, [r1, #16]
 8012d5a:	694c      	ldr	r4, [r1, #20]
 8012d5c:	4a0d      	ldr	r2, [pc, #52]	; (8012d94 <rand+0x78>)
 8012d5e:	4358      	muls	r0, r3
 8012d60:	fb02 0004 	mla	r0, r2, r4, r0
 8012d64:	fba3 3202 	umull	r3, r2, r3, r2
 8012d68:	3301      	adds	r3, #1
 8012d6a:	eb40 0002 	adc.w	r0, r0, r2
 8012d6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012d72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012d76:	bd10      	pop	{r4, pc}
 8012d78:	2400008c 	.word	0x2400008c
 8012d7c:	08016a0c 	.word	0x08016a0c
 8012d80:	08016a23 	.word	0x08016a23
 8012d84:	abcd330e 	.word	0xabcd330e
 8012d88:	e66d1234 	.word	0xe66d1234
 8012d8c:	0005deec 	.word	0x0005deec
 8012d90:	5851f42d 	.word	0x5851f42d
 8012d94:	4c957f2d 	.word	0x4c957f2d

08012d98 <std>:
 8012d98:	2300      	movs	r3, #0
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8012da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da6:	6083      	str	r3, [r0, #8]
 8012da8:	8181      	strh	r1, [r0, #12]
 8012daa:	6643      	str	r3, [r0, #100]	; 0x64
 8012dac:	81c2      	strh	r2, [r0, #14]
 8012dae:	6183      	str	r3, [r0, #24]
 8012db0:	4619      	mov	r1, r3
 8012db2:	2208      	movs	r2, #8
 8012db4:	305c      	adds	r0, #92	; 0x5c
 8012db6:	f000 f916 	bl	8012fe6 <memset>
 8012dba:	4b0d      	ldr	r3, [pc, #52]	; (8012df0 <std+0x58>)
 8012dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	; (8012df4 <std+0x5c>)
 8012dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	; (8012df8 <std+0x60>)
 8012dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	; (8012dfc <std+0x64>)
 8012dc8:	6323      	str	r3, [r4, #48]	; 0x30
 8012dca:	4b0d      	ldr	r3, [pc, #52]	; (8012e00 <std+0x68>)
 8012dcc:	6224      	str	r4, [r4, #32]
 8012dce:	429c      	cmp	r4, r3
 8012dd0:	d006      	beq.n	8012de0 <std+0x48>
 8012dd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012dd6:	4294      	cmp	r4, r2
 8012dd8:	d002      	beq.n	8012de0 <std+0x48>
 8012dda:	33d0      	adds	r3, #208	; 0xd0
 8012ddc:	429c      	cmp	r4, r3
 8012dde:	d105      	bne.n	8012dec <std+0x54>
 8012de0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de8:	f000 b970 	b.w	80130cc <__retarget_lock_init_recursive>
 8012dec:	bd10      	pop	{r4, pc}
 8012dee:	bf00      	nop
 8012df0:	08012f41 	.word	0x08012f41
 8012df4:	08012f63 	.word	0x08012f63
 8012df8:	08012f9b 	.word	0x08012f9b
 8012dfc:	08012fbf 	.word	0x08012fbf
 8012e00:	24007480 	.word	0x24007480

08012e04 <stdio_exit_handler>:
 8012e04:	4a02      	ldr	r2, [pc, #8]	; (8012e10 <stdio_exit_handler+0xc>)
 8012e06:	4903      	ldr	r1, [pc, #12]	; (8012e14 <stdio_exit_handler+0x10>)
 8012e08:	4803      	ldr	r0, [pc, #12]	; (8012e18 <stdio_exit_handler+0x14>)
 8012e0a:	f000 b869 	b.w	8012ee0 <_fwalk_sglue>
 8012e0e:	bf00      	nop
 8012e10:	24000034 	.word	0x24000034
 8012e14:	080139e1 	.word	0x080139e1
 8012e18:	24000040 	.word	0x24000040

08012e1c <cleanup_stdio>:
 8012e1c:	6841      	ldr	r1, [r0, #4]
 8012e1e:	4b0c      	ldr	r3, [pc, #48]	; (8012e50 <cleanup_stdio+0x34>)
 8012e20:	4299      	cmp	r1, r3
 8012e22:	b510      	push	{r4, lr}
 8012e24:	4604      	mov	r4, r0
 8012e26:	d001      	beq.n	8012e2c <cleanup_stdio+0x10>
 8012e28:	f000 fdda 	bl	80139e0 <_fflush_r>
 8012e2c:	68a1      	ldr	r1, [r4, #8]
 8012e2e:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <cleanup_stdio+0x38>)
 8012e30:	4299      	cmp	r1, r3
 8012e32:	d002      	beq.n	8012e3a <cleanup_stdio+0x1e>
 8012e34:	4620      	mov	r0, r4
 8012e36:	f000 fdd3 	bl	80139e0 <_fflush_r>
 8012e3a:	68e1      	ldr	r1, [r4, #12]
 8012e3c:	4b06      	ldr	r3, [pc, #24]	; (8012e58 <cleanup_stdio+0x3c>)
 8012e3e:	4299      	cmp	r1, r3
 8012e40:	d004      	beq.n	8012e4c <cleanup_stdio+0x30>
 8012e42:	4620      	mov	r0, r4
 8012e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e48:	f000 bdca 	b.w	80139e0 <_fflush_r>
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	bf00      	nop
 8012e50:	24007480 	.word	0x24007480
 8012e54:	240074e8 	.word	0x240074e8
 8012e58:	24007550 	.word	0x24007550

08012e5c <global_stdio_init.part.0>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4b0b      	ldr	r3, [pc, #44]	; (8012e8c <global_stdio_init.part.0+0x30>)
 8012e60:	4c0b      	ldr	r4, [pc, #44]	; (8012e90 <global_stdio_init.part.0+0x34>)
 8012e62:	4a0c      	ldr	r2, [pc, #48]	; (8012e94 <global_stdio_init.part.0+0x38>)
 8012e64:	601a      	str	r2, [r3, #0]
 8012e66:	4620      	mov	r0, r4
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2104      	movs	r1, #4
 8012e6c:	f7ff ff94 	bl	8012d98 <std>
 8012e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012e74:	2201      	movs	r2, #1
 8012e76:	2109      	movs	r1, #9
 8012e78:	f7ff ff8e 	bl	8012d98 <std>
 8012e7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012e80:	2202      	movs	r2, #2
 8012e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e86:	2112      	movs	r1, #18
 8012e88:	f7ff bf86 	b.w	8012d98 <std>
 8012e8c:	240075b8 	.word	0x240075b8
 8012e90:	24007480 	.word	0x24007480
 8012e94:	08012e05 	.word	0x08012e05

08012e98 <__sfp_lock_acquire>:
 8012e98:	4801      	ldr	r0, [pc, #4]	; (8012ea0 <__sfp_lock_acquire+0x8>)
 8012e9a:	f000 b918 	b.w	80130ce <__retarget_lock_acquire_recursive>
 8012e9e:	bf00      	nop
 8012ea0:	240075c1 	.word	0x240075c1

08012ea4 <__sfp_lock_release>:
 8012ea4:	4801      	ldr	r0, [pc, #4]	; (8012eac <__sfp_lock_release+0x8>)
 8012ea6:	f000 b913 	b.w	80130d0 <__retarget_lock_release_recursive>
 8012eaa:	bf00      	nop
 8012eac:	240075c1 	.word	0x240075c1

08012eb0 <__sinit>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	f7ff fff0 	bl	8012e98 <__sfp_lock_acquire>
 8012eb8:	6a23      	ldr	r3, [r4, #32]
 8012eba:	b11b      	cbz	r3, 8012ec4 <__sinit+0x14>
 8012ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec0:	f7ff bff0 	b.w	8012ea4 <__sfp_lock_release>
 8012ec4:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <__sinit+0x28>)
 8012ec6:	6223      	str	r3, [r4, #32]
 8012ec8:	4b04      	ldr	r3, [pc, #16]	; (8012edc <__sinit+0x2c>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1f5      	bne.n	8012ebc <__sinit+0xc>
 8012ed0:	f7ff ffc4 	bl	8012e5c <global_stdio_init.part.0>
 8012ed4:	e7f2      	b.n	8012ebc <__sinit+0xc>
 8012ed6:	bf00      	nop
 8012ed8:	08012e1d 	.word	0x08012e1d
 8012edc:	240075b8 	.word	0x240075b8

08012ee0 <_fwalk_sglue>:
 8012ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee4:	4607      	mov	r7, r0
 8012ee6:	4688      	mov	r8, r1
 8012ee8:	4614      	mov	r4, r2
 8012eea:	2600      	movs	r6, #0
 8012eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef4:	d505      	bpl.n	8012f02 <_fwalk_sglue+0x22>
 8012ef6:	6824      	ldr	r4, [r4, #0]
 8012ef8:	2c00      	cmp	r4, #0
 8012efa:	d1f7      	bne.n	8012eec <_fwalk_sglue+0xc>
 8012efc:	4630      	mov	r0, r6
 8012efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f02:	89ab      	ldrh	r3, [r5, #12]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d907      	bls.n	8012f18 <_fwalk_sglue+0x38>
 8012f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	d003      	beq.n	8012f18 <_fwalk_sglue+0x38>
 8012f10:	4629      	mov	r1, r5
 8012f12:	4638      	mov	r0, r7
 8012f14:	47c0      	blx	r8
 8012f16:	4306      	orrs	r6, r0
 8012f18:	3568      	adds	r5, #104	; 0x68
 8012f1a:	e7e9      	b.n	8012ef0 <_fwalk_sglue+0x10>

08012f1c <iprintf>:
 8012f1c:	b40f      	push	{r0, r1, r2, r3}
 8012f1e:	b507      	push	{r0, r1, r2, lr}
 8012f20:	4906      	ldr	r1, [pc, #24]	; (8012f3c <iprintf+0x20>)
 8012f22:	ab04      	add	r3, sp, #16
 8012f24:	6808      	ldr	r0, [r1, #0]
 8012f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f2a:	6881      	ldr	r1, [r0, #8]
 8012f2c:	9301      	str	r3, [sp, #4]
 8012f2e:	f000 fa27 	bl	8013380 <_vfiprintf_r>
 8012f32:	b003      	add	sp, #12
 8012f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f38:	b004      	add	sp, #16
 8012f3a:	4770      	bx	lr
 8012f3c:	2400008c 	.word	0x2400008c

08012f40 <__sread>:
 8012f40:	b510      	push	{r4, lr}
 8012f42:	460c      	mov	r4, r1
 8012f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f48:	f000 f878 	bl	801303c <_read_r>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	bfab      	itete	ge
 8012f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f52:	89a3      	ldrhlt	r3, [r4, #12]
 8012f54:	181b      	addge	r3, r3, r0
 8012f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f5a:	bfac      	ite	ge
 8012f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f5e:	81a3      	strhlt	r3, [r4, #12]
 8012f60:	bd10      	pop	{r4, pc}

08012f62 <__swrite>:
 8012f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f66:	461f      	mov	r7, r3
 8012f68:	898b      	ldrh	r3, [r1, #12]
 8012f6a:	05db      	lsls	r3, r3, #23
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	460c      	mov	r4, r1
 8012f70:	4616      	mov	r6, r2
 8012f72:	d505      	bpl.n	8012f80 <__swrite+0x1e>
 8012f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f78:	2302      	movs	r3, #2
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f000 f84c 	bl	8013018 <_lseek_r>
 8012f80:	89a3      	ldrh	r3, [r4, #12]
 8012f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f8a:	81a3      	strh	r3, [r4, #12]
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	463b      	mov	r3, r7
 8012f90:	4628      	mov	r0, r5
 8012f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f96:	f000 b863 	b.w	8013060 <_write_r>

08012f9a <__sseek>:
 8012f9a:	b510      	push	{r4, lr}
 8012f9c:	460c      	mov	r4, r1
 8012f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa2:	f000 f839 	bl	8013018 <_lseek_r>
 8012fa6:	1c43      	adds	r3, r0, #1
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	bf15      	itete	ne
 8012fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fb6:	81a3      	strheq	r3, [r4, #12]
 8012fb8:	bf18      	it	ne
 8012fba:	81a3      	strhne	r3, [r4, #12]
 8012fbc:	bd10      	pop	{r4, pc}

08012fbe <__sclose>:
 8012fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fc2:	f000 b819 	b.w	8012ff8 <_close_r>

08012fc6 <memcmp>:
 8012fc6:	b510      	push	{r4, lr}
 8012fc8:	3901      	subs	r1, #1
 8012fca:	4402      	add	r2, r0
 8012fcc:	4290      	cmp	r0, r2
 8012fce:	d101      	bne.n	8012fd4 <memcmp+0xe>
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e005      	b.n	8012fe0 <memcmp+0x1a>
 8012fd4:	7803      	ldrb	r3, [r0, #0]
 8012fd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012fda:	42a3      	cmp	r3, r4
 8012fdc:	d001      	beq.n	8012fe2 <memcmp+0x1c>
 8012fde:	1b18      	subs	r0, r3, r4
 8012fe0:	bd10      	pop	{r4, pc}
 8012fe2:	3001      	adds	r0, #1
 8012fe4:	e7f2      	b.n	8012fcc <memcmp+0x6>

08012fe6 <memset>:
 8012fe6:	4402      	add	r2, r0
 8012fe8:	4603      	mov	r3, r0
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d100      	bne.n	8012ff0 <memset+0xa>
 8012fee:	4770      	bx	lr
 8012ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8012ff4:	e7f9      	b.n	8012fea <memset+0x4>
	...

08012ff8 <_close_r>:
 8012ff8:	b538      	push	{r3, r4, r5, lr}
 8012ffa:	4d06      	ldr	r5, [pc, #24]	; (8013014 <_close_r+0x1c>)
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	4604      	mov	r4, r0
 8013000:	4608      	mov	r0, r1
 8013002:	602b      	str	r3, [r5, #0]
 8013004:	f7ed fdaf 	bl	8000b66 <_close>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d102      	bne.n	8013012 <_close_r+0x1a>
 801300c:	682b      	ldr	r3, [r5, #0]
 801300e:	b103      	cbz	r3, 8013012 <_close_r+0x1a>
 8013010:	6023      	str	r3, [r4, #0]
 8013012:	bd38      	pop	{r3, r4, r5, pc}
 8013014:	240075bc 	.word	0x240075bc

08013018 <_lseek_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d07      	ldr	r5, [pc, #28]	; (8013038 <_lseek_r+0x20>)
 801301c:	4604      	mov	r4, r0
 801301e:	4608      	mov	r0, r1
 8013020:	4611      	mov	r1, r2
 8013022:	2200      	movs	r2, #0
 8013024:	602a      	str	r2, [r5, #0]
 8013026:	461a      	mov	r2, r3
 8013028:	f7ed fdc4 	bl	8000bb4 <_lseek>
 801302c:	1c43      	adds	r3, r0, #1
 801302e:	d102      	bne.n	8013036 <_lseek_r+0x1e>
 8013030:	682b      	ldr	r3, [r5, #0]
 8013032:	b103      	cbz	r3, 8013036 <_lseek_r+0x1e>
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	bd38      	pop	{r3, r4, r5, pc}
 8013038:	240075bc 	.word	0x240075bc

0801303c <_read_r>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4d07      	ldr	r5, [pc, #28]	; (801305c <_read_r+0x20>)
 8013040:	4604      	mov	r4, r0
 8013042:	4608      	mov	r0, r1
 8013044:	4611      	mov	r1, r2
 8013046:	2200      	movs	r2, #0
 8013048:	602a      	str	r2, [r5, #0]
 801304a:	461a      	mov	r2, r3
 801304c:	f7ed fd52 	bl	8000af4 <_read>
 8013050:	1c43      	adds	r3, r0, #1
 8013052:	d102      	bne.n	801305a <_read_r+0x1e>
 8013054:	682b      	ldr	r3, [r5, #0]
 8013056:	b103      	cbz	r3, 801305a <_read_r+0x1e>
 8013058:	6023      	str	r3, [r4, #0]
 801305a:	bd38      	pop	{r3, r4, r5, pc}
 801305c:	240075bc 	.word	0x240075bc

08013060 <_write_r>:
 8013060:	b538      	push	{r3, r4, r5, lr}
 8013062:	4d07      	ldr	r5, [pc, #28]	; (8013080 <_write_r+0x20>)
 8013064:	4604      	mov	r4, r0
 8013066:	4608      	mov	r0, r1
 8013068:	4611      	mov	r1, r2
 801306a:	2200      	movs	r2, #0
 801306c:	602a      	str	r2, [r5, #0]
 801306e:	461a      	mov	r2, r3
 8013070:	f7ed fd5d 	bl	8000b2e <_write>
 8013074:	1c43      	adds	r3, r0, #1
 8013076:	d102      	bne.n	801307e <_write_r+0x1e>
 8013078:	682b      	ldr	r3, [r5, #0]
 801307a:	b103      	cbz	r3, 801307e <_write_r+0x1e>
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	bd38      	pop	{r3, r4, r5, pc}
 8013080:	240075bc 	.word	0x240075bc

08013084 <__libc_init_array>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	4d0d      	ldr	r5, [pc, #52]	; (80130bc <__libc_init_array+0x38>)
 8013088:	4c0d      	ldr	r4, [pc, #52]	; (80130c0 <__libc_init_array+0x3c>)
 801308a:	1b64      	subs	r4, r4, r5
 801308c:	10a4      	asrs	r4, r4, #2
 801308e:	2600      	movs	r6, #0
 8013090:	42a6      	cmp	r6, r4
 8013092:	d109      	bne.n	80130a8 <__libc_init_array+0x24>
 8013094:	4d0b      	ldr	r5, [pc, #44]	; (80130c4 <__libc_init_array+0x40>)
 8013096:	4c0c      	ldr	r4, [pc, #48]	; (80130c8 <__libc_init_array+0x44>)
 8013098:	f000 fe52 	bl	8013d40 <_init>
 801309c:	1b64      	subs	r4, r4, r5
 801309e:	10a4      	asrs	r4, r4, #2
 80130a0:	2600      	movs	r6, #0
 80130a2:	42a6      	cmp	r6, r4
 80130a4:	d105      	bne.n	80130b2 <__libc_init_array+0x2e>
 80130a6:	bd70      	pop	{r4, r5, r6, pc}
 80130a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ac:	4798      	blx	r3
 80130ae:	3601      	adds	r6, #1
 80130b0:	e7ee      	b.n	8013090 <__libc_init_array+0xc>
 80130b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80130b6:	4798      	blx	r3
 80130b8:	3601      	adds	r6, #1
 80130ba:	e7f2      	b.n	80130a2 <__libc_init_array+0x1e>
 80130bc:	08016aec 	.word	0x08016aec
 80130c0:	08016aec 	.word	0x08016aec
 80130c4:	08016aec 	.word	0x08016aec
 80130c8:	08016af0 	.word	0x08016af0

080130cc <__retarget_lock_init_recursive>:
 80130cc:	4770      	bx	lr

080130ce <__retarget_lock_acquire_recursive>:
 80130ce:	4770      	bx	lr

080130d0 <__retarget_lock_release_recursive>:
 80130d0:	4770      	bx	lr

080130d2 <memcpy>:
 80130d2:	440a      	add	r2, r1
 80130d4:	4291      	cmp	r1, r2
 80130d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80130da:	d100      	bne.n	80130de <memcpy+0xc>
 80130dc:	4770      	bx	lr
 80130de:	b510      	push	{r4, lr}
 80130e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130e8:	4291      	cmp	r1, r2
 80130ea:	d1f9      	bne.n	80130e0 <memcpy+0xe>
 80130ec:	bd10      	pop	{r4, pc}
	...

080130f0 <__assert_func>:
 80130f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130f2:	4614      	mov	r4, r2
 80130f4:	461a      	mov	r2, r3
 80130f6:	4b09      	ldr	r3, [pc, #36]	; (801311c <__assert_func+0x2c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4605      	mov	r5, r0
 80130fc:	68d8      	ldr	r0, [r3, #12]
 80130fe:	b14c      	cbz	r4, 8013114 <__assert_func+0x24>
 8013100:	4b07      	ldr	r3, [pc, #28]	; (8013120 <__assert_func+0x30>)
 8013102:	9100      	str	r1, [sp, #0]
 8013104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013108:	4906      	ldr	r1, [pc, #24]	; (8013124 <__assert_func+0x34>)
 801310a:	462b      	mov	r3, r5
 801310c:	f000 fc90 	bl	8013a30 <fiprintf>
 8013110:	f000 fd46 	bl	8013ba0 <abort>
 8013114:	4b04      	ldr	r3, [pc, #16]	; (8013128 <__assert_func+0x38>)
 8013116:	461c      	mov	r4, r3
 8013118:	e7f3      	b.n	8013102 <__assert_func+0x12>
 801311a:	bf00      	nop
 801311c:	2400008c 	.word	0x2400008c
 8013120:	08016a7b 	.word	0x08016a7b
 8013124:	08016a88 	.word	0x08016a88
 8013128:	08016ab6 	.word	0x08016ab6

0801312c <_free_r>:
 801312c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801312e:	2900      	cmp	r1, #0
 8013130:	d044      	beq.n	80131bc <_free_r+0x90>
 8013132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013136:	9001      	str	r0, [sp, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	f1a1 0404 	sub.w	r4, r1, #4
 801313e:	bfb8      	it	lt
 8013140:	18e4      	addlt	r4, r4, r3
 8013142:	f000 f8e7 	bl	8013314 <__malloc_lock>
 8013146:	4a1e      	ldr	r2, [pc, #120]	; (80131c0 <_free_r+0x94>)
 8013148:	9801      	ldr	r0, [sp, #4]
 801314a:	6813      	ldr	r3, [r2, #0]
 801314c:	b933      	cbnz	r3, 801315c <_free_r+0x30>
 801314e:	6063      	str	r3, [r4, #4]
 8013150:	6014      	str	r4, [r2, #0]
 8013152:	b003      	add	sp, #12
 8013154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013158:	f000 b8e2 	b.w	8013320 <__malloc_unlock>
 801315c:	42a3      	cmp	r3, r4
 801315e:	d908      	bls.n	8013172 <_free_r+0x46>
 8013160:	6825      	ldr	r5, [r4, #0]
 8013162:	1961      	adds	r1, r4, r5
 8013164:	428b      	cmp	r3, r1
 8013166:	bf01      	itttt	eq
 8013168:	6819      	ldreq	r1, [r3, #0]
 801316a:	685b      	ldreq	r3, [r3, #4]
 801316c:	1949      	addeq	r1, r1, r5
 801316e:	6021      	streq	r1, [r4, #0]
 8013170:	e7ed      	b.n	801314e <_free_r+0x22>
 8013172:	461a      	mov	r2, r3
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	b10b      	cbz	r3, 801317c <_free_r+0x50>
 8013178:	42a3      	cmp	r3, r4
 801317a:	d9fa      	bls.n	8013172 <_free_r+0x46>
 801317c:	6811      	ldr	r1, [r2, #0]
 801317e:	1855      	adds	r5, r2, r1
 8013180:	42a5      	cmp	r5, r4
 8013182:	d10b      	bne.n	801319c <_free_r+0x70>
 8013184:	6824      	ldr	r4, [r4, #0]
 8013186:	4421      	add	r1, r4
 8013188:	1854      	adds	r4, r2, r1
 801318a:	42a3      	cmp	r3, r4
 801318c:	6011      	str	r1, [r2, #0]
 801318e:	d1e0      	bne.n	8013152 <_free_r+0x26>
 8013190:	681c      	ldr	r4, [r3, #0]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	6053      	str	r3, [r2, #4]
 8013196:	440c      	add	r4, r1
 8013198:	6014      	str	r4, [r2, #0]
 801319a:	e7da      	b.n	8013152 <_free_r+0x26>
 801319c:	d902      	bls.n	80131a4 <_free_r+0x78>
 801319e:	230c      	movs	r3, #12
 80131a0:	6003      	str	r3, [r0, #0]
 80131a2:	e7d6      	b.n	8013152 <_free_r+0x26>
 80131a4:	6825      	ldr	r5, [r4, #0]
 80131a6:	1961      	adds	r1, r4, r5
 80131a8:	428b      	cmp	r3, r1
 80131aa:	bf04      	itt	eq
 80131ac:	6819      	ldreq	r1, [r3, #0]
 80131ae:	685b      	ldreq	r3, [r3, #4]
 80131b0:	6063      	str	r3, [r4, #4]
 80131b2:	bf04      	itt	eq
 80131b4:	1949      	addeq	r1, r1, r5
 80131b6:	6021      	streq	r1, [r4, #0]
 80131b8:	6054      	str	r4, [r2, #4]
 80131ba:	e7ca      	b.n	8013152 <_free_r+0x26>
 80131bc:	b003      	add	sp, #12
 80131be:	bd30      	pop	{r4, r5, pc}
 80131c0:	240075c4 	.word	0x240075c4

080131c4 <malloc>:
 80131c4:	4b02      	ldr	r3, [pc, #8]	; (80131d0 <malloc+0xc>)
 80131c6:	4601      	mov	r1, r0
 80131c8:	6818      	ldr	r0, [r3, #0]
 80131ca:	f000 b823 	b.w	8013214 <_malloc_r>
 80131ce:	bf00      	nop
 80131d0:	2400008c 	.word	0x2400008c

080131d4 <sbrk_aligned>:
 80131d4:	b570      	push	{r4, r5, r6, lr}
 80131d6:	4e0e      	ldr	r6, [pc, #56]	; (8013210 <sbrk_aligned+0x3c>)
 80131d8:	460c      	mov	r4, r1
 80131da:	6831      	ldr	r1, [r6, #0]
 80131dc:	4605      	mov	r5, r0
 80131de:	b911      	cbnz	r1, 80131e6 <sbrk_aligned+0x12>
 80131e0:	f000 fcce 	bl	8013b80 <_sbrk_r>
 80131e4:	6030      	str	r0, [r6, #0]
 80131e6:	4621      	mov	r1, r4
 80131e8:	4628      	mov	r0, r5
 80131ea:	f000 fcc9 	bl	8013b80 <_sbrk_r>
 80131ee:	1c43      	adds	r3, r0, #1
 80131f0:	d00a      	beq.n	8013208 <sbrk_aligned+0x34>
 80131f2:	1cc4      	adds	r4, r0, #3
 80131f4:	f024 0403 	bic.w	r4, r4, #3
 80131f8:	42a0      	cmp	r0, r4
 80131fa:	d007      	beq.n	801320c <sbrk_aligned+0x38>
 80131fc:	1a21      	subs	r1, r4, r0
 80131fe:	4628      	mov	r0, r5
 8013200:	f000 fcbe 	bl	8013b80 <_sbrk_r>
 8013204:	3001      	adds	r0, #1
 8013206:	d101      	bne.n	801320c <sbrk_aligned+0x38>
 8013208:	f04f 34ff 	mov.w	r4, #4294967295
 801320c:	4620      	mov	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}
 8013210:	240075c8 	.word	0x240075c8

08013214 <_malloc_r>:
 8013214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013218:	1ccd      	adds	r5, r1, #3
 801321a:	f025 0503 	bic.w	r5, r5, #3
 801321e:	3508      	adds	r5, #8
 8013220:	2d0c      	cmp	r5, #12
 8013222:	bf38      	it	cc
 8013224:	250c      	movcc	r5, #12
 8013226:	2d00      	cmp	r5, #0
 8013228:	4607      	mov	r7, r0
 801322a:	db01      	blt.n	8013230 <_malloc_r+0x1c>
 801322c:	42a9      	cmp	r1, r5
 801322e:	d905      	bls.n	801323c <_malloc_r+0x28>
 8013230:	230c      	movs	r3, #12
 8013232:	603b      	str	r3, [r7, #0]
 8013234:	2600      	movs	r6, #0
 8013236:	4630      	mov	r0, r6
 8013238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013310 <_malloc_r+0xfc>
 8013240:	f000 f868 	bl	8013314 <__malloc_lock>
 8013244:	f8d8 3000 	ldr.w	r3, [r8]
 8013248:	461c      	mov	r4, r3
 801324a:	bb5c      	cbnz	r4, 80132a4 <_malloc_r+0x90>
 801324c:	4629      	mov	r1, r5
 801324e:	4638      	mov	r0, r7
 8013250:	f7ff ffc0 	bl	80131d4 <sbrk_aligned>
 8013254:	1c43      	adds	r3, r0, #1
 8013256:	4604      	mov	r4, r0
 8013258:	d155      	bne.n	8013306 <_malloc_r+0xf2>
 801325a:	f8d8 4000 	ldr.w	r4, [r8]
 801325e:	4626      	mov	r6, r4
 8013260:	2e00      	cmp	r6, #0
 8013262:	d145      	bne.n	80132f0 <_malloc_r+0xdc>
 8013264:	2c00      	cmp	r4, #0
 8013266:	d048      	beq.n	80132fa <_malloc_r+0xe6>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	4631      	mov	r1, r6
 801326c:	4638      	mov	r0, r7
 801326e:	eb04 0903 	add.w	r9, r4, r3
 8013272:	f000 fc85 	bl	8013b80 <_sbrk_r>
 8013276:	4581      	cmp	r9, r0
 8013278:	d13f      	bne.n	80132fa <_malloc_r+0xe6>
 801327a:	6821      	ldr	r1, [r4, #0]
 801327c:	1a6d      	subs	r5, r5, r1
 801327e:	4629      	mov	r1, r5
 8013280:	4638      	mov	r0, r7
 8013282:	f7ff ffa7 	bl	80131d4 <sbrk_aligned>
 8013286:	3001      	adds	r0, #1
 8013288:	d037      	beq.n	80132fa <_malloc_r+0xe6>
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	442b      	add	r3, r5
 801328e:	6023      	str	r3, [r4, #0]
 8013290:	f8d8 3000 	ldr.w	r3, [r8]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d038      	beq.n	801330a <_malloc_r+0xf6>
 8013298:	685a      	ldr	r2, [r3, #4]
 801329a:	42a2      	cmp	r2, r4
 801329c:	d12b      	bne.n	80132f6 <_malloc_r+0xe2>
 801329e:	2200      	movs	r2, #0
 80132a0:	605a      	str	r2, [r3, #4]
 80132a2:	e00f      	b.n	80132c4 <_malloc_r+0xb0>
 80132a4:	6822      	ldr	r2, [r4, #0]
 80132a6:	1b52      	subs	r2, r2, r5
 80132a8:	d41f      	bmi.n	80132ea <_malloc_r+0xd6>
 80132aa:	2a0b      	cmp	r2, #11
 80132ac:	d917      	bls.n	80132de <_malloc_r+0xca>
 80132ae:	1961      	adds	r1, r4, r5
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	6025      	str	r5, [r4, #0]
 80132b4:	bf18      	it	ne
 80132b6:	6059      	strne	r1, [r3, #4]
 80132b8:	6863      	ldr	r3, [r4, #4]
 80132ba:	bf08      	it	eq
 80132bc:	f8c8 1000 	streq.w	r1, [r8]
 80132c0:	5162      	str	r2, [r4, r5]
 80132c2:	604b      	str	r3, [r1, #4]
 80132c4:	4638      	mov	r0, r7
 80132c6:	f104 060b 	add.w	r6, r4, #11
 80132ca:	f000 f829 	bl	8013320 <__malloc_unlock>
 80132ce:	f026 0607 	bic.w	r6, r6, #7
 80132d2:	1d23      	adds	r3, r4, #4
 80132d4:	1af2      	subs	r2, r6, r3
 80132d6:	d0ae      	beq.n	8013236 <_malloc_r+0x22>
 80132d8:	1b9b      	subs	r3, r3, r6
 80132da:	50a3      	str	r3, [r4, r2]
 80132dc:	e7ab      	b.n	8013236 <_malloc_r+0x22>
 80132de:	42a3      	cmp	r3, r4
 80132e0:	6862      	ldr	r2, [r4, #4]
 80132e2:	d1dd      	bne.n	80132a0 <_malloc_r+0x8c>
 80132e4:	f8c8 2000 	str.w	r2, [r8]
 80132e8:	e7ec      	b.n	80132c4 <_malloc_r+0xb0>
 80132ea:	4623      	mov	r3, r4
 80132ec:	6864      	ldr	r4, [r4, #4]
 80132ee:	e7ac      	b.n	801324a <_malloc_r+0x36>
 80132f0:	4634      	mov	r4, r6
 80132f2:	6876      	ldr	r6, [r6, #4]
 80132f4:	e7b4      	b.n	8013260 <_malloc_r+0x4c>
 80132f6:	4613      	mov	r3, r2
 80132f8:	e7cc      	b.n	8013294 <_malloc_r+0x80>
 80132fa:	230c      	movs	r3, #12
 80132fc:	603b      	str	r3, [r7, #0]
 80132fe:	4638      	mov	r0, r7
 8013300:	f000 f80e 	bl	8013320 <__malloc_unlock>
 8013304:	e797      	b.n	8013236 <_malloc_r+0x22>
 8013306:	6025      	str	r5, [r4, #0]
 8013308:	e7dc      	b.n	80132c4 <_malloc_r+0xb0>
 801330a:	605b      	str	r3, [r3, #4]
 801330c:	deff      	udf	#255	; 0xff
 801330e:	bf00      	nop
 8013310:	240075c4 	.word	0x240075c4

08013314 <__malloc_lock>:
 8013314:	4801      	ldr	r0, [pc, #4]	; (801331c <__malloc_lock+0x8>)
 8013316:	f7ff beda 	b.w	80130ce <__retarget_lock_acquire_recursive>
 801331a:	bf00      	nop
 801331c:	240075c0 	.word	0x240075c0

08013320 <__malloc_unlock>:
 8013320:	4801      	ldr	r0, [pc, #4]	; (8013328 <__malloc_unlock+0x8>)
 8013322:	f7ff bed5 	b.w	80130d0 <__retarget_lock_release_recursive>
 8013326:	bf00      	nop
 8013328:	240075c0 	.word	0x240075c0

0801332c <__sfputc_r>:
 801332c:	6893      	ldr	r3, [r2, #8]
 801332e:	3b01      	subs	r3, #1
 8013330:	2b00      	cmp	r3, #0
 8013332:	b410      	push	{r4}
 8013334:	6093      	str	r3, [r2, #8]
 8013336:	da08      	bge.n	801334a <__sfputc_r+0x1e>
 8013338:	6994      	ldr	r4, [r2, #24]
 801333a:	42a3      	cmp	r3, r4
 801333c:	db01      	blt.n	8013342 <__sfputc_r+0x16>
 801333e:	290a      	cmp	r1, #10
 8013340:	d103      	bne.n	801334a <__sfputc_r+0x1e>
 8013342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013346:	f000 bb85 	b.w	8013a54 <__swbuf_r>
 801334a:	6813      	ldr	r3, [r2, #0]
 801334c:	1c58      	adds	r0, r3, #1
 801334e:	6010      	str	r0, [r2, #0]
 8013350:	7019      	strb	r1, [r3, #0]
 8013352:	4608      	mov	r0, r1
 8013354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013358:	4770      	bx	lr

0801335a <__sfputs_r>:
 801335a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335c:	4606      	mov	r6, r0
 801335e:	460f      	mov	r7, r1
 8013360:	4614      	mov	r4, r2
 8013362:	18d5      	adds	r5, r2, r3
 8013364:	42ac      	cmp	r4, r5
 8013366:	d101      	bne.n	801336c <__sfputs_r+0x12>
 8013368:	2000      	movs	r0, #0
 801336a:	e007      	b.n	801337c <__sfputs_r+0x22>
 801336c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013370:	463a      	mov	r2, r7
 8013372:	4630      	mov	r0, r6
 8013374:	f7ff ffda 	bl	801332c <__sfputc_r>
 8013378:	1c43      	adds	r3, r0, #1
 801337a:	d1f3      	bne.n	8013364 <__sfputs_r+0xa>
 801337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013380 <_vfiprintf_r>:
 8013380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013384:	460d      	mov	r5, r1
 8013386:	b09d      	sub	sp, #116	; 0x74
 8013388:	4614      	mov	r4, r2
 801338a:	4698      	mov	r8, r3
 801338c:	4606      	mov	r6, r0
 801338e:	b118      	cbz	r0, 8013398 <_vfiprintf_r+0x18>
 8013390:	6a03      	ldr	r3, [r0, #32]
 8013392:	b90b      	cbnz	r3, 8013398 <_vfiprintf_r+0x18>
 8013394:	f7ff fd8c 	bl	8012eb0 <__sinit>
 8013398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801339a:	07d9      	lsls	r1, r3, #31
 801339c:	d405      	bmi.n	80133aa <_vfiprintf_r+0x2a>
 801339e:	89ab      	ldrh	r3, [r5, #12]
 80133a0:	059a      	lsls	r2, r3, #22
 80133a2:	d402      	bmi.n	80133aa <_vfiprintf_r+0x2a>
 80133a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133a6:	f7ff fe92 	bl	80130ce <__retarget_lock_acquire_recursive>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	071b      	lsls	r3, r3, #28
 80133ae:	d501      	bpl.n	80133b4 <_vfiprintf_r+0x34>
 80133b0:	692b      	ldr	r3, [r5, #16]
 80133b2:	b99b      	cbnz	r3, 80133dc <_vfiprintf_r+0x5c>
 80133b4:	4629      	mov	r1, r5
 80133b6:	4630      	mov	r0, r6
 80133b8:	f000 fb8a 	bl	8013ad0 <__swsetup_r>
 80133bc:	b170      	cbz	r0, 80133dc <_vfiprintf_r+0x5c>
 80133be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133c0:	07dc      	lsls	r4, r3, #31
 80133c2:	d504      	bpl.n	80133ce <_vfiprintf_r+0x4e>
 80133c4:	f04f 30ff 	mov.w	r0, #4294967295
 80133c8:	b01d      	add	sp, #116	; 0x74
 80133ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ce:	89ab      	ldrh	r3, [r5, #12]
 80133d0:	0598      	lsls	r0, r3, #22
 80133d2:	d4f7      	bmi.n	80133c4 <_vfiprintf_r+0x44>
 80133d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133d6:	f7ff fe7b 	bl	80130d0 <__retarget_lock_release_recursive>
 80133da:	e7f3      	b.n	80133c4 <_vfiprintf_r+0x44>
 80133dc:	2300      	movs	r3, #0
 80133de:	9309      	str	r3, [sp, #36]	; 0x24
 80133e0:	2320      	movs	r3, #32
 80133e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80133ea:	2330      	movs	r3, #48	; 0x30
 80133ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80135a0 <_vfiprintf_r+0x220>
 80133f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80133f4:	f04f 0901 	mov.w	r9, #1
 80133f8:	4623      	mov	r3, r4
 80133fa:	469a      	mov	sl, r3
 80133fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013400:	b10a      	cbz	r2, 8013406 <_vfiprintf_r+0x86>
 8013402:	2a25      	cmp	r2, #37	; 0x25
 8013404:	d1f9      	bne.n	80133fa <_vfiprintf_r+0x7a>
 8013406:	ebba 0b04 	subs.w	fp, sl, r4
 801340a:	d00b      	beq.n	8013424 <_vfiprintf_r+0xa4>
 801340c:	465b      	mov	r3, fp
 801340e:	4622      	mov	r2, r4
 8013410:	4629      	mov	r1, r5
 8013412:	4630      	mov	r0, r6
 8013414:	f7ff ffa1 	bl	801335a <__sfputs_r>
 8013418:	3001      	adds	r0, #1
 801341a:	f000 80a9 	beq.w	8013570 <_vfiprintf_r+0x1f0>
 801341e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013420:	445a      	add	r2, fp
 8013422:	9209      	str	r2, [sp, #36]	; 0x24
 8013424:	f89a 3000 	ldrb.w	r3, [sl]
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 80a1 	beq.w	8013570 <_vfiprintf_r+0x1f0>
 801342e:	2300      	movs	r3, #0
 8013430:	f04f 32ff 	mov.w	r2, #4294967295
 8013434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013438:	f10a 0a01 	add.w	sl, sl, #1
 801343c:	9304      	str	r3, [sp, #16]
 801343e:	9307      	str	r3, [sp, #28]
 8013440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013444:	931a      	str	r3, [sp, #104]	; 0x68
 8013446:	4654      	mov	r4, sl
 8013448:	2205      	movs	r2, #5
 801344a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801344e:	4854      	ldr	r0, [pc, #336]	; (80135a0 <_vfiprintf_r+0x220>)
 8013450:	f7ec ff4e 	bl	80002f0 <memchr>
 8013454:	9a04      	ldr	r2, [sp, #16]
 8013456:	b9d8      	cbnz	r0, 8013490 <_vfiprintf_r+0x110>
 8013458:	06d1      	lsls	r1, r2, #27
 801345a:	bf44      	itt	mi
 801345c:	2320      	movmi	r3, #32
 801345e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013462:	0713      	lsls	r3, r2, #28
 8013464:	bf44      	itt	mi
 8013466:	232b      	movmi	r3, #43	; 0x2b
 8013468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801346c:	f89a 3000 	ldrb.w	r3, [sl]
 8013470:	2b2a      	cmp	r3, #42	; 0x2a
 8013472:	d015      	beq.n	80134a0 <_vfiprintf_r+0x120>
 8013474:	9a07      	ldr	r2, [sp, #28]
 8013476:	4654      	mov	r4, sl
 8013478:	2000      	movs	r0, #0
 801347a:	f04f 0c0a 	mov.w	ip, #10
 801347e:	4621      	mov	r1, r4
 8013480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013484:	3b30      	subs	r3, #48	; 0x30
 8013486:	2b09      	cmp	r3, #9
 8013488:	d94d      	bls.n	8013526 <_vfiprintf_r+0x1a6>
 801348a:	b1b0      	cbz	r0, 80134ba <_vfiprintf_r+0x13a>
 801348c:	9207      	str	r2, [sp, #28]
 801348e:	e014      	b.n	80134ba <_vfiprintf_r+0x13a>
 8013490:	eba0 0308 	sub.w	r3, r0, r8
 8013494:	fa09 f303 	lsl.w	r3, r9, r3
 8013498:	4313      	orrs	r3, r2
 801349a:	9304      	str	r3, [sp, #16]
 801349c:	46a2      	mov	sl, r4
 801349e:	e7d2      	b.n	8013446 <_vfiprintf_r+0xc6>
 80134a0:	9b03      	ldr	r3, [sp, #12]
 80134a2:	1d19      	adds	r1, r3, #4
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	9103      	str	r1, [sp, #12]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	bfbb      	ittet	lt
 80134ac:	425b      	neglt	r3, r3
 80134ae:	f042 0202 	orrlt.w	r2, r2, #2
 80134b2:	9307      	strge	r3, [sp, #28]
 80134b4:	9307      	strlt	r3, [sp, #28]
 80134b6:	bfb8      	it	lt
 80134b8:	9204      	strlt	r2, [sp, #16]
 80134ba:	7823      	ldrb	r3, [r4, #0]
 80134bc:	2b2e      	cmp	r3, #46	; 0x2e
 80134be:	d10c      	bne.n	80134da <_vfiprintf_r+0x15a>
 80134c0:	7863      	ldrb	r3, [r4, #1]
 80134c2:	2b2a      	cmp	r3, #42	; 0x2a
 80134c4:	d134      	bne.n	8013530 <_vfiprintf_r+0x1b0>
 80134c6:	9b03      	ldr	r3, [sp, #12]
 80134c8:	1d1a      	adds	r2, r3, #4
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	9203      	str	r2, [sp, #12]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	bfb8      	it	lt
 80134d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80134d6:	3402      	adds	r4, #2
 80134d8:	9305      	str	r3, [sp, #20]
 80134da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80135b0 <_vfiprintf_r+0x230>
 80134de:	7821      	ldrb	r1, [r4, #0]
 80134e0:	2203      	movs	r2, #3
 80134e2:	4650      	mov	r0, sl
 80134e4:	f7ec ff04 	bl	80002f0 <memchr>
 80134e8:	b138      	cbz	r0, 80134fa <_vfiprintf_r+0x17a>
 80134ea:	9b04      	ldr	r3, [sp, #16]
 80134ec:	eba0 000a 	sub.w	r0, r0, sl
 80134f0:	2240      	movs	r2, #64	; 0x40
 80134f2:	4082      	lsls	r2, r0
 80134f4:	4313      	orrs	r3, r2
 80134f6:	3401      	adds	r4, #1
 80134f8:	9304      	str	r3, [sp, #16]
 80134fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134fe:	4829      	ldr	r0, [pc, #164]	; (80135a4 <_vfiprintf_r+0x224>)
 8013500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013504:	2206      	movs	r2, #6
 8013506:	f7ec fef3 	bl	80002f0 <memchr>
 801350a:	2800      	cmp	r0, #0
 801350c:	d03f      	beq.n	801358e <_vfiprintf_r+0x20e>
 801350e:	4b26      	ldr	r3, [pc, #152]	; (80135a8 <_vfiprintf_r+0x228>)
 8013510:	bb1b      	cbnz	r3, 801355a <_vfiprintf_r+0x1da>
 8013512:	9b03      	ldr	r3, [sp, #12]
 8013514:	3307      	adds	r3, #7
 8013516:	f023 0307 	bic.w	r3, r3, #7
 801351a:	3308      	adds	r3, #8
 801351c:	9303      	str	r3, [sp, #12]
 801351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013520:	443b      	add	r3, r7
 8013522:	9309      	str	r3, [sp, #36]	; 0x24
 8013524:	e768      	b.n	80133f8 <_vfiprintf_r+0x78>
 8013526:	fb0c 3202 	mla	r2, ip, r2, r3
 801352a:	460c      	mov	r4, r1
 801352c:	2001      	movs	r0, #1
 801352e:	e7a6      	b.n	801347e <_vfiprintf_r+0xfe>
 8013530:	2300      	movs	r3, #0
 8013532:	3401      	adds	r4, #1
 8013534:	9305      	str	r3, [sp, #20]
 8013536:	4619      	mov	r1, r3
 8013538:	f04f 0c0a 	mov.w	ip, #10
 801353c:	4620      	mov	r0, r4
 801353e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013542:	3a30      	subs	r2, #48	; 0x30
 8013544:	2a09      	cmp	r2, #9
 8013546:	d903      	bls.n	8013550 <_vfiprintf_r+0x1d0>
 8013548:	2b00      	cmp	r3, #0
 801354a:	d0c6      	beq.n	80134da <_vfiprintf_r+0x15a>
 801354c:	9105      	str	r1, [sp, #20]
 801354e:	e7c4      	b.n	80134da <_vfiprintf_r+0x15a>
 8013550:	fb0c 2101 	mla	r1, ip, r1, r2
 8013554:	4604      	mov	r4, r0
 8013556:	2301      	movs	r3, #1
 8013558:	e7f0      	b.n	801353c <_vfiprintf_r+0x1bc>
 801355a:	ab03      	add	r3, sp, #12
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	462a      	mov	r2, r5
 8013560:	4b12      	ldr	r3, [pc, #72]	; (80135ac <_vfiprintf_r+0x22c>)
 8013562:	a904      	add	r1, sp, #16
 8013564:	4630      	mov	r0, r6
 8013566:	f3af 8000 	nop.w
 801356a:	4607      	mov	r7, r0
 801356c:	1c78      	adds	r0, r7, #1
 801356e:	d1d6      	bne.n	801351e <_vfiprintf_r+0x19e>
 8013570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013572:	07d9      	lsls	r1, r3, #31
 8013574:	d405      	bmi.n	8013582 <_vfiprintf_r+0x202>
 8013576:	89ab      	ldrh	r3, [r5, #12]
 8013578:	059a      	lsls	r2, r3, #22
 801357a:	d402      	bmi.n	8013582 <_vfiprintf_r+0x202>
 801357c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801357e:	f7ff fda7 	bl	80130d0 <__retarget_lock_release_recursive>
 8013582:	89ab      	ldrh	r3, [r5, #12]
 8013584:	065b      	lsls	r3, r3, #25
 8013586:	f53f af1d 	bmi.w	80133c4 <_vfiprintf_r+0x44>
 801358a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801358c:	e71c      	b.n	80133c8 <_vfiprintf_r+0x48>
 801358e:	ab03      	add	r3, sp, #12
 8013590:	9300      	str	r3, [sp, #0]
 8013592:	462a      	mov	r2, r5
 8013594:	4b05      	ldr	r3, [pc, #20]	; (80135ac <_vfiprintf_r+0x22c>)
 8013596:	a904      	add	r1, sp, #16
 8013598:	4630      	mov	r0, r6
 801359a:	f000 f879 	bl	8013690 <_printf_i>
 801359e:	e7e4      	b.n	801356a <_vfiprintf_r+0x1ea>
 80135a0:	08016ab7 	.word	0x08016ab7
 80135a4:	08016ac1 	.word	0x08016ac1
 80135a8:	00000000 	.word	0x00000000
 80135ac:	0801335b 	.word	0x0801335b
 80135b0:	08016abd 	.word	0x08016abd

080135b4 <_printf_common>:
 80135b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b8:	4616      	mov	r6, r2
 80135ba:	4699      	mov	r9, r3
 80135bc:	688a      	ldr	r2, [r1, #8]
 80135be:	690b      	ldr	r3, [r1, #16]
 80135c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80135c4:	4293      	cmp	r3, r2
 80135c6:	bfb8      	it	lt
 80135c8:	4613      	movlt	r3, r2
 80135ca:	6033      	str	r3, [r6, #0]
 80135cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80135d0:	4607      	mov	r7, r0
 80135d2:	460c      	mov	r4, r1
 80135d4:	b10a      	cbz	r2, 80135da <_printf_common+0x26>
 80135d6:	3301      	adds	r3, #1
 80135d8:	6033      	str	r3, [r6, #0]
 80135da:	6823      	ldr	r3, [r4, #0]
 80135dc:	0699      	lsls	r1, r3, #26
 80135de:	bf42      	ittt	mi
 80135e0:	6833      	ldrmi	r3, [r6, #0]
 80135e2:	3302      	addmi	r3, #2
 80135e4:	6033      	strmi	r3, [r6, #0]
 80135e6:	6825      	ldr	r5, [r4, #0]
 80135e8:	f015 0506 	ands.w	r5, r5, #6
 80135ec:	d106      	bne.n	80135fc <_printf_common+0x48>
 80135ee:	f104 0a19 	add.w	sl, r4, #25
 80135f2:	68e3      	ldr	r3, [r4, #12]
 80135f4:	6832      	ldr	r2, [r6, #0]
 80135f6:	1a9b      	subs	r3, r3, r2
 80135f8:	42ab      	cmp	r3, r5
 80135fa:	dc26      	bgt.n	801364a <_printf_common+0x96>
 80135fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013600:	1e13      	subs	r3, r2, #0
 8013602:	6822      	ldr	r2, [r4, #0]
 8013604:	bf18      	it	ne
 8013606:	2301      	movne	r3, #1
 8013608:	0692      	lsls	r2, r2, #26
 801360a:	d42b      	bmi.n	8013664 <_printf_common+0xb0>
 801360c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013610:	4649      	mov	r1, r9
 8013612:	4638      	mov	r0, r7
 8013614:	47c0      	blx	r8
 8013616:	3001      	adds	r0, #1
 8013618:	d01e      	beq.n	8013658 <_printf_common+0xa4>
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	6922      	ldr	r2, [r4, #16]
 801361e:	f003 0306 	and.w	r3, r3, #6
 8013622:	2b04      	cmp	r3, #4
 8013624:	bf02      	ittt	eq
 8013626:	68e5      	ldreq	r5, [r4, #12]
 8013628:	6833      	ldreq	r3, [r6, #0]
 801362a:	1aed      	subeq	r5, r5, r3
 801362c:	68a3      	ldr	r3, [r4, #8]
 801362e:	bf0c      	ite	eq
 8013630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013634:	2500      	movne	r5, #0
 8013636:	4293      	cmp	r3, r2
 8013638:	bfc4      	itt	gt
 801363a:	1a9b      	subgt	r3, r3, r2
 801363c:	18ed      	addgt	r5, r5, r3
 801363e:	2600      	movs	r6, #0
 8013640:	341a      	adds	r4, #26
 8013642:	42b5      	cmp	r5, r6
 8013644:	d11a      	bne.n	801367c <_printf_common+0xc8>
 8013646:	2000      	movs	r0, #0
 8013648:	e008      	b.n	801365c <_printf_common+0xa8>
 801364a:	2301      	movs	r3, #1
 801364c:	4652      	mov	r2, sl
 801364e:	4649      	mov	r1, r9
 8013650:	4638      	mov	r0, r7
 8013652:	47c0      	blx	r8
 8013654:	3001      	adds	r0, #1
 8013656:	d103      	bne.n	8013660 <_printf_common+0xac>
 8013658:	f04f 30ff 	mov.w	r0, #4294967295
 801365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013660:	3501      	adds	r5, #1
 8013662:	e7c6      	b.n	80135f2 <_printf_common+0x3e>
 8013664:	18e1      	adds	r1, r4, r3
 8013666:	1c5a      	adds	r2, r3, #1
 8013668:	2030      	movs	r0, #48	; 0x30
 801366a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801366e:	4422      	add	r2, r4
 8013670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013678:	3302      	adds	r3, #2
 801367a:	e7c7      	b.n	801360c <_printf_common+0x58>
 801367c:	2301      	movs	r3, #1
 801367e:	4622      	mov	r2, r4
 8013680:	4649      	mov	r1, r9
 8013682:	4638      	mov	r0, r7
 8013684:	47c0      	blx	r8
 8013686:	3001      	adds	r0, #1
 8013688:	d0e6      	beq.n	8013658 <_printf_common+0xa4>
 801368a:	3601      	adds	r6, #1
 801368c:	e7d9      	b.n	8013642 <_printf_common+0x8e>
	...

08013690 <_printf_i>:
 8013690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013694:	7e0f      	ldrb	r7, [r1, #24]
 8013696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013698:	2f78      	cmp	r7, #120	; 0x78
 801369a:	4691      	mov	r9, r2
 801369c:	4680      	mov	r8, r0
 801369e:	460c      	mov	r4, r1
 80136a0:	469a      	mov	sl, r3
 80136a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136a6:	d807      	bhi.n	80136b8 <_printf_i+0x28>
 80136a8:	2f62      	cmp	r7, #98	; 0x62
 80136aa:	d80a      	bhi.n	80136c2 <_printf_i+0x32>
 80136ac:	2f00      	cmp	r7, #0
 80136ae:	f000 80d4 	beq.w	801385a <_printf_i+0x1ca>
 80136b2:	2f58      	cmp	r7, #88	; 0x58
 80136b4:	f000 80c0 	beq.w	8013838 <_printf_i+0x1a8>
 80136b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80136c0:	e03a      	b.n	8013738 <_printf_i+0xa8>
 80136c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80136c6:	2b15      	cmp	r3, #21
 80136c8:	d8f6      	bhi.n	80136b8 <_printf_i+0x28>
 80136ca:	a101      	add	r1, pc, #4	; (adr r1, 80136d0 <_printf_i+0x40>)
 80136cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136d0:	08013729 	.word	0x08013729
 80136d4:	0801373d 	.word	0x0801373d
 80136d8:	080136b9 	.word	0x080136b9
 80136dc:	080136b9 	.word	0x080136b9
 80136e0:	080136b9 	.word	0x080136b9
 80136e4:	080136b9 	.word	0x080136b9
 80136e8:	0801373d 	.word	0x0801373d
 80136ec:	080136b9 	.word	0x080136b9
 80136f0:	080136b9 	.word	0x080136b9
 80136f4:	080136b9 	.word	0x080136b9
 80136f8:	080136b9 	.word	0x080136b9
 80136fc:	08013841 	.word	0x08013841
 8013700:	08013769 	.word	0x08013769
 8013704:	080137fb 	.word	0x080137fb
 8013708:	080136b9 	.word	0x080136b9
 801370c:	080136b9 	.word	0x080136b9
 8013710:	08013863 	.word	0x08013863
 8013714:	080136b9 	.word	0x080136b9
 8013718:	08013769 	.word	0x08013769
 801371c:	080136b9 	.word	0x080136b9
 8013720:	080136b9 	.word	0x080136b9
 8013724:	08013803 	.word	0x08013803
 8013728:	682b      	ldr	r3, [r5, #0]
 801372a:	1d1a      	adds	r2, r3, #4
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	602a      	str	r2, [r5, #0]
 8013730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013738:	2301      	movs	r3, #1
 801373a:	e09f      	b.n	801387c <_printf_i+0x1ec>
 801373c:	6820      	ldr	r0, [r4, #0]
 801373e:	682b      	ldr	r3, [r5, #0]
 8013740:	0607      	lsls	r7, r0, #24
 8013742:	f103 0104 	add.w	r1, r3, #4
 8013746:	6029      	str	r1, [r5, #0]
 8013748:	d501      	bpl.n	801374e <_printf_i+0xbe>
 801374a:	681e      	ldr	r6, [r3, #0]
 801374c:	e003      	b.n	8013756 <_printf_i+0xc6>
 801374e:	0646      	lsls	r6, r0, #25
 8013750:	d5fb      	bpl.n	801374a <_printf_i+0xba>
 8013752:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013756:	2e00      	cmp	r6, #0
 8013758:	da03      	bge.n	8013762 <_printf_i+0xd2>
 801375a:	232d      	movs	r3, #45	; 0x2d
 801375c:	4276      	negs	r6, r6
 801375e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013762:	485a      	ldr	r0, [pc, #360]	; (80138cc <_printf_i+0x23c>)
 8013764:	230a      	movs	r3, #10
 8013766:	e012      	b.n	801378e <_printf_i+0xfe>
 8013768:	682b      	ldr	r3, [r5, #0]
 801376a:	6820      	ldr	r0, [r4, #0]
 801376c:	1d19      	adds	r1, r3, #4
 801376e:	6029      	str	r1, [r5, #0]
 8013770:	0605      	lsls	r5, r0, #24
 8013772:	d501      	bpl.n	8013778 <_printf_i+0xe8>
 8013774:	681e      	ldr	r6, [r3, #0]
 8013776:	e002      	b.n	801377e <_printf_i+0xee>
 8013778:	0641      	lsls	r1, r0, #25
 801377a:	d5fb      	bpl.n	8013774 <_printf_i+0xe4>
 801377c:	881e      	ldrh	r6, [r3, #0]
 801377e:	4853      	ldr	r0, [pc, #332]	; (80138cc <_printf_i+0x23c>)
 8013780:	2f6f      	cmp	r7, #111	; 0x6f
 8013782:	bf0c      	ite	eq
 8013784:	2308      	moveq	r3, #8
 8013786:	230a      	movne	r3, #10
 8013788:	2100      	movs	r1, #0
 801378a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801378e:	6865      	ldr	r5, [r4, #4]
 8013790:	60a5      	str	r5, [r4, #8]
 8013792:	2d00      	cmp	r5, #0
 8013794:	bfa2      	ittt	ge
 8013796:	6821      	ldrge	r1, [r4, #0]
 8013798:	f021 0104 	bicge.w	r1, r1, #4
 801379c:	6021      	strge	r1, [r4, #0]
 801379e:	b90e      	cbnz	r6, 80137a4 <_printf_i+0x114>
 80137a0:	2d00      	cmp	r5, #0
 80137a2:	d04b      	beq.n	801383c <_printf_i+0x1ac>
 80137a4:	4615      	mov	r5, r2
 80137a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80137aa:	fb03 6711 	mls	r7, r3, r1, r6
 80137ae:	5dc7      	ldrb	r7, [r0, r7]
 80137b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80137b4:	4637      	mov	r7, r6
 80137b6:	42bb      	cmp	r3, r7
 80137b8:	460e      	mov	r6, r1
 80137ba:	d9f4      	bls.n	80137a6 <_printf_i+0x116>
 80137bc:	2b08      	cmp	r3, #8
 80137be:	d10b      	bne.n	80137d8 <_printf_i+0x148>
 80137c0:	6823      	ldr	r3, [r4, #0]
 80137c2:	07de      	lsls	r6, r3, #31
 80137c4:	d508      	bpl.n	80137d8 <_printf_i+0x148>
 80137c6:	6923      	ldr	r3, [r4, #16]
 80137c8:	6861      	ldr	r1, [r4, #4]
 80137ca:	4299      	cmp	r1, r3
 80137cc:	bfde      	ittt	le
 80137ce:	2330      	movle	r3, #48	; 0x30
 80137d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80137d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80137d8:	1b52      	subs	r2, r2, r5
 80137da:	6122      	str	r2, [r4, #16]
 80137dc:	f8cd a000 	str.w	sl, [sp]
 80137e0:	464b      	mov	r3, r9
 80137e2:	aa03      	add	r2, sp, #12
 80137e4:	4621      	mov	r1, r4
 80137e6:	4640      	mov	r0, r8
 80137e8:	f7ff fee4 	bl	80135b4 <_printf_common>
 80137ec:	3001      	adds	r0, #1
 80137ee:	d14a      	bne.n	8013886 <_printf_i+0x1f6>
 80137f0:	f04f 30ff 	mov.w	r0, #4294967295
 80137f4:	b004      	add	sp, #16
 80137f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137fa:	6823      	ldr	r3, [r4, #0]
 80137fc:	f043 0320 	orr.w	r3, r3, #32
 8013800:	6023      	str	r3, [r4, #0]
 8013802:	4833      	ldr	r0, [pc, #204]	; (80138d0 <_printf_i+0x240>)
 8013804:	2778      	movs	r7, #120	; 0x78
 8013806:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	6829      	ldr	r1, [r5, #0]
 801380e:	061f      	lsls	r7, r3, #24
 8013810:	f851 6b04 	ldr.w	r6, [r1], #4
 8013814:	d402      	bmi.n	801381c <_printf_i+0x18c>
 8013816:	065f      	lsls	r7, r3, #25
 8013818:	bf48      	it	mi
 801381a:	b2b6      	uxthmi	r6, r6
 801381c:	07df      	lsls	r7, r3, #31
 801381e:	bf48      	it	mi
 8013820:	f043 0320 	orrmi.w	r3, r3, #32
 8013824:	6029      	str	r1, [r5, #0]
 8013826:	bf48      	it	mi
 8013828:	6023      	strmi	r3, [r4, #0]
 801382a:	b91e      	cbnz	r6, 8013834 <_printf_i+0x1a4>
 801382c:	6823      	ldr	r3, [r4, #0]
 801382e:	f023 0320 	bic.w	r3, r3, #32
 8013832:	6023      	str	r3, [r4, #0]
 8013834:	2310      	movs	r3, #16
 8013836:	e7a7      	b.n	8013788 <_printf_i+0xf8>
 8013838:	4824      	ldr	r0, [pc, #144]	; (80138cc <_printf_i+0x23c>)
 801383a:	e7e4      	b.n	8013806 <_printf_i+0x176>
 801383c:	4615      	mov	r5, r2
 801383e:	e7bd      	b.n	80137bc <_printf_i+0x12c>
 8013840:	682b      	ldr	r3, [r5, #0]
 8013842:	6826      	ldr	r6, [r4, #0]
 8013844:	6961      	ldr	r1, [r4, #20]
 8013846:	1d18      	adds	r0, r3, #4
 8013848:	6028      	str	r0, [r5, #0]
 801384a:	0635      	lsls	r5, r6, #24
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	d501      	bpl.n	8013854 <_printf_i+0x1c4>
 8013850:	6019      	str	r1, [r3, #0]
 8013852:	e002      	b.n	801385a <_printf_i+0x1ca>
 8013854:	0670      	lsls	r0, r6, #25
 8013856:	d5fb      	bpl.n	8013850 <_printf_i+0x1c0>
 8013858:	8019      	strh	r1, [r3, #0]
 801385a:	2300      	movs	r3, #0
 801385c:	6123      	str	r3, [r4, #16]
 801385e:	4615      	mov	r5, r2
 8013860:	e7bc      	b.n	80137dc <_printf_i+0x14c>
 8013862:	682b      	ldr	r3, [r5, #0]
 8013864:	1d1a      	adds	r2, r3, #4
 8013866:	602a      	str	r2, [r5, #0]
 8013868:	681d      	ldr	r5, [r3, #0]
 801386a:	6862      	ldr	r2, [r4, #4]
 801386c:	2100      	movs	r1, #0
 801386e:	4628      	mov	r0, r5
 8013870:	f7ec fd3e 	bl	80002f0 <memchr>
 8013874:	b108      	cbz	r0, 801387a <_printf_i+0x1ea>
 8013876:	1b40      	subs	r0, r0, r5
 8013878:	6060      	str	r0, [r4, #4]
 801387a:	6863      	ldr	r3, [r4, #4]
 801387c:	6123      	str	r3, [r4, #16]
 801387e:	2300      	movs	r3, #0
 8013880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013884:	e7aa      	b.n	80137dc <_printf_i+0x14c>
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	462a      	mov	r2, r5
 801388a:	4649      	mov	r1, r9
 801388c:	4640      	mov	r0, r8
 801388e:	47d0      	blx	sl
 8013890:	3001      	adds	r0, #1
 8013892:	d0ad      	beq.n	80137f0 <_printf_i+0x160>
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	079b      	lsls	r3, r3, #30
 8013898:	d413      	bmi.n	80138c2 <_printf_i+0x232>
 801389a:	68e0      	ldr	r0, [r4, #12]
 801389c:	9b03      	ldr	r3, [sp, #12]
 801389e:	4298      	cmp	r0, r3
 80138a0:	bfb8      	it	lt
 80138a2:	4618      	movlt	r0, r3
 80138a4:	e7a6      	b.n	80137f4 <_printf_i+0x164>
 80138a6:	2301      	movs	r3, #1
 80138a8:	4632      	mov	r2, r6
 80138aa:	4649      	mov	r1, r9
 80138ac:	4640      	mov	r0, r8
 80138ae:	47d0      	blx	sl
 80138b0:	3001      	adds	r0, #1
 80138b2:	d09d      	beq.n	80137f0 <_printf_i+0x160>
 80138b4:	3501      	adds	r5, #1
 80138b6:	68e3      	ldr	r3, [r4, #12]
 80138b8:	9903      	ldr	r1, [sp, #12]
 80138ba:	1a5b      	subs	r3, r3, r1
 80138bc:	42ab      	cmp	r3, r5
 80138be:	dcf2      	bgt.n	80138a6 <_printf_i+0x216>
 80138c0:	e7eb      	b.n	801389a <_printf_i+0x20a>
 80138c2:	2500      	movs	r5, #0
 80138c4:	f104 0619 	add.w	r6, r4, #25
 80138c8:	e7f5      	b.n	80138b6 <_printf_i+0x226>
 80138ca:	bf00      	nop
 80138cc:	08016ac8 	.word	0x08016ac8
 80138d0:	08016ad9 	.word	0x08016ad9

080138d4 <__sflush_r>:
 80138d4:	898a      	ldrh	r2, [r1, #12]
 80138d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138da:	4605      	mov	r5, r0
 80138dc:	0710      	lsls	r0, r2, #28
 80138de:	460c      	mov	r4, r1
 80138e0:	d458      	bmi.n	8013994 <__sflush_r+0xc0>
 80138e2:	684b      	ldr	r3, [r1, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	dc05      	bgt.n	80138f4 <__sflush_r+0x20>
 80138e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dc02      	bgt.n	80138f4 <__sflush_r+0x20>
 80138ee:	2000      	movs	r0, #0
 80138f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80138f6:	2e00      	cmp	r6, #0
 80138f8:	d0f9      	beq.n	80138ee <__sflush_r+0x1a>
 80138fa:	2300      	movs	r3, #0
 80138fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013900:	682f      	ldr	r7, [r5, #0]
 8013902:	6a21      	ldr	r1, [r4, #32]
 8013904:	602b      	str	r3, [r5, #0]
 8013906:	d032      	beq.n	801396e <__sflush_r+0x9a>
 8013908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801390a:	89a3      	ldrh	r3, [r4, #12]
 801390c:	075a      	lsls	r2, r3, #29
 801390e:	d505      	bpl.n	801391c <__sflush_r+0x48>
 8013910:	6863      	ldr	r3, [r4, #4]
 8013912:	1ac0      	subs	r0, r0, r3
 8013914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013916:	b10b      	cbz	r3, 801391c <__sflush_r+0x48>
 8013918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801391a:	1ac0      	subs	r0, r0, r3
 801391c:	2300      	movs	r3, #0
 801391e:	4602      	mov	r2, r0
 8013920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013922:	6a21      	ldr	r1, [r4, #32]
 8013924:	4628      	mov	r0, r5
 8013926:	47b0      	blx	r6
 8013928:	1c43      	adds	r3, r0, #1
 801392a:	89a3      	ldrh	r3, [r4, #12]
 801392c:	d106      	bne.n	801393c <__sflush_r+0x68>
 801392e:	6829      	ldr	r1, [r5, #0]
 8013930:	291d      	cmp	r1, #29
 8013932:	d82b      	bhi.n	801398c <__sflush_r+0xb8>
 8013934:	4a29      	ldr	r2, [pc, #164]	; (80139dc <__sflush_r+0x108>)
 8013936:	410a      	asrs	r2, r1
 8013938:	07d6      	lsls	r6, r2, #31
 801393a:	d427      	bmi.n	801398c <__sflush_r+0xb8>
 801393c:	2200      	movs	r2, #0
 801393e:	6062      	str	r2, [r4, #4]
 8013940:	04d9      	lsls	r1, r3, #19
 8013942:	6922      	ldr	r2, [r4, #16]
 8013944:	6022      	str	r2, [r4, #0]
 8013946:	d504      	bpl.n	8013952 <__sflush_r+0x7e>
 8013948:	1c42      	adds	r2, r0, #1
 801394a:	d101      	bne.n	8013950 <__sflush_r+0x7c>
 801394c:	682b      	ldr	r3, [r5, #0]
 801394e:	b903      	cbnz	r3, 8013952 <__sflush_r+0x7e>
 8013950:	6560      	str	r0, [r4, #84]	; 0x54
 8013952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013954:	602f      	str	r7, [r5, #0]
 8013956:	2900      	cmp	r1, #0
 8013958:	d0c9      	beq.n	80138ee <__sflush_r+0x1a>
 801395a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801395e:	4299      	cmp	r1, r3
 8013960:	d002      	beq.n	8013968 <__sflush_r+0x94>
 8013962:	4628      	mov	r0, r5
 8013964:	f7ff fbe2 	bl	801312c <_free_r>
 8013968:	2000      	movs	r0, #0
 801396a:	6360      	str	r0, [r4, #52]	; 0x34
 801396c:	e7c0      	b.n	80138f0 <__sflush_r+0x1c>
 801396e:	2301      	movs	r3, #1
 8013970:	4628      	mov	r0, r5
 8013972:	47b0      	blx	r6
 8013974:	1c41      	adds	r1, r0, #1
 8013976:	d1c8      	bne.n	801390a <__sflush_r+0x36>
 8013978:	682b      	ldr	r3, [r5, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0c5      	beq.n	801390a <__sflush_r+0x36>
 801397e:	2b1d      	cmp	r3, #29
 8013980:	d001      	beq.n	8013986 <__sflush_r+0xb2>
 8013982:	2b16      	cmp	r3, #22
 8013984:	d101      	bne.n	801398a <__sflush_r+0xb6>
 8013986:	602f      	str	r7, [r5, #0]
 8013988:	e7b1      	b.n	80138ee <__sflush_r+0x1a>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	e7ad      	b.n	80138f0 <__sflush_r+0x1c>
 8013994:	690f      	ldr	r7, [r1, #16]
 8013996:	2f00      	cmp	r7, #0
 8013998:	d0a9      	beq.n	80138ee <__sflush_r+0x1a>
 801399a:	0793      	lsls	r3, r2, #30
 801399c:	680e      	ldr	r6, [r1, #0]
 801399e:	bf08      	it	eq
 80139a0:	694b      	ldreq	r3, [r1, #20]
 80139a2:	600f      	str	r7, [r1, #0]
 80139a4:	bf18      	it	ne
 80139a6:	2300      	movne	r3, #0
 80139a8:	eba6 0807 	sub.w	r8, r6, r7
 80139ac:	608b      	str	r3, [r1, #8]
 80139ae:	f1b8 0f00 	cmp.w	r8, #0
 80139b2:	dd9c      	ble.n	80138ee <__sflush_r+0x1a>
 80139b4:	6a21      	ldr	r1, [r4, #32]
 80139b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139b8:	4643      	mov	r3, r8
 80139ba:	463a      	mov	r2, r7
 80139bc:	4628      	mov	r0, r5
 80139be:	47b0      	blx	r6
 80139c0:	2800      	cmp	r0, #0
 80139c2:	dc06      	bgt.n	80139d2 <__sflush_r+0xfe>
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ca:	81a3      	strh	r3, [r4, #12]
 80139cc:	f04f 30ff 	mov.w	r0, #4294967295
 80139d0:	e78e      	b.n	80138f0 <__sflush_r+0x1c>
 80139d2:	4407      	add	r7, r0
 80139d4:	eba8 0800 	sub.w	r8, r8, r0
 80139d8:	e7e9      	b.n	80139ae <__sflush_r+0xda>
 80139da:	bf00      	nop
 80139dc:	dfbffffe 	.word	0xdfbffffe

080139e0 <_fflush_r>:
 80139e0:	b538      	push	{r3, r4, r5, lr}
 80139e2:	690b      	ldr	r3, [r1, #16]
 80139e4:	4605      	mov	r5, r0
 80139e6:	460c      	mov	r4, r1
 80139e8:	b913      	cbnz	r3, 80139f0 <_fflush_r+0x10>
 80139ea:	2500      	movs	r5, #0
 80139ec:	4628      	mov	r0, r5
 80139ee:	bd38      	pop	{r3, r4, r5, pc}
 80139f0:	b118      	cbz	r0, 80139fa <_fflush_r+0x1a>
 80139f2:	6a03      	ldr	r3, [r0, #32]
 80139f4:	b90b      	cbnz	r3, 80139fa <_fflush_r+0x1a>
 80139f6:	f7ff fa5b 	bl	8012eb0 <__sinit>
 80139fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d0f3      	beq.n	80139ea <_fflush_r+0xa>
 8013a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a04:	07d0      	lsls	r0, r2, #31
 8013a06:	d404      	bmi.n	8013a12 <_fflush_r+0x32>
 8013a08:	0599      	lsls	r1, r3, #22
 8013a0a:	d402      	bmi.n	8013a12 <_fflush_r+0x32>
 8013a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a0e:	f7ff fb5e 	bl	80130ce <__retarget_lock_acquire_recursive>
 8013a12:	4628      	mov	r0, r5
 8013a14:	4621      	mov	r1, r4
 8013a16:	f7ff ff5d 	bl	80138d4 <__sflush_r>
 8013a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a1c:	07da      	lsls	r2, r3, #31
 8013a1e:	4605      	mov	r5, r0
 8013a20:	d4e4      	bmi.n	80139ec <_fflush_r+0xc>
 8013a22:	89a3      	ldrh	r3, [r4, #12]
 8013a24:	059b      	lsls	r3, r3, #22
 8013a26:	d4e1      	bmi.n	80139ec <_fflush_r+0xc>
 8013a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a2a:	f7ff fb51 	bl	80130d0 <__retarget_lock_release_recursive>
 8013a2e:	e7dd      	b.n	80139ec <_fflush_r+0xc>

08013a30 <fiprintf>:
 8013a30:	b40e      	push	{r1, r2, r3}
 8013a32:	b503      	push	{r0, r1, lr}
 8013a34:	4601      	mov	r1, r0
 8013a36:	ab03      	add	r3, sp, #12
 8013a38:	4805      	ldr	r0, [pc, #20]	; (8013a50 <fiprintf+0x20>)
 8013a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3e:	6800      	ldr	r0, [r0, #0]
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	f7ff fc9d 	bl	8013380 <_vfiprintf_r>
 8013a46:	b002      	add	sp, #8
 8013a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a4c:	b003      	add	sp, #12
 8013a4e:	4770      	bx	lr
 8013a50:	2400008c 	.word	0x2400008c

08013a54 <__swbuf_r>:
 8013a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a56:	460e      	mov	r6, r1
 8013a58:	4614      	mov	r4, r2
 8013a5a:	4605      	mov	r5, r0
 8013a5c:	b118      	cbz	r0, 8013a66 <__swbuf_r+0x12>
 8013a5e:	6a03      	ldr	r3, [r0, #32]
 8013a60:	b90b      	cbnz	r3, 8013a66 <__swbuf_r+0x12>
 8013a62:	f7ff fa25 	bl	8012eb0 <__sinit>
 8013a66:	69a3      	ldr	r3, [r4, #24]
 8013a68:	60a3      	str	r3, [r4, #8]
 8013a6a:	89a3      	ldrh	r3, [r4, #12]
 8013a6c:	071a      	lsls	r2, r3, #28
 8013a6e:	d525      	bpl.n	8013abc <__swbuf_r+0x68>
 8013a70:	6923      	ldr	r3, [r4, #16]
 8013a72:	b31b      	cbz	r3, 8013abc <__swbuf_r+0x68>
 8013a74:	6823      	ldr	r3, [r4, #0]
 8013a76:	6922      	ldr	r2, [r4, #16]
 8013a78:	1a98      	subs	r0, r3, r2
 8013a7a:	6963      	ldr	r3, [r4, #20]
 8013a7c:	b2f6      	uxtb	r6, r6
 8013a7e:	4283      	cmp	r3, r0
 8013a80:	4637      	mov	r7, r6
 8013a82:	dc04      	bgt.n	8013a8e <__swbuf_r+0x3a>
 8013a84:	4621      	mov	r1, r4
 8013a86:	4628      	mov	r0, r5
 8013a88:	f7ff ffaa 	bl	80139e0 <_fflush_r>
 8013a8c:	b9e0      	cbnz	r0, 8013ac8 <__swbuf_r+0x74>
 8013a8e:	68a3      	ldr	r3, [r4, #8]
 8013a90:	3b01      	subs	r3, #1
 8013a92:	60a3      	str	r3, [r4, #8]
 8013a94:	6823      	ldr	r3, [r4, #0]
 8013a96:	1c5a      	adds	r2, r3, #1
 8013a98:	6022      	str	r2, [r4, #0]
 8013a9a:	701e      	strb	r6, [r3, #0]
 8013a9c:	6962      	ldr	r2, [r4, #20]
 8013a9e:	1c43      	adds	r3, r0, #1
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d004      	beq.n	8013aae <__swbuf_r+0x5a>
 8013aa4:	89a3      	ldrh	r3, [r4, #12]
 8013aa6:	07db      	lsls	r3, r3, #31
 8013aa8:	d506      	bpl.n	8013ab8 <__swbuf_r+0x64>
 8013aaa:	2e0a      	cmp	r6, #10
 8013aac:	d104      	bne.n	8013ab8 <__swbuf_r+0x64>
 8013aae:	4621      	mov	r1, r4
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	f7ff ff95 	bl	80139e0 <_fflush_r>
 8013ab6:	b938      	cbnz	r0, 8013ac8 <__swbuf_r+0x74>
 8013ab8:	4638      	mov	r0, r7
 8013aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013abc:	4621      	mov	r1, r4
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f000 f806 	bl	8013ad0 <__swsetup_r>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	d0d5      	beq.n	8013a74 <__swbuf_r+0x20>
 8013ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8013acc:	e7f4      	b.n	8013ab8 <__swbuf_r+0x64>
	...

08013ad0 <__swsetup_r>:
 8013ad0:	b538      	push	{r3, r4, r5, lr}
 8013ad2:	4b2a      	ldr	r3, [pc, #168]	; (8013b7c <__swsetup_r+0xac>)
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	6818      	ldr	r0, [r3, #0]
 8013ad8:	460c      	mov	r4, r1
 8013ada:	b118      	cbz	r0, 8013ae4 <__swsetup_r+0x14>
 8013adc:	6a03      	ldr	r3, [r0, #32]
 8013ade:	b90b      	cbnz	r3, 8013ae4 <__swsetup_r+0x14>
 8013ae0:	f7ff f9e6 	bl	8012eb0 <__sinit>
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013aea:	0718      	lsls	r0, r3, #28
 8013aec:	d422      	bmi.n	8013b34 <__swsetup_r+0x64>
 8013aee:	06d9      	lsls	r1, r3, #27
 8013af0:	d407      	bmi.n	8013b02 <__swsetup_r+0x32>
 8013af2:	2309      	movs	r3, #9
 8013af4:	602b      	str	r3, [r5, #0]
 8013af6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013afa:	81a3      	strh	r3, [r4, #12]
 8013afc:	f04f 30ff 	mov.w	r0, #4294967295
 8013b00:	e034      	b.n	8013b6c <__swsetup_r+0x9c>
 8013b02:	0758      	lsls	r0, r3, #29
 8013b04:	d512      	bpl.n	8013b2c <__swsetup_r+0x5c>
 8013b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b08:	b141      	cbz	r1, 8013b1c <__swsetup_r+0x4c>
 8013b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b0e:	4299      	cmp	r1, r3
 8013b10:	d002      	beq.n	8013b18 <__swsetup_r+0x48>
 8013b12:	4628      	mov	r0, r5
 8013b14:	f7ff fb0a 	bl	801312c <_free_r>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	6363      	str	r3, [r4, #52]	; 0x34
 8013b1c:	89a3      	ldrh	r3, [r4, #12]
 8013b1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b22:	81a3      	strh	r3, [r4, #12]
 8013b24:	2300      	movs	r3, #0
 8013b26:	6063      	str	r3, [r4, #4]
 8013b28:	6923      	ldr	r3, [r4, #16]
 8013b2a:	6023      	str	r3, [r4, #0]
 8013b2c:	89a3      	ldrh	r3, [r4, #12]
 8013b2e:	f043 0308 	orr.w	r3, r3, #8
 8013b32:	81a3      	strh	r3, [r4, #12]
 8013b34:	6923      	ldr	r3, [r4, #16]
 8013b36:	b94b      	cbnz	r3, 8013b4c <__swsetup_r+0x7c>
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b42:	d003      	beq.n	8013b4c <__swsetup_r+0x7c>
 8013b44:	4621      	mov	r1, r4
 8013b46:	4628      	mov	r0, r5
 8013b48:	f000 f857 	bl	8013bfa <__smakebuf_r>
 8013b4c:	89a0      	ldrh	r0, [r4, #12]
 8013b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b52:	f010 0301 	ands.w	r3, r0, #1
 8013b56:	d00a      	beq.n	8013b6e <__swsetup_r+0x9e>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	60a3      	str	r3, [r4, #8]
 8013b5c:	6963      	ldr	r3, [r4, #20]
 8013b5e:	425b      	negs	r3, r3
 8013b60:	61a3      	str	r3, [r4, #24]
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	b943      	cbnz	r3, 8013b78 <__swsetup_r+0xa8>
 8013b66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b6a:	d1c4      	bne.n	8013af6 <__swsetup_r+0x26>
 8013b6c:	bd38      	pop	{r3, r4, r5, pc}
 8013b6e:	0781      	lsls	r1, r0, #30
 8013b70:	bf58      	it	pl
 8013b72:	6963      	ldrpl	r3, [r4, #20]
 8013b74:	60a3      	str	r3, [r4, #8]
 8013b76:	e7f4      	b.n	8013b62 <__swsetup_r+0x92>
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e7f7      	b.n	8013b6c <__swsetup_r+0x9c>
 8013b7c:	2400008c 	.word	0x2400008c

08013b80 <_sbrk_r>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	4d06      	ldr	r5, [pc, #24]	; (8013b9c <_sbrk_r+0x1c>)
 8013b84:	2300      	movs	r3, #0
 8013b86:	4604      	mov	r4, r0
 8013b88:	4608      	mov	r0, r1
 8013b8a:	602b      	str	r3, [r5, #0]
 8013b8c:	f7ed f820 	bl	8000bd0 <_sbrk>
 8013b90:	1c43      	adds	r3, r0, #1
 8013b92:	d102      	bne.n	8013b9a <_sbrk_r+0x1a>
 8013b94:	682b      	ldr	r3, [r5, #0]
 8013b96:	b103      	cbz	r3, 8013b9a <_sbrk_r+0x1a>
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	bd38      	pop	{r3, r4, r5, pc}
 8013b9c:	240075bc 	.word	0x240075bc

08013ba0 <abort>:
 8013ba0:	b508      	push	{r3, lr}
 8013ba2:	2006      	movs	r0, #6
 8013ba4:	f000 f88e 	bl	8013cc4 <raise>
 8013ba8:	2001      	movs	r0, #1
 8013baa:	f7ec ff99 	bl	8000ae0 <_exit>

08013bae <__swhatbuf_r>:
 8013bae:	b570      	push	{r4, r5, r6, lr}
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb6:	2900      	cmp	r1, #0
 8013bb8:	b096      	sub	sp, #88	; 0x58
 8013bba:	4615      	mov	r5, r2
 8013bbc:	461e      	mov	r6, r3
 8013bbe:	da0d      	bge.n	8013bdc <__swhatbuf_r+0x2e>
 8013bc0:	89a3      	ldrh	r3, [r4, #12]
 8013bc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013bc6:	f04f 0100 	mov.w	r1, #0
 8013bca:	bf0c      	ite	eq
 8013bcc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013bd0:	2340      	movne	r3, #64	; 0x40
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	6031      	str	r1, [r6, #0]
 8013bd6:	602b      	str	r3, [r5, #0]
 8013bd8:	b016      	add	sp, #88	; 0x58
 8013bda:	bd70      	pop	{r4, r5, r6, pc}
 8013bdc:	466a      	mov	r2, sp
 8013bde:	f000 f879 	bl	8013cd4 <_fstat_r>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	dbec      	blt.n	8013bc0 <__swhatbuf_r+0x12>
 8013be6:	9901      	ldr	r1, [sp, #4]
 8013be8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013bec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013bf0:	4259      	negs	r1, r3
 8013bf2:	4159      	adcs	r1, r3
 8013bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bf8:	e7eb      	b.n	8013bd2 <__swhatbuf_r+0x24>

08013bfa <__smakebuf_r>:
 8013bfa:	898b      	ldrh	r3, [r1, #12]
 8013bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bfe:	079d      	lsls	r5, r3, #30
 8013c00:	4606      	mov	r6, r0
 8013c02:	460c      	mov	r4, r1
 8013c04:	d507      	bpl.n	8013c16 <__smakebuf_r+0x1c>
 8013c06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c0a:	6023      	str	r3, [r4, #0]
 8013c0c:	6123      	str	r3, [r4, #16]
 8013c0e:	2301      	movs	r3, #1
 8013c10:	6163      	str	r3, [r4, #20]
 8013c12:	b002      	add	sp, #8
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	ab01      	add	r3, sp, #4
 8013c18:	466a      	mov	r2, sp
 8013c1a:	f7ff ffc8 	bl	8013bae <__swhatbuf_r>
 8013c1e:	9900      	ldr	r1, [sp, #0]
 8013c20:	4605      	mov	r5, r0
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff faf6 	bl	8013214 <_malloc_r>
 8013c28:	b948      	cbnz	r0, 8013c3e <__smakebuf_r+0x44>
 8013c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c2e:	059a      	lsls	r2, r3, #22
 8013c30:	d4ef      	bmi.n	8013c12 <__smakebuf_r+0x18>
 8013c32:	f023 0303 	bic.w	r3, r3, #3
 8013c36:	f043 0302 	orr.w	r3, r3, #2
 8013c3a:	81a3      	strh	r3, [r4, #12]
 8013c3c:	e7e3      	b.n	8013c06 <__smakebuf_r+0xc>
 8013c3e:	89a3      	ldrh	r3, [r4, #12]
 8013c40:	6020      	str	r0, [r4, #0]
 8013c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c46:	81a3      	strh	r3, [r4, #12]
 8013c48:	9b00      	ldr	r3, [sp, #0]
 8013c4a:	6163      	str	r3, [r4, #20]
 8013c4c:	9b01      	ldr	r3, [sp, #4]
 8013c4e:	6120      	str	r0, [r4, #16]
 8013c50:	b15b      	cbz	r3, 8013c6a <__smakebuf_r+0x70>
 8013c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c56:	4630      	mov	r0, r6
 8013c58:	f000 f84e 	bl	8013cf8 <_isatty_r>
 8013c5c:	b128      	cbz	r0, 8013c6a <__smakebuf_r+0x70>
 8013c5e:	89a3      	ldrh	r3, [r4, #12]
 8013c60:	f023 0303 	bic.w	r3, r3, #3
 8013c64:	f043 0301 	orr.w	r3, r3, #1
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	89a3      	ldrh	r3, [r4, #12]
 8013c6c:	431d      	orrs	r5, r3
 8013c6e:	81a5      	strh	r5, [r4, #12]
 8013c70:	e7cf      	b.n	8013c12 <__smakebuf_r+0x18>

08013c72 <_raise_r>:
 8013c72:	291f      	cmp	r1, #31
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	4604      	mov	r4, r0
 8013c78:	460d      	mov	r5, r1
 8013c7a:	d904      	bls.n	8013c86 <_raise_r+0x14>
 8013c7c:	2316      	movs	r3, #22
 8013c7e:	6003      	str	r3, [r0, #0]
 8013c80:	f04f 30ff 	mov.w	r0, #4294967295
 8013c84:	bd38      	pop	{r3, r4, r5, pc}
 8013c86:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013c88:	b112      	cbz	r2, 8013c90 <_raise_r+0x1e>
 8013c8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c8e:	b94b      	cbnz	r3, 8013ca4 <_raise_r+0x32>
 8013c90:	4620      	mov	r0, r4
 8013c92:	f000 f853 	bl	8013d3c <_getpid_r>
 8013c96:	462a      	mov	r2, r5
 8013c98:	4601      	mov	r1, r0
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ca0:	f000 b83a 	b.w	8013d18 <_kill_r>
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d00a      	beq.n	8013cbe <_raise_r+0x4c>
 8013ca8:	1c59      	adds	r1, r3, #1
 8013caa:	d103      	bne.n	8013cb4 <_raise_r+0x42>
 8013cac:	2316      	movs	r3, #22
 8013cae:	6003      	str	r3, [r0, #0]
 8013cb0:	2001      	movs	r0, #1
 8013cb2:	e7e7      	b.n	8013c84 <_raise_r+0x12>
 8013cb4:	2400      	movs	r4, #0
 8013cb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cba:	4628      	mov	r0, r5
 8013cbc:	4798      	blx	r3
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	e7e0      	b.n	8013c84 <_raise_r+0x12>
	...

08013cc4 <raise>:
 8013cc4:	4b02      	ldr	r3, [pc, #8]	; (8013cd0 <raise+0xc>)
 8013cc6:	4601      	mov	r1, r0
 8013cc8:	6818      	ldr	r0, [r3, #0]
 8013cca:	f7ff bfd2 	b.w	8013c72 <_raise_r>
 8013cce:	bf00      	nop
 8013cd0:	2400008c 	.word	0x2400008c

08013cd4 <_fstat_r>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4d07      	ldr	r5, [pc, #28]	; (8013cf4 <_fstat_r+0x20>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4608      	mov	r0, r1
 8013cde:	4611      	mov	r1, r2
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	f7ec ff4c 	bl	8000b7e <_fstat>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	d102      	bne.n	8013cf0 <_fstat_r+0x1c>
 8013cea:	682b      	ldr	r3, [r5, #0]
 8013cec:	b103      	cbz	r3, 8013cf0 <_fstat_r+0x1c>
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	bf00      	nop
 8013cf4:	240075bc 	.word	0x240075bc

08013cf8 <_isatty_r>:
 8013cf8:	b538      	push	{r3, r4, r5, lr}
 8013cfa:	4d06      	ldr	r5, [pc, #24]	; (8013d14 <_isatty_r+0x1c>)
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4604      	mov	r4, r0
 8013d00:	4608      	mov	r0, r1
 8013d02:	602b      	str	r3, [r5, #0]
 8013d04:	f7ec ff4b 	bl	8000b9e <_isatty>
 8013d08:	1c43      	adds	r3, r0, #1
 8013d0a:	d102      	bne.n	8013d12 <_isatty_r+0x1a>
 8013d0c:	682b      	ldr	r3, [r5, #0]
 8013d0e:	b103      	cbz	r3, 8013d12 <_isatty_r+0x1a>
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	bd38      	pop	{r3, r4, r5, pc}
 8013d14:	240075bc 	.word	0x240075bc

08013d18 <_kill_r>:
 8013d18:	b538      	push	{r3, r4, r5, lr}
 8013d1a:	4d07      	ldr	r5, [pc, #28]	; (8013d38 <_kill_r+0x20>)
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	4604      	mov	r4, r0
 8013d20:	4608      	mov	r0, r1
 8013d22:	4611      	mov	r1, r2
 8013d24:	602b      	str	r3, [r5, #0]
 8013d26:	f7ec fec9 	bl	8000abc <_kill>
 8013d2a:	1c43      	adds	r3, r0, #1
 8013d2c:	d102      	bne.n	8013d34 <_kill_r+0x1c>
 8013d2e:	682b      	ldr	r3, [r5, #0]
 8013d30:	b103      	cbz	r3, 8013d34 <_kill_r+0x1c>
 8013d32:	6023      	str	r3, [r4, #0]
 8013d34:	bd38      	pop	{r3, r4, r5, pc}
 8013d36:	bf00      	nop
 8013d38:	240075bc 	.word	0x240075bc

08013d3c <_getpid_r>:
 8013d3c:	f7ec beb6 	b.w	8000aac <_getpid>

08013d40 <_init>:
 8013d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d42:	bf00      	nop
 8013d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d46:	bc08      	pop	{r3}
 8013d48:	469e      	mov	lr, r3
 8013d4a:	4770      	bx	lr

08013d4c <_fini>:
 8013d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4e:	bf00      	nop
 8013d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d52:	bc08      	pop	{r3}
 8013d54:	469e      	mov	lr, r3
 8013d56:	4770      	bx	lr
